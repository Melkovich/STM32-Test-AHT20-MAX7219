
F411RE_MAX7219_MATRICE_LED.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000077a8  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001f8  08007948  08007948  00017948  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007b40  08007b40  000201d0  2**0
                  CONTENTS
  4 .ARM          00000008  08007b40  08007b40  00017b40  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007b48  08007b48  000201d0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007b48  08007b48  00017b48  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007b4c  08007b4c  00017b4c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001d0  20000000  08007b50  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000264  200001d0  08007d20  000201d0  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000434  08007d20  00020434  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201d0  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020200  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000ef79  00000000  00000000  00020243  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000020fe  00000000  00000000  0002f1bc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000c20  00000000  00000000  000312c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000972  00000000  00000000  00031ee0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000161e3  00000000  00000000  00032852  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00010a45  00000000  00000000  00048a35  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0008a249  00000000  00000000  0005947a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00003e98  00000000  00000000  000e36c4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000077  00000000  00000000  000e755c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200001d0 	.word	0x200001d0
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08007930 	.word	0x08007930

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200001d4 	.word	0x200001d4
 80001dc:	08007930 	.word	0x08007930

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	; 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_uldivmod>:
 8000bb8:	b953      	cbnz	r3, 8000bd0 <__aeabi_uldivmod+0x18>
 8000bba:	b94a      	cbnz	r2, 8000bd0 <__aeabi_uldivmod+0x18>
 8000bbc:	2900      	cmp	r1, #0
 8000bbe:	bf08      	it	eq
 8000bc0:	2800      	cmpeq	r0, #0
 8000bc2:	bf1c      	itt	ne
 8000bc4:	f04f 31ff 	movne.w	r1, #4294967295
 8000bc8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bcc:	f000 b970 	b.w	8000eb0 <__aeabi_idiv0>
 8000bd0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bd4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bd8:	f000 f806 	bl	8000be8 <__udivmoddi4>
 8000bdc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000be0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000be4:	b004      	add	sp, #16
 8000be6:	4770      	bx	lr

08000be8 <__udivmoddi4>:
 8000be8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bec:	9e08      	ldr	r6, [sp, #32]
 8000bee:	460d      	mov	r5, r1
 8000bf0:	4604      	mov	r4, r0
 8000bf2:	460f      	mov	r7, r1
 8000bf4:	2b00      	cmp	r3, #0
 8000bf6:	d14a      	bne.n	8000c8e <__udivmoddi4+0xa6>
 8000bf8:	428a      	cmp	r2, r1
 8000bfa:	4694      	mov	ip, r2
 8000bfc:	d965      	bls.n	8000cca <__udivmoddi4+0xe2>
 8000bfe:	fab2 f382 	clz	r3, r2
 8000c02:	b143      	cbz	r3, 8000c16 <__udivmoddi4+0x2e>
 8000c04:	fa02 fc03 	lsl.w	ip, r2, r3
 8000c08:	f1c3 0220 	rsb	r2, r3, #32
 8000c0c:	409f      	lsls	r7, r3
 8000c0e:	fa20 f202 	lsr.w	r2, r0, r2
 8000c12:	4317      	orrs	r7, r2
 8000c14:	409c      	lsls	r4, r3
 8000c16:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000c1a:	fa1f f58c 	uxth.w	r5, ip
 8000c1e:	fbb7 f1fe 	udiv	r1, r7, lr
 8000c22:	0c22      	lsrs	r2, r4, #16
 8000c24:	fb0e 7711 	mls	r7, lr, r1, r7
 8000c28:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000c2c:	fb01 f005 	mul.w	r0, r1, r5
 8000c30:	4290      	cmp	r0, r2
 8000c32:	d90a      	bls.n	8000c4a <__udivmoddi4+0x62>
 8000c34:	eb1c 0202 	adds.w	r2, ip, r2
 8000c38:	f101 37ff 	add.w	r7, r1, #4294967295
 8000c3c:	f080 811c 	bcs.w	8000e78 <__udivmoddi4+0x290>
 8000c40:	4290      	cmp	r0, r2
 8000c42:	f240 8119 	bls.w	8000e78 <__udivmoddi4+0x290>
 8000c46:	3902      	subs	r1, #2
 8000c48:	4462      	add	r2, ip
 8000c4a:	1a12      	subs	r2, r2, r0
 8000c4c:	b2a4      	uxth	r4, r4
 8000c4e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000c52:	fb0e 2210 	mls	r2, lr, r0, r2
 8000c56:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000c5a:	fb00 f505 	mul.w	r5, r0, r5
 8000c5e:	42a5      	cmp	r5, r4
 8000c60:	d90a      	bls.n	8000c78 <__udivmoddi4+0x90>
 8000c62:	eb1c 0404 	adds.w	r4, ip, r4
 8000c66:	f100 32ff 	add.w	r2, r0, #4294967295
 8000c6a:	f080 8107 	bcs.w	8000e7c <__udivmoddi4+0x294>
 8000c6e:	42a5      	cmp	r5, r4
 8000c70:	f240 8104 	bls.w	8000e7c <__udivmoddi4+0x294>
 8000c74:	4464      	add	r4, ip
 8000c76:	3802      	subs	r0, #2
 8000c78:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000c7c:	1b64      	subs	r4, r4, r5
 8000c7e:	2100      	movs	r1, #0
 8000c80:	b11e      	cbz	r6, 8000c8a <__udivmoddi4+0xa2>
 8000c82:	40dc      	lsrs	r4, r3
 8000c84:	2300      	movs	r3, #0
 8000c86:	e9c6 4300 	strd	r4, r3, [r6]
 8000c8a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c8e:	428b      	cmp	r3, r1
 8000c90:	d908      	bls.n	8000ca4 <__udivmoddi4+0xbc>
 8000c92:	2e00      	cmp	r6, #0
 8000c94:	f000 80ed 	beq.w	8000e72 <__udivmoddi4+0x28a>
 8000c98:	2100      	movs	r1, #0
 8000c9a:	e9c6 0500 	strd	r0, r5, [r6]
 8000c9e:	4608      	mov	r0, r1
 8000ca0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ca4:	fab3 f183 	clz	r1, r3
 8000ca8:	2900      	cmp	r1, #0
 8000caa:	d149      	bne.n	8000d40 <__udivmoddi4+0x158>
 8000cac:	42ab      	cmp	r3, r5
 8000cae:	d302      	bcc.n	8000cb6 <__udivmoddi4+0xce>
 8000cb0:	4282      	cmp	r2, r0
 8000cb2:	f200 80f8 	bhi.w	8000ea6 <__udivmoddi4+0x2be>
 8000cb6:	1a84      	subs	r4, r0, r2
 8000cb8:	eb65 0203 	sbc.w	r2, r5, r3
 8000cbc:	2001      	movs	r0, #1
 8000cbe:	4617      	mov	r7, r2
 8000cc0:	2e00      	cmp	r6, #0
 8000cc2:	d0e2      	beq.n	8000c8a <__udivmoddi4+0xa2>
 8000cc4:	e9c6 4700 	strd	r4, r7, [r6]
 8000cc8:	e7df      	b.n	8000c8a <__udivmoddi4+0xa2>
 8000cca:	b902      	cbnz	r2, 8000cce <__udivmoddi4+0xe6>
 8000ccc:	deff      	udf	#255	; 0xff
 8000cce:	fab2 f382 	clz	r3, r2
 8000cd2:	2b00      	cmp	r3, #0
 8000cd4:	f040 8090 	bne.w	8000df8 <__udivmoddi4+0x210>
 8000cd8:	1a8a      	subs	r2, r1, r2
 8000cda:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000cde:	fa1f fe8c 	uxth.w	lr, ip
 8000ce2:	2101      	movs	r1, #1
 8000ce4:	fbb2 f5f7 	udiv	r5, r2, r7
 8000ce8:	fb07 2015 	mls	r0, r7, r5, r2
 8000cec:	0c22      	lsrs	r2, r4, #16
 8000cee:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000cf2:	fb0e f005 	mul.w	r0, lr, r5
 8000cf6:	4290      	cmp	r0, r2
 8000cf8:	d908      	bls.n	8000d0c <__udivmoddi4+0x124>
 8000cfa:	eb1c 0202 	adds.w	r2, ip, r2
 8000cfe:	f105 38ff 	add.w	r8, r5, #4294967295
 8000d02:	d202      	bcs.n	8000d0a <__udivmoddi4+0x122>
 8000d04:	4290      	cmp	r0, r2
 8000d06:	f200 80cb 	bhi.w	8000ea0 <__udivmoddi4+0x2b8>
 8000d0a:	4645      	mov	r5, r8
 8000d0c:	1a12      	subs	r2, r2, r0
 8000d0e:	b2a4      	uxth	r4, r4
 8000d10:	fbb2 f0f7 	udiv	r0, r2, r7
 8000d14:	fb07 2210 	mls	r2, r7, r0, r2
 8000d18:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000d1c:	fb0e fe00 	mul.w	lr, lr, r0
 8000d20:	45a6      	cmp	lr, r4
 8000d22:	d908      	bls.n	8000d36 <__udivmoddi4+0x14e>
 8000d24:	eb1c 0404 	adds.w	r4, ip, r4
 8000d28:	f100 32ff 	add.w	r2, r0, #4294967295
 8000d2c:	d202      	bcs.n	8000d34 <__udivmoddi4+0x14c>
 8000d2e:	45a6      	cmp	lr, r4
 8000d30:	f200 80bb 	bhi.w	8000eaa <__udivmoddi4+0x2c2>
 8000d34:	4610      	mov	r0, r2
 8000d36:	eba4 040e 	sub.w	r4, r4, lr
 8000d3a:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000d3e:	e79f      	b.n	8000c80 <__udivmoddi4+0x98>
 8000d40:	f1c1 0720 	rsb	r7, r1, #32
 8000d44:	408b      	lsls	r3, r1
 8000d46:	fa22 fc07 	lsr.w	ip, r2, r7
 8000d4a:	ea4c 0c03 	orr.w	ip, ip, r3
 8000d4e:	fa05 f401 	lsl.w	r4, r5, r1
 8000d52:	fa20 f307 	lsr.w	r3, r0, r7
 8000d56:	40fd      	lsrs	r5, r7
 8000d58:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000d5c:	4323      	orrs	r3, r4
 8000d5e:	fbb5 f8f9 	udiv	r8, r5, r9
 8000d62:	fa1f fe8c 	uxth.w	lr, ip
 8000d66:	fb09 5518 	mls	r5, r9, r8, r5
 8000d6a:	0c1c      	lsrs	r4, r3, #16
 8000d6c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000d70:	fb08 f50e 	mul.w	r5, r8, lr
 8000d74:	42a5      	cmp	r5, r4
 8000d76:	fa02 f201 	lsl.w	r2, r2, r1
 8000d7a:	fa00 f001 	lsl.w	r0, r0, r1
 8000d7e:	d90b      	bls.n	8000d98 <__udivmoddi4+0x1b0>
 8000d80:	eb1c 0404 	adds.w	r4, ip, r4
 8000d84:	f108 3aff 	add.w	sl, r8, #4294967295
 8000d88:	f080 8088 	bcs.w	8000e9c <__udivmoddi4+0x2b4>
 8000d8c:	42a5      	cmp	r5, r4
 8000d8e:	f240 8085 	bls.w	8000e9c <__udivmoddi4+0x2b4>
 8000d92:	f1a8 0802 	sub.w	r8, r8, #2
 8000d96:	4464      	add	r4, ip
 8000d98:	1b64      	subs	r4, r4, r5
 8000d9a:	b29d      	uxth	r5, r3
 8000d9c:	fbb4 f3f9 	udiv	r3, r4, r9
 8000da0:	fb09 4413 	mls	r4, r9, r3, r4
 8000da4:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000da8:	fb03 fe0e 	mul.w	lr, r3, lr
 8000dac:	45a6      	cmp	lr, r4
 8000dae:	d908      	bls.n	8000dc2 <__udivmoddi4+0x1da>
 8000db0:	eb1c 0404 	adds.w	r4, ip, r4
 8000db4:	f103 35ff 	add.w	r5, r3, #4294967295
 8000db8:	d26c      	bcs.n	8000e94 <__udivmoddi4+0x2ac>
 8000dba:	45a6      	cmp	lr, r4
 8000dbc:	d96a      	bls.n	8000e94 <__udivmoddi4+0x2ac>
 8000dbe:	3b02      	subs	r3, #2
 8000dc0:	4464      	add	r4, ip
 8000dc2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000dc6:	fba3 9502 	umull	r9, r5, r3, r2
 8000dca:	eba4 040e 	sub.w	r4, r4, lr
 8000dce:	42ac      	cmp	r4, r5
 8000dd0:	46c8      	mov	r8, r9
 8000dd2:	46ae      	mov	lr, r5
 8000dd4:	d356      	bcc.n	8000e84 <__udivmoddi4+0x29c>
 8000dd6:	d053      	beq.n	8000e80 <__udivmoddi4+0x298>
 8000dd8:	b156      	cbz	r6, 8000df0 <__udivmoddi4+0x208>
 8000dda:	ebb0 0208 	subs.w	r2, r0, r8
 8000dde:	eb64 040e 	sbc.w	r4, r4, lr
 8000de2:	fa04 f707 	lsl.w	r7, r4, r7
 8000de6:	40ca      	lsrs	r2, r1
 8000de8:	40cc      	lsrs	r4, r1
 8000dea:	4317      	orrs	r7, r2
 8000dec:	e9c6 7400 	strd	r7, r4, [r6]
 8000df0:	4618      	mov	r0, r3
 8000df2:	2100      	movs	r1, #0
 8000df4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000df8:	f1c3 0120 	rsb	r1, r3, #32
 8000dfc:	fa02 fc03 	lsl.w	ip, r2, r3
 8000e00:	fa20 f201 	lsr.w	r2, r0, r1
 8000e04:	fa25 f101 	lsr.w	r1, r5, r1
 8000e08:	409d      	lsls	r5, r3
 8000e0a:	432a      	orrs	r2, r5
 8000e0c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e10:	fa1f fe8c 	uxth.w	lr, ip
 8000e14:	fbb1 f0f7 	udiv	r0, r1, r7
 8000e18:	fb07 1510 	mls	r5, r7, r0, r1
 8000e1c:	0c11      	lsrs	r1, r2, #16
 8000e1e:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000e22:	fb00 f50e 	mul.w	r5, r0, lr
 8000e26:	428d      	cmp	r5, r1
 8000e28:	fa04 f403 	lsl.w	r4, r4, r3
 8000e2c:	d908      	bls.n	8000e40 <__udivmoddi4+0x258>
 8000e2e:	eb1c 0101 	adds.w	r1, ip, r1
 8000e32:	f100 38ff 	add.w	r8, r0, #4294967295
 8000e36:	d22f      	bcs.n	8000e98 <__udivmoddi4+0x2b0>
 8000e38:	428d      	cmp	r5, r1
 8000e3a:	d92d      	bls.n	8000e98 <__udivmoddi4+0x2b0>
 8000e3c:	3802      	subs	r0, #2
 8000e3e:	4461      	add	r1, ip
 8000e40:	1b49      	subs	r1, r1, r5
 8000e42:	b292      	uxth	r2, r2
 8000e44:	fbb1 f5f7 	udiv	r5, r1, r7
 8000e48:	fb07 1115 	mls	r1, r7, r5, r1
 8000e4c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000e50:	fb05 f10e 	mul.w	r1, r5, lr
 8000e54:	4291      	cmp	r1, r2
 8000e56:	d908      	bls.n	8000e6a <__udivmoddi4+0x282>
 8000e58:	eb1c 0202 	adds.w	r2, ip, r2
 8000e5c:	f105 38ff 	add.w	r8, r5, #4294967295
 8000e60:	d216      	bcs.n	8000e90 <__udivmoddi4+0x2a8>
 8000e62:	4291      	cmp	r1, r2
 8000e64:	d914      	bls.n	8000e90 <__udivmoddi4+0x2a8>
 8000e66:	3d02      	subs	r5, #2
 8000e68:	4462      	add	r2, ip
 8000e6a:	1a52      	subs	r2, r2, r1
 8000e6c:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000e70:	e738      	b.n	8000ce4 <__udivmoddi4+0xfc>
 8000e72:	4631      	mov	r1, r6
 8000e74:	4630      	mov	r0, r6
 8000e76:	e708      	b.n	8000c8a <__udivmoddi4+0xa2>
 8000e78:	4639      	mov	r1, r7
 8000e7a:	e6e6      	b.n	8000c4a <__udivmoddi4+0x62>
 8000e7c:	4610      	mov	r0, r2
 8000e7e:	e6fb      	b.n	8000c78 <__udivmoddi4+0x90>
 8000e80:	4548      	cmp	r0, r9
 8000e82:	d2a9      	bcs.n	8000dd8 <__udivmoddi4+0x1f0>
 8000e84:	ebb9 0802 	subs.w	r8, r9, r2
 8000e88:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000e8c:	3b01      	subs	r3, #1
 8000e8e:	e7a3      	b.n	8000dd8 <__udivmoddi4+0x1f0>
 8000e90:	4645      	mov	r5, r8
 8000e92:	e7ea      	b.n	8000e6a <__udivmoddi4+0x282>
 8000e94:	462b      	mov	r3, r5
 8000e96:	e794      	b.n	8000dc2 <__udivmoddi4+0x1da>
 8000e98:	4640      	mov	r0, r8
 8000e9a:	e7d1      	b.n	8000e40 <__udivmoddi4+0x258>
 8000e9c:	46d0      	mov	r8, sl
 8000e9e:	e77b      	b.n	8000d98 <__udivmoddi4+0x1b0>
 8000ea0:	3d02      	subs	r5, #2
 8000ea2:	4462      	add	r2, ip
 8000ea4:	e732      	b.n	8000d0c <__udivmoddi4+0x124>
 8000ea6:	4608      	mov	r0, r1
 8000ea8:	e70a      	b.n	8000cc0 <__udivmoddi4+0xd8>
 8000eaa:	4464      	add	r4, ip
 8000eac:	3802      	subs	r0, #2
 8000eae:	e742      	b.n	8000d36 <__udivmoddi4+0x14e>

08000eb0 <__aeabi_idiv0>:
 8000eb0:	4770      	bx	lr
 8000eb2:	bf00      	nop

08000eb4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000eb4:	b580      	push	{r7, lr}
 8000eb6:	b098      	sub	sp, #96	; 0x60
 8000eb8:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000eba:	f000 faff 	bl	80014bc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000ebe:	f000 f81f 	bl	8000f00 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000ec2:	f000 f90b 	bl	80010dc <MX_GPIO_Init>
  MX_SPI1_Init();
 8000ec6:	f000 f8a7 	bl	8001018 <MX_SPI1_Init>
  MX_I2C1_Init();
 8000eca:	f000 f877 	bl	8000fbc <MX_I2C1_Init>
  MX_USART2_UART_Init();
 8000ece:	f000 f8db 	bl	8001088 <MX_USART2_UART_Init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  Matrix Matrix;

  AHT_Init(&hi2c1, &huart2);
 8000ed2:	4908      	ldr	r1, [pc, #32]	; (8000ef4 <main+0x40>)
 8000ed4:	4808      	ldr	r0, [pc, #32]	; (8000ef8 <main+0x44>)
 8000ed6:	f003 fa9b 	bl	8004410 <AHT_Init>
  MAX7219_init(&hspi1,&Matrix);
 8000eda:	463b      	mov	r3, r7
 8000edc:	4619      	mov	r1, r3
 8000ede:	4807      	ldr	r0, [pc, #28]	; (8000efc <main+0x48>)
 8000ee0:	f004 fb04 	bl	80054ec <MAX7219_init>
  {
//	  Test_Blink_Heart(&Matrix);
//	 Test_Romain_Slide(&Matrix);
//	  Test_Alphabet(&Matrix, 41);
//	  Display_Print_Matrice(&Matrix,"12.24d",DEFAULT);
	  pb_launcher(&huart2, &hi2c1,&Matrix);
 8000ee4:	463b      	mov	r3, r7
 8000ee6:	461a      	mov	r2, r3
 8000ee8:	4903      	ldr	r1, [pc, #12]	; (8000ef8 <main+0x44>)
 8000eea:	4802      	ldr	r0, [pc, #8]	; (8000ef4 <main+0x40>)
 8000eec:	f003 fbb2 	bl	8004654 <pb_launcher>
 8000ef0:	e7f8      	b.n	8000ee4 <main+0x30>
 8000ef2:	bf00      	nop
 8000ef4:	20000298 	.word	0x20000298
 8000ef8:	200001ec 	.word	0x200001ec
 8000efc:	20000240 	.word	0x20000240

08000f00 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000f00:	b580      	push	{r7, lr}
 8000f02:	b094      	sub	sp, #80	; 0x50
 8000f04:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000f06:	f107 0320 	add.w	r3, r7, #32
 8000f0a:	2230      	movs	r2, #48	; 0x30
 8000f0c:	2100      	movs	r1, #0
 8000f0e:	4618      	mov	r0, r3
 8000f10:	f004 fbb0 	bl	8005674 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000f14:	f107 030c 	add.w	r3, r7, #12
 8000f18:	2200      	movs	r2, #0
 8000f1a:	601a      	str	r2, [r3, #0]
 8000f1c:	605a      	str	r2, [r3, #4]
 8000f1e:	609a      	str	r2, [r3, #8]
 8000f20:	60da      	str	r2, [r3, #12]
 8000f22:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000f24:	2300      	movs	r3, #0
 8000f26:	60bb      	str	r3, [r7, #8]
 8000f28:	4b22      	ldr	r3, [pc, #136]	; (8000fb4 <SystemClock_Config+0xb4>)
 8000f2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f2c:	4a21      	ldr	r2, [pc, #132]	; (8000fb4 <SystemClock_Config+0xb4>)
 8000f2e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000f32:	6413      	str	r3, [r2, #64]	; 0x40
 8000f34:	4b1f      	ldr	r3, [pc, #124]	; (8000fb4 <SystemClock_Config+0xb4>)
 8000f36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f38:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000f3c:	60bb      	str	r3, [r7, #8]
 8000f3e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000f40:	2300      	movs	r3, #0
 8000f42:	607b      	str	r3, [r7, #4]
 8000f44:	4b1c      	ldr	r3, [pc, #112]	; (8000fb8 <SystemClock_Config+0xb8>)
 8000f46:	681b      	ldr	r3, [r3, #0]
 8000f48:	4a1b      	ldr	r2, [pc, #108]	; (8000fb8 <SystemClock_Config+0xb8>)
 8000f4a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000f4e:	6013      	str	r3, [r2, #0]
 8000f50:	4b19      	ldr	r3, [pc, #100]	; (8000fb8 <SystemClock_Config+0xb8>)
 8000f52:	681b      	ldr	r3, [r3, #0]
 8000f54:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000f58:	607b      	str	r3, [r7, #4]
 8000f5a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000f5c:	2302      	movs	r3, #2
 8000f5e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000f60:	2301      	movs	r3, #1
 8000f62:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000f64:	2310      	movs	r3, #16
 8000f66:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000f68:	2300      	movs	r3, #0
 8000f6a:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000f6c:	f107 0320 	add.w	r3, r7, #32
 8000f70:	4618      	mov	r0, r3
 8000f72:	f001 fddf 	bl	8002b34 <HAL_RCC_OscConfig>
 8000f76:	4603      	mov	r3, r0
 8000f78:	2b00      	cmp	r3, #0
 8000f7a:	d001      	beq.n	8000f80 <SystemClock_Config+0x80>
  {
    Error_Handler();
 8000f7c:	f000 f8fc 	bl	8001178 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000f80:	230f      	movs	r3, #15
 8000f82:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000f84:	2300      	movs	r3, #0
 8000f86:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000f88:	2300      	movs	r3, #0
 8000f8a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000f8c:	2300      	movs	r3, #0
 8000f8e:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000f90:	2300      	movs	r3, #0
 8000f92:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000f94:	f107 030c 	add.w	r3, r7, #12
 8000f98:	2100      	movs	r1, #0
 8000f9a:	4618      	mov	r0, r3
 8000f9c:	f002 f842 	bl	8003024 <HAL_RCC_ClockConfig>
 8000fa0:	4603      	mov	r3, r0
 8000fa2:	2b00      	cmp	r3, #0
 8000fa4:	d001      	beq.n	8000faa <SystemClock_Config+0xaa>
  {
    Error_Handler();
 8000fa6:	f000 f8e7 	bl	8001178 <Error_Handler>
  }
}
 8000faa:	bf00      	nop
 8000fac:	3750      	adds	r7, #80	; 0x50
 8000fae:	46bd      	mov	sp, r7
 8000fb0:	bd80      	pop	{r7, pc}
 8000fb2:	bf00      	nop
 8000fb4:	40023800 	.word	0x40023800
 8000fb8:	40007000 	.word	0x40007000

08000fbc <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000fbc:	b580      	push	{r7, lr}
 8000fbe:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000fc0:	4b12      	ldr	r3, [pc, #72]	; (800100c <MX_I2C1_Init+0x50>)
 8000fc2:	4a13      	ldr	r2, [pc, #76]	; (8001010 <MX_I2C1_Init+0x54>)
 8000fc4:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000fc6:	4b11      	ldr	r3, [pc, #68]	; (800100c <MX_I2C1_Init+0x50>)
 8000fc8:	4a12      	ldr	r2, [pc, #72]	; (8001014 <MX_I2C1_Init+0x58>)
 8000fca:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000fcc:	4b0f      	ldr	r3, [pc, #60]	; (800100c <MX_I2C1_Init+0x50>)
 8000fce:	2200      	movs	r2, #0
 8000fd0:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000fd2:	4b0e      	ldr	r3, [pc, #56]	; (800100c <MX_I2C1_Init+0x50>)
 8000fd4:	2200      	movs	r2, #0
 8000fd6:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000fd8:	4b0c      	ldr	r3, [pc, #48]	; (800100c <MX_I2C1_Init+0x50>)
 8000fda:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000fde:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000fe0:	4b0a      	ldr	r3, [pc, #40]	; (800100c <MX_I2C1_Init+0x50>)
 8000fe2:	2200      	movs	r2, #0
 8000fe4:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000fe6:	4b09      	ldr	r3, [pc, #36]	; (800100c <MX_I2C1_Init+0x50>)
 8000fe8:	2200      	movs	r2, #0
 8000fea:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000fec:	4b07      	ldr	r3, [pc, #28]	; (800100c <MX_I2C1_Init+0x50>)
 8000fee:	2200      	movs	r2, #0
 8000ff0:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000ff2:	4b06      	ldr	r3, [pc, #24]	; (800100c <MX_I2C1_Init+0x50>)
 8000ff4:	2200      	movs	r2, #0
 8000ff6:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000ff8:	4804      	ldr	r0, [pc, #16]	; (800100c <MX_I2C1_Init+0x50>)
 8000ffa:	f000 fd91 	bl	8001b20 <HAL_I2C_Init>
 8000ffe:	4603      	mov	r3, r0
 8001000:	2b00      	cmp	r3, #0
 8001002:	d001      	beq.n	8001008 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001004:	f000 f8b8 	bl	8001178 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001008:	bf00      	nop
 800100a:	bd80      	pop	{r7, pc}
 800100c:	200001ec 	.word	0x200001ec
 8001010:	40005400 	.word	0x40005400
 8001014:	000186a0 	.word	0x000186a0

08001018 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8001018:	b580      	push	{r7, lr}
 800101a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 800101c:	4b18      	ldr	r3, [pc, #96]	; (8001080 <MX_SPI1_Init+0x68>)
 800101e:	4a19      	ldr	r2, [pc, #100]	; (8001084 <MX_SPI1_Init+0x6c>)
 8001020:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001022:	4b17      	ldr	r3, [pc, #92]	; (8001080 <MX_SPI1_Init+0x68>)
 8001024:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001028:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_1LINE;
 800102a:	4b15      	ldr	r3, [pc, #84]	; (8001080 <MX_SPI1_Init+0x68>)
 800102c:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8001030:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001032:	4b13      	ldr	r3, [pc, #76]	; (8001080 <MX_SPI1_Init+0x68>)
 8001034:	2200      	movs	r2, #0
 8001036:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001038:	4b11      	ldr	r3, [pc, #68]	; (8001080 <MX_SPI1_Init+0x68>)
 800103a:	2200      	movs	r2, #0
 800103c:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800103e:	4b10      	ldr	r3, [pc, #64]	; (8001080 <MX_SPI1_Init+0x68>)
 8001040:	2200      	movs	r2, #0
 8001042:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001044:	4b0e      	ldr	r3, [pc, #56]	; (8001080 <MX_SPI1_Init+0x68>)
 8001046:	f44f 7200 	mov.w	r2, #512	; 0x200
 800104a:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800104c:	4b0c      	ldr	r3, [pc, #48]	; (8001080 <MX_SPI1_Init+0x68>)
 800104e:	2200      	movs	r2, #0
 8001050:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001052:	4b0b      	ldr	r3, [pc, #44]	; (8001080 <MX_SPI1_Init+0x68>)
 8001054:	2200      	movs	r2, #0
 8001056:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001058:	4b09      	ldr	r3, [pc, #36]	; (8001080 <MX_SPI1_Init+0x68>)
 800105a:	2200      	movs	r2, #0
 800105c:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800105e:	4b08      	ldr	r3, [pc, #32]	; (8001080 <MX_SPI1_Init+0x68>)
 8001060:	2200      	movs	r2, #0
 8001062:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8001064:	4b06      	ldr	r3, [pc, #24]	; (8001080 <MX_SPI1_Init+0x68>)
 8001066:	220a      	movs	r2, #10
 8001068:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800106a:	4805      	ldr	r0, [pc, #20]	; (8001080 <MX_SPI1_Init+0x68>)
 800106c:	f002 f9ba 	bl	80033e4 <HAL_SPI_Init>
 8001070:	4603      	mov	r3, r0
 8001072:	2b00      	cmp	r3, #0
 8001074:	d001      	beq.n	800107a <MX_SPI1_Init+0x62>
  {
    Error_Handler();
 8001076:	f000 f87f 	bl	8001178 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800107a:	bf00      	nop
 800107c:	bd80      	pop	{r7, pc}
 800107e:	bf00      	nop
 8001080:	20000240 	.word	0x20000240
 8001084:	40013000 	.word	0x40013000

08001088 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001088:	b580      	push	{r7, lr}
 800108a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800108c:	4b11      	ldr	r3, [pc, #68]	; (80010d4 <MX_USART2_UART_Init+0x4c>)
 800108e:	4a12      	ldr	r2, [pc, #72]	; (80010d8 <MX_USART2_UART_Init+0x50>)
 8001090:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001092:	4b10      	ldr	r3, [pc, #64]	; (80010d4 <MX_USART2_UART_Init+0x4c>)
 8001094:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001098:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800109a:	4b0e      	ldr	r3, [pc, #56]	; (80010d4 <MX_USART2_UART_Init+0x4c>)
 800109c:	2200      	movs	r2, #0
 800109e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80010a0:	4b0c      	ldr	r3, [pc, #48]	; (80010d4 <MX_USART2_UART_Init+0x4c>)
 80010a2:	2200      	movs	r2, #0
 80010a4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80010a6:	4b0b      	ldr	r3, [pc, #44]	; (80010d4 <MX_USART2_UART_Init+0x4c>)
 80010a8:	2200      	movs	r2, #0
 80010aa:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80010ac:	4b09      	ldr	r3, [pc, #36]	; (80010d4 <MX_USART2_UART_Init+0x4c>)
 80010ae:	220c      	movs	r2, #12
 80010b0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80010b2:	4b08      	ldr	r3, [pc, #32]	; (80010d4 <MX_USART2_UART_Init+0x4c>)
 80010b4:	2200      	movs	r2, #0
 80010b6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80010b8:	4b06      	ldr	r3, [pc, #24]	; (80010d4 <MX_USART2_UART_Init+0x4c>)
 80010ba:	2200      	movs	r2, #0
 80010bc:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80010be:	4805      	ldr	r0, [pc, #20]	; (80010d4 <MX_USART2_UART_Init+0x4c>)
 80010c0:	f002 fc38 	bl	8003934 <HAL_UART_Init>
 80010c4:	4603      	mov	r3, r0
 80010c6:	2b00      	cmp	r3, #0
 80010c8:	d001      	beq.n	80010ce <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80010ca:	f000 f855 	bl	8001178 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80010ce:	bf00      	nop
 80010d0:	bd80      	pop	{r7, pc}
 80010d2:	bf00      	nop
 80010d4:	20000298 	.word	0x20000298
 80010d8:	40004400 	.word	0x40004400

080010dc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80010dc:	b580      	push	{r7, lr}
 80010de:	b088      	sub	sp, #32
 80010e0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010e2:	f107 030c 	add.w	r3, r7, #12
 80010e6:	2200      	movs	r2, #0
 80010e8:	601a      	str	r2, [r3, #0]
 80010ea:	605a      	str	r2, [r3, #4]
 80010ec:	609a      	str	r2, [r3, #8]
 80010ee:	60da      	str	r2, [r3, #12]
 80010f0:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80010f2:	2300      	movs	r3, #0
 80010f4:	60bb      	str	r3, [r7, #8]
 80010f6:	4b1e      	ldr	r3, [pc, #120]	; (8001170 <MX_GPIO_Init+0x94>)
 80010f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010fa:	4a1d      	ldr	r2, [pc, #116]	; (8001170 <MX_GPIO_Init+0x94>)
 80010fc:	f043 0301 	orr.w	r3, r3, #1
 8001100:	6313      	str	r3, [r2, #48]	; 0x30
 8001102:	4b1b      	ldr	r3, [pc, #108]	; (8001170 <MX_GPIO_Init+0x94>)
 8001104:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001106:	f003 0301 	and.w	r3, r3, #1
 800110a:	60bb      	str	r3, [r7, #8]
 800110c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800110e:	2300      	movs	r3, #0
 8001110:	607b      	str	r3, [r7, #4]
 8001112:	4b17      	ldr	r3, [pc, #92]	; (8001170 <MX_GPIO_Init+0x94>)
 8001114:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001116:	4a16      	ldr	r2, [pc, #88]	; (8001170 <MX_GPIO_Init+0x94>)
 8001118:	f043 0302 	orr.w	r3, r3, #2
 800111c:	6313      	str	r3, [r2, #48]	; 0x30
 800111e:	4b14      	ldr	r3, [pc, #80]	; (8001170 <MX_GPIO_Init+0x94>)
 8001120:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001122:	f003 0302 	and.w	r3, r3, #2
 8001126:	607b      	str	r3, [r7, #4]
 8001128:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_GPIO_Port, CS_Pin, GPIO_PIN_RESET);
 800112a:	2200      	movs	r2, #0
 800112c:	2140      	movs	r1, #64	; 0x40
 800112e:	4811      	ldr	r0, [pc, #68]	; (8001174 <MX_GPIO_Init+0x98>)
 8001130:	f000 fcdc 	bl	8001aec <HAL_GPIO_WritePin>

  /*Configure GPIO pin : BP0_Pin */
  GPIO_InitStruct.Pin = BP0_Pin;
 8001134:	2301      	movs	r3, #1
 8001136:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001138:	2300      	movs	r3, #0
 800113a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800113c:	2300      	movs	r3, #0
 800113e:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(BP0_GPIO_Port, &GPIO_InitStruct);
 8001140:	f107 030c 	add.w	r3, r7, #12
 8001144:	4619      	mov	r1, r3
 8001146:	480b      	ldr	r0, [pc, #44]	; (8001174 <MX_GPIO_Init+0x98>)
 8001148:	f000 fb34 	bl	80017b4 <HAL_GPIO_Init>

  /*Configure GPIO pin : CS_Pin */
  GPIO_InitStruct.Pin = CS_Pin;
 800114c:	2340      	movs	r3, #64	; 0x40
 800114e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001150:	2301      	movs	r3, #1
 8001152:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001154:	2300      	movs	r3, #0
 8001156:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001158:	2300      	movs	r3, #0
 800115a:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(CS_GPIO_Port, &GPIO_InitStruct);
 800115c:	f107 030c 	add.w	r3, r7, #12
 8001160:	4619      	mov	r1, r3
 8001162:	4804      	ldr	r0, [pc, #16]	; (8001174 <MX_GPIO_Init+0x98>)
 8001164:	f000 fb26 	bl	80017b4 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001168:	bf00      	nop
 800116a:	3720      	adds	r7, #32
 800116c:	46bd      	mov	sp, r7
 800116e:	bd80      	pop	{r7, pc}
 8001170:	40023800 	.word	0x40023800
 8001174:	40020400 	.word	0x40020400

08001178 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001178:	b480      	push	{r7}
 800117a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800117c:	b672      	cpsid	i
}
 800117e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001180:	e7fe      	b.n	8001180 <Error_Handler+0x8>
	...

08001184 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001184:	b480      	push	{r7}
 8001186:	b083      	sub	sp, #12
 8001188:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800118a:	2300      	movs	r3, #0
 800118c:	607b      	str	r3, [r7, #4]
 800118e:	4b10      	ldr	r3, [pc, #64]	; (80011d0 <HAL_MspInit+0x4c>)
 8001190:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001192:	4a0f      	ldr	r2, [pc, #60]	; (80011d0 <HAL_MspInit+0x4c>)
 8001194:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001198:	6453      	str	r3, [r2, #68]	; 0x44
 800119a:	4b0d      	ldr	r3, [pc, #52]	; (80011d0 <HAL_MspInit+0x4c>)
 800119c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800119e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80011a2:	607b      	str	r3, [r7, #4]
 80011a4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80011a6:	2300      	movs	r3, #0
 80011a8:	603b      	str	r3, [r7, #0]
 80011aa:	4b09      	ldr	r3, [pc, #36]	; (80011d0 <HAL_MspInit+0x4c>)
 80011ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011ae:	4a08      	ldr	r2, [pc, #32]	; (80011d0 <HAL_MspInit+0x4c>)
 80011b0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80011b4:	6413      	str	r3, [r2, #64]	; 0x40
 80011b6:	4b06      	ldr	r3, [pc, #24]	; (80011d0 <HAL_MspInit+0x4c>)
 80011b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011ba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80011be:	603b      	str	r3, [r7, #0]
 80011c0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80011c2:	bf00      	nop
 80011c4:	370c      	adds	r7, #12
 80011c6:	46bd      	mov	sp, r7
 80011c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011cc:	4770      	bx	lr
 80011ce:	bf00      	nop
 80011d0:	40023800 	.word	0x40023800

080011d4 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80011d4:	b580      	push	{r7, lr}
 80011d6:	b08a      	sub	sp, #40	; 0x28
 80011d8:	af00      	add	r7, sp, #0
 80011da:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011dc:	f107 0314 	add.w	r3, r7, #20
 80011e0:	2200      	movs	r2, #0
 80011e2:	601a      	str	r2, [r3, #0]
 80011e4:	605a      	str	r2, [r3, #4]
 80011e6:	609a      	str	r2, [r3, #8]
 80011e8:	60da      	str	r2, [r3, #12]
 80011ea:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	681b      	ldr	r3, [r3, #0]
 80011f0:	4a19      	ldr	r2, [pc, #100]	; (8001258 <HAL_I2C_MspInit+0x84>)
 80011f2:	4293      	cmp	r3, r2
 80011f4:	d12c      	bne.n	8001250 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80011f6:	2300      	movs	r3, #0
 80011f8:	613b      	str	r3, [r7, #16]
 80011fa:	4b18      	ldr	r3, [pc, #96]	; (800125c <HAL_I2C_MspInit+0x88>)
 80011fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011fe:	4a17      	ldr	r2, [pc, #92]	; (800125c <HAL_I2C_MspInit+0x88>)
 8001200:	f043 0302 	orr.w	r3, r3, #2
 8001204:	6313      	str	r3, [r2, #48]	; 0x30
 8001206:	4b15      	ldr	r3, [pc, #84]	; (800125c <HAL_I2C_MspInit+0x88>)
 8001208:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800120a:	f003 0302 	and.w	r3, r3, #2
 800120e:	613b      	str	r3, [r7, #16]
 8001210:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001212:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001216:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001218:	2312      	movs	r3, #18
 800121a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800121c:	2300      	movs	r3, #0
 800121e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001220:	2303      	movs	r3, #3
 8001222:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001224:	2304      	movs	r3, #4
 8001226:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001228:	f107 0314 	add.w	r3, r7, #20
 800122c:	4619      	mov	r1, r3
 800122e:	480c      	ldr	r0, [pc, #48]	; (8001260 <HAL_I2C_MspInit+0x8c>)
 8001230:	f000 fac0 	bl	80017b4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001234:	2300      	movs	r3, #0
 8001236:	60fb      	str	r3, [r7, #12]
 8001238:	4b08      	ldr	r3, [pc, #32]	; (800125c <HAL_I2C_MspInit+0x88>)
 800123a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800123c:	4a07      	ldr	r2, [pc, #28]	; (800125c <HAL_I2C_MspInit+0x88>)
 800123e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001242:	6413      	str	r3, [r2, #64]	; 0x40
 8001244:	4b05      	ldr	r3, [pc, #20]	; (800125c <HAL_I2C_MspInit+0x88>)
 8001246:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001248:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800124c:	60fb      	str	r3, [r7, #12]
 800124e:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001250:	bf00      	nop
 8001252:	3728      	adds	r7, #40	; 0x28
 8001254:	46bd      	mov	sp, r7
 8001256:	bd80      	pop	{r7, pc}
 8001258:	40005400 	.word	0x40005400
 800125c:	40023800 	.word	0x40023800
 8001260:	40020400 	.word	0x40020400

08001264 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001264:	b580      	push	{r7, lr}
 8001266:	b08a      	sub	sp, #40	; 0x28
 8001268:	af00      	add	r7, sp, #0
 800126a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800126c:	f107 0314 	add.w	r3, r7, #20
 8001270:	2200      	movs	r2, #0
 8001272:	601a      	str	r2, [r3, #0]
 8001274:	605a      	str	r2, [r3, #4]
 8001276:	609a      	str	r2, [r3, #8]
 8001278:	60da      	str	r2, [r3, #12]
 800127a:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	681b      	ldr	r3, [r3, #0]
 8001280:	4a19      	ldr	r2, [pc, #100]	; (80012e8 <HAL_SPI_MspInit+0x84>)
 8001282:	4293      	cmp	r3, r2
 8001284:	d12b      	bne.n	80012de <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001286:	2300      	movs	r3, #0
 8001288:	613b      	str	r3, [r7, #16]
 800128a:	4b18      	ldr	r3, [pc, #96]	; (80012ec <HAL_SPI_MspInit+0x88>)
 800128c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800128e:	4a17      	ldr	r2, [pc, #92]	; (80012ec <HAL_SPI_MspInit+0x88>)
 8001290:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001294:	6453      	str	r3, [r2, #68]	; 0x44
 8001296:	4b15      	ldr	r3, [pc, #84]	; (80012ec <HAL_SPI_MspInit+0x88>)
 8001298:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800129a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800129e:	613b      	str	r3, [r7, #16]
 80012a0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80012a2:	2300      	movs	r3, #0
 80012a4:	60fb      	str	r3, [r7, #12]
 80012a6:	4b11      	ldr	r3, [pc, #68]	; (80012ec <HAL_SPI_MspInit+0x88>)
 80012a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012aa:	4a10      	ldr	r2, [pc, #64]	; (80012ec <HAL_SPI_MspInit+0x88>)
 80012ac:	f043 0301 	orr.w	r3, r3, #1
 80012b0:	6313      	str	r3, [r2, #48]	; 0x30
 80012b2:	4b0e      	ldr	r3, [pc, #56]	; (80012ec <HAL_SPI_MspInit+0x88>)
 80012b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012b6:	f003 0301 	and.w	r3, r3, #1
 80012ba:	60fb      	str	r3, [r7, #12]
 80012bc:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 80012be:	23a0      	movs	r3, #160	; 0xa0
 80012c0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012c2:	2302      	movs	r3, #2
 80012c4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012c6:	2300      	movs	r3, #0
 80012c8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80012ca:	2303      	movs	r3, #3
 80012cc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80012ce:	2305      	movs	r3, #5
 80012d0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80012d2:	f107 0314 	add.w	r3, r7, #20
 80012d6:	4619      	mov	r1, r3
 80012d8:	4805      	ldr	r0, [pc, #20]	; (80012f0 <HAL_SPI_MspInit+0x8c>)
 80012da:	f000 fa6b 	bl	80017b4 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 80012de:	bf00      	nop
 80012e0:	3728      	adds	r7, #40	; 0x28
 80012e2:	46bd      	mov	sp, r7
 80012e4:	bd80      	pop	{r7, pc}
 80012e6:	bf00      	nop
 80012e8:	40013000 	.word	0x40013000
 80012ec:	40023800 	.word	0x40023800
 80012f0:	40020000 	.word	0x40020000

080012f4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80012f4:	b580      	push	{r7, lr}
 80012f6:	b08a      	sub	sp, #40	; 0x28
 80012f8:	af00      	add	r7, sp, #0
 80012fa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012fc:	f107 0314 	add.w	r3, r7, #20
 8001300:	2200      	movs	r2, #0
 8001302:	601a      	str	r2, [r3, #0]
 8001304:	605a      	str	r2, [r3, #4]
 8001306:	609a      	str	r2, [r3, #8]
 8001308:	60da      	str	r2, [r3, #12]
 800130a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	681b      	ldr	r3, [r3, #0]
 8001310:	4a19      	ldr	r2, [pc, #100]	; (8001378 <HAL_UART_MspInit+0x84>)
 8001312:	4293      	cmp	r3, r2
 8001314:	d12b      	bne.n	800136e <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001316:	2300      	movs	r3, #0
 8001318:	613b      	str	r3, [r7, #16]
 800131a:	4b18      	ldr	r3, [pc, #96]	; (800137c <HAL_UART_MspInit+0x88>)
 800131c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800131e:	4a17      	ldr	r2, [pc, #92]	; (800137c <HAL_UART_MspInit+0x88>)
 8001320:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001324:	6413      	str	r3, [r2, #64]	; 0x40
 8001326:	4b15      	ldr	r3, [pc, #84]	; (800137c <HAL_UART_MspInit+0x88>)
 8001328:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800132a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800132e:	613b      	str	r3, [r7, #16]
 8001330:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001332:	2300      	movs	r3, #0
 8001334:	60fb      	str	r3, [r7, #12]
 8001336:	4b11      	ldr	r3, [pc, #68]	; (800137c <HAL_UART_MspInit+0x88>)
 8001338:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800133a:	4a10      	ldr	r2, [pc, #64]	; (800137c <HAL_UART_MspInit+0x88>)
 800133c:	f043 0301 	orr.w	r3, r3, #1
 8001340:	6313      	str	r3, [r2, #48]	; 0x30
 8001342:	4b0e      	ldr	r3, [pc, #56]	; (800137c <HAL_UART_MspInit+0x88>)
 8001344:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001346:	f003 0301 	and.w	r3, r3, #1
 800134a:	60fb      	str	r3, [r7, #12]
 800134c:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 800134e:	230c      	movs	r3, #12
 8001350:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001352:	2302      	movs	r3, #2
 8001354:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001356:	2300      	movs	r3, #0
 8001358:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800135a:	2303      	movs	r3, #3
 800135c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800135e:	2307      	movs	r3, #7
 8001360:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001362:	f107 0314 	add.w	r3, r7, #20
 8001366:	4619      	mov	r1, r3
 8001368:	4805      	ldr	r0, [pc, #20]	; (8001380 <HAL_UART_MspInit+0x8c>)
 800136a:	f000 fa23 	bl	80017b4 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 800136e:	bf00      	nop
 8001370:	3728      	adds	r7, #40	; 0x28
 8001372:	46bd      	mov	sp, r7
 8001374:	bd80      	pop	{r7, pc}
 8001376:	bf00      	nop
 8001378:	40004400 	.word	0x40004400
 800137c:	40023800 	.word	0x40023800
 8001380:	40020000 	.word	0x40020000

08001384 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001384:	b480      	push	{r7}
 8001386:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001388:	e7fe      	b.n	8001388 <NMI_Handler+0x4>

0800138a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800138a:	b480      	push	{r7}
 800138c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800138e:	e7fe      	b.n	800138e <HardFault_Handler+0x4>

08001390 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001390:	b480      	push	{r7}
 8001392:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001394:	e7fe      	b.n	8001394 <MemManage_Handler+0x4>

08001396 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001396:	b480      	push	{r7}
 8001398:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800139a:	e7fe      	b.n	800139a <BusFault_Handler+0x4>

0800139c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800139c:	b480      	push	{r7}
 800139e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80013a0:	e7fe      	b.n	80013a0 <UsageFault_Handler+0x4>

080013a2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80013a2:	b480      	push	{r7}
 80013a4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80013a6:	bf00      	nop
 80013a8:	46bd      	mov	sp, r7
 80013aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ae:	4770      	bx	lr

080013b0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80013b0:	b480      	push	{r7}
 80013b2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80013b4:	bf00      	nop
 80013b6:	46bd      	mov	sp, r7
 80013b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013bc:	4770      	bx	lr

080013be <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80013be:	b480      	push	{r7}
 80013c0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80013c2:	bf00      	nop
 80013c4:	46bd      	mov	sp, r7
 80013c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ca:	4770      	bx	lr

080013cc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80013cc:	b580      	push	{r7, lr}
 80013ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80013d0:	f000 f8c6 	bl	8001560 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80013d4:	bf00      	nop
 80013d6:	bd80      	pop	{r7, pc}

080013d8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80013d8:	b580      	push	{r7, lr}
 80013da:	b086      	sub	sp, #24
 80013dc:	af00      	add	r7, sp, #0
 80013de:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80013e0:	4a14      	ldr	r2, [pc, #80]	; (8001434 <_sbrk+0x5c>)
 80013e2:	4b15      	ldr	r3, [pc, #84]	; (8001438 <_sbrk+0x60>)
 80013e4:	1ad3      	subs	r3, r2, r3
 80013e6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80013e8:	697b      	ldr	r3, [r7, #20]
 80013ea:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80013ec:	4b13      	ldr	r3, [pc, #76]	; (800143c <_sbrk+0x64>)
 80013ee:	681b      	ldr	r3, [r3, #0]
 80013f0:	2b00      	cmp	r3, #0
 80013f2:	d102      	bne.n	80013fa <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80013f4:	4b11      	ldr	r3, [pc, #68]	; (800143c <_sbrk+0x64>)
 80013f6:	4a12      	ldr	r2, [pc, #72]	; (8001440 <_sbrk+0x68>)
 80013f8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80013fa:	4b10      	ldr	r3, [pc, #64]	; (800143c <_sbrk+0x64>)
 80013fc:	681a      	ldr	r2, [r3, #0]
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	4413      	add	r3, r2
 8001402:	693a      	ldr	r2, [r7, #16]
 8001404:	429a      	cmp	r2, r3
 8001406:	d207      	bcs.n	8001418 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001408:	f004 f93c 	bl	8005684 <__errno>
 800140c:	4603      	mov	r3, r0
 800140e:	220c      	movs	r2, #12
 8001410:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001412:	f04f 33ff 	mov.w	r3, #4294967295
 8001416:	e009      	b.n	800142c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001418:	4b08      	ldr	r3, [pc, #32]	; (800143c <_sbrk+0x64>)
 800141a:	681b      	ldr	r3, [r3, #0]
 800141c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800141e:	4b07      	ldr	r3, [pc, #28]	; (800143c <_sbrk+0x64>)
 8001420:	681a      	ldr	r2, [r3, #0]
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	4413      	add	r3, r2
 8001426:	4a05      	ldr	r2, [pc, #20]	; (800143c <_sbrk+0x64>)
 8001428:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800142a:	68fb      	ldr	r3, [r7, #12]
}
 800142c:	4618      	mov	r0, r3
 800142e:	3718      	adds	r7, #24
 8001430:	46bd      	mov	sp, r7
 8001432:	bd80      	pop	{r7, pc}
 8001434:	20020000 	.word	0x20020000
 8001438:	00000400 	.word	0x00000400
 800143c:	200002e0 	.word	0x200002e0
 8001440:	20000438 	.word	0x20000438

08001444 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001444:	b480      	push	{r7}
 8001446:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001448:	4b06      	ldr	r3, [pc, #24]	; (8001464 <SystemInit+0x20>)
 800144a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800144e:	4a05      	ldr	r2, [pc, #20]	; (8001464 <SystemInit+0x20>)
 8001450:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001454:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001458:	bf00      	nop
 800145a:	46bd      	mov	sp, r7
 800145c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001460:	4770      	bx	lr
 8001462:	bf00      	nop
 8001464:	e000ed00 	.word	0xe000ed00

08001468 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8001468:	f8df d034 	ldr.w	sp, [pc, #52]	; 80014a0 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800146c:	f7ff ffea 	bl	8001444 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001470:	480c      	ldr	r0, [pc, #48]	; (80014a4 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001472:	490d      	ldr	r1, [pc, #52]	; (80014a8 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001474:	4a0d      	ldr	r2, [pc, #52]	; (80014ac <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001476:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001478:	e002      	b.n	8001480 <LoopCopyDataInit>

0800147a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800147a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800147c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800147e:	3304      	adds	r3, #4

08001480 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001480:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001482:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001484:	d3f9      	bcc.n	800147a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001486:	4a0a      	ldr	r2, [pc, #40]	; (80014b0 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001488:	4c0a      	ldr	r4, [pc, #40]	; (80014b4 <LoopFillZerobss+0x22>)
  movs r3, #0
 800148a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800148c:	e001      	b.n	8001492 <LoopFillZerobss>

0800148e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800148e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001490:	3204      	adds	r2, #4

08001492 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001492:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001494:	d3fb      	bcc.n	800148e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001496:	f004 f8fb 	bl	8005690 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800149a:	f7ff fd0b 	bl	8000eb4 <main>
  bx  lr    
 800149e:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 80014a0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80014a4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80014a8:	200001d0 	.word	0x200001d0
  ldr r2, =_sidata
 80014ac:	08007b50 	.word	0x08007b50
  ldr r2, =_sbss
 80014b0:	200001d0 	.word	0x200001d0
  ldr r4, =_ebss
 80014b4:	20000434 	.word	0x20000434

080014b8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80014b8:	e7fe      	b.n	80014b8 <ADC_IRQHandler>
	...

080014bc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80014bc:	b580      	push	{r7, lr}
 80014be:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80014c0:	4b0e      	ldr	r3, [pc, #56]	; (80014fc <HAL_Init+0x40>)
 80014c2:	681b      	ldr	r3, [r3, #0]
 80014c4:	4a0d      	ldr	r2, [pc, #52]	; (80014fc <HAL_Init+0x40>)
 80014c6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80014ca:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80014cc:	4b0b      	ldr	r3, [pc, #44]	; (80014fc <HAL_Init+0x40>)
 80014ce:	681b      	ldr	r3, [r3, #0]
 80014d0:	4a0a      	ldr	r2, [pc, #40]	; (80014fc <HAL_Init+0x40>)
 80014d2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80014d6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80014d8:	4b08      	ldr	r3, [pc, #32]	; (80014fc <HAL_Init+0x40>)
 80014da:	681b      	ldr	r3, [r3, #0]
 80014dc:	4a07      	ldr	r2, [pc, #28]	; (80014fc <HAL_Init+0x40>)
 80014de:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80014e2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80014e4:	2003      	movs	r0, #3
 80014e6:	f000 f931 	bl	800174c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80014ea:	200f      	movs	r0, #15
 80014ec:	f000 f808 	bl	8001500 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80014f0:	f7ff fe48 	bl	8001184 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80014f4:	2300      	movs	r3, #0
}
 80014f6:	4618      	mov	r0, r3
 80014f8:	bd80      	pop	{r7, pc}
 80014fa:	bf00      	nop
 80014fc:	40023c00 	.word	0x40023c00

08001500 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001500:	b580      	push	{r7, lr}
 8001502:	b082      	sub	sp, #8
 8001504:	af00      	add	r7, sp, #0
 8001506:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001508:	4b12      	ldr	r3, [pc, #72]	; (8001554 <HAL_InitTick+0x54>)
 800150a:	681a      	ldr	r2, [r3, #0]
 800150c:	4b12      	ldr	r3, [pc, #72]	; (8001558 <HAL_InitTick+0x58>)
 800150e:	781b      	ldrb	r3, [r3, #0]
 8001510:	4619      	mov	r1, r3
 8001512:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001516:	fbb3 f3f1 	udiv	r3, r3, r1
 800151a:	fbb2 f3f3 	udiv	r3, r2, r3
 800151e:	4618      	mov	r0, r3
 8001520:	f000 f93b 	bl	800179a <HAL_SYSTICK_Config>
 8001524:	4603      	mov	r3, r0
 8001526:	2b00      	cmp	r3, #0
 8001528:	d001      	beq.n	800152e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800152a:	2301      	movs	r3, #1
 800152c:	e00e      	b.n	800154c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	2b0f      	cmp	r3, #15
 8001532:	d80a      	bhi.n	800154a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001534:	2200      	movs	r2, #0
 8001536:	6879      	ldr	r1, [r7, #4]
 8001538:	f04f 30ff 	mov.w	r0, #4294967295
 800153c:	f000 f911 	bl	8001762 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001540:	4a06      	ldr	r2, [pc, #24]	; (800155c <HAL_InitTick+0x5c>)
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001546:	2300      	movs	r3, #0
 8001548:	e000      	b.n	800154c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800154a:	2301      	movs	r3, #1
}
 800154c:	4618      	mov	r0, r3
 800154e:	3708      	adds	r7, #8
 8001550:	46bd      	mov	sp, r7
 8001552:	bd80      	pop	{r7, pc}
 8001554:	20000000 	.word	0x20000000
 8001558:	20000008 	.word	0x20000008
 800155c:	20000004 	.word	0x20000004

08001560 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001560:	b480      	push	{r7}
 8001562:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001564:	4b06      	ldr	r3, [pc, #24]	; (8001580 <HAL_IncTick+0x20>)
 8001566:	781b      	ldrb	r3, [r3, #0]
 8001568:	461a      	mov	r2, r3
 800156a:	4b06      	ldr	r3, [pc, #24]	; (8001584 <HAL_IncTick+0x24>)
 800156c:	681b      	ldr	r3, [r3, #0]
 800156e:	4413      	add	r3, r2
 8001570:	4a04      	ldr	r2, [pc, #16]	; (8001584 <HAL_IncTick+0x24>)
 8001572:	6013      	str	r3, [r2, #0]
}
 8001574:	bf00      	nop
 8001576:	46bd      	mov	sp, r7
 8001578:	f85d 7b04 	ldr.w	r7, [sp], #4
 800157c:	4770      	bx	lr
 800157e:	bf00      	nop
 8001580:	20000008 	.word	0x20000008
 8001584:	200002e4 	.word	0x200002e4

08001588 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001588:	b480      	push	{r7}
 800158a:	af00      	add	r7, sp, #0
  return uwTick;
 800158c:	4b03      	ldr	r3, [pc, #12]	; (800159c <HAL_GetTick+0x14>)
 800158e:	681b      	ldr	r3, [r3, #0]
}
 8001590:	4618      	mov	r0, r3
 8001592:	46bd      	mov	sp, r7
 8001594:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001598:	4770      	bx	lr
 800159a:	bf00      	nop
 800159c:	200002e4 	.word	0x200002e4

080015a0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80015a0:	b580      	push	{r7, lr}
 80015a2:	b084      	sub	sp, #16
 80015a4:	af00      	add	r7, sp, #0
 80015a6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80015a8:	f7ff ffee 	bl	8001588 <HAL_GetTick>
 80015ac:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80015b2:	68fb      	ldr	r3, [r7, #12]
 80015b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80015b8:	d005      	beq.n	80015c6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80015ba:	4b0a      	ldr	r3, [pc, #40]	; (80015e4 <HAL_Delay+0x44>)
 80015bc:	781b      	ldrb	r3, [r3, #0]
 80015be:	461a      	mov	r2, r3
 80015c0:	68fb      	ldr	r3, [r7, #12]
 80015c2:	4413      	add	r3, r2
 80015c4:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80015c6:	bf00      	nop
 80015c8:	f7ff ffde 	bl	8001588 <HAL_GetTick>
 80015cc:	4602      	mov	r2, r0
 80015ce:	68bb      	ldr	r3, [r7, #8]
 80015d0:	1ad3      	subs	r3, r2, r3
 80015d2:	68fa      	ldr	r2, [r7, #12]
 80015d4:	429a      	cmp	r2, r3
 80015d6:	d8f7      	bhi.n	80015c8 <HAL_Delay+0x28>
  {
  }
}
 80015d8:	bf00      	nop
 80015da:	bf00      	nop
 80015dc:	3710      	adds	r7, #16
 80015de:	46bd      	mov	sp, r7
 80015e0:	bd80      	pop	{r7, pc}
 80015e2:	bf00      	nop
 80015e4:	20000008 	.word	0x20000008

080015e8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80015e8:	b480      	push	{r7}
 80015ea:	b085      	sub	sp, #20
 80015ec:	af00      	add	r7, sp, #0
 80015ee:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	f003 0307 	and.w	r3, r3, #7
 80015f6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80015f8:	4b0c      	ldr	r3, [pc, #48]	; (800162c <__NVIC_SetPriorityGrouping+0x44>)
 80015fa:	68db      	ldr	r3, [r3, #12]
 80015fc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80015fe:	68ba      	ldr	r2, [r7, #8]
 8001600:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001604:	4013      	ands	r3, r2
 8001606:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001608:	68fb      	ldr	r3, [r7, #12]
 800160a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800160c:	68bb      	ldr	r3, [r7, #8]
 800160e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001610:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001614:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001618:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800161a:	4a04      	ldr	r2, [pc, #16]	; (800162c <__NVIC_SetPriorityGrouping+0x44>)
 800161c:	68bb      	ldr	r3, [r7, #8]
 800161e:	60d3      	str	r3, [r2, #12]
}
 8001620:	bf00      	nop
 8001622:	3714      	adds	r7, #20
 8001624:	46bd      	mov	sp, r7
 8001626:	f85d 7b04 	ldr.w	r7, [sp], #4
 800162a:	4770      	bx	lr
 800162c:	e000ed00 	.word	0xe000ed00

08001630 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001630:	b480      	push	{r7}
 8001632:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001634:	4b04      	ldr	r3, [pc, #16]	; (8001648 <__NVIC_GetPriorityGrouping+0x18>)
 8001636:	68db      	ldr	r3, [r3, #12]
 8001638:	0a1b      	lsrs	r3, r3, #8
 800163a:	f003 0307 	and.w	r3, r3, #7
}
 800163e:	4618      	mov	r0, r3
 8001640:	46bd      	mov	sp, r7
 8001642:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001646:	4770      	bx	lr
 8001648:	e000ed00 	.word	0xe000ed00

0800164c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800164c:	b480      	push	{r7}
 800164e:	b083      	sub	sp, #12
 8001650:	af00      	add	r7, sp, #0
 8001652:	4603      	mov	r3, r0
 8001654:	6039      	str	r1, [r7, #0]
 8001656:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001658:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800165c:	2b00      	cmp	r3, #0
 800165e:	db0a      	blt.n	8001676 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001660:	683b      	ldr	r3, [r7, #0]
 8001662:	b2da      	uxtb	r2, r3
 8001664:	490c      	ldr	r1, [pc, #48]	; (8001698 <__NVIC_SetPriority+0x4c>)
 8001666:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800166a:	0112      	lsls	r2, r2, #4
 800166c:	b2d2      	uxtb	r2, r2
 800166e:	440b      	add	r3, r1
 8001670:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001674:	e00a      	b.n	800168c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001676:	683b      	ldr	r3, [r7, #0]
 8001678:	b2da      	uxtb	r2, r3
 800167a:	4908      	ldr	r1, [pc, #32]	; (800169c <__NVIC_SetPriority+0x50>)
 800167c:	79fb      	ldrb	r3, [r7, #7]
 800167e:	f003 030f 	and.w	r3, r3, #15
 8001682:	3b04      	subs	r3, #4
 8001684:	0112      	lsls	r2, r2, #4
 8001686:	b2d2      	uxtb	r2, r2
 8001688:	440b      	add	r3, r1
 800168a:	761a      	strb	r2, [r3, #24]
}
 800168c:	bf00      	nop
 800168e:	370c      	adds	r7, #12
 8001690:	46bd      	mov	sp, r7
 8001692:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001696:	4770      	bx	lr
 8001698:	e000e100 	.word	0xe000e100
 800169c:	e000ed00 	.word	0xe000ed00

080016a0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80016a0:	b480      	push	{r7}
 80016a2:	b089      	sub	sp, #36	; 0x24
 80016a4:	af00      	add	r7, sp, #0
 80016a6:	60f8      	str	r0, [r7, #12]
 80016a8:	60b9      	str	r1, [r7, #8]
 80016aa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80016ac:	68fb      	ldr	r3, [r7, #12]
 80016ae:	f003 0307 	and.w	r3, r3, #7
 80016b2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80016b4:	69fb      	ldr	r3, [r7, #28]
 80016b6:	f1c3 0307 	rsb	r3, r3, #7
 80016ba:	2b04      	cmp	r3, #4
 80016bc:	bf28      	it	cs
 80016be:	2304      	movcs	r3, #4
 80016c0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80016c2:	69fb      	ldr	r3, [r7, #28]
 80016c4:	3304      	adds	r3, #4
 80016c6:	2b06      	cmp	r3, #6
 80016c8:	d902      	bls.n	80016d0 <NVIC_EncodePriority+0x30>
 80016ca:	69fb      	ldr	r3, [r7, #28]
 80016cc:	3b03      	subs	r3, #3
 80016ce:	e000      	b.n	80016d2 <NVIC_EncodePriority+0x32>
 80016d0:	2300      	movs	r3, #0
 80016d2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80016d4:	f04f 32ff 	mov.w	r2, #4294967295
 80016d8:	69bb      	ldr	r3, [r7, #24]
 80016da:	fa02 f303 	lsl.w	r3, r2, r3
 80016de:	43da      	mvns	r2, r3
 80016e0:	68bb      	ldr	r3, [r7, #8]
 80016e2:	401a      	ands	r2, r3
 80016e4:	697b      	ldr	r3, [r7, #20]
 80016e6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80016e8:	f04f 31ff 	mov.w	r1, #4294967295
 80016ec:	697b      	ldr	r3, [r7, #20]
 80016ee:	fa01 f303 	lsl.w	r3, r1, r3
 80016f2:	43d9      	mvns	r1, r3
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80016f8:	4313      	orrs	r3, r2
         );
}
 80016fa:	4618      	mov	r0, r3
 80016fc:	3724      	adds	r7, #36	; 0x24
 80016fe:	46bd      	mov	sp, r7
 8001700:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001704:	4770      	bx	lr
	...

08001708 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001708:	b580      	push	{r7, lr}
 800170a:	b082      	sub	sp, #8
 800170c:	af00      	add	r7, sp, #0
 800170e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	3b01      	subs	r3, #1
 8001714:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001718:	d301      	bcc.n	800171e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800171a:	2301      	movs	r3, #1
 800171c:	e00f      	b.n	800173e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800171e:	4a0a      	ldr	r2, [pc, #40]	; (8001748 <SysTick_Config+0x40>)
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	3b01      	subs	r3, #1
 8001724:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001726:	210f      	movs	r1, #15
 8001728:	f04f 30ff 	mov.w	r0, #4294967295
 800172c:	f7ff ff8e 	bl	800164c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001730:	4b05      	ldr	r3, [pc, #20]	; (8001748 <SysTick_Config+0x40>)
 8001732:	2200      	movs	r2, #0
 8001734:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001736:	4b04      	ldr	r3, [pc, #16]	; (8001748 <SysTick_Config+0x40>)
 8001738:	2207      	movs	r2, #7
 800173a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800173c:	2300      	movs	r3, #0
}
 800173e:	4618      	mov	r0, r3
 8001740:	3708      	adds	r7, #8
 8001742:	46bd      	mov	sp, r7
 8001744:	bd80      	pop	{r7, pc}
 8001746:	bf00      	nop
 8001748:	e000e010 	.word	0xe000e010

0800174c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800174c:	b580      	push	{r7, lr}
 800174e:	b082      	sub	sp, #8
 8001750:	af00      	add	r7, sp, #0
 8001752:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001754:	6878      	ldr	r0, [r7, #4]
 8001756:	f7ff ff47 	bl	80015e8 <__NVIC_SetPriorityGrouping>
}
 800175a:	bf00      	nop
 800175c:	3708      	adds	r7, #8
 800175e:	46bd      	mov	sp, r7
 8001760:	bd80      	pop	{r7, pc}

08001762 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001762:	b580      	push	{r7, lr}
 8001764:	b086      	sub	sp, #24
 8001766:	af00      	add	r7, sp, #0
 8001768:	4603      	mov	r3, r0
 800176a:	60b9      	str	r1, [r7, #8]
 800176c:	607a      	str	r2, [r7, #4]
 800176e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001770:	2300      	movs	r3, #0
 8001772:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001774:	f7ff ff5c 	bl	8001630 <__NVIC_GetPriorityGrouping>
 8001778:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800177a:	687a      	ldr	r2, [r7, #4]
 800177c:	68b9      	ldr	r1, [r7, #8]
 800177e:	6978      	ldr	r0, [r7, #20]
 8001780:	f7ff ff8e 	bl	80016a0 <NVIC_EncodePriority>
 8001784:	4602      	mov	r2, r0
 8001786:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800178a:	4611      	mov	r1, r2
 800178c:	4618      	mov	r0, r3
 800178e:	f7ff ff5d 	bl	800164c <__NVIC_SetPriority>
}
 8001792:	bf00      	nop
 8001794:	3718      	adds	r7, #24
 8001796:	46bd      	mov	sp, r7
 8001798:	bd80      	pop	{r7, pc}

0800179a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800179a:	b580      	push	{r7, lr}
 800179c:	b082      	sub	sp, #8
 800179e:	af00      	add	r7, sp, #0
 80017a0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80017a2:	6878      	ldr	r0, [r7, #4]
 80017a4:	f7ff ffb0 	bl	8001708 <SysTick_Config>
 80017a8:	4603      	mov	r3, r0
}
 80017aa:	4618      	mov	r0, r3
 80017ac:	3708      	adds	r7, #8
 80017ae:	46bd      	mov	sp, r7
 80017b0:	bd80      	pop	{r7, pc}
	...

080017b4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80017b4:	b480      	push	{r7}
 80017b6:	b089      	sub	sp, #36	; 0x24
 80017b8:	af00      	add	r7, sp, #0
 80017ba:	6078      	str	r0, [r7, #4]
 80017bc:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80017be:	2300      	movs	r3, #0
 80017c0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80017c2:	2300      	movs	r3, #0
 80017c4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80017c6:	2300      	movs	r3, #0
 80017c8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80017ca:	2300      	movs	r3, #0
 80017cc:	61fb      	str	r3, [r7, #28]
 80017ce:	e159      	b.n	8001a84 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80017d0:	2201      	movs	r2, #1
 80017d2:	69fb      	ldr	r3, [r7, #28]
 80017d4:	fa02 f303 	lsl.w	r3, r2, r3
 80017d8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80017da:	683b      	ldr	r3, [r7, #0]
 80017dc:	681b      	ldr	r3, [r3, #0]
 80017de:	697a      	ldr	r2, [r7, #20]
 80017e0:	4013      	ands	r3, r2
 80017e2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80017e4:	693a      	ldr	r2, [r7, #16]
 80017e6:	697b      	ldr	r3, [r7, #20]
 80017e8:	429a      	cmp	r2, r3
 80017ea:	f040 8148 	bne.w	8001a7e <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80017ee:	683b      	ldr	r3, [r7, #0]
 80017f0:	685b      	ldr	r3, [r3, #4]
 80017f2:	f003 0303 	and.w	r3, r3, #3
 80017f6:	2b01      	cmp	r3, #1
 80017f8:	d005      	beq.n	8001806 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80017fa:	683b      	ldr	r3, [r7, #0]
 80017fc:	685b      	ldr	r3, [r3, #4]
 80017fe:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001802:	2b02      	cmp	r3, #2
 8001804:	d130      	bne.n	8001868 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	689b      	ldr	r3, [r3, #8]
 800180a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800180c:	69fb      	ldr	r3, [r7, #28]
 800180e:	005b      	lsls	r3, r3, #1
 8001810:	2203      	movs	r2, #3
 8001812:	fa02 f303 	lsl.w	r3, r2, r3
 8001816:	43db      	mvns	r3, r3
 8001818:	69ba      	ldr	r2, [r7, #24]
 800181a:	4013      	ands	r3, r2
 800181c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800181e:	683b      	ldr	r3, [r7, #0]
 8001820:	68da      	ldr	r2, [r3, #12]
 8001822:	69fb      	ldr	r3, [r7, #28]
 8001824:	005b      	lsls	r3, r3, #1
 8001826:	fa02 f303 	lsl.w	r3, r2, r3
 800182a:	69ba      	ldr	r2, [r7, #24]
 800182c:	4313      	orrs	r3, r2
 800182e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	69ba      	ldr	r2, [r7, #24]
 8001834:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	685b      	ldr	r3, [r3, #4]
 800183a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800183c:	2201      	movs	r2, #1
 800183e:	69fb      	ldr	r3, [r7, #28]
 8001840:	fa02 f303 	lsl.w	r3, r2, r3
 8001844:	43db      	mvns	r3, r3
 8001846:	69ba      	ldr	r2, [r7, #24]
 8001848:	4013      	ands	r3, r2
 800184a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800184c:	683b      	ldr	r3, [r7, #0]
 800184e:	685b      	ldr	r3, [r3, #4]
 8001850:	091b      	lsrs	r3, r3, #4
 8001852:	f003 0201 	and.w	r2, r3, #1
 8001856:	69fb      	ldr	r3, [r7, #28]
 8001858:	fa02 f303 	lsl.w	r3, r2, r3
 800185c:	69ba      	ldr	r2, [r7, #24]
 800185e:	4313      	orrs	r3, r2
 8001860:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	69ba      	ldr	r2, [r7, #24]
 8001866:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001868:	683b      	ldr	r3, [r7, #0]
 800186a:	685b      	ldr	r3, [r3, #4]
 800186c:	f003 0303 	and.w	r3, r3, #3
 8001870:	2b03      	cmp	r3, #3
 8001872:	d017      	beq.n	80018a4 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	68db      	ldr	r3, [r3, #12]
 8001878:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800187a:	69fb      	ldr	r3, [r7, #28]
 800187c:	005b      	lsls	r3, r3, #1
 800187e:	2203      	movs	r2, #3
 8001880:	fa02 f303 	lsl.w	r3, r2, r3
 8001884:	43db      	mvns	r3, r3
 8001886:	69ba      	ldr	r2, [r7, #24]
 8001888:	4013      	ands	r3, r2
 800188a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800188c:	683b      	ldr	r3, [r7, #0]
 800188e:	689a      	ldr	r2, [r3, #8]
 8001890:	69fb      	ldr	r3, [r7, #28]
 8001892:	005b      	lsls	r3, r3, #1
 8001894:	fa02 f303 	lsl.w	r3, r2, r3
 8001898:	69ba      	ldr	r2, [r7, #24]
 800189a:	4313      	orrs	r3, r2
 800189c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	69ba      	ldr	r2, [r7, #24]
 80018a2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80018a4:	683b      	ldr	r3, [r7, #0]
 80018a6:	685b      	ldr	r3, [r3, #4]
 80018a8:	f003 0303 	and.w	r3, r3, #3
 80018ac:	2b02      	cmp	r3, #2
 80018ae:	d123      	bne.n	80018f8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80018b0:	69fb      	ldr	r3, [r7, #28]
 80018b2:	08da      	lsrs	r2, r3, #3
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	3208      	adds	r2, #8
 80018b8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80018bc:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80018be:	69fb      	ldr	r3, [r7, #28]
 80018c0:	f003 0307 	and.w	r3, r3, #7
 80018c4:	009b      	lsls	r3, r3, #2
 80018c6:	220f      	movs	r2, #15
 80018c8:	fa02 f303 	lsl.w	r3, r2, r3
 80018cc:	43db      	mvns	r3, r3
 80018ce:	69ba      	ldr	r2, [r7, #24]
 80018d0:	4013      	ands	r3, r2
 80018d2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80018d4:	683b      	ldr	r3, [r7, #0]
 80018d6:	691a      	ldr	r2, [r3, #16]
 80018d8:	69fb      	ldr	r3, [r7, #28]
 80018da:	f003 0307 	and.w	r3, r3, #7
 80018de:	009b      	lsls	r3, r3, #2
 80018e0:	fa02 f303 	lsl.w	r3, r2, r3
 80018e4:	69ba      	ldr	r2, [r7, #24]
 80018e6:	4313      	orrs	r3, r2
 80018e8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80018ea:	69fb      	ldr	r3, [r7, #28]
 80018ec:	08da      	lsrs	r2, r3, #3
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	3208      	adds	r2, #8
 80018f2:	69b9      	ldr	r1, [r7, #24]
 80018f4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	681b      	ldr	r3, [r3, #0]
 80018fc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80018fe:	69fb      	ldr	r3, [r7, #28]
 8001900:	005b      	lsls	r3, r3, #1
 8001902:	2203      	movs	r2, #3
 8001904:	fa02 f303 	lsl.w	r3, r2, r3
 8001908:	43db      	mvns	r3, r3
 800190a:	69ba      	ldr	r2, [r7, #24]
 800190c:	4013      	ands	r3, r2
 800190e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001910:	683b      	ldr	r3, [r7, #0]
 8001912:	685b      	ldr	r3, [r3, #4]
 8001914:	f003 0203 	and.w	r2, r3, #3
 8001918:	69fb      	ldr	r3, [r7, #28]
 800191a:	005b      	lsls	r3, r3, #1
 800191c:	fa02 f303 	lsl.w	r3, r2, r3
 8001920:	69ba      	ldr	r2, [r7, #24]
 8001922:	4313      	orrs	r3, r2
 8001924:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	69ba      	ldr	r2, [r7, #24]
 800192a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800192c:	683b      	ldr	r3, [r7, #0]
 800192e:	685b      	ldr	r3, [r3, #4]
 8001930:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001934:	2b00      	cmp	r3, #0
 8001936:	f000 80a2 	beq.w	8001a7e <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800193a:	2300      	movs	r3, #0
 800193c:	60fb      	str	r3, [r7, #12]
 800193e:	4b57      	ldr	r3, [pc, #348]	; (8001a9c <HAL_GPIO_Init+0x2e8>)
 8001940:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001942:	4a56      	ldr	r2, [pc, #344]	; (8001a9c <HAL_GPIO_Init+0x2e8>)
 8001944:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001948:	6453      	str	r3, [r2, #68]	; 0x44
 800194a:	4b54      	ldr	r3, [pc, #336]	; (8001a9c <HAL_GPIO_Init+0x2e8>)
 800194c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800194e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001952:	60fb      	str	r3, [r7, #12]
 8001954:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001956:	4a52      	ldr	r2, [pc, #328]	; (8001aa0 <HAL_GPIO_Init+0x2ec>)
 8001958:	69fb      	ldr	r3, [r7, #28]
 800195a:	089b      	lsrs	r3, r3, #2
 800195c:	3302      	adds	r3, #2
 800195e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001962:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001964:	69fb      	ldr	r3, [r7, #28]
 8001966:	f003 0303 	and.w	r3, r3, #3
 800196a:	009b      	lsls	r3, r3, #2
 800196c:	220f      	movs	r2, #15
 800196e:	fa02 f303 	lsl.w	r3, r2, r3
 8001972:	43db      	mvns	r3, r3
 8001974:	69ba      	ldr	r2, [r7, #24]
 8001976:	4013      	ands	r3, r2
 8001978:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	4a49      	ldr	r2, [pc, #292]	; (8001aa4 <HAL_GPIO_Init+0x2f0>)
 800197e:	4293      	cmp	r3, r2
 8001980:	d019      	beq.n	80019b6 <HAL_GPIO_Init+0x202>
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	4a48      	ldr	r2, [pc, #288]	; (8001aa8 <HAL_GPIO_Init+0x2f4>)
 8001986:	4293      	cmp	r3, r2
 8001988:	d013      	beq.n	80019b2 <HAL_GPIO_Init+0x1fe>
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	4a47      	ldr	r2, [pc, #284]	; (8001aac <HAL_GPIO_Init+0x2f8>)
 800198e:	4293      	cmp	r3, r2
 8001990:	d00d      	beq.n	80019ae <HAL_GPIO_Init+0x1fa>
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	4a46      	ldr	r2, [pc, #280]	; (8001ab0 <HAL_GPIO_Init+0x2fc>)
 8001996:	4293      	cmp	r3, r2
 8001998:	d007      	beq.n	80019aa <HAL_GPIO_Init+0x1f6>
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	4a45      	ldr	r2, [pc, #276]	; (8001ab4 <HAL_GPIO_Init+0x300>)
 800199e:	4293      	cmp	r3, r2
 80019a0:	d101      	bne.n	80019a6 <HAL_GPIO_Init+0x1f2>
 80019a2:	2304      	movs	r3, #4
 80019a4:	e008      	b.n	80019b8 <HAL_GPIO_Init+0x204>
 80019a6:	2307      	movs	r3, #7
 80019a8:	e006      	b.n	80019b8 <HAL_GPIO_Init+0x204>
 80019aa:	2303      	movs	r3, #3
 80019ac:	e004      	b.n	80019b8 <HAL_GPIO_Init+0x204>
 80019ae:	2302      	movs	r3, #2
 80019b0:	e002      	b.n	80019b8 <HAL_GPIO_Init+0x204>
 80019b2:	2301      	movs	r3, #1
 80019b4:	e000      	b.n	80019b8 <HAL_GPIO_Init+0x204>
 80019b6:	2300      	movs	r3, #0
 80019b8:	69fa      	ldr	r2, [r7, #28]
 80019ba:	f002 0203 	and.w	r2, r2, #3
 80019be:	0092      	lsls	r2, r2, #2
 80019c0:	4093      	lsls	r3, r2
 80019c2:	69ba      	ldr	r2, [r7, #24]
 80019c4:	4313      	orrs	r3, r2
 80019c6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80019c8:	4935      	ldr	r1, [pc, #212]	; (8001aa0 <HAL_GPIO_Init+0x2ec>)
 80019ca:	69fb      	ldr	r3, [r7, #28]
 80019cc:	089b      	lsrs	r3, r3, #2
 80019ce:	3302      	adds	r3, #2
 80019d0:	69ba      	ldr	r2, [r7, #24]
 80019d2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80019d6:	4b38      	ldr	r3, [pc, #224]	; (8001ab8 <HAL_GPIO_Init+0x304>)
 80019d8:	689b      	ldr	r3, [r3, #8]
 80019da:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80019dc:	693b      	ldr	r3, [r7, #16]
 80019de:	43db      	mvns	r3, r3
 80019e0:	69ba      	ldr	r2, [r7, #24]
 80019e2:	4013      	ands	r3, r2
 80019e4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80019e6:	683b      	ldr	r3, [r7, #0]
 80019e8:	685b      	ldr	r3, [r3, #4]
 80019ea:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80019ee:	2b00      	cmp	r3, #0
 80019f0:	d003      	beq.n	80019fa <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 80019f2:	69ba      	ldr	r2, [r7, #24]
 80019f4:	693b      	ldr	r3, [r7, #16]
 80019f6:	4313      	orrs	r3, r2
 80019f8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80019fa:	4a2f      	ldr	r2, [pc, #188]	; (8001ab8 <HAL_GPIO_Init+0x304>)
 80019fc:	69bb      	ldr	r3, [r7, #24]
 80019fe:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001a00:	4b2d      	ldr	r3, [pc, #180]	; (8001ab8 <HAL_GPIO_Init+0x304>)
 8001a02:	68db      	ldr	r3, [r3, #12]
 8001a04:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001a06:	693b      	ldr	r3, [r7, #16]
 8001a08:	43db      	mvns	r3, r3
 8001a0a:	69ba      	ldr	r2, [r7, #24]
 8001a0c:	4013      	ands	r3, r2
 8001a0e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001a10:	683b      	ldr	r3, [r7, #0]
 8001a12:	685b      	ldr	r3, [r3, #4]
 8001a14:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001a18:	2b00      	cmp	r3, #0
 8001a1a:	d003      	beq.n	8001a24 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8001a1c:	69ba      	ldr	r2, [r7, #24]
 8001a1e:	693b      	ldr	r3, [r7, #16]
 8001a20:	4313      	orrs	r3, r2
 8001a22:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001a24:	4a24      	ldr	r2, [pc, #144]	; (8001ab8 <HAL_GPIO_Init+0x304>)
 8001a26:	69bb      	ldr	r3, [r7, #24]
 8001a28:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001a2a:	4b23      	ldr	r3, [pc, #140]	; (8001ab8 <HAL_GPIO_Init+0x304>)
 8001a2c:	685b      	ldr	r3, [r3, #4]
 8001a2e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001a30:	693b      	ldr	r3, [r7, #16]
 8001a32:	43db      	mvns	r3, r3
 8001a34:	69ba      	ldr	r2, [r7, #24]
 8001a36:	4013      	ands	r3, r2
 8001a38:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001a3a:	683b      	ldr	r3, [r7, #0]
 8001a3c:	685b      	ldr	r3, [r3, #4]
 8001a3e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a42:	2b00      	cmp	r3, #0
 8001a44:	d003      	beq.n	8001a4e <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8001a46:	69ba      	ldr	r2, [r7, #24]
 8001a48:	693b      	ldr	r3, [r7, #16]
 8001a4a:	4313      	orrs	r3, r2
 8001a4c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001a4e:	4a1a      	ldr	r2, [pc, #104]	; (8001ab8 <HAL_GPIO_Init+0x304>)
 8001a50:	69bb      	ldr	r3, [r7, #24]
 8001a52:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001a54:	4b18      	ldr	r3, [pc, #96]	; (8001ab8 <HAL_GPIO_Init+0x304>)
 8001a56:	681b      	ldr	r3, [r3, #0]
 8001a58:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001a5a:	693b      	ldr	r3, [r7, #16]
 8001a5c:	43db      	mvns	r3, r3
 8001a5e:	69ba      	ldr	r2, [r7, #24]
 8001a60:	4013      	ands	r3, r2
 8001a62:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001a64:	683b      	ldr	r3, [r7, #0]
 8001a66:	685b      	ldr	r3, [r3, #4]
 8001a68:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001a6c:	2b00      	cmp	r3, #0
 8001a6e:	d003      	beq.n	8001a78 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8001a70:	69ba      	ldr	r2, [r7, #24]
 8001a72:	693b      	ldr	r3, [r7, #16]
 8001a74:	4313      	orrs	r3, r2
 8001a76:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001a78:	4a0f      	ldr	r2, [pc, #60]	; (8001ab8 <HAL_GPIO_Init+0x304>)
 8001a7a:	69bb      	ldr	r3, [r7, #24]
 8001a7c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001a7e:	69fb      	ldr	r3, [r7, #28]
 8001a80:	3301      	adds	r3, #1
 8001a82:	61fb      	str	r3, [r7, #28]
 8001a84:	69fb      	ldr	r3, [r7, #28]
 8001a86:	2b0f      	cmp	r3, #15
 8001a88:	f67f aea2 	bls.w	80017d0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001a8c:	bf00      	nop
 8001a8e:	bf00      	nop
 8001a90:	3724      	adds	r7, #36	; 0x24
 8001a92:	46bd      	mov	sp, r7
 8001a94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a98:	4770      	bx	lr
 8001a9a:	bf00      	nop
 8001a9c:	40023800 	.word	0x40023800
 8001aa0:	40013800 	.word	0x40013800
 8001aa4:	40020000 	.word	0x40020000
 8001aa8:	40020400 	.word	0x40020400
 8001aac:	40020800 	.word	0x40020800
 8001ab0:	40020c00 	.word	0x40020c00
 8001ab4:	40021000 	.word	0x40021000
 8001ab8:	40013c00 	.word	0x40013c00

08001abc <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001abc:	b480      	push	{r7}
 8001abe:	b085      	sub	sp, #20
 8001ac0:	af00      	add	r7, sp, #0
 8001ac2:	6078      	str	r0, [r7, #4]
 8001ac4:	460b      	mov	r3, r1
 8001ac6:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	691a      	ldr	r2, [r3, #16]
 8001acc:	887b      	ldrh	r3, [r7, #2]
 8001ace:	4013      	ands	r3, r2
 8001ad0:	2b00      	cmp	r3, #0
 8001ad2:	d002      	beq.n	8001ada <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001ad4:	2301      	movs	r3, #1
 8001ad6:	73fb      	strb	r3, [r7, #15]
 8001ad8:	e001      	b.n	8001ade <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001ada:	2300      	movs	r3, #0
 8001adc:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001ade:	7bfb      	ldrb	r3, [r7, #15]
}
 8001ae0:	4618      	mov	r0, r3
 8001ae2:	3714      	adds	r7, #20
 8001ae4:	46bd      	mov	sp, r7
 8001ae6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aea:	4770      	bx	lr

08001aec <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001aec:	b480      	push	{r7}
 8001aee:	b083      	sub	sp, #12
 8001af0:	af00      	add	r7, sp, #0
 8001af2:	6078      	str	r0, [r7, #4]
 8001af4:	460b      	mov	r3, r1
 8001af6:	807b      	strh	r3, [r7, #2]
 8001af8:	4613      	mov	r3, r2
 8001afa:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001afc:	787b      	ldrb	r3, [r7, #1]
 8001afe:	2b00      	cmp	r3, #0
 8001b00:	d003      	beq.n	8001b0a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001b02:	887a      	ldrh	r2, [r7, #2]
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001b08:	e003      	b.n	8001b12 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001b0a:	887b      	ldrh	r3, [r7, #2]
 8001b0c:	041a      	lsls	r2, r3, #16
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	619a      	str	r2, [r3, #24]
}
 8001b12:	bf00      	nop
 8001b14:	370c      	adds	r7, #12
 8001b16:	46bd      	mov	sp, r7
 8001b18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b1c:	4770      	bx	lr
	...

08001b20 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001b20:	b580      	push	{r7, lr}
 8001b22:	b084      	sub	sp, #16
 8001b24:	af00      	add	r7, sp, #0
 8001b26:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	2b00      	cmp	r3, #0
 8001b2c:	d101      	bne.n	8001b32 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001b2e:	2301      	movs	r3, #1
 8001b30:	e12b      	b.n	8001d8a <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001b38:	b2db      	uxtb	r3, r3
 8001b3a:	2b00      	cmp	r3, #0
 8001b3c:	d106      	bne.n	8001b4c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	2200      	movs	r2, #0
 8001b42:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8001b46:	6878      	ldr	r0, [r7, #4]
 8001b48:	f7ff fb44 	bl	80011d4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	2224      	movs	r2, #36	; 0x24
 8001b50:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	681a      	ldr	r2, [r3, #0]
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	f022 0201 	bic.w	r2, r2, #1
 8001b62:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	681a      	ldr	r2, [r3, #0]
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	681b      	ldr	r3, [r3, #0]
 8001b6e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001b72:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	681b      	ldr	r3, [r3, #0]
 8001b78:	681a      	ldr	r2, [r3, #0]
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	681b      	ldr	r3, [r3, #0]
 8001b7e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001b82:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001b84:	f001 fc06 	bl	8003394 <HAL_RCC_GetPCLK1Freq>
 8001b88:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	685b      	ldr	r3, [r3, #4]
 8001b8e:	4a81      	ldr	r2, [pc, #516]	; (8001d94 <HAL_I2C_Init+0x274>)
 8001b90:	4293      	cmp	r3, r2
 8001b92:	d807      	bhi.n	8001ba4 <HAL_I2C_Init+0x84>
 8001b94:	68fb      	ldr	r3, [r7, #12]
 8001b96:	4a80      	ldr	r2, [pc, #512]	; (8001d98 <HAL_I2C_Init+0x278>)
 8001b98:	4293      	cmp	r3, r2
 8001b9a:	bf94      	ite	ls
 8001b9c:	2301      	movls	r3, #1
 8001b9e:	2300      	movhi	r3, #0
 8001ba0:	b2db      	uxtb	r3, r3
 8001ba2:	e006      	b.n	8001bb2 <HAL_I2C_Init+0x92>
 8001ba4:	68fb      	ldr	r3, [r7, #12]
 8001ba6:	4a7d      	ldr	r2, [pc, #500]	; (8001d9c <HAL_I2C_Init+0x27c>)
 8001ba8:	4293      	cmp	r3, r2
 8001baa:	bf94      	ite	ls
 8001bac:	2301      	movls	r3, #1
 8001bae:	2300      	movhi	r3, #0
 8001bb0:	b2db      	uxtb	r3, r3
 8001bb2:	2b00      	cmp	r3, #0
 8001bb4:	d001      	beq.n	8001bba <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8001bb6:	2301      	movs	r3, #1
 8001bb8:	e0e7      	b.n	8001d8a <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8001bba:	68fb      	ldr	r3, [r7, #12]
 8001bbc:	4a78      	ldr	r2, [pc, #480]	; (8001da0 <HAL_I2C_Init+0x280>)
 8001bbe:	fba2 2303 	umull	r2, r3, r2, r3
 8001bc2:	0c9b      	lsrs	r3, r3, #18
 8001bc4:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	681b      	ldr	r3, [r3, #0]
 8001bca:	685b      	ldr	r3, [r3, #4]
 8001bcc:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	681b      	ldr	r3, [r3, #0]
 8001bd4:	68ba      	ldr	r2, [r7, #8]
 8001bd6:	430a      	orrs	r2, r1
 8001bd8:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	6a1b      	ldr	r3, [r3, #32]
 8001be0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	685b      	ldr	r3, [r3, #4]
 8001be8:	4a6a      	ldr	r2, [pc, #424]	; (8001d94 <HAL_I2C_Init+0x274>)
 8001bea:	4293      	cmp	r3, r2
 8001bec:	d802      	bhi.n	8001bf4 <HAL_I2C_Init+0xd4>
 8001bee:	68bb      	ldr	r3, [r7, #8]
 8001bf0:	3301      	adds	r3, #1
 8001bf2:	e009      	b.n	8001c08 <HAL_I2C_Init+0xe8>
 8001bf4:	68bb      	ldr	r3, [r7, #8]
 8001bf6:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8001bfa:	fb02 f303 	mul.w	r3, r2, r3
 8001bfe:	4a69      	ldr	r2, [pc, #420]	; (8001da4 <HAL_I2C_Init+0x284>)
 8001c00:	fba2 2303 	umull	r2, r3, r2, r3
 8001c04:	099b      	lsrs	r3, r3, #6
 8001c06:	3301      	adds	r3, #1
 8001c08:	687a      	ldr	r2, [r7, #4]
 8001c0a:	6812      	ldr	r2, [r2, #0]
 8001c0c:	430b      	orrs	r3, r1
 8001c0e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	69db      	ldr	r3, [r3, #28]
 8001c16:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8001c1a:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	685b      	ldr	r3, [r3, #4]
 8001c22:	495c      	ldr	r1, [pc, #368]	; (8001d94 <HAL_I2C_Init+0x274>)
 8001c24:	428b      	cmp	r3, r1
 8001c26:	d819      	bhi.n	8001c5c <HAL_I2C_Init+0x13c>
 8001c28:	68fb      	ldr	r3, [r7, #12]
 8001c2a:	1e59      	subs	r1, r3, #1
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	685b      	ldr	r3, [r3, #4]
 8001c30:	005b      	lsls	r3, r3, #1
 8001c32:	fbb1 f3f3 	udiv	r3, r1, r3
 8001c36:	1c59      	adds	r1, r3, #1
 8001c38:	f640 73fc 	movw	r3, #4092	; 0xffc
 8001c3c:	400b      	ands	r3, r1
 8001c3e:	2b00      	cmp	r3, #0
 8001c40:	d00a      	beq.n	8001c58 <HAL_I2C_Init+0x138>
 8001c42:	68fb      	ldr	r3, [r7, #12]
 8001c44:	1e59      	subs	r1, r3, #1
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	685b      	ldr	r3, [r3, #4]
 8001c4a:	005b      	lsls	r3, r3, #1
 8001c4c:	fbb1 f3f3 	udiv	r3, r1, r3
 8001c50:	3301      	adds	r3, #1
 8001c52:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001c56:	e051      	b.n	8001cfc <HAL_I2C_Init+0x1dc>
 8001c58:	2304      	movs	r3, #4
 8001c5a:	e04f      	b.n	8001cfc <HAL_I2C_Init+0x1dc>
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	689b      	ldr	r3, [r3, #8]
 8001c60:	2b00      	cmp	r3, #0
 8001c62:	d111      	bne.n	8001c88 <HAL_I2C_Init+0x168>
 8001c64:	68fb      	ldr	r3, [r7, #12]
 8001c66:	1e58      	subs	r0, r3, #1
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	6859      	ldr	r1, [r3, #4]
 8001c6c:	460b      	mov	r3, r1
 8001c6e:	005b      	lsls	r3, r3, #1
 8001c70:	440b      	add	r3, r1
 8001c72:	fbb0 f3f3 	udiv	r3, r0, r3
 8001c76:	3301      	adds	r3, #1
 8001c78:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001c7c:	2b00      	cmp	r3, #0
 8001c7e:	bf0c      	ite	eq
 8001c80:	2301      	moveq	r3, #1
 8001c82:	2300      	movne	r3, #0
 8001c84:	b2db      	uxtb	r3, r3
 8001c86:	e012      	b.n	8001cae <HAL_I2C_Init+0x18e>
 8001c88:	68fb      	ldr	r3, [r7, #12]
 8001c8a:	1e58      	subs	r0, r3, #1
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	6859      	ldr	r1, [r3, #4]
 8001c90:	460b      	mov	r3, r1
 8001c92:	009b      	lsls	r3, r3, #2
 8001c94:	440b      	add	r3, r1
 8001c96:	0099      	lsls	r1, r3, #2
 8001c98:	440b      	add	r3, r1
 8001c9a:	fbb0 f3f3 	udiv	r3, r0, r3
 8001c9e:	3301      	adds	r3, #1
 8001ca0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001ca4:	2b00      	cmp	r3, #0
 8001ca6:	bf0c      	ite	eq
 8001ca8:	2301      	moveq	r3, #1
 8001caa:	2300      	movne	r3, #0
 8001cac:	b2db      	uxtb	r3, r3
 8001cae:	2b00      	cmp	r3, #0
 8001cb0:	d001      	beq.n	8001cb6 <HAL_I2C_Init+0x196>
 8001cb2:	2301      	movs	r3, #1
 8001cb4:	e022      	b.n	8001cfc <HAL_I2C_Init+0x1dc>
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	689b      	ldr	r3, [r3, #8]
 8001cba:	2b00      	cmp	r3, #0
 8001cbc:	d10e      	bne.n	8001cdc <HAL_I2C_Init+0x1bc>
 8001cbe:	68fb      	ldr	r3, [r7, #12]
 8001cc0:	1e58      	subs	r0, r3, #1
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	6859      	ldr	r1, [r3, #4]
 8001cc6:	460b      	mov	r3, r1
 8001cc8:	005b      	lsls	r3, r3, #1
 8001cca:	440b      	add	r3, r1
 8001ccc:	fbb0 f3f3 	udiv	r3, r0, r3
 8001cd0:	3301      	adds	r3, #1
 8001cd2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001cd6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001cda:	e00f      	b.n	8001cfc <HAL_I2C_Init+0x1dc>
 8001cdc:	68fb      	ldr	r3, [r7, #12]
 8001cde:	1e58      	subs	r0, r3, #1
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	6859      	ldr	r1, [r3, #4]
 8001ce4:	460b      	mov	r3, r1
 8001ce6:	009b      	lsls	r3, r3, #2
 8001ce8:	440b      	add	r3, r1
 8001cea:	0099      	lsls	r1, r3, #2
 8001cec:	440b      	add	r3, r1
 8001cee:	fbb0 f3f3 	udiv	r3, r0, r3
 8001cf2:	3301      	adds	r3, #1
 8001cf4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001cf8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001cfc:	6879      	ldr	r1, [r7, #4]
 8001cfe:	6809      	ldr	r1, [r1, #0]
 8001d00:	4313      	orrs	r3, r2
 8001d02:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	69da      	ldr	r2, [r3, #28]
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	6a1b      	ldr	r3, [r3, #32]
 8001d16:	431a      	orrs	r2, r3
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	430a      	orrs	r2, r1
 8001d1e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	689b      	ldr	r3, [r3, #8]
 8001d26:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8001d2a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8001d2e:	687a      	ldr	r2, [r7, #4]
 8001d30:	6911      	ldr	r1, [r2, #16]
 8001d32:	687a      	ldr	r2, [r7, #4]
 8001d34:	68d2      	ldr	r2, [r2, #12]
 8001d36:	4311      	orrs	r1, r2
 8001d38:	687a      	ldr	r2, [r7, #4]
 8001d3a:	6812      	ldr	r2, [r2, #0]
 8001d3c:	430b      	orrs	r3, r1
 8001d3e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	68db      	ldr	r3, [r3, #12]
 8001d46:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	695a      	ldr	r2, [r3, #20]
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	699b      	ldr	r3, [r3, #24]
 8001d52:	431a      	orrs	r2, r3
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	430a      	orrs	r2, r1
 8001d5a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	681a      	ldr	r2, [r3, #0]
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	f042 0201 	orr.w	r2, r2, #1
 8001d6a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	2200      	movs	r2, #0
 8001d70:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	2220      	movs	r2, #32
 8001d76:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	2200      	movs	r2, #0
 8001d7e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	2200      	movs	r2, #0
 8001d84:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8001d88:	2300      	movs	r3, #0
}
 8001d8a:	4618      	mov	r0, r3
 8001d8c:	3710      	adds	r7, #16
 8001d8e:	46bd      	mov	sp, r7
 8001d90:	bd80      	pop	{r7, pc}
 8001d92:	bf00      	nop
 8001d94:	000186a0 	.word	0x000186a0
 8001d98:	001e847f 	.word	0x001e847f
 8001d9c:	003d08ff 	.word	0x003d08ff
 8001da0:	431bde83 	.word	0x431bde83
 8001da4:	10624dd3 	.word	0x10624dd3

08001da8 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001da8:	b580      	push	{r7, lr}
 8001daa:	b08c      	sub	sp, #48	; 0x30
 8001dac:	af02      	add	r7, sp, #8
 8001dae:	60f8      	str	r0, [r7, #12]
 8001db0:	607a      	str	r2, [r7, #4]
 8001db2:	461a      	mov	r2, r3
 8001db4:	460b      	mov	r3, r1
 8001db6:	817b      	strh	r3, [r7, #10]
 8001db8:	4613      	mov	r3, r2
 8001dba:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8001dbc:	f7ff fbe4 	bl	8001588 <HAL_GetTick>
 8001dc0:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001dc2:	68fb      	ldr	r3, [r7, #12]
 8001dc4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001dc8:	b2db      	uxtb	r3, r3
 8001dca:	2b20      	cmp	r3, #32
 8001dcc:	f040 8217 	bne.w	80021fe <HAL_I2C_Master_Receive+0x456>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001dd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001dd2:	9300      	str	r3, [sp, #0]
 8001dd4:	2319      	movs	r3, #25
 8001dd6:	2201      	movs	r2, #1
 8001dd8:	497c      	ldr	r1, [pc, #496]	; (8001fcc <HAL_I2C_Master_Receive+0x224>)
 8001dda:	68f8      	ldr	r0, [r7, #12]
 8001ddc:	f000 fc74 	bl	80026c8 <I2C_WaitOnFlagUntilTimeout>
 8001de0:	4603      	mov	r3, r0
 8001de2:	2b00      	cmp	r3, #0
 8001de4:	d001      	beq.n	8001dea <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 8001de6:	2302      	movs	r3, #2
 8001de8:	e20a      	b.n	8002200 <HAL_I2C_Master_Receive+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001dea:	68fb      	ldr	r3, [r7, #12]
 8001dec:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001df0:	2b01      	cmp	r3, #1
 8001df2:	d101      	bne.n	8001df8 <HAL_I2C_Master_Receive+0x50>
 8001df4:	2302      	movs	r3, #2
 8001df6:	e203      	b.n	8002200 <HAL_I2C_Master_Receive+0x458>
 8001df8:	68fb      	ldr	r3, [r7, #12]
 8001dfa:	2201      	movs	r2, #1
 8001dfc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001e00:	68fb      	ldr	r3, [r7, #12]
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	681b      	ldr	r3, [r3, #0]
 8001e06:	f003 0301 	and.w	r3, r3, #1
 8001e0a:	2b01      	cmp	r3, #1
 8001e0c:	d007      	beq.n	8001e1e <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8001e0e:	68fb      	ldr	r3, [r7, #12]
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	681a      	ldr	r2, [r3, #0]
 8001e14:	68fb      	ldr	r3, [r7, #12]
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	f042 0201 	orr.w	r2, r2, #1
 8001e1c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001e1e:	68fb      	ldr	r3, [r7, #12]
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	681a      	ldr	r2, [r3, #0]
 8001e24:	68fb      	ldr	r3, [r7, #12]
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001e2c:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8001e2e:	68fb      	ldr	r3, [r7, #12]
 8001e30:	2222      	movs	r2, #34	; 0x22
 8001e32:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8001e36:	68fb      	ldr	r3, [r7, #12]
 8001e38:	2210      	movs	r2, #16
 8001e3a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8001e3e:	68fb      	ldr	r3, [r7, #12]
 8001e40:	2200      	movs	r2, #0
 8001e42:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8001e44:	68fb      	ldr	r3, [r7, #12]
 8001e46:	687a      	ldr	r2, [r7, #4]
 8001e48:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8001e4a:	68fb      	ldr	r3, [r7, #12]
 8001e4c:	893a      	ldrh	r2, [r7, #8]
 8001e4e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8001e50:	68fb      	ldr	r3, [r7, #12]
 8001e52:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001e54:	b29a      	uxth	r2, r3
 8001e56:	68fb      	ldr	r3, [r7, #12]
 8001e58:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001e5a:	68fb      	ldr	r3, [r7, #12]
 8001e5c:	4a5c      	ldr	r2, [pc, #368]	; (8001fd0 <HAL_I2C_Master_Receive+0x228>)
 8001e5e:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8001e60:	8979      	ldrh	r1, [r7, #10]
 8001e62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e64:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001e66:	68f8      	ldr	r0, [r7, #12]
 8001e68:	f000 faca 	bl	8002400 <I2C_MasterRequestRead>
 8001e6c:	4603      	mov	r3, r0
 8001e6e:	2b00      	cmp	r3, #0
 8001e70:	d001      	beq.n	8001e76 <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 8001e72:	2301      	movs	r3, #1
 8001e74:	e1c4      	b.n	8002200 <HAL_I2C_Master_Receive+0x458>
    }

    if (hi2c->XferSize == 0U)
 8001e76:	68fb      	ldr	r3, [r7, #12]
 8001e78:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001e7a:	2b00      	cmp	r3, #0
 8001e7c:	d113      	bne.n	8001ea6 <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001e7e:	2300      	movs	r3, #0
 8001e80:	623b      	str	r3, [r7, #32]
 8001e82:	68fb      	ldr	r3, [r7, #12]
 8001e84:	681b      	ldr	r3, [r3, #0]
 8001e86:	695b      	ldr	r3, [r3, #20]
 8001e88:	623b      	str	r3, [r7, #32]
 8001e8a:	68fb      	ldr	r3, [r7, #12]
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	699b      	ldr	r3, [r3, #24]
 8001e90:	623b      	str	r3, [r7, #32]
 8001e92:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001e94:	68fb      	ldr	r3, [r7, #12]
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	681a      	ldr	r2, [r3, #0]
 8001e9a:	68fb      	ldr	r3, [r7, #12]
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001ea2:	601a      	str	r2, [r3, #0]
 8001ea4:	e198      	b.n	80021d8 <HAL_I2C_Master_Receive+0x430>
    }
    else if (hi2c->XferSize == 1U)
 8001ea6:	68fb      	ldr	r3, [r7, #12]
 8001ea8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001eaa:	2b01      	cmp	r3, #1
 8001eac:	d11b      	bne.n	8001ee6 <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001eae:	68fb      	ldr	r3, [r7, #12]
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	681a      	ldr	r2, [r3, #0]
 8001eb4:	68fb      	ldr	r3, [r7, #12]
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001ebc:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001ebe:	2300      	movs	r3, #0
 8001ec0:	61fb      	str	r3, [r7, #28]
 8001ec2:	68fb      	ldr	r3, [r7, #12]
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	695b      	ldr	r3, [r3, #20]
 8001ec8:	61fb      	str	r3, [r7, #28]
 8001eca:	68fb      	ldr	r3, [r7, #12]
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	699b      	ldr	r3, [r3, #24]
 8001ed0:	61fb      	str	r3, [r7, #28]
 8001ed2:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001ed4:	68fb      	ldr	r3, [r7, #12]
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	681a      	ldr	r2, [r3, #0]
 8001eda:	68fb      	ldr	r3, [r7, #12]
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001ee2:	601a      	str	r2, [r3, #0]
 8001ee4:	e178      	b.n	80021d8 <HAL_I2C_Master_Receive+0x430>
    }
    else if (hi2c->XferSize == 2U)
 8001ee6:	68fb      	ldr	r3, [r7, #12]
 8001ee8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001eea:	2b02      	cmp	r3, #2
 8001eec:	d11b      	bne.n	8001f26 <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001eee:	68fb      	ldr	r3, [r7, #12]
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	681a      	ldr	r2, [r3, #0]
 8001ef4:	68fb      	ldr	r3, [r7, #12]
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001efc:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001efe:	68fb      	ldr	r3, [r7, #12]
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	681a      	ldr	r2, [r3, #0]
 8001f04:	68fb      	ldr	r3, [r7, #12]
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001f0c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001f0e:	2300      	movs	r3, #0
 8001f10:	61bb      	str	r3, [r7, #24]
 8001f12:	68fb      	ldr	r3, [r7, #12]
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	695b      	ldr	r3, [r3, #20]
 8001f18:	61bb      	str	r3, [r7, #24]
 8001f1a:	68fb      	ldr	r3, [r7, #12]
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	699b      	ldr	r3, [r3, #24]
 8001f20:	61bb      	str	r3, [r7, #24]
 8001f22:	69bb      	ldr	r3, [r7, #24]
 8001f24:	e158      	b.n	80021d8 <HAL_I2C_Master_Receive+0x430>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001f26:	68fb      	ldr	r3, [r7, #12]
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	681a      	ldr	r2, [r3, #0]
 8001f2c:	68fb      	ldr	r3, [r7, #12]
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8001f34:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001f36:	2300      	movs	r3, #0
 8001f38:	617b      	str	r3, [r7, #20]
 8001f3a:	68fb      	ldr	r3, [r7, #12]
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	695b      	ldr	r3, [r3, #20]
 8001f40:	617b      	str	r3, [r7, #20]
 8001f42:	68fb      	ldr	r3, [r7, #12]
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	699b      	ldr	r3, [r3, #24]
 8001f48:	617b      	str	r3, [r7, #20]
 8001f4a:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8001f4c:	e144      	b.n	80021d8 <HAL_I2C_Master_Receive+0x430>
    {
      if (hi2c->XferSize <= 3U)
 8001f4e:	68fb      	ldr	r3, [r7, #12]
 8001f50:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001f52:	2b03      	cmp	r3, #3
 8001f54:	f200 80f1 	bhi.w	800213a <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8001f58:	68fb      	ldr	r3, [r7, #12]
 8001f5a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001f5c:	2b01      	cmp	r3, #1
 8001f5e:	d123      	bne.n	8001fa8 <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001f60:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001f62:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8001f64:	68f8      	ldr	r0, [r7, #12]
 8001f66:	f000 fd59 	bl	8002a1c <I2C_WaitOnRXNEFlagUntilTimeout>
 8001f6a:	4603      	mov	r3, r0
 8001f6c:	2b00      	cmp	r3, #0
 8001f6e:	d001      	beq.n	8001f74 <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 8001f70:	2301      	movs	r3, #1
 8001f72:	e145      	b.n	8002200 <HAL_I2C_Master_Receive+0x458>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001f74:	68fb      	ldr	r3, [r7, #12]
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	691a      	ldr	r2, [r3, #16]
 8001f7a:	68fb      	ldr	r3, [r7, #12]
 8001f7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f7e:	b2d2      	uxtb	r2, r2
 8001f80:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001f82:	68fb      	ldr	r3, [r7, #12]
 8001f84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f86:	1c5a      	adds	r2, r3, #1
 8001f88:	68fb      	ldr	r3, [r7, #12]
 8001f8a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001f8c:	68fb      	ldr	r3, [r7, #12]
 8001f8e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001f90:	3b01      	subs	r3, #1
 8001f92:	b29a      	uxth	r2, r3
 8001f94:	68fb      	ldr	r3, [r7, #12]
 8001f96:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001f98:	68fb      	ldr	r3, [r7, #12]
 8001f9a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001f9c:	b29b      	uxth	r3, r3
 8001f9e:	3b01      	subs	r3, #1
 8001fa0:	b29a      	uxth	r2, r3
 8001fa2:	68fb      	ldr	r3, [r7, #12]
 8001fa4:	855a      	strh	r2, [r3, #42]	; 0x2a
 8001fa6:	e117      	b.n	80021d8 <HAL_I2C_Master_Receive+0x430>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8001fa8:	68fb      	ldr	r3, [r7, #12]
 8001faa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001fac:	2b02      	cmp	r3, #2
 8001fae:	d14e      	bne.n	800204e <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8001fb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fb2:	9300      	str	r3, [sp, #0]
 8001fb4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001fb6:	2200      	movs	r2, #0
 8001fb8:	4906      	ldr	r1, [pc, #24]	; (8001fd4 <HAL_I2C_Master_Receive+0x22c>)
 8001fba:	68f8      	ldr	r0, [r7, #12]
 8001fbc:	f000 fb84 	bl	80026c8 <I2C_WaitOnFlagUntilTimeout>
 8001fc0:	4603      	mov	r3, r0
 8001fc2:	2b00      	cmp	r3, #0
 8001fc4:	d008      	beq.n	8001fd8 <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 8001fc6:	2301      	movs	r3, #1
 8001fc8:	e11a      	b.n	8002200 <HAL_I2C_Master_Receive+0x458>
 8001fca:	bf00      	nop
 8001fcc:	00100002 	.word	0x00100002
 8001fd0:	ffff0000 	.word	0xffff0000
 8001fd4:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001fd8:	68fb      	ldr	r3, [r7, #12]
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	681a      	ldr	r2, [r3, #0]
 8001fde:	68fb      	ldr	r3, [r7, #12]
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001fe6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001fe8:	68fb      	ldr	r3, [r7, #12]
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	691a      	ldr	r2, [r3, #16]
 8001fee:	68fb      	ldr	r3, [r7, #12]
 8001ff0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ff2:	b2d2      	uxtb	r2, r2
 8001ff4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001ff6:	68fb      	ldr	r3, [r7, #12]
 8001ff8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ffa:	1c5a      	adds	r2, r3, #1
 8001ffc:	68fb      	ldr	r3, [r7, #12]
 8001ffe:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002000:	68fb      	ldr	r3, [r7, #12]
 8002002:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002004:	3b01      	subs	r3, #1
 8002006:	b29a      	uxth	r2, r3
 8002008:	68fb      	ldr	r3, [r7, #12]
 800200a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800200c:	68fb      	ldr	r3, [r7, #12]
 800200e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002010:	b29b      	uxth	r3, r3
 8002012:	3b01      	subs	r3, #1
 8002014:	b29a      	uxth	r2, r3
 8002016:	68fb      	ldr	r3, [r7, #12]
 8002018:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800201a:	68fb      	ldr	r3, [r7, #12]
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	691a      	ldr	r2, [r3, #16]
 8002020:	68fb      	ldr	r3, [r7, #12]
 8002022:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002024:	b2d2      	uxtb	r2, r2
 8002026:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002028:	68fb      	ldr	r3, [r7, #12]
 800202a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800202c:	1c5a      	adds	r2, r3, #1
 800202e:	68fb      	ldr	r3, [r7, #12]
 8002030:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002032:	68fb      	ldr	r3, [r7, #12]
 8002034:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002036:	3b01      	subs	r3, #1
 8002038:	b29a      	uxth	r2, r3
 800203a:	68fb      	ldr	r3, [r7, #12]
 800203c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800203e:	68fb      	ldr	r3, [r7, #12]
 8002040:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002042:	b29b      	uxth	r3, r3
 8002044:	3b01      	subs	r3, #1
 8002046:	b29a      	uxth	r2, r3
 8002048:	68fb      	ldr	r3, [r7, #12]
 800204a:	855a      	strh	r2, [r3, #42]	; 0x2a
 800204c:	e0c4      	b.n	80021d8 <HAL_I2C_Master_Receive+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800204e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002050:	9300      	str	r3, [sp, #0]
 8002052:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002054:	2200      	movs	r2, #0
 8002056:	496c      	ldr	r1, [pc, #432]	; (8002208 <HAL_I2C_Master_Receive+0x460>)
 8002058:	68f8      	ldr	r0, [r7, #12]
 800205a:	f000 fb35 	bl	80026c8 <I2C_WaitOnFlagUntilTimeout>
 800205e:	4603      	mov	r3, r0
 8002060:	2b00      	cmp	r3, #0
 8002062:	d001      	beq.n	8002068 <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 8002064:	2301      	movs	r3, #1
 8002066:	e0cb      	b.n	8002200 <HAL_I2C_Master_Receive+0x458>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002068:	68fb      	ldr	r3, [r7, #12]
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	681a      	ldr	r2, [r3, #0]
 800206e:	68fb      	ldr	r3, [r7, #12]
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002076:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002078:	68fb      	ldr	r3, [r7, #12]
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	691a      	ldr	r2, [r3, #16]
 800207e:	68fb      	ldr	r3, [r7, #12]
 8002080:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002082:	b2d2      	uxtb	r2, r2
 8002084:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002086:	68fb      	ldr	r3, [r7, #12]
 8002088:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800208a:	1c5a      	adds	r2, r3, #1
 800208c:	68fb      	ldr	r3, [r7, #12]
 800208e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002090:	68fb      	ldr	r3, [r7, #12]
 8002092:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002094:	3b01      	subs	r3, #1
 8002096:	b29a      	uxth	r2, r3
 8002098:	68fb      	ldr	r3, [r7, #12]
 800209a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800209c:	68fb      	ldr	r3, [r7, #12]
 800209e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80020a0:	b29b      	uxth	r3, r3
 80020a2:	3b01      	subs	r3, #1
 80020a4:	b29a      	uxth	r2, r3
 80020a6:	68fb      	ldr	r3, [r7, #12]
 80020a8:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80020aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020ac:	9300      	str	r3, [sp, #0]
 80020ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80020b0:	2200      	movs	r2, #0
 80020b2:	4955      	ldr	r1, [pc, #340]	; (8002208 <HAL_I2C_Master_Receive+0x460>)
 80020b4:	68f8      	ldr	r0, [r7, #12]
 80020b6:	f000 fb07 	bl	80026c8 <I2C_WaitOnFlagUntilTimeout>
 80020ba:	4603      	mov	r3, r0
 80020bc:	2b00      	cmp	r3, #0
 80020be:	d001      	beq.n	80020c4 <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 80020c0:	2301      	movs	r3, #1
 80020c2:	e09d      	b.n	8002200 <HAL_I2C_Master_Receive+0x458>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80020c4:	68fb      	ldr	r3, [r7, #12]
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	681a      	ldr	r2, [r3, #0]
 80020ca:	68fb      	ldr	r3, [r7, #12]
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80020d2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80020d4:	68fb      	ldr	r3, [r7, #12]
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	691a      	ldr	r2, [r3, #16]
 80020da:	68fb      	ldr	r3, [r7, #12]
 80020dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020de:	b2d2      	uxtb	r2, r2
 80020e0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80020e2:	68fb      	ldr	r3, [r7, #12]
 80020e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020e6:	1c5a      	adds	r2, r3, #1
 80020e8:	68fb      	ldr	r3, [r7, #12]
 80020ea:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80020ec:	68fb      	ldr	r3, [r7, #12]
 80020ee:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80020f0:	3b01      	subs	r3, #1
 80020f2:	b29a      	uxth	r2, r3
 80020f4:	68fb      	ldr	r3, [r7, #12]
 80020f6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80020f8:	68fb      	ldr	r3, [r7, #12]
 80020fa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80020fc:	b29b      	uxth	r3, r3
 80020fe:	3b01      	subs	r3, #1
 8002100:	b29a      	uxth	r2, r3
 8002102:	68fb      	ldr	r3, [r7, #12]
 8002104:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002106:	68fb      	ldr	r3, [r7, #12]
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	691a      	ldr	r2, [r3, #16]
 800210c:	68fb      	ldr	r3, [r7, #12]
 800210e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002110:	b2d2      	uxtb	r2, r2
 8002112:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002114:	68fb      	ldr	r3, [r7, #12]
 8002116:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002118:	1c5a      	adds	r2, r3, #1
 800211a:	68fb      	ldr	r3, [r7, #12]
 800211c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800211e:	68fb      	ldr	r3, [r7, #12]
 8002120:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002122:	3b01      	subs	r3, #1
 8002124:	b29a      	uxth	r2, r3
 8002126:	68fb      	ldr	r3, [r7, #12]
 8002128:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800212a:	68fb      	ldr	r3, [r7, #12]
 800212c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800212e:	b29b      	uxth	r3, r3
 8002130:	3b01      	subs	r3, #1
 8002132:	b29a      	uxth	r2, r3
 8002134:	68fb      	ldr	r3, [r7, #12]
 8002136:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002138:	e04e      	b.n	80021d8 <HAL_I2C_Master_Receive+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800213a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800213c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800213e:	68f8      	ldr	r0, [r7, #12]
 8002140:	f000 fc6c 	bl	8002a1c <I2C_WaitOnRXNEFlagUntilTimeout>
 8002144:	4603      	mov	r3, r0
 8002146:	2b00      	cmp	r3, #0
 8002148:	d001      	beq.n	800214e <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 800214a:	2301      	movs	r3, #1
 800214c:	e058      	b.n	8002200 <HAL_I2C_Master_Receive+0x458>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800214e:	68fb      	ldr	r3, [r7, #12]
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	691a      	ldr	r2, [r3, #16]
 8002154:	68fb      	ldr	r3, [r7, #12]
 8002156:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002158:	b2d2      	uxtb	r2, r2
 800215a:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800215c:	68fb      	ldr	r3, [r7, #12]
 800215e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002160:	1c5a      	adds	r2, r3, #1
 8002162:	68fb      	ldr	r3, [r7, #12]
 8002164:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8002166:	68fb      	ldr	r3, [r7, #12]
 8002168:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800216a:	3b01      	subs	r3, #1
 800216c:	b29a      	uxth	r2, r3
 800216e:	68fb      	ldr	r3, [r7, #12]
 8002170:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8002172:	68fb      	ldr	r3, [r7, #12]
 8002174:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002176:	b29b      	uxth	r3, r3
 8002178:	3b01      	subs	r3, #1
 800217a:	b29a      	uxth	r2, r3
 800217c:	68fb      	ldr	r3, [r7, #12]
 800217e:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8002180:	68fb      	ldr	r3, [r7, #12]
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	695b      	ldr	r3, [r3, #20]
 8002186:	f003 0304 	and.w	r3, r3, #4
 800218a:	2b04      	cmp	r3, #4
 800218c:	d124      	bne.n	80021d8 <HAL_I2C_Master_Receive+0x430>
        {

          if (hi2c->XferSize == 3U)
 800218e:	68fb      	ldr	r3, [r7, #12]
 8002190:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002192:	2b03      	cmp	r3, #3
 8002194:	d107      	bne.n	80021a6 <HAL_I2C_Master_Receive+0x3fe>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002196:	68fb      	ldr	r3, [r7, #12]
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	681a      	ldr	r2, [r3, #0]
 800219c:	68fb      	ldr	r3, [r7, #12]
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80021a4:	601a      	str	r2, [r3, #0]
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80021a6:	68fb      	ldr	r3, [r7, #12]
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	691a      	ldr	r2, [r3, #16]
 80021ac:	68fb      	ldr	r3, [r7, #12]
 80021ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021b0:	b2d2      	uxtb	r2, r2
 80021b2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80021b4:	68fb      	ldr	r3, [r7, #12]
 80021b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021b8:	1c5a      	adds	r2, r3, #1
 80021ba:	68fb      	ldr	r3, [r7, #12]
 80021bc:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80021be:	68fb      	ldr	r3, [r7, #12]
 80021c0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80021c2:	3b01      	subs	r3, #1
 80021c4:	b29a      	uxth	r2, r3
 80021c6:	68fb      	ldr	r3, [r7, #12]
 80021c8:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80021ca:	68fb      	ldr	r3, [r7, #12]
 80021cc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80021ce:	b29b      	uxth	r3, r3
 80021d0:	3b01      	subs	r3, #1
 80021d2:	b29a      	uxth	r2, r3
 80021d4:	68fb      	ldr	r3, [r7, #12]
 80021d6:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80021d8:	68fb      	ldr	r3, [r7, #12]
 80021da:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80021dc:	2b00      	cmp	r3, #0
 80021de:	f47f aeb6 	bne.w	8001f4e <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 80021e2:	68fb      	ldr	r3, [r7, #12]
 80021e4:	2220      	movs	r2, #32
 80021e6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80021ea:	68fb      	ldr	r3, [r7, #12]
 80021ec:	2200      	movs	r2, #0
 80021ee:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80021f2:	68fb      	ldr	r3, [r7, #12]
 80021f4:	2200      	movs	r2, #0
 80021f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80021fa:	2300      	movs	r3, #0
 80021fc:	e000      	b.n	8002200 <HAL_I2C_Master_Receive+0x458>
  }
  else
  {
    return HAL_BUSY;
 80021fe:	2302      	movs	r3, #2
  }
}
 8002200:	4618      	mov	r0, r3
 8002202:	3728      	adds	r7, #40	; 0x28
 8002204:	46bd      	mov	sp, r7
 8002206:	bd80      	pop	{r7, pc}
 8002208:	00010004 	.word	0x00010004

0800220c <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800220c:	b580      	push	{r7, lr}
 800220e:	b088      	sub	sp, #32
 8002210:	af02      	add	r7, sp, #8
 8002212:	60f8      	str	r0, [r7, #12]
 8002214:	4608      	mov	r0, r1
 8002216:	4611      	mov	r1, r2
 8002218:	461a      	mov	r2, r3
 800221a:	4603      	mov	r3, r0
 800221c:	817b      	strh	r3, [r7, #10]
 800221e:	460b      	mov	r3, r1
 8002220:	813b      	strh	r3, [r7, #8]
 8002222:	4613      	mov	r3, r2
 8002224:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002226:	f7ff f9af 	bl	8001588 <HAL_GetTick>
 800222a:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800222c:	68fb      	ldr	r3, [r7, #12]
 800222e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002232:	b2db      	uxtb	r3, r3
 8002234:	2b20      	cmp	r3, #32
 8002236:	f040 80d9 	bne.w	80023ec <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800223a:	697b      	ldr	r3, [r7, #20]
 800223c:	9300      	str	r3, [sp, #0]
 800223e:	2319      	movs	r3, #25
 8002240:	2201      	movs	r2, #1
 8002242:	496d      	ldr	r1, [pc, #436]	; (80023f8 <HAL_I2C_Mem_Write+0x1ec>)
 8002244:	68f8      	ldr	r0, [r7, #12]
 8002246:	f000 fa3f 	bl	80026c8 <I2C_WaitOnFlagUntilTimeout>
 800224a:	4603      	mov	r3, r0
 800224c:	2b00      	cmp	r3, #0
 800224e:	d001      	beq.n	8002254 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8002250:	2302      	movs	r3, #2
 8002252:	e0cc      	b.n	80023ee <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002254:	68fb      	ldr	r3, [r7, #12]
 8002256:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800225a:	2b01      	cmp	r3, #1
 800225c:	d101      	bne.n	8002262 <HAL_I2C_Mem_Write+0x56>
 800225e:	2302      	movs	r3, #2
 8002260:	e0c5      	b.n	80023ee <HAL_I2C_Mem_Write+0x1e2>
 8002262:	68fb      	ldr	r3, [r7, #12]
 8002264:	2201      	movs	r2, #1
 8002266:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800226a:	68fb      	ldr	r3, [r7, #12]
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	f003 0301 	and.w	r3, r3, #1
 8002274:	2b01      	cmp	r3, #1
 8002276:	d007      	beq.n	8002288 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002278:	68fb      	ldr	r3, [r7, #12]
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	681a      	ldr	r2, [r3, #0]
 800227e:	68fb      	ldr	r3, [r7, #12]
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	f042 0201 	orr.w	r2, r2, #1
 8002286:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002288:	68fb      	ldr	r3, [r7, #12]
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	681a      	ldr	r2, [r3, #0]
 800228e:	68fb      	ldr	r3, [r7, #12]
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002296:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002298:	68fb      	ldr	r3, [r7, #12]
 800229a:	2221      	movs	r2, #33	; 0x21
 800229c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80022a0:	68fb      	ldr	r3, [r7, #12]
 80022a2:	2240      	movs	r2, #64	; 0x40
 80022a4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80022a8:	68fb      	ldr	r3, [r7, #12]
 80022aa:	2200      	movs	r2, #0
 80022ac:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80022ae:	68fb      	ldr	r3, [r7, #12]
 80022b0:	6a3a      	ldr	r2, [r7, #32]
 80022b2:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80022b4:	68fb      	ldr	r3, [r7, #12]
 80022b6:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80022b8:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80022ba:	68fb      	ldr	r3, [r7, #12]
 80022bc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80022be:	b29a      	uxth	r2, r3
 80022c0:	68fb      	ldr	r3, [r7, #12]
 80022c2:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80022c4:	68fb      	ldr	r3, [r7, #12]
 80022c6:	4a4d      	ldr	r2, [pc, #308]	; (80023fc <HAL_I2C_Mem_Write+0x1f0>)
 80022c8:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80022ca:	88f8      	ldrh	r0, [r7, #6]
 80022cc:	893a      	ldrh	r2, [r7, #8]
 80022ce:	8979      	ldrh	r1, [r7, #10]
 80022d0:	697b      	ldr	r3, [r7, #20]
 80022d2:	9301      	str	r3, [sp, #4]
 80022d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80022d6:	9300      	str	r3, [sp, #0]
 80022d8:	4603      	mov	r3, r0
 80022da:	68f8      	ldr	r0, [r7, #12]
 80022dc:	f000 f95e 	bl	800259c <I2C_RequestMemoryWrite>
 80022e0:	4603      	mov	r3, r0
 80022e2:	2b00      	cmp	r3, #0
 80022e4:	d052      	beq.n	800238c <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 80022e6:	2301      	movs	r3, #1
 80022e8:	e081      	b.n	80023ee <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80022ea:	697a      	ldr	r2, [r7, #20]
 80022ec:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80022ee:	68f8      	ldr	r0, [r7, #12]
 80022f0:	f000 fb04 	bl	80028fc <I2C_WaitOnTXEFlagUntilTimeout>
 80022f4:	4603      	mov	r3, r0
 80022f6:	2b00      	cmp	r3, #0
 80022f8:	d00d      	beq.n	8002316 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80022fa:	68fb      	ldr	r3, [r7, #12]
 80022fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022fe:	2b04      	cmp	r3, #4
 8002300:	d107      	bne.n	8002312 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002302:	68fb      	ldr	r3, [r7, #12]
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	681a      	ldr	r2, [r3, #0]
 8002308:	68fb      	ldr	r3, [r7, #12]
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002310:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002312:	2301      	movs	r3, #1
 8002314:	e06b      	b.n	80023ee <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002316:	68fb      	ldr	r3, [r7, #12]
 8002318:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800231a:	781a      	ldrb	r2, [r3, #0]
 800231c:	68fb      	ldr	r3, [r7, #12]
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002322:	68fb      	ldr	r3, [r7, #12]
 8002324:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002326:	1c5a      	adds	r2, r3, #1
 8002328:	68fb      	ldr	r3, [r7, #12]
 800232a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 800232c:	68fb      	ldr	r3, [r7, #12]
 800232e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002330:	3b01      	subs	r3, #1
 8002332:	b29a      	uxth	r2, r3
 8002334:	68fb      	ldr	r3, [r7, #12]
 8002336:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8002338:	68fb      	ldr	r3, [r7, #12]
 800233a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800233c:	b29b      	uxth	r3, r3
 800233e:	3b01      	subs	r3, #1
 8002340:	b29a      	uxth	r2, r3
 8002342:	68fb      	ldr	r3, [r7, #12]
 8002344:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8002346:	68fb      	ldr	r3, [r7, #12]
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	695b      	ldr	r3, [r3, #20]
 800234c:	f003 0304 	and.w	r3, r3, #4
 8002350:	2b04      	cmp	r3, #4
 8002352:	d11b      	bne.n	800238c <HAL_I2C_Mem_Write+0x180>
 8002354:	68fb      	ldr	r3, [r7, #12]
 8002356:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002358:	2b00      	cmp	r3, #0
 800235a:	d017      	beq.n	800238c <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800235c:	68fb      	ldr	r3, [r7, #12]
 800235e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002360:	781a      	ldrb	r2, [r3, #0]
 8002362:	68fb      	ldr	r3, [r7, #12]
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002368:	68fb      	ldr	r3, [r7, #12]
 800236a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800236c:	1c5a      	adds	r2, r3, #1
 800236e:	68fb      	ldr	r3, [r7, #12]
 8002370:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8002372:	68fb      	ldr	r3, [r7, #12]
 8002374:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002376:	3b01      	subs	r3, #1
 8002378:	b29a      	uxth	r2, r3
 800237a:	68fb      	ldr	r3, [r7, #12]
 800237c:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800237e:	68fb      	ldr	r3, [r7, #12]
 8002380:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002382:	b29b      	uxth	r3, r3
 8002384:	3b01      	subs	r3, #1
 8002386:	b29a      	uxth	r2, r3
 8002388:	68fb      	ldr	r3, [r7, #12]
 800238a:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 800238c:	68fb      	ldr	r3, [r7, #12]
 800238e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002390:	2b00      	cmp	r3, #0
 8002392:	d1aa      	bne.n	80022ea <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002394:	697a      	ldr	r2, [r7, #20]
 8002396:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002398:	68f8      	ldr	r0, [r7, #12]
 800239a:	f000 faf7 	bl	800298c <I2C_WaitOnBTFFlagUntilTimeout>
 800239e:	4603      	mov	r3, r0
 80023a0:	2b00      	cmp	r3, #0
 80023a2:	d00d      	beq.n	80023c0 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80023a4:	68fb      	ldr	r3, [r7, #12]
 80023a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023a8:	2b04      	cmp	r3, #4
 80023aa:	d107      	bne.n	80023bc <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80023ac:	68fb      	ldr	r3, [r7, #12]
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	681a      	ldr	r2, [r3, #0]
 80023b2:	68fb      	ldr	r3, [r7, #12]
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80023ba:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80023bc:	2301      	movs	r3, #1
 80023be:	e016      	b.n	80023ee <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80023c0:	68fb      	ldr	r3, [r7, #12]
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	681a      	ldr	r2, [r3, #0]
 80023c6:	68fb      	ldr	r3, [r7, #12]
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80023ce:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80023d0:	68fb      	ldr	r3, [r7, #12]
 80023d2:	2220      	movs	r2, #32
 80023d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80023d8:	68fb      	ldr	r3, [r7, #12]
 80023da:	2200      	movs	r2, #0
 80023dc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80023e0:	68fb      	ldr	r3, [r7, #12]
 80023e2:	2200      	movs	r2, #0
 80023e4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80023e8:	2300      	movs	r3, #0
 80023ea:	e000      	b.n	80023ee <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 80023ec:	2302      	movs	r3, #2
  }
}
 80023ee:	4618      	mov	r0, r3
 80023f0:	3718      	adds	r7, #24
 80023f2:	46bd      	mov	sp, r7
 80023f4:	bd80      	pop	{r7, pc}
 80023f6:	bf00      	nop
 80023f8:	00100002 	.word	0x00100002
 80023fc:	ffff0000 	.word	0xffff0000

08002400 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8002400:	b580      	push	{r7, lr}
 8002402:	b088      	sub	sp, #32
 8002404:	af02      	add	r7, sp, #8
 8002406:	60f8      	str	r0, [r7, #12]
 8002408:	607a      	str	r2, [r7, #4]
 800240a:	603b      	str	r3, [r7, #0]
 800240c:	460b      	mov	r3, r1
 800240e:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8002410:	68fb      	ldr	r3, [r7, #12]
 8002412:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002414:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002416:	68fb      	ldr	r3, [r7, #12]
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	681a      	ldr	r2, [r3, #0]
 800241c:	68fb      	ldr	r3, [r7, #12]
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002424:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8002426:	697b      	ldr	r3, [r7, #20]
 8002428:	2b08      	cmp	r3, #8
 800242a:	d006      	beq.n	800243a <I2C_MasterRequestRead+0x3a>
 800242c:	697b      	ldr	r3, [r7, #20]
 800242e:	2b01      	cmp	r3, #1
 8002430:	d003      	beq.n	800243a <I2C_MasterRequestRead+0x3a>
 8002432:	697b      	ldr	r3, [r7, #20]
 8002434:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002438:	d108      	bne.n	800244c <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800243a:	68fb      	ldr	r3, [r7, #12]
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	681a      	ldr	r2, [r3, #0]
 8002440:	68fb      	ldr	r3, [r7, #12]
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002448:	601a      	str	r2, [r3, #0]
 800244a:	e00b      	b.n	8002464 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 800244c:	68fb      	ldr	r3, [r7, #12]
 800244e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002450:	2b11      	cmp	r3, #17
 8002452:	d107      	bne.n	8002464 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002454:	68fb      	ldr	r3, [r7, #12]
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	681a      	ldr	r2, [r3, #0]
 800245a:	68fb      	ldr	r3, [r7, #12]
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002462:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002464:	683b      	ldr	r3, [r7, #0]
 8002466:	9300      	str	r3, [sp, #0]
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	2200      	movs	r2, #0
 800246c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002470:	68f8      	ldr	r0, [r7, #12]
 8002472:	f000 f929 	bl	80026c8 <I2C_WaitOnFlagUntilTimeout>
 8002476:	4603      	mov	r3, r0
 8002478:	2b00      	cmp	r3, #0
 800247a:	d00d      	beq.n	8002498 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800247c:	68fb      	ldr	r3, [r7, #12]
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002486:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800248a:	d103      	bne.n	8002494 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800248c:	68fb      	ldr	r3, [r7, #12]
 800248e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002492:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8002494:	2303      	movs	r3, #3
 8002496:	e079      	b.n	800258c <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002498:	68fb      	ldr	r3, [r7, #12]
 800249a:	691b      	ldr	r3, [r3, #16]
 800249c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80024a0:	d108      	bne.n	80024b4 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80024a2:	897b      	ldrh	r3, [r7, #10]
 80024a4:	b2db      	uxtb	r3, r3
 80024a6:	f043 0301 	orr.w	r3, r3, #1
 80024aa:	b2da      	uxtb	r2, r3
 80024ac:	68fb      	ldr	r3, [r7, #12]
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	611a      	str	r2, [r3, #16]
 80024b2:	e05f      	b.n	8002574 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80024b4:	897b      	ldrh	r3, [r7, #10]
 80024b6:	11db      	asrs	r3, r3, #7
 80024b8:	b2db      	uxtb	r3, r3
 80024ba:	f003 0306 	and.w	r3, r3, #6
 80024be:	b2db      	uxtb	r3, r3
 80024c0:	f063 030f 	orn	r3, r3, #15
 80024c4:	b2da      	uxtb	r2, r3
 80024c6:	68fb      	ldr	r3, [r7, #12]
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80024cc:	683b      	ldr	r3, [r7, #0]
 80024ce:	687a      	ldr	r2, [r7, #4]
 80024d0:	4930      	ldr	r1, [pc, #192]	; (8002594 <I2C_MasterRequestRead+0x194>)
 80024d2:	68f8      	ldr	r0, [r7, #12]
 80024d4:	f000 f972 	bl	80027bc <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80024d8:	4603      	mov	r3, r0
 80024da:	2b00      	cmp	r3, #0
 80024dc:	d001      	beq.n	80024e2 <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 80024de:	2301      	movs	r3, #1
 80024e0:	e054      	b.n	800258c <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80024e2:	897b      	ldrh	r3, [r7, #10]
 80024e4:	b2da      	uxtb	r2, r3
 80024e6:	68fb      	ldr	r3, [r7, #12]
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80024ec:	683b      	ldr	r3, [r7, #0]
 80024ee:	687a      	ldr	r2, [r7, #4]
 80024f0:	4929      	ldr	r1, [pc, #164]	; (8002598 <I2C_MasterRequestRead+0x198>)
 80024f2:	68f8      	ldr	r0, [r7, #12]
 80024f4:	f000 f962 	bl	80027bc <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80024f8:	4603      	mov	r3, r0
 80024fa:	2b00      	cmp	r3, #0
 80024fc:	d001      	beq.n	8002502 <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 80024fe:	2301      	movs	r3, #1
 8002500:	e044      	b.n	800258c <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002502:	2300      	movs	r3, #0
 8002504:	613b      	str	r3, [r7, #16]
 8002506:	68fb      	ldr	r3, [r7, #12]
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	695b      	ldr	r3, [r3, #20]
 800250c:	613b      	str	r3, [r7, #16]
 800250e:	68fb      	ldr	r3, [r7, #12]
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	699b      	ldr	r3, [r3, #24]
 8002514:	613b      	str	r3, [r7, #16]
 8002516:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002518:	68fb      	ldr	r3, [r7, #12]
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	681a      	ldr	r2, [r3, #0]
 800251e:	68fb      	ldr	r3, [r7, #12]
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002526:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002528:	683b      	ldr	r3, [r7, #0]
 800252a:	9300      	str	r3, [sp, #0]
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	2200      	movs	r2, #0
 8002530:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002534:	68f8      	ldr	r0, [r7, #12]
 8002536:	f000 f8c7 	bl	80026c8 <I2C_WaitOnFlagUntilTimeout>
 800253a:	4603      	mov	r3, r0
 800253c:	2b00      	cmp	r3, #0
 800253e:	d00d      	beq.n	800255c <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002540:	68fb      	ldr	r3, [r7, #12]
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800254a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800254e:	d103      	bne.n	8002558 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002550:	68fb      	ldr	r3, [r7, #12]
 8002552:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002556:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 8002558:	2303      	movs	r3, #3
 800255a:	e017      	b.n	800258c <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 800255c:	897b      	ldrh	r3, [r7, #10]
 800255e:	11db      	asrs	r3, r3, #7
 8002560:	b2db      	uxtb	r3, r3
 8002562:	f003 0306 	and.w	r3, r3, #6
 8002566:	b2db      	uxtb	r3, r3
 8002568:	f063 030e 	orn	r3, r3, #14
 800256c:	b2da      	uxtb	r2, r3
 800256e:	68fb      	ldr	r3, [r7, #12]
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002574:	683b      	ldr	r3, [r7, #0]
 8002576:	687a      	ldr	r2, [r7, #4]
 8002578:	4907      	ldr	r1, [pc, #28]	; (8002598 <I2C_MasterRequestRead+0x198>)
 800257a:	68f8      	ldr	r0, [r7, #12]
 800257c:	f000 f91e 	bl	80027bc <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002580:	4603      	mov	r3, r0
 8002582:	2b00      	cmp	r3, #0
 8002584:	d001      	beq.n	800258a <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 8002586:	2301      	movs	r3, #1
 8002588:	e000      	b.n	800258c <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 800258a:	2300      	movs	r3, #0
}
 800258c:	4618      	mov	r0, r3
 800258e:	3718      	adds	r7, #24
 8002590:	46bd      	mov	sp, r7
 8002592:	bd80      	pop	{r7, pc}
 8002594:	00010008 	.word	0x00010008
 8002598:	00010002 	.word	0x00010002

0800259c <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 800259c:	b580      	push	{r7, lr}
 800259e:	b088      	sub	sp, #32
 80025a0:	af02      	add	r7, sp, #8
 80025a2:	60f8      	str	r0, [r7, #12]
 80025a4:	4608      	mov	r0, r1
 80025a6:	4611      	mov	r1, r2
 80025a8:	461a      	mov	r2, r3
 80025aa:	4603      	mov	r3, r0
 80025ac:	817b      	strh	r3, [r7, #10]
 80025ae:	460b      	mov	r3, r1
 80025b0:	813b      	strh	r3, [r7, #8]
 80025b2:	4613      	mov	r3, r2
 80025b4:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80025b6:	68fb      	ldr	r3, [r7, #12]
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	681a      	ldr	r2, [r3, #0]
 80025bc:	68fb      	ldr	r3, [r7, #12]
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80025c4:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80025c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025c8:	9300      	str	r3, [sp, #0]
 80025ca:	6a3b      	ldr	r3, [r7, #32]
 80025cc:	2200      	movs	r2, #0
 80025ce:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80025d2:	68f8      	ldr	r0, [r7, #12]
 80025d4:	f000 f878 	bl	80026c8 <I2C_WaitOnFlagUntilTimeout>
 80025d8:	4603      	mov	r3, r0
 80025da:	2b00      	cmp	r3, #0
 80025dc:	d00d      	beq.n	80025fa <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80025de:	68fb      	ldr	r3, [r7, #12]
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80025e8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80025ec:	d103      	bne.n	80025f6 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80025ee:	68fb      	ldr	r3, [r7, #12]
 80025f0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80025f4:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80025f6:	2303      	movs	r3, #3
 80025f8:	e05f      	b.n	80026ba <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80025fa:	897b      	ldrh	r3, [r7, #10]
 80025fc:	b2db      	uxtb	r3, r3
 80025fe:	461a      	mov	r2, r3
 8002600:	68fb      	ldr	r3, [r7, #12]
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002608:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800260a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800260c:	6a3a      	ldr	r2, [r7, #32]
 800260e:	492d      	ldr	r1, [pc, #180]	; (80026c4 <I2C_RequestMemoryWrite+0x128>)
 8002610:	68f8      	ldr	r0, [r7, #12]
 8002612:	f000 f8d3 	bl	80027bc <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002616:	4603      	mov	r3, r0
 8002618:	2b00      	cmp	r3, #0
 800261a:	d001      	beq.n	8002620 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 800261c:	2301      	movs	r3, #1
 800261e:	e04c      	b.n	80026ba <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002620:	2300      	movs	r3, #0
 8002622:	617b      	str	r3, [r7, #20]
 8002624:	68fb      	ldr	r3, [r7, #12]
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	695b      	ldr	r3, [r3, #20]
 800262a:	617b      	str	r3, [r7, #20]
 800262c:	68fb      	ldr	r3, [r7, #12]
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	699b      	ldr	r3, [r3, #24]
 8002632:	617b      	str	r3, [r7, #20]
 8002634:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002636:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002638:	6a39      	ldr	r1, [r7, #32]
 800263a:	68f8      	ldr	r0, [r7, #12]
 800263c:	f000 f95e 	bl	80028fc <I2C_WaitOnTXEFlagUntilTimeout>
 8002640:	4603      	mov	r3, r0
 8002642:	2b00      	cmp	r3, #0
 8002644:	d00d      	beq.n	8002662 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002646:	68fb      	ldr	r3, [r7, #12]
 8002648:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800264a:	2b04      	cmp	r3, #4
 800264c:	d107      	bne.n	800265e <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800264e:	68fb      	ldr	r3, [r7, #12]
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	681a      	ldr	r2, [r3, #0]
 8002654:	68fb      	ldr	r3, [r7, #12]
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800265c:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800265e:	2301      	movs	r3, #1
 8002660:	e02b      	b.n	80026ba <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002662:	88fb      	ldrh	r3, [r7, #6]
 8002664:	2b01      	cmp	r3, #1
 8002666:	d105      	bne.n	8002674 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002668:	893b      	ldrh	r3, [r7, #8]
 800266a:	b2da      	uxtb	r2, r3
 800266c:	68fb      	ldr	r3, [r7, #12]
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	611a      	str	r2, [r3, #16]
 8002672:	e021      	b.n	80026b8 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8002674:	893b      	ldrh	r3, [r7, #8]
 8002676:	0a1b      	lsrs	r3, r3, #8
 8002678:	b29b      	uxth	r3, r3
 800267a:	b2da      	uxtb	r2, r3
 800267c:	68fb      	ldr	r3, [r7, #12]
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002682:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002684:	6a39      	ldr	r1, [r7, #32]
 8002686:	68f8      	ldr	r0, [r7, #12]
 8002688:	f000 f938 	bl	80028fc <I2C_WaitOnTXEFlagUntilTimeout>
 800268c:	4603      	mov	r3, r0
 800268e:	2b00      	cmp	r3, #0
 8002690:	d00d      	beq.n	80026ae <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002692:	68fb      	ldr	r3, [r7, #12]
 8002694:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002696:	2b04      	cmp	r3, #4
 8002698:	d107      	bne.n	80026aa <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800269a:	68fb      	ldr	r3, [r7, #12]
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	681a      	ldr	r2, [r3, #0]
 80026a0:	68fb      	ldr	r3, [r7, #12]
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80026a8:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80026aa:	2301      	movs	r3, #1
 80026ac:	e005      	b.n	80026ba <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80026ae:	893b      	ldrh	r3, [r7, #8]
 80026b0:	b2da      	uxtb	r2, r3
 80026b2:	68fb      	ldr	r3, [r7, #12]
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 80026b8:	2300      	movs	r3, #0
}
 80026ba:	4618      	mov	r0, r3
 80026bc:	3718      	adds	r7, #24
 80026be:	46bd      	mov	sp, r7
 80026c0:	bd80      	pop	{r7, pc}
 80026c2:	bf00      	nop
 80026c4:	00010002 	.word	0x00010002

080026c8 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80026c8:	b580      	push	{r7, lr}
 80026ca:	b084      	sub	sp, #16
 80026cc:	af00      	add	r7, sp, #0
 80026ce:	60f8      	str	r0, [r7, #12]
 80026d0:	60b9      	str	r1, [r7, #8]
 80026d2:	603b      	str	r3, [r7, #0]
 80026d4:	4613      	mov	r3, r2
 80026d6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80026d8:	e048      	b.n	800276c <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80026da:	683b      	ldr	r3, [r7, #0]
 80026dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80026e0:	d044      	beq.n	800276c <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80026e2:	f7fe ff51 	bl	8001588 <HAL_GetTick>
 80026e6:	4602      	mov	r2, r0
 80026e8:	69bb      	ldr	r3, [r7, #24]
 80026ea:	1ad3      	subs	r3, r2, r3
 80026ec:	683a      	ldr	r2, [r7, #0]
 80026ee:	429a      	cmp	r2, r3
 80026f0:	d302      	bcc.n	80026f8 <I2C_WaitOnFlagUntilTimeout+0x30>
 80026f2:	683b      	ldr	r3, [r7, #0]
 80026f4:	2b00      	cmp	r3, #0
 80026f6:	d139      	bne.n	800276c <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80026f8:	68bb      	ldr	r3, [r7, #8]
 80026fa:	0c1b      	lsrs	r3, r3, #16
 80026fc:	b2db      	uxtb	r3, r3
 80026fe:	2b01      	cmp	r3, #1
 8002700:	d10d      	bne.n	800271e <I2C_WaitOnFlagUntilTimeout+0x56>
 8002702:	68fb      	ldr	r3, [r7, #12]
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	695b      	ldr	r3, [r3, #20]
 8002708:	43da      	mvns	r2, r3
 800270a:	68bb      	ldr	r3, [r7, #8]
 800270c:	4013      	ands	r3, r2
 800270e:	b29b      	uxth	r3, r3
 8002710:	2b00      	cmp	r3, #0
 8002712:	bf0c      	ite	eq
 8002714:	2301      	moveq	r3, #1
 8002716:	2300      	movne	r3, #0
 8002718:	b2db      	uxtb	r3, r3
 800271a:	461a      	mov	r2, r3
 800271c:	e00c      	b.n	8002738 <I2C_WaitOnFlagUntilTimeout+0x70>
 800271e:	68fb      	ldr	r3, [r7, #12]
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	699b      	ldr	r3, [r3, #24]
 8002724:	43da      	mvns	r2, r3
 8002726:	68bb      	ldr	r3, [r7, #8]
 8002728:	4013      	ands	r3, r2
 800272a:	b29b      	uxth	r3, r3
 800272c:	2b00      	cmp	r3, #0
 800272e:	bf0c      	ite	eq
 8002730:	2301      	moveq	r3, #1
 8002732:	2300      	movne	r3, #0
 8002734:	b2db      	uxtb	r3, r3
 8002736:	461a      	mov	r2, r3
 8002738:	79fb      	ldrb	r3, [r7, #7]
 800273a:	429a      	cmp	r2, r3
 800273c:	d116      	bne.n	800276c <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 800273e:	68fb      	ldr	r3, [r7, #12]
 8002740:	2200      	movs	r2, #0
 8002742:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8002744:	68fb      	ldr	r3, [r7, #12]
 8002746:	2220      	movs	r2, #32
 8002748:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 800274c:	68fb      	ldr	r3, [r7, #12]
 800274e:	2200      	movs	r2, #0
 8002750:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8002754:	68fb      	ldr	r3, [r7, #12]
 8002756:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002758:	f043 0220 	orr.w	r2, r3, #32
 800275c:	68fb      	ldr	r3, [r7, #12]
 800275e:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002760:	68fb      	ldr	r3, [r7, #12]
 8002762:	2200      	movs	r2, #0
 8002764:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8002768:	2301      	movs	r3, #1
 800276a:	e023      	b.n	80027b4 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800276c:	68bb      	ldr	r3, [r7, #8]
 800276e:	0c1b      	lsrs	r3, r3, #16
 8002770:	b2db      	uxtb	r3, r3
 8002772:	2b01      	cmp	r3, #1
 8002774:	d10d      	bne.n	8002792 <I2C_WaitOnFlagUntilTimeout+0xca>
 8002776:	68fb      	ldr	r3, [r7, #12]
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	695b      	ldr	r3, [r3, #20]
 800277c:	43da      	mvns	r2, r3
 800277e:	68bb      	ldr	r3, [r7, #8]
 8002780:	4013      	ands	r3, r2
 8002782:	b29b      	uxth	r3, r3
 8002784:	2b00      	cmp	r3, #0
 8002786:	bf0c      	ite	eq
 8002788:	2301      	moveq	r3, #1
 800278a:	2300      	movne	r3, #0
 800278c:	b2db      	uxtb	r3, r3
 800278e:	461a      	mov	r2, r3
 8002790:	e00c      	b.n	80027ac <I2C_WaitOnFlagUntilTimeout+0xe4>
 8002792:	68fb      	ldr	r3, [r7, #12]
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	699b      	ldr	r3, [r3, #24]
 8002798:	43da      	mvns	r2, r3
 800279a:	68bb      	ldr	r3, [r7, #8]
 800279c:	4013      	ands	r3, r2
 800279e:	b29b      	uxth	r3, r3
 80027a0:	2b00      	cmp	r3, #0
 80027a2:	bf0c      	ite	eq
 80027a4:	2301      	moveq	r3, #1
 80027a6:	2300      	movne	r3, #0
 80027a8:	b2db      	uxtb	r3, r3
 80027aa:	461a      	mov	r2, r3
 80027ac:	79fb      	ldrb	r3, [r7, #7]
 80027ae:	429a      	cmp	r2, r3
 80027b0:	d093      	beq.n	80026da <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80027b2:	2300      	movs	r3, #0
}
 80027b4:	4618      	mov	r0, r3
 80027b6:	3710      	adds	r7, #16
 80027b8:	46bd      	mov	sp, r7
 80027ba:	bd80      	pop	{r7, pc}

080027bc <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80027bc:	b580      	push	{r7, lr}
 80027be:	b084      	sub	sp, #16
 80027c0:	af00      	add	r7, sp, #0
 80027c2:	60f8      	str	r0, [r7, #12]
 80027c4:	60b9      	str	r1, [r7, #8]
 80027c6:	607a      	str	r2, [r7, #4]
 80027c8:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80027ca:	e071      	b.n	80028b0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80027cc:	68fb      	ldr	r3, [r7, #12]
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	695b      	ldr	r3, [r3, #20]
 80027d2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80027d6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80027da:	d123      	bne.n	8002824 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80027dc:	68fb      	ldr	r3, [r7, #12]
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	681a      	ldr	r2, [r3, #0]
 80027e2:	68fb      	ldr	r3, [r7, #12]
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80027ea:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80027ec:	68fb      	ldr	r3, [r7, #12]
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80027f4:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80027f6:	68fb      	ldr	r3, [r7, #12]
 80027f8:	2200      	movs	r2, #0
 80027fa:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80027fc:	68fb      	ldr	r3, [r7, #12]
 80027fe:	2220      	movs	r2, #32
 8002800:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002804:	68fb      	ldr	r3, [r7, #12]
 8002806:	2200      	movs	r2, #0
 8002808:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800280c:	68fb      	ldr	r3, [r7, #12]
 800280e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002810:	f043 0204 	orr.w	r2, r3, #4
 8002814:	68fb      	ldr	r3, [r7, #12]
 8002816:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002818:	68fb      	ldr	r3, [r7, #12]
 800281a:	2200      	movs	r2, #0
 800281c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8002820:	2301      	movs	r3, #1
 8002822:	e067      	b.n	80028f4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	f1b3 3fff 	cmp.w	r3, #4294967295
 800282a:	d041      	beq.n	80028b0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800282c:	f7fe feac 	bl	8001588 <HAL_GetTick>
 8002830:	4602      	mov	r2, r0
 8002832:	683b      	ldr	r3, [r7, #0]
 8002834:	1ad3      	subs	r3, r2, r3
 8002836:	687a      	ldr	r2, [r7, #4]
 8002838:	429a      	cmp	r2, r3
 800283a:	d302      	bcc.n	8002842 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	2b00      	cmp	r3, #0
 8002840:	d136      	bne.n	80028b0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8002842:	68bb      	ldr	r3, [r7, #8]
 8002844:	0c1b      	lsrs	r3, r3, #16
 8002846:	b2db      	uxtb	r3, r3
 8002848:	2b01      	cmp	r3, #1
 800284a:	d10c      	bne.n	8002866 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 800284c:	68fb      	ldr	r3, [r7, #12]
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	695b      	ldr	r3, [r3, #20]
 8002852:	43da      	mvns	r2, r3
 8002854:	68bb      	ldr	r3, [r7, #8]
 8002856:	4013      	ands	r3, r2
 8002858:	b29b      	uxth	r3, r3
 800285a:	2b00      	cmp	r3, #0
 800285c:	bf14      	ite	ne
 800285e:	2301      	movne	r3, #1
 8002860:	2300      	moveq	r3, #0
 8002862:	b2db      	uxtb	r3, r3
 8002864:	e00b      	b.n	800287e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8002866:	68fb      	ldr	r3, [r7, #12]
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	699b      	ldr	r3, [r3, #24]
 800286c:	43da      	mvns	r2, r3
 800286e:	68bb      	ldr	r3, [r7, #8]
 8002870:	4013      	ands	r3, r2
 8002872:	b29b      	uxth	r3, r3
 8002874:	2b00      	cmp	r3, #0
 8002876:	bf14      	ite	ne
 8002878:	2301      	movne	r3, #1
 800287a:	2300      	moveq	r3, #0
 800287c:	b2db      	uxtb	r3, r3
 800287e:	2b00      	cmp	r3, #0
 8002880:	d016      	beq.n	80028b0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8002882:	68fb      	ldr	r3, [r7, #12]
 8002884:	2200      	movs	r2, #0
 8002886:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002888:	68fb      	ldr	r3, [r7, #12]
 800288a:	2220      	movs	r2, #32
 800288c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002890:	68fb      	ldr	r3, [r7, #12]
 8002892:	2200      	movs	r2, #0
 8002894:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002898:	68fb      	ldr	r3, [r7, #12]
 800289a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800289c:	f043 0220 	orr.w	r2, r3, #32
 80028a0:	68fb      	ldr	r3, [r7, #12]
 80028a2:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80028a4:	68fb      	ldr	r3, [r7, #12]
 80028a6:	2200      	movs	r2, #0
 80028a8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 80028ac:	2301      	movs	r3, #1
 80028ae:	e021      	b.n	80028f4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80028b0:	68bb      	ldr	r3, [r7, #8]
 80028b2:	0c1b      	lsrs	r3, r3, #16
 80028b4:	b2db      	uxtb	r3, r3
 80028b6:	2b01      	cmp	r3, #1
 80028b8:	d10c      	bne.n	80028d4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 80028ba:	68fb      	ldr	r3, [r7, #12]
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	695b      	ldr	r3, [r3, #20]
 80028c0:	43da      	mvns	r2, r3
 80028c2:	68bb      	ldr	r3, [r7, #8]
 80028c4:	4013      	ands	r3, r2
 80028c6:	b29b      	uxth	r3, r3
 80028c8:	2b00      	cmp	r3, #0
 80028ca:	bf14      	ite	ne
 80028cc:	2301      	movne	r3, #1
 80028ce:	2300      	moveq	r3, #0
 80028d0:	b2db      	uxtb	r3, r3
 80028d2:	e00b      	b.n	80028ec <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 80028d4:	68fb      	ldr	r3, [r7, #12]
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	699b      	ldr	r3, [r3, #24]
 80028da:	43da      	mvns	r2, r3
 80028dc:	68bb      	ldr	r3, [r7, #8]
 80028de:	4013      	ands	r3, r2
 80028e0:	b29b      	uxth	r3, r3
 80028e2:	2b00      	cmp	r3, #0
 80028e4:	bf14      	ite	ne
 80028e6:	2301      	movne	r3, #1
 80028e8:	2300      	moveq	r3, #0
 80028ea:	b2db      	uxtb	r3, r3
 80028ec:	2b00      	cmp	r3, #0
 80028ee:	f47f af6d 	bne.w	80027cc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 80028f2:	2300      	movs	r3, #0
}
 80028f4:	4618      	mov	r0, r3
 80028f6:	3710      	adds	r7, #16
 80028f8:	46bd      	mov	sp, r7
 80028fa:	bd80      	pop	{r7, pc}

080028fc <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80028fc:	b580      	push	{r7, lr}
 80028fe:	b084      	sub	sp, #16
 8002900:	af00      	add	r7, sp, #0
 8002902:	60f8      	str	r0, [r7, #12]
 8002904:	60b9      	str	r1, [r7, #8]
 8002906:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002908:	e034      	b.n	8002974 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800290a:	68f8      	ldr	r0, [r7, #12]
 800290c:	f000 f8e3 	bl	8002ad6 <I2C_IsAcknowledgeFailed>
 8002910:	4603      	mov	r3, r0
 8002912:	2b00      	cmp	r3, #0
 8002914:	d001      	beq.n	800291a <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002916:	2301      	movs	r3, #1
 8002918:	e034      	b.n	8002984 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800291a:	68bb      	ldr	r3, [r7, #8]
 800291c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002920:	d028      	beq.n	8002974 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002922:	f7fe fe31 	bl	8001588 <HAL_GetTick>
 8002926:	4602      	mov	r2, r0
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	1ad3      	subs	r3, r2, r3
 800292c:	68ba      	ldr	r2, [r7, #8]
 800292e:	429a      	cmp	r2, r3
 8002930:	d302      	bcc.n	8002938 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8002932:	68bb      	ldr	r3, [r7, #8]
 8002934:	2b00      	cmp	r3, #0
 8002936:	d11d      	bne.n	8002974 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8002938:	68fb      	ldr	r3, [r7, #12]
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	695b      	ldr	r3, [r3, #20]
 800293e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002942:	2b80      	cmp	r3, #128	; 0x80
 8002944:	d016      	beq.n	8002974 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8002946:	68fb      	ldr	r3, [r7, #12]
 8002948:	2200      	movs	r2, #0
 800294a:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800294c:	68fb      	ldr	r3, [r7, #12]
 800294e:	2220      	movs	r2, #32
 8002950:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002954:	68fb      	ldr	r3, [r7, #12]
 8002956:	2200      	movs	r2, #0
 8002958:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800295c:	68fb      	ldr	r3, [r7, #12]
 800295e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002960:	f043 0220 	orr.w	r2, r3, #32
 8002964:	68fb      	ldr	r3, [r7, #12]
 8002966:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002968:	68fb      	ldr	r3, [r7, #12]
 800296a:	2200      	movs	r2, #0
 800296c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8002970:	2301      	movs	r3, #1
 8002972:	e007      	b.n	8002984 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002974:	68fb      	ldr	r3, [r7, #12]
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	695b      	ldr	r3, [r3, #20]
 800297a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800297e:	2b80      	cmp	r3, #128	; 0x80
 8002980:	d1c3      	bne.n	800290a <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8002982:	2300      	movs	r3, #0
}
 8002984:	4618      	mov	r0, r3
 8002986:	3710      	adds	r7, #16
 8002988:	46bd      	mov	sp, r7
 800298a:	bd80      	pop	{r7, pc}

0800298c <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800298c:	b580      	push	{r7, lr}
 800298e:	b084      	sub	sp, #16
 8002990:	af00      	add	r7, sp, #0
 8002992:	60f8      	str	r0, [r7, #12]
 8002994:	60b9      	str	r1, [r7, #8]
 8002996:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002998:	e034      	b.n	8002a04 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800299a:	68f8      	ldr	r0, [r7, #12]
 800299c:	f000 f89b 	bl	8002ad6 <I2C_IsAcknowledgeFailed>
 80029a0:	4603      	mov	r3, r0
 80029a2:	2b00      	cmp	r3, #0
 80029a4:	d001      	beq.n	80029aa <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80029a6:	2301      	movs	r3, #1
 80029a8:	e034      	b.n	8002a14 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80029aa:	68bb      	ldr	r3, [r7, #8]
 80029ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 80029b0:	d028      	beq.n	8002a04 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80029b2:	f7fe fde9 	bl	8001588 <HAL_GetTick>
 80029b6:	4602      	mov	r2, r0
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	1ad3      	subs	r3, r2, r3
 80029bc:	68ba      	ldr	r2, [r7, #8]
 80029be:	429a      	cmp	r2, r3
 80029c0:	d302      	bcc.n	80029c8 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80029c2:	68bb      	ldr	r3, [r7, #8]
 80029c4:	2b00      	cmp	r3, #0
 80029c6:	d11d      	bne.n	8002a04 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 80029c8:	68fb      	ldr	r3, [r7, #12]
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	695b      	ldr	r3, [r3, #20]
 80029ce:	f003 0304 	and.w	r3, r3, #4
 80029d2:	2b04      	cmp	r3, #4
 80029d4:	d016      	beq.n	8002a04 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80029d6:	68fb      	ldr	r3, [r7, #12]
 80029d8:	2200      	movs	r2, #0
 80029da:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80029dc:	68fb      	ldr	r3, [r7, #12]
 80029de:	2220      	movs	r2, #32
 80029e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80029e4:	68fb      	ldr	r3, [r7, #12]
 80029e6:	2200      	movs	r2, #0
 80029e8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80029ec:	68fb      	ldr	r3, [r7, #12]
 80029ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029f0:	f043 0220 	orr.w	r2, r3, #32
 80029f4:	68fb      	ldr	r3, [r7, #12]
 80029f6:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80029f8:	68fb      	ldr	r3, [r7, #12]
 80029fa:	2200      	movs	r2, #0
 80029fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8002a00:	2301      	movs	r3, #1
 8002a02:	e007      	b.n	8002a14 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002a04:	68fb      	ldr	r3, [r7, #12]
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	695b      	ldr	r3, [r3, #20]
 8002a0a:	f003 0304 	and.w	r3, r3, #4
 8002a0e:	2b04      	cmp	r3, #4
 8002a10:	d1c3      	bne.n	800299a <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8002a12:	2300      	movs	r3, #0
}
 8002a14:	4618      	mov	r0, r3
 8002a16:	3710      	adds	r7, #16
 8002a18:	46bd      	mov	sp, r7
 8002a1a:	bd80      	pop	{r7, pc}

08002a1c <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002a1c:	b580      	push	{r7, lr}
 8002a1e:	b084      	sub	sp, #16
 8002a20:	af00      	add	r7, sp, #0
 8002a22:	60f8      	str	r0, [r7, #12]
 8002a24:	60b9      	str	r1, [r7, #8]
 8002a26:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8002a28:	e049      	b.n	8002abe <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8002a2a:	68fb      	ldr	r3, [r7, #12]
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	695b      	ldr	r3, [r3, #20]
 8002a30:	f003 0310 	and.w	r3, r3, #16
 8002a34:	2b10      	cmp	r3, #16
 8002a36:	d119      	bne.n	8002a6c <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002a38:	68fb      	ldr	r3, [r7, #12]
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	f06f 0210 	mvn.w	r2, #16
 8002a40:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002a42:	68fb      	ldr	r3, [r7, #12]
 8002a44:	2200      	movs	r2, #0
 8002a46:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002a48:	68fb      	ldr	r3, [r7, #12]
 8002a4a:	2220      	movs	r2, #32
 8002a4c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002a50:	68fb      	ldr	r3, [r7, #12]
 8002a52:	2200      	movs	r2, #0
 8002a54:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8002a58:	68fb      	ldr	r3, [r7, #12]
 8002a5a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002a5c:	68fb      	ldr	r3, [r7, #12]
 8002a5e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002a60:	68fb      	ldr	r3, [r7, #12]
 8002a62:	2200      	movs	r2, #0
 8002a64:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8002a68:	2301      	movs	r3, #1
 8002a6a:	e030      	b.n	8002ace <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002a6c:	f7fe fd8c 	bl	8001588 <HAL_GetTick>
 8002a70:	4602      	mov	r2, r0
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	1ad3      	subs	r3, r2, r3
 8002a76:	68ba      	ldr	r2, [r7, #8]
 8002a78:	429a      	cmp	r2, r3
 8002a7a:	d302      	bcc.n	8002a82 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8002a7c:	68bb      	ldr	r3, [r7, #8]
 8002a7e:	2b00      	cmp	r3, #0
 8002a80:	d11d      	bne.n	8002abe <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8002a82:	68fb      	ldr	r3, [r7, #12]
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	695b      	ldr	r3, [r3, #20]
 8002a88:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002a8c:	2b40      	cmp	r3, #64	; 0x40
 8002a8e:	d016      	beq.n	8002abe <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002a90:	68fb      	ldr	r3, [r7, #12]
 8002a92:	2200      	movs	r2, #0
 8002a94:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002a96:	68fb      	ldr	r3, [r7, #12]
 8002a98:	2220      	movs	r2, #32
 8002a9a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002a9e:	68fb      	ldr	r3, [r7, #12]
 8002aa0:	2200      	movs	r2, #0
 8002aa2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002aa6:	68fb      	ldr	r3, [r7, #12]
 8002aa8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002aaa:	f043 0220 	orr.w	r2, r3, #32
 8002aae:	68fb      	ldr	r3, [r7, #12]
 8002ab0:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002ab2:	68fb      	ldr	r3, [r7, #12]
 8002ab4:	2200      	movs	r2, #0
 8002ab6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002aba:	2301      	movs	r3, #1
 8002abc:	e007      	b.n	8002ace <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8002abe:	68fb      	ldr	r3, [r7, #12]
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	695b      	ldr	r3, [r3, #20]
 8002ac4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002ac8:	2b40      	cmp	r3, #64	; 0x40
 8002aca:	d1ae      	bne.n	8002a2a <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002acc:	2300      	movs	r3, #0
}
 8002ace:	4618      	mov	r0, r3
 8002ad0:	3710      	adds	r7, #16
 8002ad2:	46bd      	mov	sp, r7
 8002ad4:	bd80      	pop	{r7, pc}

08002ad6 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8002ad6:	b480      	push	{r7}
 8002ad8:	b083      	sub	sp, #12
 8002ada:	af00      	add	r7, sp, #0
 8002adc:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	695b      	ldr	r3, [r3, #20]
 8002ae4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002ae8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002aec:	d11b      	bne.n	8002b26 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002af6:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	2200      	movs	r2, #0
 8002afc:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	2220      	movs	r2, #32
 8002b02:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	2200      	movs	r2, #0
 8002b0a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b12:	f043 0204 	orr.w	r2, r3, #4
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	2200      	movs	r2, #0
 8002b1e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8002b22:	2301      	movs	r3, #1
 8002b24:	e000      	b.n	8002b28 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8002b26:	2300      	movs	r3, #0
}
 8002b28:	4618      	mov	r0, r3
 8002b2a:	370c      	adds	r7, #12
 8002b2c:	46bd      	mov	sp, r7
 8002b2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b32:	4770      	bx	lr

08002b34 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002b34:	b580      	push	{r7, lr}
 8002b36:	b086      	sub	sp, #24
 8002b38:	af00      	add	r7, sp, #0
 8002b3a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	2b00      	cmp	r3, #0
 8002b40:	d101      	bne.n	8002b46 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002b42:	2301      	movs	r3, #1
 8002b44:	e267      	b.n	8003016 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	f003 0301 	and.w	r3, r3, #1
 8002b4e:	2b00      	cmp	r3, #0
 8002b50:	d075      	beq.n	8002c3e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002b52:	4b88      	ldr	r3, [pc, #544]	; (8002d74 <HAL_RCC_OscConfig+0x240>)
 8002b54:	689b      	ldr	r3, [r3, #8]
 8002b56:	f003 030c 	and.w	r3, r3, #12
 8002b5a:	2b04      	cmp	r3, #4
 8002b5c:	d00c      	beq.n	8002b78 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002b5e:	4b85      	ldr	r3, [pc, #532]	; (8002d74 <HAL_RCC_OscConfig+0x240>)
 8002b60:	689b      	ldr	r3, [r3, #8]
 8002b62:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002b66:	2b08      	cmp	r3, #8
 8002b68:	d112      	bne.n	8002b90 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002b6a:	4b82      	ldr	r3, [pc, #520]	; (8002d74 <HAL_RCC_OscConfig+0x240>)
 8002b6c:	685b      	ldr	r3, [r3, #4]
 8002b6e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002b72:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002b76:	d10b      	bne.n	8002b90 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002b78:	4b7e      	ldr	r3, [pc, #504]	; (8002d74 <HAL_RCC_OscConfig+0x240>)
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b80:	2b00      	cmp	r3, #0
 8002b82:	d05b      	beq.n	8002c3c <HAL_RCC_OscConfig+0x108>
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	685b      	ldr	r3, [r3, #4]
 8002b88:	2b00      	cmp	r3, #0
 8002b8a:	d157      	bne.n	8002c3c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002b8c:	2301      	movs	r3, #1
 8002b8e:	e242      	b.n	8003016 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	685b      	ldr	r3, [r3, #4]
 8002b94:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002b98:	d106      	bne.n	8002ba8 <HAL_RCC_OscConfig+0x74>
 8002b9a:	4b76      	ldr	r3, [pc, #472]	; (8002d74 <HAL_RCC_OscConfig+0x240>)
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	4a75      	ldr	r2, [pc, #468]	; (8002d74 <HAL_RCC_OscConfig+0x240>)
 8002ba0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002ba4:	6013      	str	r3, [r2, #0]
 8002ba6:	e01d      	b.n	8002be4 <HAL_RCC_OscConfig+0xb0>
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	685b      	ldr	r3, [r3, #4]
 8002bac:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002bb0:	d10c      	bne.n	8002bcc <HAL_RCC_OscConfig+0x98>
 8002bb2:	4b70      	ldr	r3, [pc, #448]	; (8002d74 <HAL_RCC_OscConfig+0x240>)
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	4a6f      	ldr	r2, [pc, #444]	; (8002d74 <HAL_RCC_OscConfig+0x240>)
 8002bb8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002bbc:	6013      	str	r3, [r2, #0]
 8002bbe:	4b6d      	ldr	r3, [pc, #436]	; (8002d74 <HAL_RCC_OscConfig+0x240>)
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	4a6c      	ldr	r2, [pc, #432]	; (8002d74 <HAL_RCC_OscConfig+0x240>)
 8002bc4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002bc8:	6013      	str	r3, [r2, #0]
 8002bca:	e00b      	b.n	8002be4 <HAL_RCC_OscConfig+0xb0>
 8002bcc:	4b69      	ldr	r3, [pc, #420]	; (8002d74 <HAL_RCC_OscConfig+0x240>)
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	4a68      	ldr	r2, [pc, #416]	; (8002d74 <HAL_RCC_OscConfig+0x240>)
 8002bd2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002bd6:	6013      	str	r3, [r2, #0]
 8002bd8:	4b66      	ldr	r3, [pc, #408]	; (8002d74 <HAL_RCC_OscConfig+0x240>)
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	4a65      	ldr	r2, [pc, #404]	; (8002d74 <HAL_RCC_OscConfig+0x240>)
 8002bde:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002be2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	685b      	ldr	r3, [r3, #4]
 8002be8:	2b00      	cmp	r3, #0
 8002bea:	d013      	beq.n	8002c14 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002bec:	f7fe fccc 	bl	8001588 <HAL_GetTick>
 8002bf0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002bf2:	e008      	b.n	8002c06 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002bf4:	f7fe fcc8 	bl	8001588 <HAL_GetTick>
 8002bf8:	4602      	mov	r2, r0
 8002bfa:	693b      	ldr	r3, [r7, #16]
 8002bfc:	1ad3      	subs	r3, r2, r3
 8002bfe:	2b64      	cmp	r3, #100	; 0x64
 8002c00:	d901      	bls.n	8002c06 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002c02:	2303      	movs	r3, #3
 8002c04:	e207      	b.n	8003016 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002c06:	4b5b      	ldr	r3, [pc, #364]	; (8002d74 <HAL_RCC_OscConfig+0x240>)
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c0e:	2b00      	cmp	r3, #0
 8002c10:	d0f0      	beq.n	8002bf4 <HAL_RCC_OscConfig+0xc0>
 8002c12:	e014      	b.n	8002c3e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c14:	f7fe fcb8 	bl	8001588 <HAL_GetTick>
 8002c18:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002c1a:	e008      	b.n	8002c2e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002c1c:	f7fe fcb4 	bl	8001588 <HAL_GetTick>
 8002c20:	4602      	mov	r2, r0
 8002c22:	693b      	ldr	r3, [r7, #16]
 8002c24:	1ad3      	subs	r3, r2, r3
 8002c26:	2b64      	cmp	r3, #100	; 0x64
 8002c28:	d901      	bls.n	8002c2e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002c2a:	2303      	movs	r3, #3
 8002c2c:	e1f3      	b.n	8003016 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002c2e:	4b51      	ldr	r3, [pc, #324]	; (8002d74 <HAL_RCC_OscConfig+0x240>)
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c36:	2b00      	cmp	r3, #0
 8002c38:	d1f0      	bne.n	8002c1c <HAL_RCC_OscConfig+0xe8>
 8002c3a:	e000      	b.n	8002c3e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002c3c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	f003 0302 	and.w	r3, r3, #2
 8002c46:	2b00      	cmp	r3, #0
 8002c48:	d063      	beq.n	8002d12 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002c4a:	4b4a      	ldr	r3, [pc, #296]	; (8002d74 <HAL_RCC_OscConfig+0x240>)
 8002c4c:	689b      	ldr	r3, [r3, #8]
 8002c4e:	f003 030c 	and.w	r3, r3, #12
 8002c52:	2b00      	cmp	r3, #0
 8002c54:	d00b      	beq.n	8002c6e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002c56:	4b47      	ldr	r3, [pc, #284]	; (8002d74 <HAL_RCC_OscConfig+0x240>)
 8002c58:	689b      	ldr	r3, [r3, #8]
 8002c5a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002c5e:	2b08      	cmp	r3, #8
 8002c60:	d11c      	bne.n	8002c9c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002c62:	4b44      	ldr	r3, [pc, #272]	; (8002d74 <HAL_RCC_OscConfig+0x240>)
 8002c64:	685b      	ldr	r3, [r3, #4]
 8002c66:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002c6a:	2b00      	cmp	r3, #0
 8002c6c:	d116      	bne.n	8002c9c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002c6e:	4b41      	ldr	r3, [pc, #260]	; (8002d74 <HAL_RCC_OscConfig+0x240>)
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	f003 0302 	and.w	r3, r3, #2
 8002c76:	2b00      	cmp	r3, #0
 8002c78:	d005      	beq.n	8002c86 <HAL_RCC_OscConfig+0x152>
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	68db      	ldr	r3, [r3, #12]
 8002c7e:	2b01      	cmp	r3, #1
 8002c80:	d001      	beq.n	8002c86 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002c82:	2301      	movs	r3, #1
 8002c84:	e1c7      	b.n	8003016 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002c86:	4b3b      	ldr	r3, [pc, #236]	; (8002d74 <HAL_RCC_OscConfig+0x240>)
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	691b      	ldr	r3, [r3, #16]
 8002c92:	00db      	lsls	r3, r3, #3
 8002c94:	4937      	ldr	r1, [pc, #220]	; (8002d74 <HAL_RCC_OscConfig+0x240>)
 8002c96:	4313      	orrs	r3, r2
 8002c98:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002c9a:	e03a      	b.n	8002d12 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	68db      	ldr	r3, [r3, #12]
 8002ca0:	2b00      	cmp	r3, #0
 8002ca2:	d020      	beq.n	8002ce6 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002ca4:	4b34      	ldr	r3, [pc, #208]	; (8002d78 <HAL_RCC_OscConfig+0x244>)
 8002ca6:	2201      	movs	r2, #1
 8002ca8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002caa:	f7fe fc6d 	bl	8001588 <HAL_GetTick>
 8002cae:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002cb0:	e008      	b.n	8002cc4 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002cb2:	f7fe fc69 	bl	8001588 <HAL_GetTick>
 8002cb6:	4602      	mov	r2, r0
 8002cb8:	693b      	ldr	r3, [r7, #16]
 8002cba:	1ad3      	subs	r3, r2, r3
 8002cbc:	2b02      	cmp	r3, #2
 8002cbe:	d901      	bls.n	8002cc4 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002cc0:	2303      	movs	r3, #3
 8002cc2:	e1a8      	b.n	8003016 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002cc4:	4b2b      	ldr	r3, [pc, #172]	; (8002d74 <HAL_RCC_OscConfig+0x240>)
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	f003 0302 	and.w	r3, r3, #2
 8002ccc:	2b00      	cmp	r3, #0
 8002cce:	d0f0      	beq.n	8002cb2 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002cd0:	4b28      	ldr	r3, [pc, #160]	; (8002d74 <HAL_RCC_OscConfig+0x240>)
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	691b      	ldr	r3, [r3, #16]
 8002cdc:	00db      	lsls	r3, r3, #3
 8002cde:	4925      	ldr	r1, [pc, #148]	; (8002d74 <HAL_RCC_OscConfig+0x240>)
 8002ce0:	4313      	orrs	r3, r2
 8002ce2:	600b      	str	r3, [r1, #0]
 8002ce4:	e015      	b.n	8002d12 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002ce6:	4b24      	ldr	r3, [pc, #144]	; (8002d78 <HAL_RCC_OscConfig+0x244>)
 8002ce8:	2200      	movs	r2, #0
 8002cea:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002cec:	f7fe fc4c 	bl	8001588 <HAL_GetTick>
 8002cf0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002cf2:	e008      	b.n	8002d06 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002cf4:	f7fe fc48 	bl	8001588 <HAL_GetTick>
 8002cf8:	4602      	mov	r2, r0
 8002cfa:	693b      	ldr	r3, [r7, #16]
 8002cfc:	1ad3      	subs	r3, r2, r3
 8002cfe:	2b02      	cmp	r3, #2
 8002d00:	d901      	bls.n	8002d06 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002d02:	2303      	movs	r3, #3
 8002d04:	e187      	b.n	8003016 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002d06:	4b1b      	ldr	r3, [pc, #108]	; (8002d74 <HAL_RCC_OscConfig+0x240>)
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	f003 0302 	and.w	r3, r3, #2
 8002d0e:	2b00      	cmp	r3, #0
 8002d10:	d1f0      	bne.n	8002cf4 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	f003 0308 	and.w	r3, r3, #8
 8002d1a:	2b00      	cmp	r3, #0
 8002d1c:	d036      	beq.n	8002d8c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	695b      	ldr	r3, [r3, #20]
 8002d22:	2b00      	cmp	r3, #0
 8002d24:	d016      	beq.n	8002d54 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002d26:	4b15      	ldr	r3, [pc, #84]	; (8002d7c <HAL_RCC_OscConfig+0x248>)
 8002d28:	2201      	movs	r2, #1
 8002d2a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002d2c:	f7fe fc2c 	bl	8001588 <HAL_GetTick>
 8002d30:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002d32:	e008      	b.n	8002d46 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002d34:	f7fe fc28 	bl	8001588 <HAL_GetTick>
 8002d38:	4602      	mov	r2, r0
 8002d3a:	693b      	ldr	r3, [r7, #16]
 8002d3c:	1ad3      	subs	r3, r2, r3
 8002d3e:	2b02      	cmp	r3, #2
 8002d40:	d901      	bls.n	8002d46 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002d42:	2303      	movs	r3, #3
 8002d44:	e167      	b.n	8003016 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002d46:	4b0b      	ldr	r3, [pc, #44]	; (8002d74 <HAL_RCC_OscConfig+0x240>)
 8002d48:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002d4a:	f003 0302 	and.w	r3, r3, #2
 8002d4e:	2b00      	cmp	r3, #0
 8002d50:	d0f0      	beq.n	8002d34 <HAL_RCC_OscConfig+0x200>
 8002d52:	e01b      	b.n	8002d8c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002d54:	4b09      	ldr	r3, [pc, #36]	; (8002d7c <HAL_RCC_OscConfig+0x248>)
 8002d56:	2200      	movs	r2, #0
 8002d58:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002d5a:	f7fe fc15 	bl	8001588 <HAL_GetTick>
 8002d5e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002d60:	e00e      	b.n	8002d80 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002d62:	f7fe fc11 	bl	8001588 <HAL_GetTick>
 8002d66:	4602      	mov	r2, r0
 8002d68:	693b      	ldr	r3, [r7, #16]
 8002d6a:	1ad3      	subs	r3, r2, r3
 8002d6c:	2b02      	cmp	r3, #2
 8002d6e:	d907      	bls.n	8002d80 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002d70:	2303      	movs	r3, #3
 8002d72:	e150      	b.n	8003016 <HAL_RCC_OscConfig+0x4e2>
 8002d74:	40023800 	.word	0x40023800
 8002d78:	42470000 	.word	0x42470000
 8002d7c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002d80:	4b88      	ldr	r3, [pc, #544]	; (8002fa4 <HAL_RCC_OscConfig+0x470>)
 8002d82:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002d84:	f003 0302 	and.w	r3, r3, #2
 8002d88:	2b00      	cmp	r3, #0
 8002d8a:	d1ea      	bne.n	8002d62 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	f003 0304 	and.w	r3, r3, #4
 8002d94:	2b00      	cmp	r3, #0
 8002d96:	f000 8097 	beq.w	8002ec8 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002d9a:	2300      	movs	r3, #0
 8002d9c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002d9e:	4b81      	ldr	r3, [pc, #516]	; (8002fa4 <HAL_RCC_OscConfig+0x470>)
 8002da0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002da2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002da6:	2b00      	cmp	r3, #0
 8002da8:	d10f      	bne.n	8002dca <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002daa:	2300      	movs	r3, #0
 8002dac:	60bb      	str	r3, [r7, #8]
 8002dae:	4b7d      	ldr	r3, [pc, #500]	; (8002fa4 <HAL_RCC_OscConfig+0x470>)
 8002db0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002db2:	4a7c      	ldr	r2, [pc, #496]	; (8002fa4 <HAL_RCC_OscConfig+0x470>)
 8002db4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002db8:	6413      	str	r3, [r2, #64]	; 0x40
 8002dba:	4b7a      	ldr	r3, [pc, #488]	; (8002fa4 <HAL_RCC_OscConfig+0x470>)
 8002dbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dbe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002dc2:	60bb      	str	r3, [r7, #8]
 8002dc4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002dc6:	2301      	movs	r3, #1
 8002dc8:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002dca:	4b77      	ldr	r3, [pc, #476]	; (8002fa8 <HAL_RCC_OscConfig+0x474>)
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002dd2:	2b00      	cmp	r3, #0
 8002dd4:	d118      	bne.n	8002e08 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002dd6:	4b74      	ldr	r3, [pc, #464]	; (8002fa8 <HAL_RCC_OscConfig+0x474>)
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	4a73      	ldr	r2, [pc, #460]	; (8002fa8 <HAL_RCC_OscConfig+0x474>)
 8002ddc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002de0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002de2:	f7fe fbd1 	bl	8001588 <HAL_GetTick>
 8002de6:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002de8:	e008      	b.n	8002dfc <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002dea:	f7fe fbcd 	bl	8001588 <HAL_GetTick>
 8002dee:	4602      	mov	r2, r0
 8002df0:	693b      	ldr	r3, [r7, #16]
 8002df2:	1ad3      	subs	r3, r2, r3
 8002df4:	2b02      	cmp	r3, #2
 8002df6:	d901      	bls.n	8002dfc <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8002df8:	2303      	movs	r3, #3
 8002dfa:	e10c      	b.n	8003016 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002dfc:	4b6a      	ldr	r3, [pc, #424]	; (8002fa8 <HAL_RCC_OscConfig+0x474>)
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e04:	2b00      	cmp	r3, #0
 8002e06:	d0f0      	beq.n	8002dea <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	689b      	ldr	r3, [r3, #8]
 8002e0c:	2b01      	cmp	r3, #1
 8002e0e:	d106      	bne.n	8002e1e <HAL_RCC_OscConfig+0x2ea>
 8002e10:	4b64      	ldr	r3, [pc, #400]	; (8002fa4 <HAL_RCC_OscConfig+0x470>)
 8002e12:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e14:	4a63      	ldr	r2, [pc, #396]	; (8002fa4 <HAL_RCC_OscConfig+0x470>)
 8002e16:	f043 0301 	orr.w	r3, r3, #1
 8002e1a:	6713      	str	r3, [r2, #112]	; 0x70
 8002e1c:	e01c      	b.n	8002e58 <HAL_RCC_OscConfig+0x324>
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	689b      	ldr	r3, [r3, #8]
 8002e22:	2b05      	cmp	r3, #5
 8002e24:	d10c      	bne.n	8002e40 <HAL_RCC_OscConfig+0x30c>
 8002e26:	4b5f      	ldr	r3, [pc, #380]	; (8002fa4 <HAL_RCC_OscConfig+0x470>)
 8002e28:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e2a:	4a5e      	ldr	r2, [pc, #376]	; (8002fa4 <HAL_RCC_OscConfig+0x470>)
 8002e2c:	f043 0304 	orr.w	r3, r3, #4
 8002e30:	6713      	str	r3, [r2, #112]	; 0x70
 8002e32:	4b5c      	ldr	r3, [pc, #368]	; (8002fa4 <HAL_RCC_OscConfig+0x470>)
 8002e34:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e36:	4a5b      	ldr	r2, [pc, #364]	; (8002fa4 <HAL_RCC_OscConfig+0x470>)
 8002e38:	f043 0301 	orr.w	r3, r3, #1
 8002e3c:	6713      	str	r3, [r2, #112]	; 0x70
 8002e3e:	e00b      	b.n	8002e58 <HAL_RCC_OscConfig+0x324>
 8002e40:	4b58      	ldr	r3, [pc, #352]	; (8002fa4 <HAL_RCC_OscConfig+0x470>)
 8002e42:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e44:	4a57      	ldr	r2, [pc, #348]	; (8002fa4 <HAL_RCC_OscConfig+0x470>)
 8002e46:	f023 0301 	bic.w	r3, r3, #1
 8002e4a:	6713      	str	r3, [r2, #112]	; 0x70
 8002e4c:	4b55      	ldr	r3, [pc, #340]	; (8002fa4 <HAL_RCC_OscConfig+0x470>)
 8002e4e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e50:	4a54      	ldr	r2, [pc, #336]	; (8002fa4 <HAL_RCC_OscConfig+0x470>)
 8002e52:	f023 0304 	bic.w	r3, r3, #4
 8002e56:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	689b      	ldr	r3, [r3, #8]
 8002e5c:	2b00      	cmp	r3, #0
 8002e5e:	d015      	beq.n	8002e8c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002e60:	f7fe fb92 	bl	8001588 <HAL_GetTick>
 8002e64:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002e66:	e00a      	b.n	8002e7e <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002e68:	f7fe fb8e 	bl	8001588 <HAL_GetTick>
 8002e6c:	4602      	mov	r2, r0
 8002e6e:	693b      	ldr	r3, [r7, #16]
 8002e70:	1ad3      	subs	r3, r2, r3
 8002e72:	f241 3288 	movw	r2, #5000	; 0x1388
 8002e76:	4293      	cmp	r3, r2
 8002e78:	d901      	bls.n	8002e7e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8002e7a:	2303      	movs	r3, #3
 8002e7c:	e0cb      	b.n	8003016 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002e7e:	4b49      	ldr	r3, [pc, #292]	; (8002fa4 <HAL_RCC_OscConfig+0x470>)
 8002e80:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e82:	f003 0302 	and.w	r3, r3, #2
 8002e86:	2b00      	cmp	r3, #0
 8002e88:	d0ee      	beq.n	8002e68 <HAL_RCC_OscConfig+0x334>
 8002e8a:	e014      	b.n	8002eb6 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002e8c:	f7fe fb7c 	bl	8001588 <HAL_GetTick>
 8002e90:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002e92:	e00a      	b.n	8002eaa <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002e94:	f7fe fb78 	bl	8001588 <HAL_GetTick>
 8002e98:	4602      	mov	r2, r0
 8002e9a:	693b      	ldr	r3, [r7, #16]
 8002e9c:	1ad3      	subs	r3, r2, r3
 8002e9e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002ea2:	4293      	cmp	r3, r2
 8002ea4:	d901      	bls.n	8002eaa <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8002ea6:	2303      	movs	r3, #3
 8002ea8:	e0b5      	b.n	8003016 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002eaa:	4b3e      	ldr	r3, [pc, #248]	; (8002fa4 <HAL_RCC_OscConfig+0x470>)
 8002eac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002eae:	f003 0302 	and.w	r3, r3, #2
 8002eb2:	2b00      	cmp	r3, #0
 8002eb4:	d1ee      	bne.n	8002e94 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002eb6:	7dfb      	ldrb	r3, [r7, #23]
 8002eb8:	2b01      	cmp	r3, #1
 8002eba:	d105      	bne.n	8002ec8 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002ebc:	4b39      	ldr	r3, [pc, #228]	; (8002fa4 <HAL_RCC_OscConfig+0x470>)
 8002ebe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ec0:	4a38      	ldr	r2, [pc, #224]	; (8002fa4 <HAL_RCC_OscConfig+0x470>)
 8002ec2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002ec6:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	699b      	ldr	r3, [r3, #24]
 8002ecc:	2b00      	cmp	r3, #0
 8002ece:	f000 80a1 	beq.w	8003014 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002ed2:	4b34      	ldr	r3, [pc, #208]	; (8002fa4 <HAL_RCC_OscConfig+0x470>)
 8002ed4:	689b      	ldr	r3, [r3, #8]
 8002ed6:	f003 030c 	and.w	r3, r3, #12
 8002eda:	2b08      	cmp	r3, #8
 8002edc:	d05c      	beq.n	8002f98 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	699b      	ldr	r3, [r3, #24]
 8002ee2:	2b02      	cmp	r3, #2
 8002ee4:	d141      	bne.n	8002f6a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002ee6:	4b31      	ldr	r3, [pc, #196]	; (8002fac <HAL_RCC_OscConfig+0x478>)
 8002ee8:	2200      	movs	r2, #0
 8002eea:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002eec:	f7fe fb4c 	bl	8001588 <HAL_GetTick>
 8002ef0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002ef2:	e008      	b.n	8002f06 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002ef4:	f7fe fb48 	bl	8001588 <HAL_GetTick>
 8002ef8:	4602      	mov	r2, r0
 8002efa:	693b      	ldr	r3, [r7, #16]
 8002efc:	1ad3      	subs	r3, r2, r3
 8002efe:	2b02      	cmp	r3, #2
 8002f00:	d901      	bls.n	8002f06 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8002f02:	2303      	movs	r3, #3
 8002f04:	e087      	b.n	8003016 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002f06:	4b27      	ldr	r3, [pc, #156]	; (8002fa4 <HAL_RCC_OscConfig+0x470>)
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002f0e:	2b00      	cmp	r3, #0
 8002f10:	d1f0      	bne.n	8002ef4 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	69da      	ldr	r2, [r3, #28]
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	6a1b      	ldr	r3, [r3, #32]
 8002f1a:	431a      	orrs	r2, r3
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f20:	019b      	lsls	r3, r3, #6
 8002f22:	431a      	orrs	r2, r3
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f28:	085b      	lsrs	r3, r3, #1
 8002f2a:	3b01      	subs	r3, #1
 8002f2c:	041b      	lsls	r3, r3, #16
 8002f2e:	431a      	orrs	r2, r3
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f34:	061b      	lsls	r3, r3, #24
 8002f36:	491b      	ldr	r1, [pc, #108]	; (8002fa4 <HAL_RCC_OscConfig+0x470>)
 8002f38:	4313      	orrs	r3, r2
 8002f3a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002f3c:	4b1b      	ldr	r3, [pc, #108]	; (8002fac <HAL_RCC_OscConfig+0x478>)
 8002f3e:	2201      	movs	r2, #1
 8002f40:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f42:	f7fe fb21 	bl	8001588 <HAL_GetTick>
 8002f46:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002f48:	e008      	b.n	8002f5c <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002f4a:	f7fe fb1d 	bl	8001588 <HAL_GetTick>
 8002f4e:	4602      	mov	r2, r0
 8002f50:	693b      	ldr	r3, [r7, #16]
 8002f52:	1ad3      	subs	r3, r2, r3
 8002f54:	2b02      	cmp	r3, #2
 8002f56:	d901      	bls.n	8002f5c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002f58:	2303      	movs	r3, #3
 8002f5a:	e05c      	b.n	8003016 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002f5c:	4b11      	ldr	r3, [pc, #68]	; (8002fa4 <HAL_RCC_OscConfig+0x470>)
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002f64:	2b00      	cmp	r3, #0
 8002f66:	d0f0      	beq.n	8002f4a <HAL_RCC_OscConfig+0x416>
 8002f68:	e054      	b.n	8003014 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002f6a:	4b10      	ldr	r3, [pc, #64]	; (8002fac <HAL_RCC_OscConfig+0x478>)
 8002f6c:	2200      	movs	r2, #0
 8002f6e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f70:	f7fe fb0a 	bl	8001588 <HAL_GetTick>
 8002f74:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002f76:	e008      	b.n	8002f8a <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002f78:	f7fe fb06 	bl	8001588 <HAL_GetTick>
 8002f7c:	4602      	mov	r2, r0
 8002f7e:	693b      	ldr	r3, [r7, #16]
 8002f80:	1ad3      	subs	r3, r2, r3
 8002f82:	2b02      	cmp	r3, #2
 8002f84:	d901      	bls.n	8002f8a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8002f86:	2303      	movs	r3, #3
 8002f88:	e045      	b.n	8003016 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002f8a:	4b06      	ldr	r3, [pc, #24]	; (8002fa4 <HAL_RCC_OscConfig+0x470>)
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002f92:	2b00      	cmp	r3, #0
 8002f94:	d1f0      	bne.n	8002f78 <HAL_RCC_OscConfig+0x444>
 8002f96:	e03d      	b.n	8003014 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	699b      	ldr	r3, [r3, #24]
 8002f9c:	2b01      	cmp	r3, #1
 8002f9e:	d107      	bne.n	8002fb0 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8002fa0:	2301      	movs	r3, #1
 8002fa2:	e038      	b.n	8003016 <HAL_RCC_OscConfig+0x4e2>
 8002fa4:	40023800 	.word	0x40023800
 8002fa8:	40007000 	.word	0x40007000
 8002fac:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002fb0:	4b1b      	ldr	r3, [pc, #108]	; (8003020 <HAL_RCC_OscConfig+0x4ec>)
 8002fb2:	685b      	ldr	r3, [r3, #4]
 8002fb4:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	699b      	ldr	r3, [r3, #24]
 8002fba:	2b01      	cmp	r3, #1
 8002fbc:	d028      	beq.n	8003010 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002fbe:	68fb      	ldr	r3, [r7, #12]
 8002fc0:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002fc8:	429a      	cmp	r2, r3
 8002fca:	d121      	bne.n	8003010 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002fcc:	68fb      	ldr	r3, [r7, #12]
 8002fce:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002fd6:	429a      	cmp	r2, r3
 8002fd8:	d11a      	bne.n	8003010 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002fda:	68fa      	ldr	r2, [r7, #12]
 8002fdc:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002fe0:	4013      	ands	r3, r2
 8002fe2:	687a      	ldr	r2, [r7, #4]
 8002fe4:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002fe6:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002fe8:	4293      	cmp	r3, r2
 8002fea:	d111      	bne.n	8003010 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002fec:	68fb      	ldr	r3, [r7, #12]
 8002fee:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ff6:	085b      	lsrs	r3, r3, #1
 8002ff8:	3b01      	subs	r3, #1
 8002ffa:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002ffc:	429a      	cmp	r2, r3
 8002ffe:	d107      	bne.n	8003010 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003000:	68fb      	ldr	r3, [r7, #12]
 8003002:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800300a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800300c:	429a      	cmp	r2, r3
 800300e:	d001      	beq.n	8003014 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8003010:	2301      	movs	r3, #1
 8003012:	e000      	b.n	8003016 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8003014:	2300      	movs	r3, #0
}
 8003016:	4618      	mov	r0, r3
 8003018:	3718      	adds	r7, #24
 800301a:	46bd      	mov	sp, r7
 800301c:	bd80      	pop	{r7, pc}
 800301e:	bf00      	nop
 8003020:	40023800 	.word	0x40023800

08003024 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003024:	b580      	push	{r7, lr}
 8003026:	b084      	sub	sp, #16
 8003028:	af00      	add	r7, sp, #0
 800302a:	6078      	str	r0, [r7, #4]
 800302c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	2b00      	cmp	r3, #0
 8003032:	d101      	bne.n	8003038 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003034:	2301      	movs	r3, #1
 8003036:	e0cc      	b.n	80031d2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003038:	4b68      	ldr	r3, [pc, #416]	; (80031dc <HAL_RCC_ClockConfig+0x1b8>)
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	f003 0307 	and.w	r3, r3, #7
 8003040:	683a      	ldr	r2, [r7, #0]
 8003042:	429a      	cmp	r2, r3
 8003044:	d90c      	bls.n	8003060 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003046:	4b65      	ldr	r3, [pc, #404]	; (80031dc <HAL_RCC_ClockConfig+0x1b8>)
 8003048:	683a      	ldr	r2, [r7, #0]
 800304a:	b2d2      	uxtb	r2, r2
 800304c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800304e:	4b63      	ldr	r3, [pc, #396]	; (80031dc <HAL_RCC_ClockConfig+0x1b8>)
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	f003 0307 	and.w	r3, r3, #7
 8003056:	683a      	ldr	r2, [r7, #0]
 8003058:	429a      	cmp	r2, r3
 800305a:	d001      	beq.n	8003060 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800305c:	2301      	movs	r3, #1
 800305e:	e0b8      	b.n	80031d2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	f003 0302 	and.w	r3, r3, #2
 8003068:	2b00      	cmp	r3, #0
 800306a:	d020      	beq.n	80030ae <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	f003 0304 	and.w	r3, r3, #4
 8003074:	2b00      	cmp	r3, #0
 8003076:	d005      	beq.n	8003084 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003078:	4b59      	ldr	r3, [pc, #356]	; (80031e0 <HAL_RCC_ClockConfig+0x1bc>)
 800307a:	689b      	ldr	r3, [r3, #8]
 800307c:	4a58      	ldr	r2, [pc, #352]	; (80031e0 <HAL_RCC_ClockConfig+0x1bc>)
 800307e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003082:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	f003 0308 	and.w	r3, r3, #8
 800308c:	2b00      	cmp	r3, #0
 800308e:	d005      	beq.n	800309c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003090:	4b53      	ldr	r3, [pc, #332]	; (80031e0 <HAL_RCC_ClockConfig+0x1bc>)
 8003092:	689b      	ldr	r3, [r3, #8]
 8003094:	4a52      	ldr	r2, [pc, #328]	; (80031e0 <HAL_RCC_ClockConfig+0x1bc>)
 8003096:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800309a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800309c:	4b50      	ldr	r3, [pc, #320]	; (80031e0 <HAL_RCC_ClockConfig+0x1bc>)
 800309e:	689b      	ldr	r3, [r3, #8]
 80030a0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	689b      	ldr	r3, [r3, #8]
 80030a8:	494d      	ldr	r1, [pc, #308]	; (80031e0 <HAL_RCC_ClockConfig+0x1bc>)
 80030aa:	4313      	orrs	r3, r2
 80030ac:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	f003 0301 	and.w	r3, r3, #1
 80030b6:	2b00      	cmp	r3, #0
 80030b8:	d044      	beq.n	8003144 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	685b      	ldr	r3, [r3, #4]
 80030be:	2b01      	cmp	r3, #1
 80030c0:	d107      	bne.n	80030d2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80030c2:	4b47      	ldr	r3, [pc, #284]	; (80031e0 <HAL_RCC_ClockConfig+0x1bc>)
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80030ca:	2b00      	cmp	r3, #0
 80030cc:	d119      	bne.n	8003102 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80030ce:	2301      	movs	r3, #1
 80030d0:	e07f      	b.n	80031d2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	685b      	ldr	r3, [r3, #4]
 80030d6:	2b02      	cmp	r3, #2
 80030d8:	d003      	beq.n	80030e2 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80030de:	2b03      	cmp	r3, #3
 80030e0:	d107      	bne.n	80030f2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80030e2:	4b3f      	ldr	r3, [pc, #252]	; (80031e0 <HAL_RCC_ClockConfig+0x1bc>)
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80030ea:	2b00      	cmp	r3, #0
 80030ec:	d109      	bne.n	8003102 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80030ee:	2301      	movs	r3, #1
 80030f0:	e06f      	b.n	80031d2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80030f2:	4b3b      	ldr	r3, [pc, #236]	; (80031e0 <HAL_RCC_ClockConfig+0x1bc>)
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	f003 0302 	and.w	r3, r3, #2
 80030fa:	2b00      	cmp	r3, #0
 80030fc:	d101      	bne.n	8003102 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80030fe:	2301      	movs	r3, #1
 8003100:	e067      	b.n	80031d2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003102:	4b37      	ldr	r3, [pc, #220]	; (80031e0 <HAL_RCC_ClockConfig+0x1bc>)
 8003104:	689b      	ldr	r3, [r3, #8]
 8003106:	f023 0203 	bic.w	r2, r3, #3
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	685b      	ldr	r3, [r3, #4]
 800310e:	4934      	ldr	r1, [pc, #208]	; (80031e0 <HAL_RCC_ClockConfig+0x1bc>)
 8003110:	4313      	orrs	r3, r2
 8003112:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003114:	f7fe fa38 	bl	8001588 <HAL_GetTick>
 8003118:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800311a:	e00a      	b.n	8003132 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800311c:	f7fe fa34 	bl	8001588 <HAL_GetTick>
 8003120:	4602      	mov	r2, r0
 8003122:	68fb      	ldr	r3, [r7, #12]
 8003124:	1ad3      	subs	r3, r2, r3
 8003126:	f241 3288 	movw	r2, #5000	; 0x1388
 800312a:	4293      	cmp	r3, r2
 800312c:	d901      	bls.n	8003132 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800312e:	2303      	movs	r3, #3
 8003130:	e04f      	b.n	80031d2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003132:	4b2b      	ldr	r3, [pc, #172]	; (80031e0 <HAL_RCC_ClockConfig+0x1bc>)
 8003134:	689b      	ldr	r3, [r3, #8]
 8003136:	f003 020c 	and.w	r2, r3, #12
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	685b      	ldr	r3, [r3, #4]
 800313e:	009b      	lsls	r3, r3, #2
 8003140:	429a      	cmp	r2, r3
 8003142:	d1eb      	bne.n	800311c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003144:	4b25      	ldr	r3, [pc, #148]	; (80031dc <HAL_RCC_ClockConfig+0x1b8>)
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	f003 0307 	and.w	r3, r3, #7
 800314c:	683a      	ldr	r2, [r7, #0]
 800314e:	429a      	cmp	r2, r3
 8003150:	d20c      	bcs.n	800316c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003152:	4b22      	ldr	r3, [pc, #136]	; (80031dc <HAL_RCC_ClockConfig+0x1b8>)
 8003154:	683a      	ldr	r2, [r7, #0]
 8003156:	b2d2      	uxtb	r2, r2
 8003158:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800315a:	4b20      	ldr	r3, [pc, #128]	; (80031dc <HAL_RCC_ClockConfig+0x1b8>)
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	f003 0307 	and.w	r3, r3, #7
 8003162:	683a      	ldr	r2, [r7, #0]
 8003164:	429a      	cmp	r2, r3
 8003166:	d001      	beq.n	800316c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003168:	2301      	movs	r3, #1
 800316a:	e032      	b.n	80031d2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	f003 0304 	and.w	r3, r3, #4
 8003174:	2b00      	cmp	r3, #0
 8003176:	d008      	beq.n	800318a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003178:	4b19      	ldr	r3, [pc, #100]	; (80031e0 <HAL_RCC_ClockConfig+0x1bc>)
 800317a:	689b      	ldr	r3, [r3, #8]
 800317c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	68db      	ldr	r3, [r3, #12]
 8003184:	4916      	ldr	r1, [pc, #88]	; (80031e0 <HAL_RCC_ClockConfig+0x1bc>)
 8003186:	4313      	orrs	r3, r2
 8003188:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	f003 0308 	and.w	r3, r3, #8
 8003192:	2b00      	cmp	r3, #0
 8003194:	d009      	beq.n	80031aa <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003196:	4b12      	ldr	r3, [pc, #72]	; (80031e0 <HAL_RCC_ClockConfig+0x1bc>)
 8003198:	689b      	ldr	r3, [r3, #8]
 800319a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	691b      	ldr	r3, [r3, #16]
 80031a2:	00db      	lsls	r3, r3, #3
 80031a4:	490e      	ldr	r1, [pc, #56]	; (80031e0 <HAL_RCC_ClockConfig+0x1bc>)
 80031a6:	4313      	orrs	r3, r2
 80031a8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80031aa:	f000 f821 	bl	80031f0 <HAL_RCC_GetSysClockFreq>
 80031ae:	4602      	mov	r2, r0
 80031b0:	4b0b      	ldr	r3, [pc, #44]	; (80031e0 <HAL_RCC_ClockConfig+0x1bc>)
 80031b2:	689b      	ldr	r3, [r3, #8]
 80031b4:	091b      	lsrs	r3, r3, #4
 80031b6:	f003 030f 	and.w	r3, r3, #15
 80031ba:	490a      	ldr	r1, [pc, #40]	; (80031e4 <HAL_RCC_ClockConfig+0x1c0>)
 80031bc:	5ccb      	ldrb	r3, [r1, r3]
 80031be:	fa22 f303 	lsr.w	r3, r2, r3
 80031c2:	4a09      	ldr	r2, [pc, #36]	; (80031e8 <HAL_RCC_ClockConfig+0x1c4>)
 80031c4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80031c6:	4b09      	ldr	r3, [pc, #36]	; (80031ec <HAL_RCC_ClockConfig+0x1c8>)
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	4618      	mov	r0, r3
 80031cc:	f7fe f998 	bl	8001500 <HAL_InitTick>

  return HAL_OK;
 80031d0:	2300      	movs	r3, #0
}
 80031d2:	4618      	mov	r0, r3
 80031d4:	3710      	adds	r7, #16
 80031d6:	46bd      	mov	sp, r7
 80031d8:	bd80      	pop	{r7, pc}
 80031da:	bf00      	nop
 80031dc:	40023c00 	.word	0x40023c00
 80031e0:	40023800 	.word	0x40023800
 80031e4:	08007a94 	.word	0x08007a94
 80031e8:	20000000 	.word	0x20000000
 80031ec:	20000004 	.word	0x20000004

080031f0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80031f0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80031f4:	b090      	sub	sp, #64	; 0x40
 80031f6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80031f8:	2300      	movs	r3, #0
 80031fa:	637b      	str	r3, [r7, #52]	; 0x34
 80031fc:	2300      	movs	r3, #0
 80031fe:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003200:	2300      	movs	r3, #0
 8003202:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8003204:	2300      	movs	r3, #0
 8003206:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003208:	4b59      	ldr	r3, [pc, #356]	; (8003370 <HAL_RCC_GetSysClockFreq+0x180>)
 800320a:	689b      	ldr	r3, [r3, #8]
 800320c:	f003 030c 	and.w	r3, r3, #12
 8003210:	2b08      	cmp	r3, #8
 8003212:	d00d      	beq.n	8003230 <HAL_RCC_GetSysClockFreq+0x40>
 8003214:	2b08      	cmp	r3, #8
 8003216:	f200 80a1 	bhi.w	800335c <HAL_RCC_GetSysClockFreq+0x16c>
 800321a:	2b00      	cmp	r3, #0
 800321c:	d002      	beq.n	8003224 <HAL_RCC_GetSysClockFreq+0x34>
 800321e:	2b04      	cmp	r3, #4
 8003220:	d003      	beq.n	800322a <HAL_RCC_GetSysClockFreq+0x3a>
 8003222:	e09b      	b.n	800335c <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003224:	4b53      	ldr	r3, [pc, #332]	; (8003374 <HAL_RCC_GetSysClockFreq+0x184>)
 8003226:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8003228:	e09b      	b.n	8003362 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800322a:	4b53      	ldr	r3, [pc, #332]	; (8003378 <HAL_RCC_GetSysClockFreq+0x188>)
 800322c:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800322e:	e098      	b.n	8003362 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003230:	4b4f      	ldr	r3, [pc, #316]	; (8003370 <HAL_RCC_GetSysClockFreq+0x180>)
 8003232:	685b      	ldr	r3, [r3, #4]
 8003234:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003238:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800323a:	4b4d      	ldr	r3, [pc, #308]	; (8003370 <HAL_RCC_GetSysClockFreq+0x180>)
 800323c:	685b      	ldr	r3, [r3, #4]
 800323e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003242:	2b00      	cmp	r3, #0
 8003244:	d028      	beq.n	8003298 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003246:	4b4a      	ldr	r3, [pc, #296]	; (8003370 <HAL_RCC_GetSysClockFreq+0x180>)
 8003248:	685b      	ldr	r3, [r3, #4]
 800324a:	099b      	lsrs	r3, r3, #6
 800324c:	2200      	movs	r2, #0
 800324e:	623b      	str	r3, [r7, #32]
 8003250:	627a      	str	r2, [r7, #36]	; 0x24
 8003252:	6a3b      	ldr	r3, [r7, #32]
 8003254:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8003258:	2100      	movs	r1, #0
 800325a:	4b47      	ldr	r3, [pc, #284]	; (8003378 <HAL_RCC_GetSysClockFreq+0x188>)
 800325c:	fb03 f201 	mul.w	r2, r3, r1
 8003260:	2300      	movs	r3, #0
 8003262:	fb00 f303 	mul.w	r3, r0, r3
 8003266:	4413      	add	r3, r2
 8003268:	4a43      	ldr	r2, [pc, #268]	; (8003378 <HAL_RCC_GetSysClockFreq+0x188>)
 800326a:	fba0 1202 	umull	r1, r2, r0, r2
 800326e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003270:	460a      	mov	r2, r1
 8003272:	62ba      	str	r2, [r7, #40]	; 0x28
 8003274:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003276:	4413      	add	r3, r2
 8003278:	62fb      	str	r3, [r7, #44]	; 0x2c
 800327a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800327c:	2200      	movs	r2, #0
 800327e:	61bb      	str	r3, [r7, #24]
 8003280:	61fa      	str	r2, [r7, #28]
 8003282:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003286:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 800328a:	f7fd fc95 	bl	8000bb8 <__aeabi_uldivmod>
 800328e:	4602      	mov	r2, r0
 8003290:	460b      	mov	r3, r1
 8003292:	4613      	mov	r3, r2
 8003294:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003296:	e053      	b.n	8003340 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003298:	4b35      	ldr	r3, [pc, #212]	; (8003370 <HAL_RCC_GetSysClockFreq+0x180>)
 800329a:	685b      	ldr	r3, [r3, #4]
 800329c:	099b      	lsrs	r3, r3, #6
 800329e:	2200      	movs	r2, #0
 80032a0:	613b      	str	r3, [r7, #16]
 80032a2:	617a      	str	r2, [r7, #20]
 80032a4:	693b      	ldr	r3, [r7, #16]
 80032a6:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 80032aa:	f04f 0b00 	mov.w	fp, #0
 80032ae:	4652      	mov	r2, sl
 80032b0:	465b      	mov	r3, fp
 80032b2:	f04f 0000 	mov.w	r0, #0
 80032b6:	f04f 0100 	mov.w	r1, #0
 80032ba:	0159      	lsls	r1, r3, #5
 80032bc:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80032c0:	0150      	lsls	r0, r2, #5
 80032c2:	4602      	mov	r2, r0
 80032c4:	460b      	mov	r3, r1
 80032c6:	ebb2 080a 	subs.w	r8, r2, sl
 80032ca:	eb63 090b 	sbc.w	r9, r3, fp
 80032ce:	f04f 0200 	mov.w	r2, #0
 80032d2:	f04f 0300 	mov.w	r3, #0
 80032d6:	ea4f 1389 	mov.w	r3, r9, lsl #6
 80032da:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 80032de:	ea4f 1288 	mov.w	r2, r8, lsl #6
 80032e2:	ebb2 0408 	subs.w	r4, r2, r8
 80032e6:	eb63 0509 	sbc.w	r5, r3, r9
 80032ea:	f04f 0200 	mov.w	r2, #0
 80032ee:	f04f 0300 	mov.w	r3, #0
 80032f2:	00eb      	lsls	r3, r5, #3
 80032f4:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80032f8:	00e2      	lsls	r2, r4, #3
 80032fa:	4614      	mov	r4, r2
 80032fc:	461d      	mov	r5, r3
 80032fe:	eb14 030a 	adds.w	r3, r4, sl
 8003302:	603b      	str	r3, [r7, #0]
 8003304:	eb45 030b 	adc.w	r3, r5, fp
 8003308:	607b      	str	r3, [r7, #4]
 800330a:	f04f 0200 	mov.w	r2, #0
 800330e:	f04f 0300 	mov.w	r3, #0
 8003312:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003316:	4629      	mov	r1, r5
 8003318:	028b      	lsls	r3, r1, #10
 800331a:	4621      	mov	r1, r4
 800331c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003320:	4621      	mov	r1, r4
 8003322:	028a      	lsls	r2, r1, #10
 8003324:	4610      	mov	r0, r2
 8003326:	4619      	mov	r1, r3
 8003328:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800332a:	2200      	movs	r2, #0
 800332c:	60bb      	str	r3, [r7, #8]
 800332e:	60fa      	str	r2, [r7, #12]
 8003330:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003334:	f7fd fc40 	bl	8000bb8 <__aeabi_uldivmod>
 8003338:	4602      	mov	r2, r0
 800333a:	460b      	mov	r3, r1
 800333c:	4613      	mov	r3, r2
 800333e:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003340:	4b0b      	ldr	r3, [pc, #44]	; (8003370 <HAL_RCC_GetSysClockFreq+0x180>)
 8003342:	685b      	ldr	r3, [r3, #4]
 8003344:	0c1b      	lsrs	r3, r3, #16
 8003346:	f003 0303 	and.w	r3, r3, #3
 800334a:	3301      	adds	r3, #1
 800334c:	005b      	lsls	r3, r3, #1
 800334e:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 8003350:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003352:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003354:	fbb2 f3f3 	udiv	r3, r2, r3
 8003358:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800335a:	e002      	b.n	8003362 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800335c:	4b05      	ldr	r3, [pc, #20]	; (8003374 <HAL_RCC_GetSysClockFreq+0x184>)
 800335e:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8003360:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003362:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8003364:	4618      	mov	r0, r3
 8003366:	3740      	adds	r7, #64	; 0x40
 8003368:	46bd      	mov	sp, r7
 800336a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800336e:	bf00      	nop
 8003370:	40023800 	.word	0x40023800
 8003374:	00f42400 	.word	0x00f42400
 8003378:	017d7840 	.word	0x017d7840

0800337c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800337c:	b480      	push	{r7}
 800337e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003380:	4b03      	ldr	r3, [pc, #12]	; (8003390 <HAL_RCC_GetHCLKFreq+0x14>)
 8003382:	681b      	ldr	r3, [r3, #0]
}
 8003384:	4618      	mov	r0, r3
 8003386:	46bd      	mov	sp, r7
 8003388:	f85d 7b04 	ldr.w	r7, [sp], #4
 800338c:	4770      	bx	lr
 800338e:	bf00      	nop
 8003390:	20000000 	.word	0x20000000

08003394 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003394:	b580      	push	{r7, lr}
 8003396:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003398:	f7ff fff0 	bl	800337c <HAL_RCC_GetHCLKFreq>
 800339c:	4602      	mov	r2, r0
 800339e:	4b05      	ldr	r3, [pc, #20]	; (80033b4 <HAL_RCC_GetPCLK1Freq+0x20>)
 80033a0:	689b      	ldr	r3, [r3, #8]
 80033a2:	0a9b      	lsrs	r3, r3, #10
 80033a4:	f003 0307 	and.w	r3, r3, #7
 80033a8:	4903      	ldr	r1, [pc, #12]	; (80033b8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80033aa:	5ccb      	ldrb	r3, [r1, r3]
 80033ac:	fa22 f303 	lsr.w	r3, r2, r3
}
 80033b0:	4618      	mov	r0, r3
 80033b2:	bd80      	pop	{r7, pc}
 80033b4:	40023800 	.word	0x40023800
 80033b8:	08007aa4 	.word	0x08007aa4

080033bc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80033bc:	b580      	push	{r7, lr}
 80033be:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80033c0:	f7ff ffdc 	bl	800337c <HAL_RCC_GetHCLKFreq>
 80033c4:	4602      	mov	r2, r0
 80033c6:	4b05      	ldr	r3, [pc, #20]	; (80033dc <HAL_RCC_GetPCLK2Freq+0x20>)
 80033c8:	689b      	ldr	r3, [r3, #8]
 80033ca:	0b5b      	lsrs	r3, r3, #13
 80033cc:	f003 0307 	and.w	r3, r3, #7
 80033d0:	4903      	ldr	r1, [pc, #12]	; (80033e0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80033d2:	5ccb      	ldrb	r3, [r1, r3]
 80033d4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80033d8:	4618      	mov	r0, r3
 80033da:	bd80      	pop	{r7, pc}
 80033dc:	40023800 	.word	0x40023800
 80033e0:	08007aa4 	.word	0x08007aa4

080033e4 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80033e4:	b580      	push	{r7, lr}
 80033e6:	b082      	sub	sp, #8
 80033e8:	af00      	add	r7, sp, #0
 80033ea:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	2b00      	cmp	r3, #0
 80033f0:	d101      	bne.n	80033f6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80033f2:	2301      	movs	r3, #1
 80033f4:	e07b      	b.n	80034ee <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033fa:	2b00      	cmp	r3, #0
 80033fc:	d108      	bne.n	8003410 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	685b      	ldr	r3, [r3, #4]
 8003402:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003406:	d009      	beq.n	800341c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	2200      	movs	r2, #0
 800340c:	61da      	str	r2, [r3, #28]
 800340e:	e005      	b.n	800341c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	2200      	movs	r2, #0
 8003414:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	2200      	movs	r2, #0
 800341a:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	2200      	movs	r2, #0
 8003420:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003428:	b2db      	uxtb	r3, r3
 800342a:	2b00      	cmp	r3, #0
 800342c:	d106      	bne.n	800343c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	2200      	movs	r2, #0
 8003432:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003436:	6878      	ldr	r0, [r7, #4]
 8003438:	f7fd ff14 	bl	8001264 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	2202      	movs	r2, #2
 8003440:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	681a      	ldr	r2, [r3, #0]
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003452:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	685b      	ldr	r3, [r3, #4]
 8003458:	f403 7282 	and.w	r2, r3, #260	; 0x104
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	689b      	ldr	r3, [r3, #8]
 8003460:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8003464:	431a      	orrs	r2, r3
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	68db      	ldr	r3, [r3, #12]
 800346a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800346e:	431a      	orrs	r2, r3
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	691b      	ldr	r3, [r3, #16]
 8003474:	f003 0302 	and.w	r3, r3, #2
 8003478:	431a      	orrs	r2, r3
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	695b      	ldr	r3, [r3, #20]
 800347e:	f003 0301 	and.w	r3, r3, #1
 8003482:	431a      	orrs	r2, r3
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	699b      	ldr	r3, [r3, #24]
 8003488:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800348c:	431a      	orrs	r2, r3
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	69db      	ldr	r3, [r3, #28]
 8003492:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003496:	431a      	orrs	r2, r3
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	6a1b      	ldr	r3, [r3, #32]
 800349c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80034a0:	ea42 0103 	orr.w	r1, r2, r3
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80034a8:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	430a      	orrs	r2, r1
 80034b2:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	699b      	ldr	r3, [r3, #24]
 80034b8:	0c1b      	lsrs	r3, r3, #16
 80034ba:	f003 0104 	and.w	r1, r3, #4
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034c2:	f003 0210 	and.w	r2, r3, #16
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	430a      	orrs	r2, r1
 80034cc:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	69da      	ldr	r2, [r3, #28]
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80034dc:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	2200      	movs	r2, #0
 80034e2:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	2201      	movs	r2, #1
 80034e8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 80034ec:	2300      	movs	r3, #0
}
 80034ee:	4618      	mov	r0, r3
 80034f0:	3708      	adds	r7, #8
 80034f2:	46bd      	mov	sp, r7
 80034f4:	bd80      	pop	{r7, pc}

080034f6 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80034f6:	b580      	push	{r7, lr}
 80034f8:	b088      	sub	sp, #32
 80034fa:	af00      	add	r7, sp, #0
 80034fc:	60f8      	str	r0, [r7, #12]
 80034fe:	60b9      	str	r1, [r7, #8]
 8003500:	603b      	str	r3, [r7, #0]
 8003502:	4613      	mov	r3, r2
 8003504:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8003506:	2300      	movs	r3, #0
 8003508:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800350a:	68fb      	ldr	r3, [r7, #12]
 800350c:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003510:	2b01      	cmp	r3, #1
 8003512:	d101      	bne.n	8003518 <HAL_SPI_Transmit+0x22>
 8003514:	2302      	movs	r3, #2
 8003516:	e12d      	b.n	8003774 <HAL_SPI_Transmit+0x27e>
 8003518:	68fb      	ldr	r3, [r7, #12]
 800351a:	2201      	movs	r2, #1
 800351c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003520:	f7fe f832 	bl	8001588 <HAL_GetTick>
 8003524:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8003526:	88fb      	ldrh	r3, [r7, #6]
 8003528:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 800352a:	68fb      	ldr	r3, [r7, #12]
 800352c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003530:	b2db      	uxtb	r3, r3
 8003532:	2b01      	cmp	r3, #1
 8003534:	d002      	beq.n	800353c <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8003536:	2302      	movs	r3, #2
 8003538:	77fb      	strb	r3, [r7, #31]
    goto error;
 800353a:	e116      	b.n	800376a <HAL_SPI_Transmit+0x274>
  }

  if ((pData == NULL) || (Size == 0U))
 800353c:	68bb      	ldr	r3, [r7, #8]
 800353e:	2b00      	cmp	r3, #0
 8003540:	d002      	beq.n	8003548 <HAL_SPI_Transmit+0x52>
 8003542:	88fb      	ldrh	r3, [r7, #6]
 8003544:	2b00      	cmp	r3, #0
 8003546:	d102      	bne.n	800354e <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8003548:	2301      	movs	r3, #1
 800354a:	77fb      	strb	r3, [r7, #31]
    goto error;
 800354c:	e10d      	b.n	800376a <HAL_SPI_Transmit+0x274>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800354e:	68fb      	ldr	r3, [r7, #12]
 8003550:	2203      	movs	r2, #3
 8003552:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003556:	68fb      	ldr	r3, [r7, #12]
 8003558:	2200      	movs	r2, #0
 800355a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800355c:	68fb      	ldr	r3, [r7, #12]
 800355e:	68ba      	ldr	r2, [r7, #8]
 8003560:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8003562:	68fb      	ldr	r3, [r7, #12]
 8003564:	88fa      	ldrh	r2, [r7, #6]
 8003566:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8003568:	68fb      	ldr	r3, [r7, #12]
 800356a:	88fa      	ldrh	r2, [r7, #6]
 800356c:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800356e:	68fb      	ldr	r3, [r7, #12]
 8003570:	2200      	movs	r2, #0
 8003572:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8003574:	68fb      	ldr	r3, [r7, #12]
 8003576:	2200      	movs	r2, #0
 8003578:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 800357a:	68fb      	ldr	r3, [r7, #12]
 800357c:	2200      	movs	r2, #0
 800357e:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8003580:	68fb      	ldr	r3, [r7, #12]
 8003582:	2200      	movs	r2, #0
 8003584:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8003586:	68fb      	ldr	r3, [r7, #12]
 8003588:	2200      	movs	r2, #0
 800358a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800358c:	68fb      	ldr	r3, [r7, #12]
 800358e:	689b      	ldr	r3, [r3, #8]
 8003590:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003594:	d10f      	bne.n	80035b6 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8003596:	68fb      	ldr	r3, [r7, #12]
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	681a      	ldr	r2, [r3, #0]
 800359c:	68fb      	ldr	r3, [r7, #12]
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80035a4:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80035a6:	68fb      	ldr	r3, [r7, #12]
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	681a      	ldr	r2, [r3, #0]
 80035ac:	68fb      	ldr	r3, [r7, #12]
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80035b4:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80035b6:	68fb      	ldr	r3, [r7, #12]
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80035c0:	2b40      	cmp	r3, #64	; 0x40
 80035c2:	d007      	beq.n	80035d4 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80035c4:	68fb      	ldr	r3, [r7, #12]
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	681a      	ldr	r2, [r3, #0]
 80035ca:	68fb      	ldr	r3, [r7, #12]
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80035d2:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80035d4:	68fb      	ldr	r3, [r7, #12]
 80035d6:	68db      	ldr	r3, [r3, #12]
 80035d8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80035dc:	d14f      	bne.n	800367e <HAL_SPI_Transmit+0x188>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80035de:	68fb      	ldr	r3, [r7, #12]
 80035e0:	685b      	ldr	r3, [r3, #4]
 80035e2:	2b00      	cmp	r3, #0
 80035e4:	d002      	beq.n	80035ec <HAL_SPI_Transmit+0xf6>
 80035e6:	8afb      	ldrh	r3, [r7, #22]
 80035e8:	2b01      	cmp	r3, #1
 80035ea:	d142      	bne.n	8003672 <HAL_SPI_Transmit+0x17c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80035ec:	68fb      	ldr	r3, [r7, #12]
 80035ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035f0:	881a      	ldrh	r2, [r3, #0]
 80035f2:	68fb      	ldr	r3, [r7, #12]
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80035f8:	68fb      	ldr	r3, [r7, #12]
 80035fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035fc:	1c9a      	adds	r2, r3, #2
 80035fe:	68fb      	ldr	r3, [r7, #12]
 8003600:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003602:	68fb      	ldr	r3, [r7, #12]
 8003604:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003606:	b29b      	uxth	r3, r3
 8003608:	3b01      	subs	r3, #1
 800360a:	b29a      	uxth	r2, r3
 800360c:	68fb      	ldr	r3, [r7, #12]
 800360e:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8003610:	e02f      	b.n	8003672 <HAL_SPI_Transmit+0x17c>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003612:	68fb      	ldr	r3, [r7, #12]
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	689b      	ldr	r3, [r3, #8]
 8003618:	f003 0302 	and.w	r3, r3, #2
 800361c:	2b02      	cmp	r3, #2
 800361e:	d112      	bne.n	8003646 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003620:	68fb      	ldr	r3, [r7, #12]
 8003622:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003624:	881a      	ldrh	r2, [r3, #0]
 8003626:	68fb      	ldr	r3, [r7, #12]
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800362c:	68fb      	ldr	r3, [r7, #12]
 800362e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003630:	1c9a      	adds	r2, r3, #2
 8003632:	68fb      	ldr	r3, [r7, #12]
 8003634:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8003636:	68fb      	ldr	r3, [r7, #12]
 8003638:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800363a:	b29b      	uxth	r3, r3
 800363c:	3b01      	subs	r3, #1
 800363e:	b29a      	uxth	r2, r3
 8003640:	68fb      	ldr	r3, [r7, #12]
 8003642:	86da      	strh	r2, [r3, #54]	; 0x36
 8003644:	e015      	b.n	8003672 <HAL_SPI_Transmit+0x17c>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003646:	f7fd ff9f 	bl	8001588 <HAL_GetTick>
 800364a:	4602      	mov	r2, r0
 800364c:	69bb      	ldr	r3, [r7, #24]
 800364e:	1ad3      	subs	r3, r2, r3
 8003650:	683a      	ldr	r2, [r7, #0]
 8003652:	429a      	cmp	r2, r3
 8003654:	d803      	bhi.n	800365e <HAL_SPI_Transmit+0x168>
 8003656:	683b      	ldr	r3, [r7, #0]
 8003658:	f1b3 3fff 	cmp.w	r3, #4294967295
 800365c:	d102      	bne.n	8003664 <HAL_SPI_Transmit+0x16e>
 800365e:	683b      	ldr	r3, [r7, #0]
 8003660:	2b00      	cmp	r3, #0
 8003662:	d106      	bne.n	8003672 <HAL_SPI_Transmit+0x17c>
        {
          errorcode = HAL_TIMEOUT;
 8003664:	2303      	movs	r3, #3
 8003666:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8003668:	68fb      	ldr	r3, [r7, #12]
 800366a:	2201      	movs	r2, #1
 800366c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          goto error;
 8003670:	e07b      	b.n	800376a <HAL_SPI_Transmit+0x274>
    while (hspi->TxXferCount > 0U)
 8003672:	68fb      	ldr	r3, [r7, #12]
 8003674:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003676:	b29b      	uxth	r3, r3
 8003678:	2b00      	cmp	r3, #0
 800367a:	d1ca      	bne.n	8003612 <HAL_SPI_Transmit+0x11c>
 800367c:	e050      	b.n	8003720 <HAL_SPI_Transmit+0x22a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800367e:	68fb      	ldr	r3, [r7, #12]
 8003680:	685b      	ldr	r3, [r3, #4]
 8003682:	2b00      	cmp	r3, #0
 8003684:	d002      	beq.n	800368c <HAL_SPI_Transmit+0x196>
 8003686:	8afb      	ldrh	r3, [r7, #22]
 8003688:	2b01      	cmp	r3, #1
 800368a:	d144      	bne.n	8003716 <HAL_SPI_Transmit+0x220>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800368c:	68fb      	ldr	r3, [r7, #12]
 800368e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003690:	68fb      	ldr	r3, [r7, #12]
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	330c      	adds	r3, #12
 8003696:	7812      	ldrb	r2, [r2, #0]
 8003698:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800369a:	68fb      	ldr	r3, [r7, #12]
 800369c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800369e:	1c5a      	adds	r2, r3, #1
 80036a0:	68fb      	ldr	r3, [r7, #12]
 80036a2:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80036a4:	68fb      	ldr	r3, [r7, #12]
 80036a6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80036a8:	b29b      	uxth	r3, r3
 80036aa:	3b01      	subs	r3, #1
 80036ac:	b29a      	uxth	r2, r3
 80036ae:	68fb      	ldr	r3, [r7, #12]
 80036b0:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 80036b2:	e030      	b.n	8003716 <HAL_SPI_Transmit+0x220>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80036b4:	68fb      	ldr	r3, [r7, #12]
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	689b      	ldr	r3, [r3, #8]
 80036ba:	f003 0302 	and.w	r3, r3, #2
 80036be:	2b02      	cmp	r3, #2
 80036c0:	d113      	bne.n	80036ea <HAL_SPI_Transmit+0x1f4>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80036c2:	68fb      	ldr	r3, [r7, #12]
 80036c4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80036c6:	68fb      	ldr	r3, [r7, #12]
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	330c      	adds	r3, #12
 80036cc:	7812      	ldrb	r2, [r2, #0]
 80036ce:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 80036d0:	68fb      	ldr	r3, [r7, #12]
 80036d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036d4:	1c5a      	adds	r2, r3, #1
 80036d6:	68fb      	ldr	r3, [r7, #12]
 80036d8:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80036da:	68fb      	ldr	r3, [r7, #12]
 80036dc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80036de:	b29b      	uxth	r3, r3
 80036e0:	3b01      	subs	r3, #1
 80036e2:	b29a      	uxth	r2, r3
 80036e4:	68fb      	ldr	r3, [r7, #12]
 80036e6:	86da      	strh	r2, [r3, #54]	; 0x36
 80036e8:	e015      	b.n	8003716 <HAL_SPI_Transmit+0x220>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80036ea:	f7fd ff4d 	bl	8001588 <HAL_GetTick>
 80036ee:	4602      	mov	r2, r0
 80036f0:	69bb      	ldr	r3, [r7, #24]
 80036f2:	1ad3      	subs	r3, r2, r3
 80036f4:	683a      	ldr	r2, [r7, #0]
 80036f6:	429a      	cmp	r2, r3
 80036f8:	d803      	bhi.n	8003702 <HAL_SPI_Transmit+0x20c>
 80036fa:	683b      	ldr	r3, [r7, #0]
 80036fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003700:	d102      	bne.n	8003708 <HAL_SPI_Transmit+0x212>
 8003702:	683b      	ldr	r3, [r7, #0]
 8003704:	2b00      	cmp	r3, #0
 8003706:	d106      	bne.n	8003716 <HAL_SPI_Transmit+0x220>
        {
          errorcode = HAL_TIMEOUT;
 8003708:	2303      	movs	r3, #3
 800370a:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 800370c:	68fb      	ldr	r3, [r7, #12]
 800370e:	2201      	movs	r2, #1
 8003710:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          goto error;
 8003714:	e029      	b.n	800376a <HAL_SPI_Transmit+0x274>
    while (hspi->TxXferCount > 0U)
 8003716:	68fb      	ldr	r3, [r7, #12]
 8003718:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800371a:	b29b      	uxth	r3, r3
 800371c:	2b00      	cmp	r3, #0
 800371e:	d1c9      	bne.n	80036b4 <HAL_SPI_Transmit+0x1be>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003720:	69ba      	ldr	r2, [r7, #24]
 8003722:	6839      	ldr	r1, [r7, #0]
 8003724:	68f8      	ldr	r0, [r7, #12]
 8003726:	f000 f8b1 	bl	800388c <SPI_EndRxTxTransaction>
 800372a:	4603      	mov	r3, r0
 800372c:	2b00      	cmp	r3, #0
 800372e:	d002      	beq.n	8003736 <HAL_SPI_Transmit+0x240>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003730:	68fb      	ldr	r3, [r7, #12]
 8003732:	2220      	movs	r2, #32
 8003734:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8003736:	68fb      	ldr	r3, [r7, #12]
 8003738:	689b      	ldr	r3, [r3, #8]
 800373a:	2b00      	cmp	r3, #0
 800373c:	d10a      	bne.n	8003754 <HAL_SPI_Transmit+0x25e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800373e:	2300      	movs	r3, #0
 8003740:	613b      	str	r3, [r7, #16]
 8003742:	68fb      	ldr	r3, [r7, #12]
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	68db      	ldr	r3, [r3, #12]
 8003748:	613b      	str	r3, [r7, #16]
 800374a:	68fb      	ldr	r3, [r7, #12]
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	689b      	ldr	r3, [r3, #8]
 8003750:	613b      	str	r3, [r7, #16]
 8003752:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003754:	68fb      	ldr	r3, [r7, #12]
 8003756:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003758:	2b00      	cmp	r3, #0
 800375a:	d002      	beq.n	8003762 <HAL_SPI_Transmit+0x26c>
  {
    errorcode = HAL_ERROR;
 800375c:	2301      	movs	r3, #1
 800375e:	77fb      	strb	r3, [r7, #31]
 8003760:	e003      	b.n	800376a <HAL_SPI_Transmit+0x274>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8003762:	68fb      	ldr	r3, [r7, #12]
 8003764:	2201      	movs	r2, #1
 8003766:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800376a:	68fb      	ldr	r3, [r7, #12]
 800376c:	2200      	movs	r2, #0
 800376e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8003772:	7ffb      	ldrb	r3, [r7, #31]
}
 8003774:	4618      	mov	r0, r3
 8003776:	3720      	adds	r7, #32
 8003778:	46bd      	mov	sp, r7
 800377a:	bd80      	pop	{r7, pc}

0800377c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800377c:	b580      	push	{r7, lr}
 800377e:	b088      	sub	sp, #32
 8003780:	af00      	add	r7, sp, #0
 8003782:	60f8      	str	r0, [r7, #12]
 8003784:	60b9      	str	r1, [r7, #8]
 8003786:	603b      	str	r3, [r7, #0]
 8003788:	4613      	mov	r3, r2
 800378a:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800378c:	f7fd fefc 	bl	8001588 <HAL_GetTick>
 8003790:	4602      	mov	r2, r0
 8003792:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003794:	1a9b      	subs	r3, r3, r2
 8003796:	683a      	ldr	r2, [r7, #0]
 8003798:	4413      	add	r3, r2
 800379a:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800379c:	f7fd fef4 	bl	8001588 <HAL_GetTick>
 80037a0:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80037a2:	4b39      	ldr	r3, [pc, #228]	; (8003888 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	015b      	lsls	r3, r3, #5
 80037a8:	0d1b      	lsrs	r3, r3, #20
 80037aa:	69fa      	ldr	r2, [r7, #28]
 80037ac:	fb02 f303 	mul.w	r3, r2, r3
 80037b0:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80037b2:	e054      	b.n	800385e <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80037b4:	683b      	ldr	r3, [r7, #0]
 80037b6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80037ba:	d050      	beq.n	800385e <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80037bc:	f7fd fee4 	bl	8001588 <HAL_GetTick>
 80037c0:	4602      	mov	r2, r0
 80037c2:	69bb      	ldr	r3, [r7, #24]
 80037c4:	1ad3      	subs	r3, r2, r3
 80037c6:	69fa      	ldr	r2, [r7, #28]
 80037c8:	429a      	cmp	r2, r3
 80037ca:	d902      	bls.n	80037d2 <SPI_WaitFlagStateUntilTimeout+0x56>
 80037cc:	69fb      	ldr	r3, [r7, #28]
 80037ce:	2b00      	cmp	r3, #0
 80037d0:	d13d      	bne.n	800384e <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80037d2:	68fb      	ldr	r3, [r7, #12]
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	685a      	ldr	r2, [r3, #4]
 80037d8:	68fb      	ldr	r3, [r7, #12]
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80037e0:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80037e2:	68fb      	ldr	r3, [r7, #12]
 80037e4:	685b      	ldr	r3, [r3, #4]
 80037e6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80037ea:	d111      	bne.n	8003810 <SPI_WaitFlagStateUntilTimeout+0x94>
 80037ec:	68fb      	ldr	r3, [r7, #12]
 80037ee:	689b      	ldr	r3, [r3, #8]
 80037f0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80037f4:	d004      	beq.n	8003800 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80037f6:	68fb      	ldr	r3, [r7, #12]
 80037f8:	689b      	ldr	r3, [r3, #8]
 80037fa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80037fe:	d107      	bne.n	8003810 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003800:	68fb      	ldr	r3, [r7, #12]
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	681a      	ldr	r2, [r3, #0]
 8003806:	68fb      	ldr	r3, [r7, #12]
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800380e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003810:	68fb      	ldr	r3, [r7, #12]
 8003812:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003814:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003818:	d10f      	bne.n	800383a <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800381a:	68fb      	ldr	r3, [r7, #12]
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	681a      	ldr	r2, [r3, #0]
 8003820:	68fb      	ldr	r3, [r7, #12]
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003828:	601a      	str	r2, [r3, #0]
 800382a:	68fb      	ldr	r3, [r7, #12]
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	681a      	ldr	r2, [r3, #0]
 8003830:	68fb      	ldr	r3, [r7, #12]
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003838:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800383a:	68fb      	ldr	r3, [r7, #12]
 800383c:	2201      	movs	r2, #1
 800383e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003842:	68fb      	ldr	r3, [r7, #12]
 8003844:	2200      	movs	r2, #0
 8003846:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 800384a:	2303      	movs	r3, #3
 800384c:	e017      	b.n	800387e <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800384e:	697b      	ldr	r3, [r7, #20]
 8003850:	2b00      	cmp	r3, #0
 8003852:	d101      	bne.n	8003858 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8003854:	2300      	movs	r3, #0
 8003856:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8003858:	697b      	ldr	r3, [r7, #20]
 800385a:	3b01      	subs	r3, #1
 800385c:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800385e:	68fb      	ldr	r3, [r7, #12]
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	689a      	ldr	r2, [r3, #8]
 8003864:	68bb      	ldr	r3, [r7, #8]
 8003866:	4013      	ands	r3, r2
 8003868:	68ba      	ldr	r2, [r7, #8]
 800386a:	429a      	cmp	r2, r3
 800386c:	bf0c      	ite	eq
 800386e:	2301      	moveq	r3, #1
 8003870:	2300      	movne	r3, #0
 8003872:	b2db      	uxtb	r3, r3
 8003874:	461a      	mov	r2, r3
 8003876:	79fb      	ldrb	r3, [r7, #7]
 8003878:	429a      	cmp	r2, r3
 800387a:	d19b      	bne.n	80037b4 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 800387c:	2300      	movs	r3, #0
}
 800387e:	4618      	mov	r0, r3
 8003880:	3720      	adds	r7, #32
 8003882:	46bd      	mov	sp, r7
 8003884:	bd80      	pop	{r7, pc}
 8003886:	bf00      	nop
 8003888:	20000000 	.word	0x20000000

0800388c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800388c:	b580      	push	{r7, lr}
 800388e:	b088      	sub	sp, #32
 8003890:	af02      	add	r7, sp, #8
 8003892:	60f8      	str	r0, [r7, #12]
 8003894:	60b9      	str	r1, [r7, #8]
 8003896:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	9300      	str	r3, [sp, #0]
 800389c:	68bb      	ldr	r3, [r7, #8]
 800389e:	2201      	movs	r2, #1
 80038a0:	2102      	movs	r1, #2
 80038a2:	68f8      	ldr	r0, [r7, #12]
 80038a4:	f7ff ff6a 	bl	800377c <SPI_WaitFlagStateUntilTimeout>
 80038a8:	4603      	mov	r3, r0
 80038aa:	2b00      	cmp	r3, #0
 80038ac:	d007      	beq.n	80038be <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80038ae:	68fb      	ldr	r3, [r7, #12]
 80038b0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80038b2:	f043 0220 	orr.w	r2, r3, #32
 80038b6:	68fb      	ldr	r3, [r7, #12]
 80038b8:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 80038ba:	2303      	movs	r3, #3
 80038bc:	e032      	b.n	8003924 <SPI_EndRxTxTransaction+0x98>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 80038be:	4b1b      	ldr	r3, [pc, #108]	; (800392c <SPI_EndRxTxTransaction+0xa0>)
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	4a1b      	ldr	r2, [pc, #108]	; (8003930 <SPI_EndRxTxTransaction+0xa4>)
 80038c4:	fba2 2303 	umull	r2, r3, r2, r3
 80038c8:	0d5b      	lsrs	r3, r3, #21
 80038ca:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80038ce:	fb02 f303 	mul.w	r3, r2, r3
 80038d2:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80038d4:	68fb      	ldr	r3, [r7, #12]
 80038d6:	685b      	ldr	r3, [r3, #4]
 80038d8:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80038dc:	d112      	bne.n	8003904 <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	9300      	str	r3, [sp, #0]
 80038e2:	68bb      	ldr	r3, [r7, #8]
 80038e4:	2200      	movs	r2, #0
 80038e6:	2180      	movs	r1, #128	; 0x80
 80038e8:	68f8      	ldr	r0, [r7, #12]
 80038ea:	f7ff ff47 	bl	800377c <SPI_WaitFlagStateUntilTimeout>
 80038ee:	4603      	mov	r3, r0
 80038f0:	2b00      	cmp	r3, #0
 80038f2:	d016      	beq.n	8003922 <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80038f4:	68fb      	ldr	r3, [r7, #12]
 80038f6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80038f8:	f043 0220 	orr.w	r2, r3, #32
 80038fc:	68fb      	ldr	r3, [r7, #12]
 80038fe:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8003900:	2303      	movs	r3, #3
 8003902:	e00f      	b.n	8003924 <SPI_EndRxTxTransaction+0x98>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8003904:	697b      	ldr	r3, [r7, #20]
 8003906:	2b00      	cmp	r3, #0
 8003908:	d00a      	beq.n	8003920 <SPI_EndRxTxTransaction+0x94>
      {
        break;
      }
      count--;
 800390a:	697b      	ldr	r3, [r7, #20]
 800390c:	3b01      	subs	r3, #1
 800390e:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8003910:	68fb      	ldr	r3, [r7, #12]
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	689b      	ldr	r3, [r3, #8]
 8003916:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800391a:	2b80      	cmp	r3, #128	; 0x80
 800391c:	d0f2      	beq.n	8003904 <SPI_EndRxTxTransaction+0x78>
 800391e:	e000      	b.n	8003922 <SPI_EndRxTxTransaction+0x96>
        break;
 8003920:	bf00      	nop
  }

  return HAL_OK;
 8003922:	2300      	movs	r3, #0
}
 8003924:	4618      	mov	r0, r3
 8003926:	3718      	adds	r7, #24
 8003928:	46bd      	mov	sp, r7
 800392a:	bd80      	pop	{r7, pc}
 800392c:	20000000 	.word	0x20000000
 8003930:	165e9f81 	.word	0x165e9f81

08003934 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003934:	b580      	push	{r7, lr}
 8003936:	b082      	sub	sp, #8
 8003938:	af00      	add	r7, sp, #0
 800393a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	2b00      	cmp	r3, #0
 8003940:	d101      	bne.n	8003946 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003942:	2301      	movs	r3, #1
 8003944:	e042      	b.n	80039cc <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800394c:	b2db      	uxtb	r3, r3
 800394e:	2b00      	cmp	r3, #0
 8003950:	d106      	bne.n	8003960 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	2200      	movs	r2, #0
 8003956:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800395a:	6878      	ldr	r0, [r7, #4]
 800395c:	f7fd fcca 	bl	80012f4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	2224      	movs	r2, #36	; 0x24
 8003964:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	68da      	ldr	r2, [r3, #12]
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003976:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003978:	6878      	ldr	r0, [r7, #4]
 800397a:	f000 f973 	bl	8003c64 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	691a      	ldr	r2, [r3, #16]
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800398c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	695a      	ldr	r2, [r3, #20]
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800399c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	68da      	ldr	r2, [r3, #12]
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80039ac:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	2200      	movs	r2, #0
 80039b2:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	2220      	movs	r2, #32
 80039b8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	2220      	movs	r2, #32
 80039c0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	2200      	movs	r2, #0
 80039c8:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 80039ca:	2300      	movs	r3, #0
}
 80039cc:	4618      	mov	r0, r3
 80039ce:	3708      	adds	r7, #8
 80039d0:	46bd      	mov	sp, r7
 80039d2:	bd80      	pop	{r7, pc}

080039d4 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80039d4:	b580      	push	{r7, lr}
 80039d6:	b08a      	sub	sp, #40	; 0x28
 80039d8:	af02      	add	r7, sp, #8
 80039da:	60f8      	str	r0, [r7, #12]
 80039dc:	60b9      	str	r1, [r7, #8]
 80039de:	603b      	str	r3, [r7, #0]
 80039e0:	4613      	mov	r3, r2
 80039e2:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80039e4:	2300      	movs	r3, #0
 80039e6:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80039e8:	68fb      	ldr	r3, [r7, #12]
 80039ea:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80039ee:	b2db      	uxtb	r3, r3
 80039f0:	2b20      	cmp	r3, #32
 80039f2:	d175      	bne.n	8003ae0 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 80039f4:	68bb      	ldr	r3, [r7, #8]
 80039f6:	2b00      	cmp	r3, #0
 80039f8:	d002      	beq.n	8003a00 <HAL_UART_Transmit+0x2c>
 80039fa:	88fb      	ldrh	r3, [r7, #6]
 80039fc:	2b00      	cmp	r3, #0
 80039fe:	d101      	bne.n	8003a04 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8003a00:	2301      	movs	r3, #1
 8003a02:	e06e      	b.n	8003ae2 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003a04:	68fb      	ldr	r3, [r7, #12]
 8003a06:	2200      	movs	r2, #0
 8003a08:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003a0a:	68fb      	ldr	r3, [r7, #12]
 8003a0c:	2221      	movs	r2, #33	; 0x21
 8003a0e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003a12:	f7fd fdb9 	bl	8001588 <HAL_GetTick>
 8003a16:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003a18:	68fb      	ldr	r3, [r7, #12]
 8003a1a:	88fa      	ldrh	r2, [r7, #6]
 8003a1c:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8003a1e:	68fb      	ldr	r3, [r7, #12]
 8003a20:	88fa      	ldrh	r2, [r7, #6]
 8003a22:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003a24:	68fb      	ldr	r3, [r7, #12]
 8003a26:	689b      	ldr	r3, [r3, #8]
 8003a28:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003a2c:	d108      	bne.n	8003a40 <HAL_UART_Transmit+0x6c>
 8003a2e:	68fb      	ldr	r3, [r7, #12]
 8003a30:	691b      	ldr	r3, [r3, #16]
 8003a32:	2b00      	cmp	r3, #0
 8003a34:	d104      	bne.n	8003a40 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8003a36:	2300      	movs	r3, #0
 8003a38:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003a3a:	68bb      	ldr	r3, [r7, #8]
 8003a3c:	61bb      	str	r3, [r7, #24]
 8003a3e:	e003      	b.n	8003a48 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8003a40:	68bb      	ldr	r3, [r7, #8]
 8003a42:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003a44:	2300      	movs	r3, #0
 8003a46:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8003a48:	e02e      	b.n	8003aa8 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003a4a:	683b      	ldr	r3, [r7, #0]
 8003a4c:	9300      	str	r3, [sp, #0]
 8003a4e:	697b      	ldr	r3, [r7, #20]
 8003a50:	2200      	movs	r2, #0
 8003a52:	2180      	movs	r1, #128	; 0x80
 8003a54:	68f8      	ldr	r0, [r7, #12]
 8003a56:	f000 f848 	bl	8003aea <UART_WaitOnFlagUntilTimeout>
 8003a5a:	4603      	mov	r3, r0
 8003a5c:	2b00      	cmp	r3, #0
 8003a5e:	d005      	beq.n	8003a6c <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8003a60:	68fb      	ldr	r3, [r7, #12]
 8003a62:	2220      	movs	r2, #32
 8003a64:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        return HAL_TIMEOUT;
 8003a68:	2303      	movs	r3, #3
 8003a6a:	e03a      	b.n	8003ae2 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8003a6c:	69fb      	ldr	r3, [r7, #28]
 8003a6e:	2b00      	cmp	r3, #0
 8003a70:	d10b      	bne.n	8003a8a <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003a72:	69bb      	ldr	r3, [r7, #24]
 8003a74:	881b      	ldrh	r3, [r3, #0]
 8003a76:	461a      	mov	r2, r3
 8003a78:	68fb      	ldr	r3, [r7, #12]
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003a80:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8003a82:	69bb      	ldr	r3, [r7, #24]
 8003a84:	3302      	adds	r3, #2
 8003a86:	61bb      	str	r3, [r7, #24]
 8003a88:	e007      	b.n	8003a9a <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8003a8a:	69fb      	ldr	r3, [r7, #28]
 8003a8c:	781a      	ldrb	r2, [r3, #0]
 8003a8e:	68fb      	ldr	r3, [r7, #12]
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8003a94:	69fb      	ldr	r3, [r7, #28]
 8003a96:	3301      	adds	r3, #1
 8003a98:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003a9a:	68fb      	ldr	r3, [r7, #12]
 8003a9c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003a9e:	b29b      	uxth	r3, r3
 8003aa0:	3b01      	subs	r3, #1
 8003aa2:	b29a      	uxth	r2, r3
 8003aa4:	68fb      	ldr	r3, [r7, #12]
 8003aa6:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8003aa8:	68fb      	ldr	r3, [r7, #12]
 8003aaa:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003aac:	b29b      	uxth	r3, r3
 8003aae:	2b00      	cmp	r3, #0
 8003ab0:	d1cb      	bne.n	8003a4a <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003ab2:	683b      	ldr	r3, [r7, #0]
 8003ab4:	9300      	str	r3, [sp, #0]
 8003ab6:	697b      	ldr	r3, [r7, #20]
 8003ab8:	2200      	movs	r2, #0
 8003aba:	2140      	movs	r1, #64	; 0x40
 8003abc:	68f8      	ldr	r0, [r7, #12]
 8003abe:	f000 f814 	bl	8003aea <UART_WaitOnFlagUntilTimeout>
 8003ac2:	4603      	mov	r3, r0
 8003ac4:	2b00      	cmp	r3, #0
 8003ac6:	d005      	beq.n	8003ad4 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8003ac8:	68fb      	ldr	r3, [r7, #12]
 8003aca:	2220      	movs	r2, #32
 8003acc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      return HAL_TIMEOUT;
 8003ad0:	2303      	movs	r3, #3
 8003ad2:	e006      	b.n	8003ae2 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003ad4:	68fb      	ldr	r3, [r7, #12]
 8003ad6:	2220      	movs	r2, #32
 8003ad8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 8003adc:	2300      	movs	r3, #0
 8003ade:	e000      	b.n	8003ae2 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8003ae0:	2302      	movs	r3, #2
  }
}
 8003ae2:	4618      	mov	r0, r3
 8003ae4:	3720      	adds	r7, #32
 8003ae6:	46bd      	mov	sp, r7
 8003ae8:	bd80      	pop	{r7, pc}

08003aea <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8003aea:	b580      	push	{r7, lr}
 8003aec:	b086      	sub	sp, #24
 8003aee:	af00      	add	r7, sp, #0
 8003af0:	60f8      	str	r0, [r7, #12]
 8003af2:	60b9      	str	r1, [r7, #8]
 8003af4:	603b      	str	r3, [r7, #0]
 8003af6:	4613      	mov	r3, r2
 8003af8:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003afa:	e03b      	b.n	8003b74 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003afc:	6a3b      	ldr	r3, [r7, #32]
 8003afe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003b02:	d037      	beq.n	8003b74 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003b04:	f7fd fd40 	bl	8001588 <HAL_GetTick>
 8003b08:	4602      	mov	r2, r0
 8003b0a:	683b      	ldr	r3, [r7, #0]
 8003b0c:	1ad3      	subs	r3, r2, r3
 8003b0e:	6a3a      	ldr	r2, [r7, #32]
 8003b10:	429a      	cmp	r2, r3
 8003b12:	d302      	bcc.n	8003b1a <UART_WaitOnFlagUntilTimeout+0x30>
 8003b14:	6a3b      	ldr	r3, [r7, #32]
 8003b16:	2b00      	cmp	r3, #0
 8003b18:	d101      	bne.n	8003b1e <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8003b1a:	2303      	movs	r3, #3
 8003b1c:	e03a      	b.n	8003b94 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8003b1e:	68fb      	ldr	r3, [r7, #12]
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	68db      	ldr	r3, [r3, #12]
 8003b24:	f003 0304 	and.w	r3, r3, #4
 8003b28:	2b00      	cmp	r3, #0
 8003b2a:	d023      	beq.n	8003b74 <UART_WaitOnFlagUntilTimeout+0x8a>
 8003b2c:	68bb      	ldr	r3, [r7, #8]
 8003b2e:	2b80      	cmp	r3, #128	; 0x80
 8003b30:	d020      	beq.n	8003b74 <UART_WaitOnFlagUntilTimeout+0x8a>
 8003b32:	68bb      	ldr	r3, [r7, #8]
 8003b34:	2b40      	cmp	r3, #64	; 0x40
 8003b36:	d01d      	beq.n	8003b74 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8003b38:	68fb      	ldr	r3, [r7, #12]
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	f003 0308 	and.w	r3, r3, #8
 8003b42:	2b08      	cmp	r3, #8
 8003b44:	d116      	bne.n	8003b74 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8003b46:	2300      	movs	r3, #0
 8003b48:	617b      	str	r3, [r7, #20]
 8003b4a:	68fb      	ldr	r3, [r7, #12]
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	617b      	str	r3, [r7, #20]
 8003b52:	68fb      	ldr	r3, [r7, #12]
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	685b      	ldr	r3, [r3, #4]
 8003b58:	617b      	str	r3, [r7, #20]
 8003b5a:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003b5c:	68f8      	ldr	r0, [r7, #12]
 8003b5e:	f000 f81d 	bl	8003b9c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8003b62:	68fb      	ldr	r3, [r7, #12]
 8003b64:	2208      	movs	r2, #8
 8003b66:	645a      	str	r2, [r3, #68]	; 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003b68:	68fb      	ldr	r3, [r7, #12]
 8003b6a:	2200      	movs	r2, #0
 8003b6c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 8003b70:	2301      	movs	r3, #1
 8003b72:	e00f      	b.n	8003b94 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003b74:	68fb      	ldr	r3, [r7, #12]
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	681a      	ldr	r2, [r3, #0]
 8003b7a:	68bb      	ldr	r3, [r7, #8]
 8003b7c:	4013      	ands	r3, r2
 8003b7e:	68ba      	ldr	r2, [r7, #8]
 8003b80:	429a      	cmp	r2, r3
 8003b82:	bf0c      	ite	eq
 8003b84:	2301      	moveq	r3, #1
 8003b86:	2300      	movne	r3, #0
 8003b88:	b2db      	uxtb	r3, r3
 8003b8a:	461a      	mov	r2, r3
 8003b8c:	79fb      	ldrb	r3, [r7, #7]
 8003b8e:	429a      	cmp	r2, r3
 8003b90:	d0b4      	beq.n	8003afc <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003b92:	2300      	movs	r3, #0
}
 8003b94:	4618      	mov	r0, r3
 8003b96:	3718      	adds	r7, #24
 8003b98:	46bd      	mov	sp, r7
 8003b9a:	bd80      	pop	{r7, pc}

08003b9c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003b9c:	b480      	push	{r7}
 8003b9e:	b095      	sub	sp, #84	; 0x54
 8003ba0:	af00      	add	r7, sp, #0
 8003ba2:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	330c      	adds	r3, #12
 8003baa:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003bac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003bae:	e853 3f00 	ldrex	r3, [r3]
 8003bb2:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8003bb4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003bb6:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003bba:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	330c      	adds	r3, #12
 8003bc2:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003bc4:	643a      	str	r2, [r7, #64]	; 0x40
 8003bc6:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003bc8:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8003bca:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8003bcc:	e841 2300 	strex	r3, r2, [r1]
 8003bd0:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8003bd2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003bd4:	2b00      	cmp	r3, #0
 8003bd6:	d1e5      	bne.n	8003ba4 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	3314      	adds	r3, #20
 8003bde:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003be0:	6a3b      	ldr	r3, [r7, #32]
 8003be2:	e853 3f00 	ldrex	r3, [r3]
 8003be6:	61fb      	str	r3, [r7, #28]
   return(result);
 8003be8:	69fb      	ldr	r3, [r7, #28]
 8003bea:	f023 0301 	bic.w	r3, r3, #1
 8003bee:	64bb      	str	r3, [r7, #72]	; 0x48
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	3314      	adds	r3, #20
 8003bf6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003bf8:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003bfa:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003bfc:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003bfe:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003c00:	e841 2300 	strex	r3, r2, [r1]
 8003c04:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003c06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c08:	2b00      	cmp	r3, #0
 8003c0a:	d1e5      	bne.n	8003bd8 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c10:	2b01      	cmp	r3, #1
 8003c12:	d119      	bne.n	8003c48 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	330c      	adds	r3, #12
 8003c1a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c1c:	68fb      	ldr	r3, [r7, #12]
 8003c1e:	e853 3f00 	ldrex	r3, [r3]
 8003c22:	60bb      	str	r3, [r7, #8]
   return(result);
 8003c24:	68bb      	ldr	r3, [r7, #8]
 8003c26:	f023 0310 	bic.w	r3, r3, #16
 8003c2a:	647b      	str	r3, [r7, #68]	; 0x44
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	330c      	adds	r3, #12
 8003c32:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003c34:	61ba      	str	r2, [r7, #24]
 8003c36:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c38:	6979      	ldr	r1, [r7, #20]
 8003c3a:	69ba      	ldr	r2, [r7, #24]
 8003c3c:	e841 2300 	strex	r3, r2, [r1]
 8003c40:	613b      	str	r3, [r7, #16]
   return(result);
 8003c42:	693b      	ldr	r3, [r7, #16]
 8003c44:	2b00      	cmp	r3, #0
 8003c46:	d1e5      	bne.n	8003c14 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	2220      	movs	r2, #32
 8003c4c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	2200      	movs	r2, #0
 8003c54:	631a      	str	r2, [r3, #48]	; 0x30
}
 8003c56:	bf00      	nop
 8003c58:	3754      	adds	r7, #84	; 0x54
 8003c5a:	46bd      	mov	sp, r7
 8003c5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c60:	4770      	bx	lr
	...

08003c64 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003c64:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003c68:	b0c0      	sub	sp, #256	; 0x100
 8003c6a:	af00      	add	r7, sp, #0
 8003c6c:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003c70:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	691b      	ldr	r3, [r3, #16]
 8003c78:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8003c7c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003c80:	68d9      	ldr	r1, [r3, #12]
 8003c82:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003c86:	681a      	ldr	r2, [r3, #0]
 8003c88:	ea40 0301 	orr.w	r3, r0, r1
 8003c8c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003c8e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003c92:	689a      	ldr	r2, [r3, #8]
 8003c94:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003c98:	691b      	ldr	r3, [r3, #16]
 8003c9a:	431a      	orrs	r2, r3
 8003c9c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003ca0:	695b      	ldr	r3, [r3, #20]
 8003ca2:	431a      	orrs	r2, r3
 8003ca4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003ca8:	69db      	ldr	r3, [r3, #28]
 8003caa:	4313      	orrs	r3, r2
 8003cac:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8003cb0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	68db      	ldr	r3, [r3, #12]
 8003cb8:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8003cbc:	f021 010c 	bic.w	r1, r1, #12
 8003cc0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003cc4:	681a      	ldr	r2, [r3, #0]
 8003cc6:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8003cca:	430b      	orrs	r3, r1
 8003ccc:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003cce:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	695b      	ldr	r3, [r3, #20]
 8003cd6:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8003cda:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003cde:	6999      	ldr	r1, [r3, #24]
 8003ce0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003ce4:	681a      	ldr	r2, [r3, #0]
 8003ce6:	ea40 0301 	orr.w	r3, r0, r1
 8003cea:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003cec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003cf0:	681a      	ldr	r2, [r3, #0]
 8003cf2:	4b8f      	ldr	r3, [pc, #572]	; (8003f30 <UART_SetConfig+0x2cc>)
 8003cf4:	429a      	cmp	r2, r3
 8003cf6:	d005      	beq.n	8003d04 <UART_SetConfig+0xa0>
 8003cf8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003cfc:	681a      	ldr	r2, [r3, #0]
 8003cfe:	4b8d      	ldr	r3, [pc, #564]	; (8003f34 <UART_SetConfig+0x2d0>)
 8003d00:	429a      	cmp	r2, r3
 8003d02:	d104      	bne.n	8003d0e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8003d04:	f7ff fb5a 	bl	80033bc <HAL_RCC_GetPCLK2Freq>
 8003d08:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8003d0c:	e003      	b.n	8003d16 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8003d0e:	f7ff fb41 	bl	8003394 <HAL_RCC_GetPCLK1Freq>
 8003d12:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003d16:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003d1a:	69db      	ldr	r3, [r3, #28]
 8003d1c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003d20:	f040 810c 	bne.w	8003f3c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003d24:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003d28:	2200      	movs	r2, #0
 8003d2a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8003d2e:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8003d32:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8003d36:	4622      	mov	r2, r4
 8003d38:	462b      	mov	r3, r5
 8003d3a:	1891      	adds	r1, r2, r2
 8003d3c:	65b9      	str	r1, [r7, #88]	; 0x58
 8003d3e:	415b      	adcs	r3, r3
 8003d40:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003d42:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8003d46:	4621      	mov	r1, r4
 8003d48:	eb12 0801 	adds.w	r8, r2, r1
 8003d4c:	4629      	mov	r1, r5
 8003d4e:	eb43 0901 	adc.w	r9, r3, r1
 8003d52:	f04f 0200 	mov.w	r2, #0
 8003d56:	f04f 0300 	mov.w	r3, #0
 8003d5a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003d5e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003d62:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003d66:	4690      	mov	r8, r2
 8003d68:	4699      	mov	r9, r3
 8003d6a:	4623      	mov	r3, r4
 8003d6c:	eb18 0303 	adds.w	r3, r8, r3
 8003d70:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8003d74:	462b      	mov	r3, r5
 8003d76:	eb49 0303 	adc.w	r3, r9, r3
 8003d7a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8003d7e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003d82:	685b      	ldr	r3, [r3, #4]
 8003d84:	2200      	movs	r2, #0
 8003d86:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8003d8a:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8003d8e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8003d92:	460b      	mov	r3, r1
 8003d94:	18db      	adds	r3, r3, r3
 8003d96:	653b      	str	r3, [r7, #80]	; 0x50
 8003d98:	4613      	mov	r3, r2
 8003d9a:	eb42 0303 	adc.w	r3, r2, r3
 8003d9e:	657b      	str	r3, [r7, #84]	; 0x54
 8003da0:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8003da4:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8003da8:	f7fc ff06 	bl	8000bb8 <__aeabi_uldivmod>
 8003dac:	4602      	mov	r2, r0
 8003dae:	460b      	mov	r3, r1
 8003db0:	4b61      	ldr	r3, [pc, #388]	; (8003f38 <UART_SetConfig+0x2d4>)
 8003db2:	fba3 2302 	umull	r2, r3, r3, r2
 8003db6:	095b      	lsrs	r3, r3, #5
 8003db8:	011c      	lsls	r4, r3, #4
 8003dba:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003dbe:	2200      	movs	r2, #0
 8003dc0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003dc4:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8003dc8:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8003dcc:	4642      	mov	r2, r8
 8003dce:	464b      	mov	r3, r9
 8003dd0:	1891      	adds	r1, r2, r2
 8003dd2:	64b9      	str	r1, [r7, #72]	; 0x48
 8003dd4:	415b      	adcs	r3, r3
 8003dd6:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003dd8:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8003ddc:	4641      	mov	r1, r8
 8003dde:	eb12 0a01 	adds.w	sl, r2, r1
 8003de2:	4649      	mov	r1, r9
 8003de4:	eb43 0b01 	adc.w	fp, r3, r1
 8003de8:	f04f 0200 	mov.w	r2, #0
 8003dec:	f04f 0300 	mov.w	r3, #0
 8003df0:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8003df4:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8003df8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003dfc:	4692      	mov	sl, r2
 8003dfe:	469b      	mov	fp, r3
 8003e00:	4643      	mov	r3, r8
 8003e02:	eb1a 0303 	adds.w	r3, sl, r3
 8003e06:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8003e0a:	464b      	mov	r3, r9
 8003e0c:	eb4b 0303 	adc.w	r3, fp, r3
 8003e10:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8003e14:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003e18:	685b      	ldr	r3, [r3, #4]
 8003e1a:	2200      	movs	r2, #0
 8003e1c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8003e20:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8003e24:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8003e28:	460b      	mov	r3, r1
 8003e2a:	18db      	adds	r3, r3, r3
 8003e2c:	643b      	str	r3, [r7, #64]	; 0x40
 8003e2e:	4613      	mov	r3, r2
 8003e30:	eb42 0303 	adc.w	r3, r2, r3
 8003e34:	647b      	str	r3, [r7, #68]	; 0x44
 8003e36:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8003e3a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8003e3e:	f7fc febb 	bl	8000bb8 <__aeabi_uldivmod>
 8003e42:	4602      	mov	r2, r0
 8003e44:	460b      	mov	r3, r1
 8003e46:	4611      	mov	r1, r2
 8003e48:	4b3b      	ldr	r3, [pc, #236]	; (8003f38 <UART_SetConfig+0x2d4>)
 8003e4a:	fba3 2301 	umull	r2, r3, r3, r1
 8003e4e:	095b      	lsrs	r3, r3, #5
 8003e50:	2264      	movs	r2, #100	; 0x64
 8003e52:	fb02 f303 	mul.w	r3, r2, r3
 8003e56:	1acb      	subs	r3, r1, r3
 8003e58:	00db      	lsls	r3, r3, #3
 8003e5a:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8003e5e:	4b36      	ldr	r3, [pc, #216]	; (8003f38 <UART_SetConfig+0x2d4>)
 8003e60:	fba3 2302 	umull	r2, r3, r3, r2
 8003e64:	095b      	lsrs	r3, r3, #5
 8003e66:	005b      	lsls	r3, r3, #1
 8003e68:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8003e6c:	441c      	add	r4, r3
 8003e6e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003e72:	2200      	movs	r2, #0
 8003e74:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003e78:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8003e7c:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8003e80:	4642      	mov	r2, r8
 8003e82:	464b      	mov	r3, r9
 8003e84:	1891      	adds	r1, r2, r2
 8003e86:	63b9      	str	r1, [r7, #56]	; 0x38
 8003e88:	415b      	adcs	r3, r3
 8003e8a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003e8c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8003e90:	4641      	mov	r1, r8
 8003e92:	1851      	adds	r1, r2, r1
 8003e94:	6339      	str	r1, [r7, #48]	; 0x30
 8003e96:	4649      	mov	r1, r9
 8003e98:	414b      	adcs	r3, r1
 8003e9a:	637b      	str	r3, [r7, #52]	; 0x34
 8003e9c:	f04f 0200 	mov.w	r2, #0
 8003ea0:	f04f 0300 	mov.w	r3, #0
 8003ea4:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8003ea8:	4659      	mov	r1, fp
 8003eaa:	00cb      	lsls	r3, r1, #3
 8003eac:	4651      	mov	r1, sl
 8003eae:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003eb2:	4651      	mov	r1, sl
 8003eb4:	00ca      	lsls	r2, r1, #3
 8003eb6:	4610      	mov	r0, r2
 8003eb8:	4619      	mov	r1, r3
 8003eba:	4603      	mov	r3, r0
 8003ebc:	4642      	mov	r2, r8
 8003ebe:	189b      	adds	r3, r3, r2
 8003ec0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8003ec4:	464b      	mov	r3, r9
 8003ec6:	460a      	mov	r2, r1
 8003ec8:	eb42 0303 	adc.w	r3, r2, r3
 8003ecc:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003ed0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003ed4:	685b      	ldr	r3, [r3, #4]
 8003ed6:	2200      	movs	r2, #0
 8003ed8:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8003edc:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8003ee0:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8003ee4:	460b      	mov	r3, r1
 8003ee6:	18db      	adds	r3, r3, r3
 8003ee8:	62bb      	str	r3, [r7, #40]	; 0x28
 8003eea:	4613      	mov	r3, r2
 8003eec:	eb42 0303 	adc.w	r3, r2, r3
 8003ef0:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003ef2:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003ef6:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8003efa:	f7fc fe5d 	bl	8000bb8 <__aeabi_uldivmod>
 8003efe:	4602      	mov	r2, r0
 8003f00:	460b      	mov	r3, r1
 8003f02:	4b0d      	ldr	r3, [pc, #52]	; (8003f38 <UART_SetConfig+0x2d4>)
 8003f04:	fba3 1302 	umull	r1, r3, r3, r2
 8003f08:	095b      	lsrs	r3, r3, #5
 8003f0a:	2164      	movs	r1, #100	; 0x64
 8003f0c:	fb01 f303 	mul.w	r3, r1, r3
 8003f10:	1ad3      	subs	r3, r2, r3
 8003f12:	00db      	lsls	r3, r3, #3
 8003f14:	3332      	adds	r3, #50	; 0x32
 8003f16:	4a08      	ldr	r2, [pc, #32]	; (8003f38 <UART_SetConfig+0x2d4>)
 8003f18:	fba2 2303 	umull	r2, r3, r2, r3
 8003f1c:	095b      	lsrs	r3, r3, #5
 8003f1e:	f003 0207 	and.w	r2, r3, #7
 8003f22:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	4422      	add	r2, r4
 8003f2a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8003f2c:	e106      	b.n	800413c <UART_SetConfig+0x4d8>
 8003f2e:	bf00      	nop
 8003f30:	40011000 	.word	0x40011000
 8003f34:	40011400 	.word	0x40011400
 8003f38:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003f3c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003f40:	2200      	movs	r2, #0
 8003f42:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8003f46:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8003f4a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8003f4e:	4642      	mov	r2, r8
 8003f50:	464b      	mov	r3, r9
 8003f52:	1891      	adds	r1, r2, r2
 8003f54:	6239      	str	r1, [r7, #32]
 8003f56:	415b      	adcs	r3, r3
 8003f58:	627b      	str	r3, [r7, #36]	; 0x24
 8003f5a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8003f5e:	4641      	mov	r1, r8
 8003f60:	1854      	adds	r4, r2, r1
 8003f62:	4649      	mov	r1, r9
 8003f64:	eb43 0501 	adc.w	r5, r3, r1
 8003f68:	f04f 0200 	mov.w	r2, #0
 8003f6c:	f04f 0300 	mov.w	r3, #0
 8003f70:	00eb      	lsls	r3, r5, #3
 8003f72:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003f76:	00e2      	lsls	r2, r4, #3
 8003f78:	4614      	mov	r4, r2
 8003f7a:	461d      	mov	r5, r3
 8003f7c:	4643      	mov	r3, r8
 8003f7e:	18e3      	adds	r3, r4, r3
 8003f80:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8003f84:	464b      	mov	r3, r9
 8003f86:	eb45 0303 	adc.w	r3, r5, r3
 8003f8a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8003f8e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003f92:	685b      	ldr	r3, [r3, #4]
 8003f94:	2200      	movs	r2, #0
 8003f96:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8003f9a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8003f9e:	f04f 0200 	mov.w	r2, #0
 8003fa2:	f04f 0300 	mov.w	r3, #0
 8003fa6:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8003faa:	4629      	mov	r1, r5
 8003fac:	008b      	lsls	r3, r1, #2
 8003fae:	4621      	mov	r1, r4
 8003fb0:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003fb4:	4621      	mov	r1, r4
 8003fb6:	008a      	lsls	r2, r1, #2
 8003fb8:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8003fbc:	f7fc fdfc 	bl	8000bb8 <__aeabi_uldivmod>
 8003fc0:	4602      	mov	r2, r0
 8003fc2:	460b      	mov	r3, r1
 8003fc4:	4b60      	ldr	r3, [pc, #384]	; (8004148 <UART_SetConfig+0x4e4>)
 8003fc6:	fba3 2302 	umull	r2, r3, r3, r2
 8003fca:	095b      	lsrs	r3, r3, #5
 8003fcc:	011c      	lsls	r4, r3, #4
 8003fce:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003fd2:	2200      	movs	r2, #0
 8003fd4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8003fd8:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8003fdc:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8003fe0:	4642      	mov	r2, r8
 8003fe2:	464b      	mov	r3, r9
 8003fe4:	1891      	adds	r1, r2, r2
 8003fe6:	61b9      	str	r1, [r7, #24]
 8003fe8:	415b      	adcs	r3, r3
 8003fea:	61fb      	str	r3, [r7, #28]
 8003fec:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003ff0:	4641      	mov	r1, r8
 8003ff2:	1851      	adds	r1, r2, r1
 8003ff4:	6139      	str	r1, [r7, #16]
 8003ff6:	4649      	mov	r1, r9
 8003ff8:	414b      	adcs	r3, r1
 8003ffa:	617b      	str	r3, [r7, #20]
 8003ffc:	f04f 0200 	mov.w	r2, #0
 8004000:	f04f 0300 	mov.w	r3, #0
 8004004:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004008:	4659      	mov	r1, fp
 800400a:	00cb      	lsls	r3, r1, #3
 800400c:	4651      	mov	r1, sl
 800400e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004012:	4651      	mov	r1, sl
 8004014:	00ca      	lsls	r2, r1, #3
 8004016:	4610      	mov	r0, r2
 8004018:	4619      	mov	r1, r3
 800401a:	4603      	mov	r3, r0
 800401c:	4642      	mov	r2, r8
 800401e:	189b      	adds	r3, r3, r2
 8004020:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8004024:	464b      	mov	r3, r9
 8004026:	460a      	mov	r2, r1
 8004028:	eb42 0303 	adc.w	r3, r2, r3
 800402c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8004030:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004034:	685b      	ldr	r3, [r3, #4]
 8004036:	2200      	movs	r2, #0
 8004038:	67bb      	str	r3, [r7, #120]	; 0x78
 800403a:	67fa      	str	r2, [r7, #124]	; 0x7c
 800403c:	f04f 0200 	mov.w	r2, #0
 8004040:	f04f 0300 	mov.w	r3, #0
 8004044:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8004048:	4649      	mov	r1, r9
 800404a:	008b      	lsls	r3, r1, #2
 800404c:	4641      	mov	r1, r8
 800404e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004052:	4641      	mov	r1, r8
 8004054:	008a      	lsls	r2, r1, #2
 8004056:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800405a:	f7fc fdad 	bl	8000bb8 <__aeabi_uldivmod>
 800405e:	4602      	mov	r2, r0
 8004060:	460b      	mov	r3, r1
 8004062:	4611      	mov	r1, r2
 8004064:	4b38      	ldr	r3, [pc, #224]	; (8004148 <UART_SetConfig+0x4e4>)
 8004066:	fba3 2301 	umull	r2, r3, r3, r1
 800406a:	095b      	lsrs	r3, r3, #5
 800406c:	2264      	movs	r2, #100	; 0x64
 800406e:	fb02 f303 	mul.w	r3, r2, r3
 8004072:	1acb      	subs	r3, r1, r3
 8004074:	011b      	lsls	r3, r3, #4
 8004076:	3332      	adds	r3, #50	; 0x32
 8004078:	4a33      	ldr	r2, [pc, #204]	; (8004148 <UART_SetConfig+0x4e4>)
 800407a:	fba2 2303 	umull	r2, r3, r2, r3
 800407e:	095b      	lsrs	r3, r3, #5
 8004080:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004084:	441c      	add	r4, r3
 8004086:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800408a:	2200      	movs	r2, #0
 800408c:	673b      	str	r3, [r7, #112]	; 0x70
 800408e:	677a      	str	r2, [r7, #116]	; 0x74
 8004090:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8004094:	4642      	mov	r2, r8
 8004096:	464b      	mov	r3, r9
 8004098:	1891      	adds	r1, r2, r2
 800409a:	60b9      	str	r1, [r7, #8]
 800409c:	415b      	adcs	r3, r3
 800409e:	60fb      	str	r3, [r7, #12]
 80040a0:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80040a4:	4641      	mov	r1, r8
 80040a6:	1851      	adds	r1, r2, r1
 80040a8:	6039      	str	r1, [r7, #0]
 80040aa:	4649      	mov	r1, r9
 80040ac:	414b      	adcs	r3, r1
 80040ae:	607b      	str	r3, [r7, #4]
 80040b0:	f04f 0200 	mov.w	r2, #0
 80040b4:	f04f 0300 	mov.w	r3, #0
 80040b8:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80040bc:	4659      	mov	r1, fp
 80040be:	00cb      	lsls	r3, r1, #3
 80040c0:	4651      	mov	r1, sl
 80040c2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80040c6:	4651      	mov	r1, sl
 80040c8:	00ca      	lsls	r2, r1, #3
 80040ca:	4610      	mov	r0, r2
 80040cc:	4619      	mov	r1, r3
 80040ce:	4603      	mov	r3, r0
 80040d0:	4642      	mov	r2, r8
 80040d2:	189b      	adds	r3, r3, r2
 80040d4:	66bb      	str	r3, [r7, #104]	; 0x68
 80040d6:	464b      	mov	r3, r9
 80040d8:	460a      	mov	r2, r1
 80040da:	eb42 0303 	adc.w	r3, r2, r3
 80040de:	66fb      	str	r3, [r7, #108]	; 0x6c
 80040e0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80040e4:	685b      	ldr	r3, [r3, #4]
 80040e6:	2200      	movs	r2, #0
 80040e8:	663b      	str	r3, [r7, #96]	; 0x60
 80040ea:	667a      	str	r2, [r7, #100]	; 0x64
 80040ec:	f04f 0200 	mov.w	r2, #0
 80040f0:	f04f 0300 	mov.w	r3, #0
 80040f4:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 80040f8:	4649      	mov	r1, r9
 80040fa:	008b      	lsls	r3, r1, #2
 80040fc:	4641      	mov	r1, r8
 80040fe:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004102:	4641      	mov	r1, r8
 8004104:	008a      	lsls	r2, r1, #2
 8004106:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 800410a:	f7fc fd55 	bl	8000bb8 <__aeabi_uldivmod>
 800410e:	4602      	mov	r2, r0
 8004110:	460b      	mov	r3, r1
 8004112:	4b0d      	ldr	r3, [pc, #52]	; (8004148 <UART_SetConfig+0x4e4>)
 8004114:	fba3 1302 	umull	r1, r3, r3, r2
 8004118:	095b      	lsrs	r3, r3, #5
 800411a:	2164      	movs	r1, #100	; 0x64
 800411c:	fb01 f303 	mul.w	r3, r1, r3
 8004120:	1ad3      	subs	r3, r2, r3
 8004122:	011b      	lsls	r3, r3, #4
 8004124:	3332      	adds	r3, #50	; 0x32
 8004126:	4a08      	ldr	r2, [pc, #32]	; (8004148 <UART_SetConfig+0x4e4>)
 8004128:	fba2 2303 	umull	r2, r3, r2, r3
 800412c:	095b      	lsrs	r3, r3, #5
 800412e:	f003 020f 	and.w	r2, r3, #15
 8004132:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	4422      	add	r2, r4
 800413a:	609a      	str	r2, [r3, #8]
}
 800413c:	bf00      	nop
 800413e:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8004142:	46bd      	mov	sp, r7
 8004144:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004148:	51eb851f 	.word	0x51eb851f

0800414c <UART_Message>:
#include "math.h"


//Fonction pour envoyer du texte à TeraTerm
void UART_Message(char * buffer, UART_HandleTypeDef* huart2)
{
 800414c:	b580      	push	{r7, lr}
 800414e:	b084      	sub	sp, #16
 8004150:	af00      	add	r7, sp, #0
 8004152:	6078      	str	r0, [r7, #4]
 8004154:	6039      	str	r1, [r7, #0]
	uint32_t len = strlen(buffer);
 8004156:	6878      	ldr	r0, [r7, #4]
 8004158:	f7fc f842 	bl	80001e0 <strlen>
 800415c:	60f8      	str	r0, [r7, #12]
	HAL_UART_Transmit(huart2,(uint8_t*)buffer, len, 100);
 800415e:	68fb      	ldr	r3, [r7, #12]
 8004160:	b29a      	uxth	r2, r3
 8004162:	2364      	movs	r3, #100	; 0x64
 8004164:	6879      	ldr	r1, [r7, #4]
 8004166:	6838      	ldr	r0, [r7, #0]
 8004168:	f7ff fc34 	bl	80039d4 <HAL_UART_Transmit>
}
 800416c:	bf00      	nop
 800416e:	3710      	adds	r7, #16
 8004170:	46bd      	mov	sp, r7
 8004172:	bd80      	pop	{r7, pc}
 8004174:	0000      	movs	r0, r0
	...

08004178 <UART_FloatToDisplay>:

//Fonction pour décomposer un float en pls décimal pour afficher sur TeraTerm
void UART_FloatToDisplay(float nb,uint8_t precision,UART_HandleTypeDef* huart2,Matrix *device)
{
 8004178:	b5b0      	push	{r4, r5, r7, lr}
 800417a:	ed2d 8b02 	vpush	{d8}
 800417e:	b08a      	sub	sp, #40	; 0x28
 8004180:	af00      	add	r7, sp, #0
 8004182:	ed87 0a03 	vstr	s0, [r7, #12]
 8004186:	4603      	mov	r3, r0
 8004188:	6079      	str	r1, [r7, #4]
 800418a:	603a      	str	r2, [r7, #0]
 800418c:	72fb      	strb	r3, [r7, #11]
	char Buf[6];
	char Buf_2[6];
	char tmpchar;

	int tmp = nb*powf(10,4);
 800418e:	edd7 7a03 	vldr	s15, [r7, #12]
 8004192:	ed9f 7a9b 	vldr	s14, [pc, #620]	; 8004400 <UART_FloatToDisplay+0x288>
 8004196:	ee67 7a87 	vmul.f32	s15, s15, s14
 800419a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800419e:	ee17 3a90 	vmov	r3, s15
 80041a2:	627b      	str	r3, [r7, #36]	; 0x24
	sprintf(Buf_2,"%d",tmp);
 80041a4:	f107 0310 	add.w	r3, r7, #16
 80041a8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80041aa:	4996      	ldr	r1, [pc, #600]	; (8004404 <UART_FloatToDisplay+0x28c>)
 80041ac:	4618      	mov	r0, r3
 80041ae:	f001 fa41 	bl	8005634 <siprintf>
	tmpchar = Buf_2[2];
 80041b2:	7cbb      	ldrb	r3, [r7, #18]
 80041b4:	77bb      	strb	r3, [r7, #30]
	Buf_2[2] = '.';
 80041b6:	232e      	movs	r3, #46	; 0x2e
 80041b8:	74bb      	strb	r3, [r7, #18]
	Buf_2[3] = tmpchar ;
 80041ba:	7fbb      	ldrb	r3, [r7, #30]
 80041bc:	74fb      	strb	r3, [r7, #19]
	Buf_2[4]= 'd';
 80041be:	2364      	movs	r3, #100	; 0x64
 80041c0:	753b      	strb	r3, [r7, #20]
	Buf_2[5] = '\0';
 80041c2:	2300      	movs	r3, #0
 80041c4:	757b      	strb	r3, [r7, #21]

	tmp = fmod(nb,powf(10,2));//Extraire dizaine
 80041c6:	68f8      	ldr	r0, [r7, #12]
 80041c8:	f7fc f9c6 	bl	8000558 <__aeabi_f2d>
 80041cc:	4602      	mov	r2, r0
 80041ce:	460b      	mov	r3, r1
 80041d0:	ed9f 1b87 	vldr	d1, [pc, #540]	; 80043f0 <UART_FloatToDisplay+0x278>
 80041d4:	ec43 2b10 	vmov	d0, r2, r3
 80041d8:	f001 fecf 	bl	8005f7a <fmod>
 80041dc:	ec53 2b10 	vmov	r2, r3, d0
 80041e0:	4610      	mov	r0, r2
 80041e2:	4619      	mov	r1, r3
 80041e4:	f7fc fcc0 	bl	8000b68 <__aeabi_d2iz>
 80041e8:	4603      	mov	r3, r0
 80041ea:	627b      	str	r3, [r7, #36]	; 0x24
	float puissance = precision;
 80041ec:	7afb      	ldrb	r3, [r7, #11]
 80041ee:	ee07 3a90 	vmov	s15, r3
 80041f2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80041f6:	edc7 7a08 	vstr	s15, [r7, #32]


	sprintf(Buf,"%d",tmp);								//Copier le int en un char pour afficher
 80041fa:	f107 0318 	add.w	r3, r7, #24
 80041fe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004200:	4980      	ldr	r1, [pc, #512]	; (8004404 <UART_FloatToDisplay+0x28c>)
 8004202:	4618      	mov	r0, r3
 8004204:	f001 fa16 	bl	8005634 <siprintf>
	HAL_UART_Transmit(huart2,Buf, 1, 100);
 8004208:	f107 0118 	add.w	r1, r7, #24
 800420c:	2364      	movs	r3, #100	; 0x64
 800420e:	2201      	movs	r2, #1
 8004210:	6878      	ldr	r0, [r7, #4]
 8004212:	f7ff fbdf 	bl	80039d4 <HAL_UART_Transmit>

	/*Bloc pour extraire et afficher unité*/
	tmp = nb * pow(10,precision-1) ;
 8004216:	68f8      	ldr	r0, [r7, #12]
 8004218:	f7fc f99e 	bl	8000558 <__aeabi_f2d>
 800421c:	4604      	mov	r4, r0
 800421e:	460d      	mov	r5, r1
 8004220:	7afb      	ldrb	r3, [r7, #11]
 8004222:	3b01      	subs	r3, #1
 8004224:	4618      	mov	r0, r3
 8004226:	f7fc f985 	bl	8000534 <__aeabi_i2d>
 800422a:	4602      	mov	r2, r0
 800422c:	460b      	mov	r3, r1
 800422e:	ec43 2b11 	vmov	d1, r2, r3
 8004232:	ed9f 0b71 	vldr	d0, [pc, #452]	; 80043f8 <UART_FloatToDisplay+0x280>
 8004236:	f001 fecf 	bl	8005fd8 <pow>
 800423a:	ec53 2b10 	vmov	r2, r3, d0
 800423e:	4620      	mov	r0, r4
 8004240:	4629      	mov	r1, r5
 8004242:	f7fc f9e1 	bl	8000608 <__aeabi_dmul>
 8004246:	4602      	mov	r2, r0
 8004248:	460b      	mov	r3, r1
 800424a:	4610      	mov	r0, r2
 800424c:	4619      	mov	r1, r3
 800424e:	f7fc fc8b 	bl	8000b68 <__aeabi_d2iz>
 8004252:	4603      	mov	r3, r0
 8004254:	627b      	str	r3, [r7, #36]	; 0x24
	tmp = fmod(nb,powf(10,1));
 8004256:	68f8      	ldr	r0, [r7, #12]
 8004258:	f7fc f97e 	bl	8000558 <__aeabi_f2d>
 800425c:	4602      	mov	r2, r0
 800425e:	460b      	mov	r3, r1
 8004260:	ed9f 1b65 	vldr	d1, [pc, #404]	; 80043f8 <UART_FloatToDisplay+0x280>
 8004264:	ec43 2b10 	vmov	d0, r2, r3
 8004268:	f001 fe87 	bl	8005f7a <fmod>
 800426c:	ec53 2b10 	vmov	r2, r3, d0
 8004270:	4610      	mov	r0, r2
 8004272:	4619      	mov	r1, r3
 8004274:	f7fc fc78 	bl	8000b68 <__aeabi_d2iz>
 8004278:	4603      	mov	r3, r0
 800427a:	627b      	str	r3, [r7, #36]	; 0x24
	sprintf(Buf,"%d",tmp);
 800427c:	f107 0318 	add.w	r3, r7, #24
 8004280:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004282:	4960      	ldr	r1, [pc, #384]	; (8004404 <UART_FloatToDisplay+0x28c>)
 8004284:	4618      	mov	r0, r3
 8004286:	f001 f9d5 	bl	8005634 <siprintf>
	HAL_UART_Transmit(huart2,Buf, 1, 100);
 800428a:	f107 0118 	add.w	r1, r7, #24
 800428e:	2364      	movs	r3, #100	; 0x64
 8004290:	2201      	movs	r2, #1
 8004292:	6878      	ldr	r0, [r7, #4]
 8004294:	f7ff fb9e 	bl	80039d4 <HAL_UART_Transmit>

	/*Bloc pour afficher chiffre après virgule selon précision souhaité*/
	UART_Message(",", huart2);
 8004298:	6879      	ldr	r1, [r7, #4]
 800429a:	485b      	ldr	r0, [pc, #364]	; (8004408 <UART_FloatToDisplay+0x290>)
 800429c:	f7ff ff56 	bl	800414c <UART_Message>
	tmp = nb * pow(10,precision) ;
 80042a0:	68f8      	ldr	r0, [r7, #12]
 80042a2:	f7fc f959 	bl	8000558 <__aeabi_f2d>
 80042a6:	4604      	mov	r4, r0
 80042a8:	460d      	mov	r5, r1
 80042aa:	7afb      	ldrb	r3, [r7, #11]
 80042ac:	4618      	mov	r0, r3
 80042ae:	f7fc f931 	bl	8000514 <__aeabi_ui2d>
 80042b2:	4602      	mov	r2, r0
 80042b4:	460b      	mov	r3, r1
 80042b6:	ec43 2b11 	vmov	d1, r2, r3
 80042ba:	ed9f 0b4f 	vldr	d0, [pc, #316]	; 80043f8 <UART_FloatToDisplay+0x280>
 80042be:	f001 fe8b 	bl	8005fd8 <pow>
 80042c2:	ec53 2b10 	vmov	r2, r3, d0
 80042c6:	4620      	mov	r0, r4
 80042c8:	4629      	mov	r1, r5
 80042ca:	f7fc f99d 	bl	8000608 <__aeabi_dmul>
 80042ce:	4602      	mov	r2, r0
 80042d0:	460b      	mov	r3, r1
 80042d2:	4610      	mov	r0, r2
 80042d4:	4619      	mov	r1, r3
 80042d6:	f7fc fc47 	bl	8000b68 <__aeabi_d2iz>
 80042da:	4603      	mov	r3, r0
 80042dc:	627b      	str	r3, [r7, #36]	; 0x24

	for(uint8_t i = precision ; i>0; i--)
 80042de:	7afb      	ldrb	r3, [r7, #11]
 80042e0:	77fb      	strb	r3, [r7, #31]
 80042e2:	e071      	b.n	80043c8 <UART_FloatToDisplay+0x250>
	{
		tmp = fmodf(tmp,powf(10,puissance));
 80042e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042e6:	ee07 3a90 	vmov	s15, r3
 80042ea:	eeb8 8ae7 	vcvt.f32.s32	s16, s15
 80042ee:	edd7 0a08 	vldr	s1, [r7, #32]
 80042f2:	eeb2 0a04 	vmov.f32	s0, #36	; 0x41200000  10.0
 80042f6:	f001 feff 	bl	80060f8 <powf>
 80042fa:	eef0 7a40 	vmov.f32	s15, s0
 80042fe:	eef0 0a67 	vmov.f32	s1, s15
 8004302:	eeb0 0a48 	vmov.f32	s0, s16
 8004306:	f001 fed7 	bl	80060b8 <fmodf>
 800430a:	eef0 7a40 	vmov.f32	s15, s0
 800430e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004312:	ee17 3a90 	vmov	r3, s15
 8004316:	627b      	str	r3, [r7, #36]	; 0x24
		tmp = tmp / pow(10,i-1);
 8004318:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800431a:	f7fc f90b 	bl	8000534 <__aeabi_i2d>
 800431e:	4604      	mov	r4, r0
 8004320:	460d      	mov	r5, r1
 8004322:	7ffb      	ldrb	r3, [r7, #31]
 8004324:	3b01      	subs	r3, #1
 8004326:	4618      	mov	r0, r3
 8004328:	f7fc f904 	bl	8000534 <__aeabi_i2d>
 800432c:	4602      	mov	r2, r0
 800432e:	460b      	mov	r3, r1
 8004330:	ec43 2b11 	vmov	d1, r2, r3
 8004334:	ed9f 0b30 	vldr	d0, [pc, #192]	; 80043f8 <UART_FloatToDisplay+0x280>
 8004338:	f001 fe4e 	bl	8005fd8 <pow>
 800433c:	ec53 2b10 	vmov	r2, r3, d0
 8004340:	4620      	mov	r0, r4
 8004342:	4629      	mov	r1, r5
 8004344:	f7fc fa8a 	bl	800085c <__aeabi_ddiv>
 8004348:	4602      	mov	r2, r0
 800434a:	460b      	mov	r3, r1
 800434c:	4610      	mov	r0, r2
 800434e:	4619      	mov	r1, r3
 8004350:	f7fc fc0a 	bl	8000b68 <__aeabi_d2iz>
 8004354:	4603      	mov	r3, r0
 8004356:	627b      	str	r3, [r7, #36]	; 0x24
		sprintf(Buf,"%d",tmp);
 8004358:	f107 0318 	add.w	r3, r7, #24
 800435c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800435e:	4929      	ldr	r1, [pc, #164]	; (8004404 <UART_FloatToDisplay+0x28c>)
 8004360:	4618      	mov	r0, r3
 8004362:	f001 f967 	bl	8005634 <siprintf>
		HAL_UART_Transmit(huart2,Buf, 1, 100);
 8004366:	f107 0118 	add.w	r1, r7, #24
 800436a:	2364      	movs	r3, #100	; 0x64
 800436c:	2201      	movs	r2, #1
 800436e:	6878      	ldr	r0, [r7, #4]
 8004370:	f7ff fb30 	bl	80039d4 <HAL_UART_Transmit>
		tmp = nb * pow(10,precision);
 8004374:	68f8      	ldr	r0, [r7, #12]
 8004376:	f7fc f8ef 	bl	8000558 <__aeabi_f2d>
 800437a:	4604      	mov	r4, r0
 800437c:	460d      	mov	r5, r1
 800437e:	7afb      	ldrb	r3, [r7, #11]
 8004380:	4618      	mov	r0, r3
 8004382:	f7fc f8c7 	bl	8000514 <__aeabi_ui2d>
 8004386:	4602      	mov	r2, r0
 8004388:	460b      	mov	r3, r1
 800438a:	ec43 2b11 	vmov	d1, r2, r3
 800438e:	ed9f 0b1a 	vldr	d0, [pc, #104]	; 80043f8 <UART_FloatToDisplay+0x280>
 8004392:	f001 fe21 	bl	8005fd8 <pow>
 8004396:	ec53 2b10 	vmov	r2, r3, d0
 800439a:	4620      	mov	r0, r4
 800439c:	4629      	mov	r1, r5
 800439e:	f7fc f933 	bl	8000608 <__aeabi_dmul>
 80043a2:	4602      	mov	r2, r0
 80043a4:	460b      	mov	r3, r1
 80043a6:	4610      	mov	r0, r2
 80043a8:	4619      	mov	r1, r3
 80043aa:	f7fc fbdd 	bl	8000b68 <__aeabi_d2iz>
 80043ae:	4603      	mov	r3, r0
 80043b0:	627b      	str	r3, [r7, #36]	; 0x24
		puissance = i-1;
 80043b2:	7ffb      	ldrb	r3, [r7, #31]
 80043b4:	3b01      	subs	r3, #1
 80043b6:	ee07 3a90 	vmov	s15, r3
 80043ba:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80043be:	edc7 7a08 	vstr	s15, [r7, #32]
	for(uint8_t i = precision ; i>0; i--)
 80043c2:	7ffb      	ldrb	r3, [r7, #31]
 80043c4:	3b01      	subs	r3, #1
 80043c6:	77fb      	strb	r3, [r7, #31]
 80043c8:	7ffb      	ldrb	r3, [r7, #31]
 80043ca:	2b00      	cmp	r3, #0
 80043cc:	d18a      	bne.n	80042e4 <UART_FloatToDisplay+0x16c>

	}
	Display_Print_Matrice(device, Buf_2, DEFAULT);
 80043ce:	f107 0310 	add.w	r3, r7, #16
 80043d2:	2200      	movs	r2, #0
 80043d4:	4619      	mov	r1, r3
 80043d6:	6838      	ldr	r0, [r7, #0]
 80043d8:	f000 f97c 	bl	80046d4 <Display_Print_Matrice>
	UART_Message("\r\n", huart2);
 80043dc:	6879      	ldr	r1, [r7, #4]
 80043de:	480b      	ldr	r0, [pc, #44]	; (800440c <UART_FloatToDisplay+0x294>)
 80043e0:	f7ff feb4 	bl	800414c <UART_Message>
}
 80043e4:	bf00      	nop
 80043e6:	3728      	adds	r7, #40	; 0x28
 80043e8:	46bd      	mov	sp, r7
 80043ea:	ecbd 8b02 	vpop	{d8}
 80043ee:	bdb0      	pop	{r4, r5, r7, pc}
 80043f0:	00000000 	.word	0x00000000
 80043f4:	40590000 	.word	0x40590000
 80043f8:	00000000 	.word	0x00000000
 80043fc:	40240000 	.word	0x40240000
 8004400:	461c4000 	.word	0x461c4000
 8004404:	08007948 	.word	0x08007948
 8004408:	0800794c 	.word	0x0800794c
 800440c:	08007950 	.word	0x08007950

08004410 <AHT_Init>:

//Fonction pour init aht20
void AHT_Init(I2C_HandleTypeDef *hi2c1, UART_HandleTypeDef* huart2)
{
 8004410:	b580      	push	{r7, lr}
 8004412:	b088      	sub	sp, #32
 8004414:	af04      	add	r7, sp, #16
 8004416:	6078      	str	r0, [r7, #4]
 8004418:	6039      	str	r1, [r7, #0]
	HAL_Delay(40);																		//Delai avant utilisation du capteur
 800441a:	2028      	movs	r0, #40	; 0x28
 800441c:	f7fd f8c0 	bl	80015a0 <HAL_Delay>
	uint8_t status=0;
 8004420:	2300      	movs	r3, #0
 8004422:	73bb      	strb	r3, [r7, #14]
	uint8_t Commande[2]= {0x08,0x00};
 8004424:	2308      	movs	r3, #8
 8004426:	81bb      	strh	r3, [r7, #12]
	HAL_StatusTypeDef ret=0;
 8004428:	2300      	movs	r3, #0
 800442a:	73fb      	strb	r3, [r7, #15]

	/*Commande d'initialisation*/
	ret = HAL_I2C_Mem_Write(hi2c1, ADDRESS, INITIALISATION_CMD, 1, Commande,sizeof(Commande), 100);
 800442c:	2364      	movs	r3, #100	; 0x64
 800442e:	9302      	str	r3, [sp, #8]
 8004430:	2302      	movs	r3, #2
 8004432:	9301      	str	r3, [sp, #4]
 8004434:	f107 030c 	add.w	r3, r7, #12
 8004438:	9300      	str	r3, [sp, #0]
 800443a:	2301      	movs	r3, #1
 800443c:	22be      	movs	r2, #190	; 0xbe
 800443e:	2170      	movs	r1, #112	; 0x70
 8004440:	6878      	ldr	r0, [r7, #4]
 8004442:	f7fd fee3 	bl	800220c <HAL_I2C_Mem_Write>
 8004446:	4603      	mov	r3, r0
 8004448:	73fb      	strb	r3, [r7, #15]
	if(ret!=HAL_OK)
 800444a:	7bfb      	ldrb	r3, [r7, #15]
 800444c:	2b00      	cmp	r3, #0
 800444e:	d003      	beq.n	8004458 <AHT_Init+0x48>
		UART_Message("Error Init cmd not send \n\r", huart2);
 8004450:	6839      	ldr	r1, [r7, #0]
 8004452:	4813      	ldr	r0, [pc, #76]	; (80044a0 <AHT_Init+0x90>)
 8004454:	f7ff fe7a 	bl	800414c <UART_Message>

	/*Vérifier que aht20 est bien prêt pour convertir soit 0x18 = 0001.1000 avec Bit[7] = 0 -> Status signifie est Free et Bit[3] =  1 -> siginfie Calibré */
	ret = HAL_I2C_Master_Receive(hi2c1, ADDRESS|0X01, &status, 1, 100);
 8004458:	f107 020e 	add.w	r2, r7, #14
 800445c:	2364      	movs	r3, #100	; 0x64
 800445e:	9300      	str	r3, [sp, #0]
 8004460:	2301      	movs	r3, #1
 8004462:	2171      	movs	r1, #113	; 0x71
 8004464:	6878      	ldr	r0, [r7, #4]
 8004466:	f7fd fc9f 	bl	8001da8 <HAL_I2C_Master_Receive>
 800446a:	4603      	mov	r3, r0
 800446c:	73fb      	strb	r3, [r7, #15]
	if(ret!=HAL_OK)
 800446e:	7bfb      	ldrb	r3, [r7, #15]
 8004470:	2b00      	cmp	r3, #0
 8004472:	d003      	beq.n	800447c <AHT_Init+0x6c>
		UART_Message("Error Master do not receive \n\r", huart2);
 8004474:	6839      	ldr	r1, [r7, #0]
 8004476:	480b      	ldr	r0, [pc, #44]	; (80044a4 <AHT_Init+0x94>)
 8004478:	f7ff fe68 	bl	800414c <UART_Message>
	if((status&0x18)==0x18)
 800447c:	7bbb      	ldrb	r3, [r7, #14]
 800447e:	f003 0318 	and.w	r3, r3, #24
 8004482:	2b18      	cmp	r3, #24
 8004484:	d104      	bne.n	8004490 <AHT_Init+0x80>
	{
		UART_Message("Init OK \n\r", huart2);
 8004486:	6839      	ldr	r1, [r7, #0]
 8004488:	4807      	ldr	r0, [pc, #28]	; (80044a8 <AHT_Init+0x98>)
 800448a:	f7ff fe5f 	bl	800414c <UART_Message>
	else
	{
		UART_Message("Error init fail \n\r", huart2);
	}

}
 800448e:	e003      	b.n	8004498 <AHT_Init+0x88>
		UART_Message("Error init fail \n\r", huart2);
 8004490:	6839      	ldr	r1, [r7, #0]
 8004492:	4806      	ldr	r0, [pc, #24]	; (80044ac <AHT_Init+0x9c>)
 8004494:	f7ff fe5a 	bl	800414c <UART_Message>
}
 8004498:	bf00      	nop
 800449a:	3710      	adds	r7, #16
 800449c:	46bd      	mov	sp, r7
 800449e:	bd80      	pop	{r7, pc}
 80044a0:	08007954 	.word	0x08007954
 80044a4:	08007970 	.word	0x08007970
 80044a8:	08007990 	.word	0x08007990
 80044ac:	0800799c 	.word	0x0800799c

080044b0 <AHT_TrigMeasure>:

//Fonction pour lancer une conversion
void AHT_TrigMeasure(I2C_HandleTypeDef* hi2c1,UART_HandleTypeDef* huart2)
{
 80044b0:	b580      	push	{r7, lr}
 80044b2:	b088      	sub	sp, #32
 80044b4:	af04      	add	r7, sp, #16
 80044b6:	6078      	str	r0, [r7, #4]
 80044b8:	6039      	str	r1, [r7, #0]

	uint8_t Commande[2] = {0x33,0x00};
 80044ba:	2333      	movs	r3, #51	; 0x33
 80044bc:	81bb      	strh	r3, [r7, #12]
	HAL_StatusTypeDef ret = HAL_I2C_Mem_Write(hi2c1, ADDRESS, TRIG_MEASURE, I2C_MEMADD_SIZE_8BIT, Commande, 2, HAL_MAX_DELAY);				// Ecrit dans esclave à adresse de trigger measure avec les lignes de codes associées (voir datasheet)
 80044be:	f04f 33ff 	mov.w	r3, #4294967295
 80044c2:	9302      	str	r3, [sp, #8]
 80044c4:	2302      	movs	r3, #2
 80044c6:	9301      	str	r3, [sp, #4]
 80044c8:	f107 030c 	add.w	r3, r7, #12
 80044cc:	9300      	str	r3, [sp, #0]
 80044ce:	2301      	movs	r3, #1
 80044d0:	22ac      	movs	r2, #172	; 0xac
 80044d2:	2170      	movs	r1, #112	; 0x70
 80044d4:	6878      	ldr	r0, [r7, #4]
 80044d6:	f7fd fe99 	bl	800220c <HAL_I2C_Mem_Write>
 80044da:	4603      	mov	r3, r0
 80044dc:	73fb      	strb	r3, [r7, #15]

	if(ret==HAL_OK)
 80044de:	7bfb      	ldrb	r3, [r7, #15]
 80044e0:	2b00      	cmp	r3, #0
 80044e2:	d104      	bne.n	80044ee <AHT_TrigMeasure+0x3e>
	{
		UART_Message("Trigger OK \n\r", huart2);
 80044e4:	6839      	ldr	r1, [r7, #0]
 80044e6:	4806      	ldr	r0, [pc, #24]	; (8004500 <AHT_TrigMeasure+0x50>)
 80044e8:	f7ff fe30 	bl	800414c <UART_Message>
	else
	{
		UART_Message("Trigger KO \n\r", huart2);
	}

}
 80044ec:	e003      	b.n	80044f6 <AHT_TrigMeasure+0x46>
		UART_Message("Trigger KO \n\r", huart2);
 80044ee:	6839      	ldr	r1, [r7, #0]
 80044f0:	4804      	ldr	r0, [pc, #16]	; (8004504 <AHT_TrigMeasure+0x54>)
 80044f2:	f7ff fe2b 	bl	800414c <UART_Message>
}
 80044f6:	bf00      	nop
 80044f8:	3710      	adds	r7, #16
 80044fa:	46bd      	mov	sp, r7
 80044fc:	bd80      	pop	{r7, pc}
 80044fe:	bf00      	nop
 8004500:	080079b0 	.word	0x080079b0
 8004504:	080079c0 	.word	0x080079c0

08004508 <AHT_Readdata>:

//Fonction pour lire donnée, convertir et afficher
void AHT_Readdata(I2C_HandleTypeDef* hi2c1,UART_HandleTypeDef* huart2,Matrix *device)
{
 8004508:	b580      	push	{r7, lr}
 800450a:	b08e      	sub	sp, #56	; 0x38
 800450c:	af02      	add	r7, sp, #8
 800450e:	60f8      	str	r0, [r7, #12]
 8004510:	60b9      	str	r1, [r7, #8]
 8004512:	607a      	str	r2, [r7, #4]

	uint8_t rawData[6]={0};
 8004514:	2300      	movs	r3, #0
 8004516:	613b      	str	r3, [r7, #16]
 8004518:	2300      	movs	r3, #0
 800451a:	82bb      	strh	r3, [r7, #20]
	int tmp = 0;
 800451c:	2300      	movs	r3, #0
 800451e:	62fb      	str	r3, [r7, #44]	; 0x2c

	HAL_StatusTypeDef ret = HAL_I2C_Master_Receive(hi2c1, ADDRESS|0x01, rawData, sizeof(rawData), 100);
 8004520:	f107 0210 	add.w	r2, r7, #16
 8004524:	2364      	movs	r3, #100	; 0x64
 8004526:	9300      	str	r3, [sp, #0]
 8004528:	2306      	movs	r3, #6
 800452a:	2171      	movs	r1, #113	; 0x71
 800452c:	68f8      	ldr	r0, [r7, #12]
 800452e:	f7fd fc3b 	bl	8001da8 <HAL_I2C_Master_Receive>
 8004532:	4603      	mov	r3, r0
 8004534:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
	if(ret!=HAL_OK)
 8004538:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800453c:	2b00      	cmp	r3, #0
 800453e:	d003      	beq.n	8004548 <AHT_Readdata+0x40>
		UART_Message("Read KO \n\r", huart2);
 8004540:	68b9      	ldr	r1, [r7, #8]
 8004542:	4825      	ldr	r0, [pc, #148]	; (80045d8 <AHT_Readdata+0xd0>)
 8004544:	f7ff fe02 	bl	800414c <UART_Message>

	uint32_t hum =  ((uint32_t)rawData[1]<<16)									//	Prend les octets de donnée de humidité on les mets dans un gros uint32 pour les ranger
 8004548:	7c7b      	ldrb	r3, [r7, #17]
 800454a:	041a      	lsls	r2, r3, #16
							   |((uint32_t)rawData[2]<<8)
 800454c:	7cbb      	ldrb	r3, [r7, #18]
 800454e:	021b      	lsls	r3, r3, #8
 8004550:	4313      	orrs	r3, r2
							   |((uint32_t)rawData[3]);
 8004552:	7cfa      	ldrb	r2, [r7, #19]
	uint32_t hum =  ((uint32_t)rawData[1]<<16)									//	Prend les octets de donnée de humidité on les mets dans un gros uint32 pour les ranger
 8004554:	4313      	orrs	r3, r2
 8004556:	627b      	str	r3, [r7, #36]	; 0x24

			hum = hum >> 4;
 8004558:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800455a:	091b      	lsrs	r3, r3, #4
 800455c:	627b      	str	r3, [r7, #36]	; 0x24

	uint32_t temp =  ((uint32_t)rawData[3]<<16)
 800455e:	7cfb      	ldrb	r3, [r7, #19]
 8004560:	041a      	lsls	r2, r3, #16
									   |((uint32_t)rawData[4]<<8)
 8004562:	7d3b      	ldrb	r3, [r7, #20]
 8004564:	021b      	lsls	r3, r3, #8
 8004566:	4313      	orrs	r3, r2
									   |((uint32_t)rawData[5]);
 8004568:	7d7a      	ldrb	r2, [r7, #21]
	uint32_t temp =  ((uint32_t)rawData[3]<<16)
 800456a:	4313      	orrs	r3, r2
 800456c:	623b      	str	r3, [r7, #32]
			temp = temp & 0x07FFFF;
 800456e:	6a3b      	ldr	r3, [r7, #32]
 8004570:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004574:	623b      	str	r3, [r7, #32]

			float humidite = ((float) hum / (float) (1<<20))*100;				// Formule datasheet avec 2^20 <=> 1<<20
 8004576:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004578:	ee07 3a90 	vmov	s15, r3
 800457c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8004580:	eddf 6a16 	vldr	s13, [pc, #88]	; 80045dc <AHT_Readdata+0xd4>
 8004584:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8004588:	ed9f 7a15 	vldr	s14, [pc, #84]	; 80045e0 <AHT_Readdata+0xd8>
 800458c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004590:	edc7 7a07 	vstr	s15, [r7, #28]
			float temperature = ((float)temp/(float)(1<<20))*200-50;
 8004594:	6a3b      	ldr	r3, [r7, #32]
 8004596:	ee07 3a90 	vmov	s15, r3
 800459a:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800459e:	eddf 6a0f 	vldr	s13, [pc, #60]	; 80045dc <AHT_Readdata+0xd4>
 80045a2:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80045a6:	ed9f 7a0f 	vldr	s14, [pc, #60]	; 80045e4 <AHT_Readdata+0xdc>
 80045aa:	ee67 7a87 	vmul.f32	s15, s15, s14
 80045ae:	ed9f 7a0e 	vldr	s14, [pc, #56]	; 80045e8 <AHT_Readdata+0xe0>
 80045b2:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80045b6:	edc7 7a06 	vstr	s15, [r7, #24]


//			UART_Message("**********Value H*****************\r\n", huart2);
//			UART_FloatToDisplay(humidite,4, huart2);							// Précision de 4 chiffres après la virgule
			UART_Message("**********Value T*****************\r\n", huart2);
 80045ba:	68b9      	ldr	r1, [r7, #8]
 80045bc:	480b      	ldr	r0, [pc, #44]	; (80045ec <AHT_Readdata+0xe4>)
 80045be:	f7ff fdc5 	bl	800414c <UART_Message>
			UART_FloatToDisplay(temperature,2, huart2,device);
 80045c2:	687a      	ldr	r2, [r7, #4]
 80045c4:	68b9      	ldr	r1, [r7, #8]
 80045c6:	2002      	movs	r0, #2
 80045c8:	ed97 0a06 	vldr	s0, [r7, #24]
 80045cc:	f7ff fdd4 	bl	8004178 <UART_FloatToDisplay>
			return;
 80045d0:	bf00      	nop

}
 80045d2:	3730      	adds	r7, #48	; 0x30
 80045d4:	46bd      	mov	sp, r7
 80045d6:	bd80      	pop	{r7, pc}
 80045d8:	080079d0 	.word	0x080079d0
 80045dc:	49800000 	.word	0x49800000
 80045e0:	42c80000 	.word	0x42c80000
 80045e4:	43480000 	.word	0x43480000
 80045e8:	42480000 	.word	0x42480000
 80045ec:	080079dc 	.word	0x080079dc

080045f0 <AHT_IsBusy>:
	UART_Message("************AddressCheck******************\r\n", huart2);
}

//Fonction pour attendre que aht20 est finis de mesurer
void AHT_IsBusy(I2C_HandleTypeDef* hi2c1,UART_HandleTypeDef* huart2)
{
 80045f0:	b580      	push	{r7, lr}
 80045f2:	b086      	sub	sp, #24
 80045f4:	af02      	add	r7, sp, #8
 80045f6:	6078      	str	r0, [r7, #4]
 80045f8:	6039      	str	r1, [r7, #0]
	HAL_StatusTypeDef ret = 0;
 80045fa:	2300      	movs	r3, #0
 80045fc:	73fb      	strb	r3, [r7, #15]
	uint8_t status = 0x98;		// 0X18 and 0X80 = Bit de status à 1 Busy => 1001.1000
 80045fe:	2398      	movs	r3, #152	; 0x98
 8004600:	73bb      	strb	r3, [r7, #14]
	UART_Message("Wait for measure \n\r", huart2);
 8004602:	6839      	ldr	r1, [r7, #0]
 8004604:	4810      	ldr	r0, [pc, #64]	; (8004648 <AHT_IsBusy+0x58>)
 8004606:	f7ff fda1 	bl	800414c <UART_Message>
	while(status==0x98)
 800460a:	e011      	b.n	8004630 <AHT_IsBusy+0x40>
	{
		ret = HAL_I2C_Master_Receive(hi2c1, ADDRESS|0X01, &status, 1, 100);				// Si revient à normal on à status = 0x18 donc fin
 800460c:	f107 020e 	add.w	r2, r7, #14
 8004610:	2364      	movs	r3, #100	; 0x64
 8004612:	9300      	str	r3, [sp, #0]
 8004614:	2301      	movs	r3, #1
 8004616:	2171      	movs	r1, #113	; 0x71
 8004618:	6878      	ldr	r0, [r7, #4]
 800461a:	f7fd fbc5 	bl	8001da8 <HAL_I2C_Master_Receive>
 800461e:	4603      	mov	r3, r0
 8004620:	73fb      	strb	r3, [r7, #15]
		if(ret!=HAL_OK)
 8004622:	7bfb      	ldrb	r3, [r7, #15]
 8004624:	2b00      	cmp	r3, #0
 8004626:	d003      	beq.n	8004630 <AHT_IsBusy+0x40>
			UART_Message("Error Master can't read \n\r", huart2);
 8004628:	6839      	ldr	r1, [r7, #0]
 800462a:	4808      	ldr	r0, [pc, #32]	; (800464c <AHT_IsBusy+0x5c>)
 800462c:	f7ff fd8e 	bl	800414c <UART_Message>
	while(status==0x98)
 8004630:	7bbb      	ldrb	r3, [r7, #14]
 8004632:	2b98      	cmp	r3, #152	; 0x98
 8004634:	d0ea      	beq.n	800460c <AHT_IsBusy+0x1c>

	}
	UART_Message("End of measure \n\r", huart2);
 8004636:	6839      	ldr	r1, [r7, #0]
 8004638:	4805      	ldr	r0, [pc, #20]	; (8004650 <AHT_IsBusy+0x60>)
 800463a:	f7ff fd87 	bl	800414c <UART_Message>
}
 800463e:	bf00      	nop
 8004640:	3710      	adds	r7, #16
 8004642:	46bd      	mov	sp, r7
 8004644:	bd80      	pop	{r7, pc}
 8004646:	bf00      	nop
 8004648:	08007a50 	.word	0x08007a50
 800464c:	08007a64 	.word	0x08007a64
 8004650:	08007a80 	.word	0x08007a80

08004654 <pb_launcher>:

bool flag_pb = false;


void pb_launcher(UART_HandleTypeDef *huart,I2C_HandleTypeDef *hi2c, Matrix *device)
{
 8004654:	b580      	push	{r7, lr}
 8004656:	b086      	sub	sp, #24
 8004658:	af00      	add	r7, sp, #0
 800465a:	60f8      	str	r0, [r7, #12]
 800465c:	60b9      	str	r1, [r7, #8]
 800465e:	607a      	str	r2, [r7, #4]
	HAL_Delay(10);
 8004660:	200a      	movs	r0, #10
 8004662:	f7fc ff9d 	bl	80015a0 <HAL_Delay>
	uint32_t pbvalue = HAL_GPIO_ReadPin(BP0_GPIO_Port,BP0_Pin);
 8004666:	2101      	movs	r1, #1
 8004668:	4818      	ldr	r0, [pc, #96]	; (80046cc <pb_launcher+0x78>)
 800466a:	f7fd fa27 	bl	8001abc <HAL_GPIO_ReadPin>
 800466e:	4603      	mov	r3, r0
 8004670:	617b      	str	r3, [r7, #20]

	switch (flag_pb) {
 8004672:	4b17      	ldr	r3, [pc, #92]	; (80046d0 <pb_launcher+0x7c>)
 8004674:	781b      	ldrb	r3, [r3, #0]
 8004676:	2b00      	cmp	r3, #0
 8004678:	d002      	beq.n	8004680 <pb_launcher+0x2c>
 800467a:	2b01      	cmp	r3, #1
 800467c:	d014      	beq.n	80046a8 <pb_launcher+0x54>
 800467e:	e01a      	b.n	80046b6 <pb_launcher+0x62>
		case false:
				if(!pbvalue)
 8004680:	697b      	ldr	r3, [r7, #20]
 8004682:	2b00      	cmp	r3, #0
 8004684:	d11b      	bne.n	80046be <pb_launcher+0x6a>
				{
				    AHT_TrigMeasure(hi2c, huart);
 8004686:	68f9      	ldr	r1, [r7, #12]
 8004688:	68b8      	ldr	r0, [r7, #8]
 800468a:	f7ff ff11 	bl	80044b0 <AHT_TrigMeasure>
				    AHT_IsBusy(hi2c, huart);
 800468e:	68f9      	ldr	r1, [r7, #12]
 8004690:	68b8      	ldr	r0, [r7, #8]
 8004692:	f7ff ffad 	bl	80045f0 <AHT_IsBusy>
				    AHT_Readdata(hi2c, huart, device);
 8004696:	687a      	ldr	r2, [r7, #4]
 8004698:	68f9      	ldr	r1, [r7, #12]
 800469a:	68b8      	ldr	r0, [r7, #8]
 800469c:	f7ff ff34 	bl	8004508 <AHT_Readdata>
					flag_pb = true;
 80046a0:	4b0b      	ldr	r3, [pc, #44]	; (80046d0 <pb_launcher+0x7c>)
 80046a2:	2201      	movs	r2, #1
 80046a4:	701a      	strb	r2, [r3, #0]
				}

			break;
 80046a6:	e00a      	b.n	80046be <pb_launcher+0x6a>
		case true :
				if(pbvalue)
 80046a8:	697b      	ldr	r3, [r7, #20]
 80046aa:	2b00      	cmp	r3, #0
 80046ac:	d009      	beq.n	80046c2 <pb_launcher+0x6e>
				{
					flag_pb = false;
 80046ae:	4b08      	ldr	r3, [pc, #32]	; (80046d0 <pb_launcher+0x7c>)
 80046b0:	2200      	movs	r2, #0
 80046b2:	701a      	strb	r2, [r3, #0]
				}

			break;
 80046b4:	e005      	b.n	80046c2 <pb_launcher+0x6e>
		default:
			flag_pb = false;
 80046b6:	4b06      	ldr	r3, [pc, #24]	; (80046d0 <pb_launcher+0x7c>)
 80046b8:	2200      	movs	r2, #0
 80046ba:	701a      	strb	r2, [r3, #0]
			break;
 80046bc:	e002      	b.n	80046c4 <pb_launcher+0x70>
			break;
 80046be:	bf00      	nop
 80046c0:	e000      	b.n	80046c4 <pb_launcher+0x70>
			break;
 80046c2:	bf00      	nop
	}


}
 80046c4:	bf00      	nop
 80046c6:	3718      	adds	r7, #24
 80046c8:	46bd      	mov	sp, r7
 80046ca:	bd80      	pop	{r7, pc}
 80046cc:	40020400 	.word	0x40020400
 80046d0:	200002e8 	.word	0x200002e8

080046d4 <Display_Print_Matrice>:
	 }
}

//Fonction pour écrire des char sur matrice
void Display_Print_Matrice(Matrix * device, char* print_data,uint8_t opt)
{
 80046d4:	b580      	push	{r7, lr}
 80046d6:	b0b0      	sub	sp, #192	; 0xc0
 80046d8:	af00      	add	r7, sp, #0
 80046da:	60f8      	str	r0, [r7, #12]
 80046dc:	60b9      	str	r1, [r7, #8]
 80046de:	4613      	mov	r3, r2
 80046e0:	71fb      	strb	r3, [r7, #7]
	char tmp;
	device->Size = strlen(print_data);
 80046e2:	68b8      	ldr	r0, [r7, #8]
 80046e4:	f7fb fd7c 	bl	80001e0 <strlen>
 80046e8:	4603      	mov	r3, r0
 80046ea:	b2da      	uxtb	r2, r3
 80046ec:	68fb      	ldr	r3, [r7, #12]
 80046ee:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

	for(int i = 0; i<device->Size; i++)
 80046f2:	2300      	movs	r3, #0
 80046f4:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 80046f8:	f000 be73 	b.w	80053e2 <Display_Print_Matrice+0xd0e>
	{
		tmp = *(print_data+i);
 80046fc:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8004700:	68ba      	ldr	r2, [r7, #8]
 8004702:	4413      	add	r3, r2
 8004704:	781b      	ldrb	r3, [r3, #0]
 8004706:	75fb      	strb	r3, [r7, #23]

		switch (tmp) {
 8004708:	7dfb      	ldrb	r3, [r7, #23]
 800470a:	2b64      	cmp	r3, #100	; 0x64
 800470c:	f200 8663 	bhi.w	80053d6 <Display_Print_Matrice+0xd02>
 8004710:	a201      	add	r2, pc, #4	; (adr r2, 8004718 <Display_Print_Matrice+0x44>)
 8004712:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004716:	bf00      	nop
 8004718:	080053d7 	.word	0x080053d7
 800471c:	080053d7 	.word	0x080053d7
 8004720:	080053d7 	.word	0x080053d7
 8004724:	080053d7 	.word	0x080053d7
 8004728:	080053d7 	.word	0x080053d7
 800472c:	080053d7 	.word	0x080053d7
 8004730:	080053d7 	.word	0x080053d7
 8004734:	080053d7 	.word	0x080053d7
 8004738:	080053d7 	.word	0x080053d7
 800473c:	080053d7 	.word	0x080053d7
 8004740:	080053d7 	.word	0x080053d7
 8004744:	080053d7 	.word	0x080053d7
 8004748:	080053d7 	.word	0x080053d7
 800474c:	080053d7 	.word	0x080053d7
 8004750:	080053d7 	.word	0x080053d7
 8004754:	080053d7 	.word	0x080053d7
 8004758:	080053d7 	.word	0x080053d7
 800475c:	080053d7 	.word	0x080053d7
 8004760:	080053d7 	.word	0x080053d7
 8004764:	080053d7 	.word	0x080053d7
 8004768:	080053d7 	.word	0x080053d7
 800476c:	080053d7 	.word	0x080053d7
 8004770:	080053d7 	.word	0x080053d7
 8004774:	080053d7 	.word	0x080053d7
 8004778:	080053d7 	.word	0x080053d7
 800477c:	080053d7 	.word	0x080053d7
 8004780:	080053d7 	.word	0x080053d7
 8004784:	080053d7 	.word	0x080053d7
 8004788:	080053d7 	.word	0x080053d7
 800478c:	080053d7 	.word	0x080053d7
 8004790:	080053d7 	.word	0x080053d7
 8004794:	080053d7 	.word	0x080053d7
 8004798:	08005311 	.word	0x08005311
 800479c:	080053d7 	.word	0x080053d7
 80047a0:	080053d7 	.word	0x080053d7
 80047a4:	080053d7 	.word	0x080053d7
 80047a8:	080053d7 	.word	0x080053d7
 80047ac:	08005395 	.word	0x08005395
 80047b0:	080053d7 	.word	0x080053d7
 80047b4:	080053d7 	.word	0x080053d7
 80047b8:	080053d7 	.word	0x080053d7
 80047bc:	080053d7 	.word	0x080053d7
 80047c0:	080053d7 	.word	0x080053d7
 80047c4:	080053d7 	.word	0x080053d7
 80047c8:	080053d7 	.word	0x080053d7
 80047cc:	080053d7 	.word	0x080053d7
 80047d0:	0800528d 	.word	0x0800528d
 80047d4:	080053d7 	.word	0x080053d7
 80047d8:	080048ad 	.word	0x080048ad
 80047dc:	080048f9 	.word	0x080048f9
 80047e0:	08004947 	.word	0x08004947
 80047e4:	08004995 	.word	0x08004995
 80047e8:	080049e3 	.word	0x080049e3
 80047ec:	08004a31 	.word	0x08004a31
 80047f0:	08004a7f 	.word	0x08004a7f
 80047f4:	08004acd 	.word	0x08004acd
 80047f8:	08004b1b 	.word	0x08004b1b
 80047fc:	08004b69 	.word	0x08004b69
 8004800:	080052cf 	.word	0x080052cf
 8004804:	080053d7 	.word	0x080053d7
 8004808:	080053d7 	.word	0x080053d7
 800480c:	080053d7 	.word	0x080053d7
 8004810:	080053d7 	.word	0x080053d7
 8004814:	080053d7 	.word	0x080053d7
 8004818:	080053d7 	.word	0x080053d7
 800481c:	08004bb7 	.word	0x08004bb7
 8004820:	08004c03 	.word	0x08004c03
 8004824:	08004c55 	.word	0x08004c55
 8004828:	08004ca1 	.word	0x08004ca1
 800482c:	08004ced 	.word	0x08004ced
 8004830:	08004d39 	.word	0x08004d39
 8004834:	08004d79 	.word	0x08004d79
 8004838:	08004db9 	.word	0x08004db9
 800483c:	08004df9 	.word	0x08004df9
 8004840:	08004e39 	.word	0x08004e39
 8004844:	08004e79 	.word	0x08004e79
 8004848:	08004eb9 	.word	0x08004eb9
 800484c:	08004ef9 	.word	0x08004ef9
 8004850:	08004f3f 	.word	0x08004f3f
 8004854:	08004f7f 	.word	0x08004f7f
 8004858:	08004fbf 	.word	0x08004fbf
 800485c:	08004fff 	.word	0x08004fff
 8004860:	0800503f 	.word	0x0800503f
 8004864:	0800507f 	.word	0x0800507f
 8004868:	080050bf 	.word	0x080050bf
 800486c:	080050ff 	.word	0x080050ff
 8004870:	0800513f 	.word	0x0800513f
 8004874:	0800517f 	.word	0x0800517f
 8004878:	080051c1 	.word	0x080051c1
 800487c:	08005209 	.word	0x08005209
 8004880:	0800524b 	.word	0x0800524b
 8004884:	080053d7 	.word	0x080053d7
 8004888:	080053d7 	.word	0x080053d7
 800488c:	080053d7 	.word	0x080053d7
 8004890:	080053d7 	.word	0x080053d7
 8004894:	080053d7 	.word	0x080053d7
 8004898:	080053d7 	.word	0x080053d7
 800489c:	080053d7 	.word	0x080053d7
 80048a0:	080053d7 	.word	0x080053d7
 80048a4:	080053d7 	.word	0x080053d7
 80048a8:	08005353 	.word	0x08005353
		case '0':
			for(int j =0;j<8;j++)
 80048ac:	2300      	movs	r3, #0
 80048ae:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80048b2:	e014      	b.n	80048de <Display_Print_Matrice+0x20a>
				device->Raw[i][j] = LETTERS[0][j];
 80048b4:	4ad5      	ldr	r2, [pc, #852]	; (8004c0c <Display_Print_Matrice+0x538>)
 80048b6:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80048ba:	4413      	add	r3, r2
 80048bc:	7819      	ldrb	r1, [r3, #0]
 80048be:	68fa      	ldr	r2, [r7, #12]
 80048c0:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80048c4:	00db      	lsls	r3, r3, #3
 80048c6:	441a      	add	r2, r3
 80048c8:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80048cc:	4413      	add	r3, r2
 80048ce:	3304      	adds	r3, #4
 80048d0:	460a      	mov	r2, r1
 80048d2:	701a      	strb	r2, [r3, #0]
			for(int j =0;j<8;j++)
 80048d4:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80048d8:	3301      	adds	r3, #1
 80048da:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80048de:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80048e2:	2b07      	cmp	r3, #7
 80048e4:	dde6      	ble.n	80048b4 <Display_Print_Matrice+0x1e0>
			device->Shift[i] = 4;
 80048e6:	68fa      	ldr	r2, [r7, #12]
 80048e8:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80048ec:	4413      	add	r3, r2
 80048ee:	3355      	adds	r3, #85	; 0x55
 80048f0:	2204      	movs	r2, #4
 80048f2:	701a      	strb	r2, [r3, #0]
			break;
 80048f4:	f000 bd70 	b.w	80053d8 <Display_Print_Matrice+0xd04>
		case '1':
			for(int j =0;j<8;j++)
 80048f8:	2300      	movs	r3, #0
 80048fa:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80048fe:	e015      	b.n	800492c <Display_Print_Matrice+0x258>
				device->Raw[i][j] = LETTERS[1][j];
 8004900:	4ac2      	ldr	r2, [pc, #776]	; (8004c0c <Display_Print_Matrice+0x538>)
 8004902:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8004906:	4413      	add	r3, r2
 8004908:	3308      	adds	r3, #8
 800490a:	7819      	ldrb	r1, [r3, #0]
 800490c:	68fa      	ldr	r2, [r7, #12]
 800490e:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8004912:	00db      	lsls	r3, r3, #3
 8004914:	441a      	add	r2, r3
 8004916:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800491a:	4413      	add	r3, r2
 800491c:	3304      	adds	r3, #4
 800491e:	460a      	mov	r2, r1
 8004920:	701a      	strb	r2, [r3, #0]
			for(int j =0;j<8;j++)
 8004922:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8004926:	3301      	adds	r3, #1
 8004928:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800492c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8004930:	2b07      	cmp	r3, #7
 8004932:	dde5      	ble.n	8004900 <Display_Print_Matrice+0x22c>
			device->Shift[i] = 4;
 8004934:	68fa      	ldr	r2, [r7, #12]
 8004936:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800493a:	4413      	add	r3, r2
 800493c:	3355      	adds	r3, #85	; 0x55
 800493e:	2204      	movs	r2, #4
 8004940:	701a      	strb	r2, [r3, #0]
			break;
 8004942:	f000 bd49 	b.w	80053d8 <Display_Print_Matrice+0xd04>
		case '2':
			for(int j =0;j<8;j++)
 8004946:	2300      	movs	r3, #0
 8004948:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800494c:	e015      	b.n	800497a <Display_Print_Matrice+0x2a6>
				device->Raw[i][j] = LETTERS[2][j];
 800494e:	4aaf      	ldr	r2, [pc, #700]	; (8004c0c <Display_Print_Matrice+0x538>)
 8004950:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8004954:	4413      	add	r3, r2
 8004956:	3310      	adds	r3, #16
 8004958:	7819      	ldrb	r1, [r3, #0]
 800495a:	68fa      	ldr	r2, [r7, #12]
 800495c:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8004960:	00db      	lsls	r3, r3, #3
 8004962:	441a      	add	r2, r3
 8004964:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8004968:	4413      	add	r3, r2
 800496a:	3304      	adds	r3, #4
 800496c:	460a      	mov	r2, r1
 800496e:	701a      	strb	r2, [r3, #0]
			for(int j =0;j<8;j++)
 8004970:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8004974:	3301      	adds	r3, #1
 8004976:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800497a:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800497e:	2b07      	cmp	r3, #7
 8004980:	dde5      	ble.n	800494e <Display_Print_Matrice+0x27a>
			device->Shift[i] = 5;
 8004982:	68fa      	ldr	r2, [r7, #12]
 8004984:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8004988:	4413      	add	r3, r2
 800498a:	3355      	adds	r3, #85	; 0x55
 800498c:	2205      	movs	r2, #5
 800498e:	701a      	strb	r2, [r3, #0]
			break;
 8004990:	f000 bd22 	b.w	80053d8 <Display_Print_Matrice+0xd04>
		case '3':
			for(int j =0;j<8;j++)
 8004994:	2300      	movs	r3, #0
 8004996:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800499a:	e015      	b.n	80049c8 <Display_Print_Matrice+0x2f4>
				device->Raw[i][j] = LETTERS[3][j];
 800499c:	4a9b      	ldr	r2, [pc, #620]	; (8004c0c <Display_Print_Matrice+0x538>)
 800499e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80049a2:	4413      	add	r3, r2
 80049a4:	3318      	adds	r3, #24
 80049a6:	7819      	ldrb	r1, [r3, #0]
 80049a8:	68fa      	ldr	r2, [r7, #12]
 80049aa:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80049ae:	00db      	lsls	r3, r3, #3
 80049b0:	441a      	add	r2, r3
 80049b2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80049b6:	4413      	add	r3, r2
 80049b8:	3304      	adds	r3, #4
 80049ba:	460a      	mov	r2, r1
 80049bc:	701a      	strb	r2, [r3, #0]
			for(int j =0;j<8;j++)
 80049be:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80049c2:	3301      	adds	r3, #1
 80049c4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80049c8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80049cc:	2b07      	cmp	r3, #7
 80049ce:	dde5      	ble.n	800499c <Display_Print_Matrice+0x2c8>
			device->Shift[i] = 5;
 80049d0:	68fa      	ldr	r2, [r7, #12]
 80049d2:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80049d6:	4413      	add	r3, r2
 80049d8:	3355      	adds	r3, #85	; 0x55
 80049da:	2205      	movs	r2, #5
 80049dc:	701a      	strb	r2, [r3, #0]
			break;
 80049de:	f000 bcfb 	b.w	80053d8 <Display_Print_Matrice+0xd04>
		case '4':
			for(int j =0;j<8;j++)
 80049e2:	2300      	movs	r3, #0
 80049e4:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80049e8:	e015      	b.n	8004a16 <Display_Print_Matrice+0x342>
				device->Raw[i][j] = LETTERS[4][j];
 80049ea:	4a88      	ldr	r2, [pc, #544]	; (8004c0c <Display_Print_Matrice+0x538>)
 80049ec:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80049f0:	4413      	add	r3, r2
 80049f2:	3320      	adds	r3, #32
 80049f4:	7819      	ldrb	r1, [r3, #0]
 80049f6:	68fa      	ldr	r2, [r7, #12]
 80049f8:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80049fc:	00db      	lsls	r3, r3, #3
 80049fe:	441a      	add	r2, r3
 8004a00:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8004a04:	4413      	add	r3, r2
 8004a06:	3304      	adds	r3, #4
 8004a08:	460a      	mov	r2, r1
 8004a0a:	701a      	strb	r2, [r3, #0]
			for(int j =0;j<8;j++)
 8004a0c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8004a10:	3301      	adds	r3, #1
 8004a12:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8004a16:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8004a1a:	2b07      	cmp	r3, #7
 8004a1c:	dde5      	ble.n	80049ea <Display_Print_Matrice+0x316>
			device->Shift[i] = 5;
 8004a1e:	68fa      	ldr	r2, [r7, #12]
 8004a20:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8004a24:	4413      	add	r3, r2
 8004a26:	3355      	adds	r3, #85	; 0x55
 8004a28:	2205      	movs	r2, #5
 8004a2a:	701a      	strb	r2, [r3, #0]
			break;
 8004a2c:	f000 bcd4 	b.w	80053d8 <Display_Print_Matrice+0xd04>
		case '5':
			for(int j =0;j<8;j++)
 8004a30:	2300      	movs	r3, #0
 8004a32:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8004a36:	e015      	b.n	8004a64 <Display_Print_Matrice+0x390>
				device->Raw[i][j] = LETTERS[5][j];
 8004a38:	4a74      	ldr	r2, [pc, #464]	; (8004c0c <Display_Print_Matrice+0x538>)
 8004a3a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8004a3e:	4413      	add	r3, r2
 8004a40:	3328      	adds	r3, #40	; 0x28
 8004a42:	7819      	ldrb	r1, [r3, #0]
 8004a44:	68fa      	ldr	r2, [r7, #12]
 8004a46:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8004a4a:	00db      	lsls	r3, r3, #3
 8004a4c:	441a      	add	r2, r3
 8004a4e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8004a52:	4413      	add	r3, r2
 8004a54:	3304      	adds	r3, #4
 8004a56:	460a      	mov	r2, r1
 8004a58:	701a      	strb	r2, [r3, #0]
			for(int j =0;j<8;j++)
 8004a5a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8004a5e:	3301      	adds	r3, #1
 8004a60:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8004a64:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8004a68:	2b07      	cmp	r3, #7
 8004a6a:	dde5      	ble.n	8004a38 <Display_Print_Matrice+0x364>
			device->Shift[i] = 5;
 8004a6c:	68fa      	ldr	r2, [r7, #12]
 8004a6e:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8004a72:	4413      	add	r3, r2
 8004a74:	3355      	adds	r3, #85	; 0x55
 8004a76:	2205      	movs	r2, #5
 8004a78:	701a      	strb	r2, [r3, #0]
			break;
 8004a7a:	f000 bcad 	b.w	80053d8 <Display_Print_Matrice+0xd04>
		case '6':
			for(int j =0;j<8;j++)
 8004a7e:	2300      	movs	r3, #0
 8004a80:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8004a84:	e015      	b.n	8004ab2 <Display_Print_Matrice+0x3de>
				device->Raw[i][j] = LETTERS[6][j];
 8004a86:	4a61      	ldr	r2, [pc, #388]	; (8004c0c <Display_Print_Matrice+0x538>)
 8004a88:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8004a8c:	4413      	add	r3, r2
 8004a8e:	3330      	adds	r3, #48	; 0x30
 8004a90:	7819      	ldrb	r1, [r3, #0]
 8004a92:	68fa      	ldr	r2, [r7, #12]
 8004a94:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8004a98:	00db      	lsls	r3, r3, #3
 8004a9a:	441a      	add	r2, r3
 8004a9c:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8004aa0:	4413      	add	r3, r2
 8004aa2:	3304      	adds	r3, #4
 8004aa4:	460a      	mov	r2, r1
 8004aa6:	701a      	strb	r2, [r3, #0]
			for(int j =0;j<8;j++)
 8004aa8:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8004aac:	3301      	adds	r3, #1
 8004aae:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8004ab2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8004ab6:	2b07      	cmp	r3, #7
 8004ab8:	dde5      	ble.n	8004a86 <Display_Print_Matrice+0x3b2>
			device->Shift[i] = 5;
 8004aba:	68fa      	ldr	r2, [r7, #12]
 8004abc:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8004ac0:	4413      	add	r3, r2
 8004ac2:	3355      	adds	r3, #85	; 0x55
 8004ac4:	2205      	movs	r2, #5
 8004ac6:	701a      	strb	r2, [r3, #0]
			break;
 8004ac8:	f000 bc86 	b.w	80053d8 <Display_Print_Matrice+0xd04>
		case '7':
			for(int j =0;j<8;j++)
 8004acc:	2300      	movs	r3, #0
 8004ace:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8004ad2:	e015      	b.n	8004b00 <Display_Print_Matrice+0x42c>
				device->Raw[i][j] = LETTERS[7][j];
 8004ad4:	4a4d      	ldr	r2, [pc, #308]	; (8004c0c <Display_Print_Matrice+0x538>)
 8004ad6:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8004ada:	4413      	add	r3, r2
 8004adc:	3338      	adds	r3, #56	; 0x38
 8004ade:	7819      	ldrb	r1, [r3, #0]
 8004ae0:	68fa      	ldr	r2, [r7, #12]
 8004ae2:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8004ae6:	00db      	lsls	r3, r3, #3
 8004ae8:	441a      	add	r2, r3
 8004aea:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8004aee:	4413      	add	r3, r2
 8004af0:	3304      	adds	r3, #4
 8004af2:	460a      	mov	r2, r1
 8004af4:	701a      	strb	r2, [r3, #0]
			for(int j =0;j<8;j++)
 8004af6:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8004afa:	3301      	adds	r3, #1
 8004afc:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8004b00:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8004b04:	2b07      	cmp	r3, #7
 8004b06:	dde5      	ble.n	8004ad4 <Display_Print_Matrice+0x400>
			device->Shift[i] = 5;
 8004b08:	68fa      	ldr	r2, [r7, #12]
 8004b0a:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8004b0e:	4413      	add	r3, r2
 8004b10:	3355      	adds	r3, #85	; 0x55
 8004b12:	2205      	movs	r2, #5
 8004b14:	701a      	strb	r2, [r3, #0]
			break;
 8004b16:	f000 bc5f 	b.w	80053d8 <Display_Print_Matrice+0xd04>
		case '8':
			for(int j =0;j<8;j++)
 8004b1a:	2300      	movs	r3, #0
 8004b1c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8004b20:	e015      	b.n	8004b4e <Display_Print_Matrice+0x47a>
				device->Raw[i][j] = LETTERS[8][j];
 8004b22:	4a3a      	ldr	r2, [pc, #232]	; (8004c0c <Display_Print_Matrice+0x538>)
 8004b24:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8004b28:	4413      	add	r3, r2
 8004b2a:	3340      	adds	r3, #64	; 0x40
 8004b2c:	7819      	ldrb	r1, [r3, #0]
 8004b2e:	68fa      	ldr	r2, [r7, #12]
 8004b30:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8004b34:	00db      	lsls	r3, r3, #3
 8004b36:	441a      	add	r2, r3
 8004b38:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8004b3c:	4413      	add	r3, r2
 8004b3e:	3304      	adds	r3, #4
 8004b40:	460a      	mov	r2, r1
 8004b42:	701a      	strb	r2, [r3, #0]
			for(int j =0;j<8;j++)
 8004b44:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8004b48:	3301      	adds	r3, #1
 8004b4a:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8004b4e:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8004b52:	2b07      	cmp	r3, #7
 8004b54:	dde5      	ble.n	8004b22 <Display_Print_Matrice+0x44e>
			device->Shift[i] = 5;
 8004b56:	68fa      	ldr	r2, [r7, #12]
 8004b58:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8004b5c:	4413      	add	r3, r2
 8004b5e:	3355      	adds	r3, #85	; 0x55
 8004b60:	2205      	movs	r2, #5
 8004b62:	701a      	strb	r2, [r3, #0]
			break;
 8004b64:	f000 bc38 	b.w	80053d8 <Display_Print_Matrice+0xd04>
		case '9':
			for(int j =0;j<8;j++)
 8004b68:	2300      	movs	r3, #0
 8004b6a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8004b6e:	e015      	b.n	8004b9c <Display_Print_Matrice+0x4c8>
				device->Raw[i][j] = LETTERS[9][j];
 8004b70:	4a26      	ldr	r2, [pc, #152]	; (8004c0c <Display_Print_Matrice+0x538>)
 8004b72:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8004b76:	4413      	add	r3, r2
 8004b78:	3348      	adds	r3, #72	; 0x48
 8004b7a:	7819      	ldrb	r1, [r3, #0]
 8004b7c:	68fa      	ldr	r2, [r7, #12]
 8004b7e:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8004b82:	00db      	lsls	r3, r3, #3
 8004b84:	441a      	add	r2, r3
 8004b86:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8004b8a:	4413      	add	r3, r2
 8004b8c:	3304      	adds	r3, #4
 8004b8e:	460a      	mov	r2, r1
 8004b90:	701a      	strb	r2, [r3, #0]
			for(int j =0;j<8;j++)
 8004b92:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8004b96:	3301      	adds	r3, #1
 8004b98:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8004b9c:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8004ba0:	2b07      	cmp	r3, #7
 8004ba2:	dde5      	ble.n	8004b70 <Display_Print_Matrice+0x49c>
			device->Shift[i] = 5;
 8004ba4:	68fa      	ldr	r2, [r7, #12]
 8004ba6:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8004baa:	4413      	add	r3, r2
 8004bac:	3355      	adds	r3, #85	; 0x55
 8004bae:	2205      	movs	r2, #5
 8004bb0:	701a      	strb	r2, [r3, #0]
			break;
 8004bb2:	f000 bc11 	b.w	80053d8 <Display_Print_Matrice+0xd04>
		case 'A':
			for(int j =0;j<8;j++)
 8004bb6:	2300      	movs	r3, #0
 8004bb8:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8004bbc:	e015      	b.n	8004bea <Display_Print_Matrice+0x516>
				device->Raw[i][j] = LETTERS[10][j];
 8004bbe:	4a13      	ldr	r2, [pc, #76]	; (8004c0c <Display_Print_Matrice+0x538>)
 8004bc0:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8004bc4:	4413      	add	r3, r2
 8004bc6:	3350      	adds	r3, #80	; 0x50
 8004bc8:	7819      	ldrb	r1, [r3, #0]
 8004bca:	68fa      	ldr	r2, [r7, #12]
 8004bcc:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8004bd0:	00db      	lsls	r3, r3, #3
 8004bd2:	441a      	add	r2, r3
 8004bd4:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8004bd8:	4413      	add	r3, r2
 8004bda:	3304      	adds	r3, #4
 8004bdc:	460a      	mov	r2, r1
 8004bde:	701a      	strb	r2, [r3, #0]
			for(int j =0;j<8;j++)
 8004be0:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8004be4:	3301      	adds	r3, #1
 8004be6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8004bea:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8004bee:	2b07      	cmp	r3, #7
 8004bf0:	dde5      	ble.n	8004bbe <Display_Print_Matrice+0x4ea>
			device->Shift[i] = 5;
 8004bf2:	68fa      	ldr	r2, [r7, #12]
 8004bf4:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8004bf8:	4413      	add	r3, r2
 8004bfa:	3355      	adds	r3, #85	; 0x55
 8004bfc:	2205      	movs	r2, #5
 8004bfe:	701a      	strb	r2, [r3, #0]
			break;
 8004c00:	e3ea      	b.n	80053d8 <Display_Print_Matrice+0xd04>
		case 'B':
			for(int j =0;j<8;j++)
 8004c02:	2300      	movs	r3, #0
 8004c04:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8004c08:	e018      	b.n	8004c3c <Display_Print_Matrice+0x568>
 8004c0a:	bf00      	nop
 8004c0c:	2000000c 	.word	0x2000000c
				device->Raw[i][j] = LETTERS[11][j];
 8004c10:	4abb      	ldr	r2, [pc, #748]	; (8004f00 <Display_Print_Matrice+0x82c>)
 8004c12:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004c16:	4413      	add	r3, r2
 8004c18:	3358      	adds	r3, #88	; 0x58
 8004c1a:	7819      	ldrb	r1, [r3, #0]
 8004c1c:	68fa      	ldr	r2, [r7, #12]
 8004c1e:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8004c22:	00db      	lsls	r3, r3, #3
 8004c24:	441a      	add	r2, r3
 8004c26:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004c2a:	4413      	add	r3, r2
 8004c2c:	3304      	adds	r3, #4
 8004c2e:	460a      	mov	r2, r1
 8004c30:	701a      	strb	r2, [r3, #0]
			for(int j =0;j<8;j++)
 8004c32:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004c36:	3301      	adds	r3, #1
 8004c38:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8004c3c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004c40:	2b07      	cmp	r3, #7
 8004c42:	dde5      	ble.n	8004c10 <Display_Print_Matrice+0x53c>
			device->Shift[i] = 5;
 8004c44:	68fa      	ldr	r2, [r7, #12]
 8004c46:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8004c4a:	4413      	add	r3, r2
 8004c4c:	3355      	adds	r3, #85	; 0x55
 8004c4e:	2205      	movs	r2, #5
 8004c50:	701a      	strb	r2, [r3, #0]
			break;
 8004c52:	e3c1      	b.n	80053d8 <Display_Print_Matrice+0xd04>
		case 'C':
			for(int j =0;j<8;j++)
 8004c54:	2300      	movs	r3, #0
 8004c56:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8004c5a:	e015      	b.n	8004c88 <Display_Print_Matrice+0x5b4>
				device->Raw[i][j] = LETTERS[12][j];
 8004c5c:	4aa8      	ldr	r2, [pc, #672]	; (8004f00 <Display_Print_Matrice+0x82c>)
 8004c5e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004c62:	4413      	add	r3, r2
 8004c64:	3360      	adds	r3, #96	; 0x60
 8004c66:	7819      	ldrb	r1, [r3, #0]
 8004c68:	68fa      	ldr	r2, [r7, #12]
 8004c6a:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8004c6e:	00db      	lsls	r3, r3, #3
 8004c70:	441a      	add	r2, r3
 8004c72:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004c76:	4413      	add	r3, r2
 8004c78:	3304      	adds	r3, #4
 8004c7a:	460a      	mov	r2, r1
 8004c7c:	701a      	strb	r2, [r3, #0]
			for(int j =0;j<8;j++)
 8004c7e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004c82:	3301      	adds	r3, #1
 8004c84:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8004c88:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004c8c:	2b07      	cmp	r3, #7
 8004c8e:	dde5      	ble.n	8004c5c <Display_Print_Matrice+0x588>
			device->Shift[i] = 5;
 8004c90:	68fa      	ldr	r2, [r7, #12]
 8004c92:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8004c96:	4413      	add	r3, r2
 8004c98:	3355      	adds	r3, #85	; 0x55
 8004c9a:	2205      	movs	r2, #5
 8004c9c:	701a      	strb	r2, [r3, #0]
			break;
 8004c9e:	e39b      	b.n	80053d8 <Display_Print_Matrice+0xd04>
		case 'D':
			for(int j =0;j<8;j++)
 8004ca0:	2300      	movs	r3, #0
 8004ca2:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8004ca6:	e015      	b.n	8004cd4 <Display_Print_Matrice+0x600>
				device->Raw[i][j] = LETTERS[13][j];
 8004ca8:	4a95      	ldr	r2, [pc, #596]	; (8004f00 <Display_Print_Matrice+0x82c>)
 8004caa:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004cae:	4413      	add	r3, r2
 8004cb0:	3368      	adds	r3, #104	; 0x68
 8004cb2:	7819      	ldrb	r1, [r3, #0]
 8004cb4:	68fa      	ldr	r2, [r7, #12]
 8004cb6:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8004cba:	00db      	lsls	r3, r3, #3
 8004cbc:	441a      	add	r2, r3
 8004cbe:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004cc2:	4413      	add	r3, r2
 8004cc4:	3304      	adds	r3, #4
 8004cc6:	460a      	mov	r2, r1
 8004cc8:	701a      	strb	r2, [r3, #0]
			for(int j =0;j<8;j++)
 8004cca:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004cce:	3301      	adds	r3, #1
 8004cd0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8004cd4:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004cd8:	2b07      	cmp	r3, #7
 8004cda:	dde5      	ble.n	8004ca8 <Display_Print_Matrice+0x5d4>
			device->Shift[i] = 5;
 8004cdc:	68fa      	ldr	r2, [r7, #12]
 8004cde:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8004ce2:	4413      	add	r3, r2
 8004ce4:	3355      	adds	r3, #85	; 0x55
 8004ce6:	2205      	movs	r2, #5
 8004ce8:	701a      	strb	r2, [r3, #0]
			break;
 8004cea:	e375      	b.n	80053d8 <Display_Print_Matrice+0xd04>
		case 'E':
			for(int j =0;j<8;j++)
 8004cec:	2300      	movs	r3, #0
 8004cee:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8004cf2:	e015      	b.n	8004d20 <Display_Print_Matrice+0x64c>
				device->Raw[i][j] = LETTERS[14][j];
 8004cf4:	4a82      	ldr	r2, [pc, #520]	; (8004f00 <Display_Print_Matrice+0x82c>)
 8004cf6:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8004cfa:	4413      	add	r3, r2
 8004cfc:	3370      	adds	r3, #112	; 0x70
 8004cfe:	7819      	ldrb	r1, [r3, #0]
 8004d00:	68fa      	ldr	r2, [r7, #12]
 8004d02:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8004d06:	00db      	lsls	r3, r3, #3
 8004d08:	441a      	add	r2, r3
 8004d0a:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8004d0e:	4413      	add	r3, r2
 8004d10:	3304      	adds	r3, #4
 8004d12:	460a      	mov	r2, r1
 8004d14:	701a      	strb	r2, [r3, #0]
			for(int j =0;j<8;j++)
 8004d16:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8004d1a:	3301      	adds	r3, #1
 8004d1c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8004d20:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8004d24:	2b07      	cmp	r3, #7
 8004d26:	dde5      	ble.n	8004cf4 <Display_Print_Matrice+0x620>
			device->Shift[i] = 5;
 8004d28:	68fa      	ldr	r2, [r7, #12]
 8004d2a:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8004d2e:	4413      	add	r3, r2
 8004d30:	3355      	adds	r3, #85	; 0x55
 8004d32:	2205      	movs	r2, #5
 8004d34:	701a      	strb	r2, [r3, #0]
			break;
 8004d36:	e34f      	b.n	80053d8 <Display_Print_Matrice+0xd04>
		case 'F':
			for(int j =0;j<8;j++)
 8004d38:	2300      	movs	r3, #0
 8004d3a:	67fb      	str	r3, [r7, #124]	; 0x7c
 8004d3c:	e011      	b.n	8004d62 <Display_Print_Matrice+0x68e>
				device->Raw[i][j] = LETTERS[15][j];
 8004d3e:	4a70      	ldr	r2, [pc, #448]	; (8004f00 <Display_Print_Matrice+0x82c>)
 8004d40:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8004d42:	4413      	add	r3, r2
 8004d44:	3378      	adds	r3, #120	; 0x78
 8004d46:	7819      	ldrb	r1, [r3, #0]
 8004d48:	68fa      	ldr	r2, [r7, #12]
 8004d4a:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8004d4e:	00db      	lsls	r3, r3, #3
 8004d50:	441a      	add	r2, r3
 8004d52:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8004d54:	4413      	add	r3, r2
 8004d56:	3304      	adds	r3, #4
 8004d58:	460a      	mov	r2, r1
 8004d5a:	701a      	strb	r2, [r3, #0]
			for(int j =0;j<8;j++)
 8004d5c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8004d5e:	3301      	adds	r3, #1
 8004d60:	67fb      	str	r3, [r7, #124]	; 0x7c
 8004d62:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8004d64:	2b07      	cmp	r3, #7
 8004d66:	ddea      	ble.n	8004d3e <Display_Print_Matrice+0x66a>
			device->Shift[i] = 5;
 8004d68:	68fa      	ldr	r2, [r7, #12]
 8004d6a:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8004d6e:	4413      	add	r3, r2
 8004d70:	3355      	adds	r3, #85	; 0x55
 8004d72:	2205      	movs	r2, #5
 8004d74:	701a      	strb	r2, [r3, #0]
			break;
 8004d76:	e32f      	b.n	80053d8 <Display_Print_Matrice+0xd04>
		case 'G':
			for(int j =0;j<8;j++)
 8004d78:	2300      	movs	r3, #0
 8004d7a:	67bb      	str	r3, [r7, #120]	; 0x78
 8004d7c:	e011      	b.n	8004da2 <Display_Print_Matrice+0x6ce>
				device->Raw[i][j] = LETTERS[16][j];
 8004d7e:	4a60      	ldr	r2, [pc, #384]	; (8004f00 <Display_Print_Matrice+0x82c>)
 8004d80:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004d82:	4413      	add	r3, r2
 8004d84:	3380      	adds	r3, #128	; 0x80
 8004d86:	7819      	ldrb	r1, [r3, #0]
 8004d88:	68fa      	ldr	r2, [r7, #12]
 8004d8a:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8004d8e:	00db      	lsls	r3, r3, #3
 8004d90:	441a      	add	r2, r3
 8004d92:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004d94:	4413      	add	r3, r2
 8004d96:	3304      	adds	r3, #4
 8004d98:	460a      	mov	r2, r1
 8004d9a:	701a      	strb	r2, [r3, #0]
			for(int j =0;j<8;j++)
 8004d9c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004d9e:	3301      	adds	r3, #1
 8004da0:	67bb      	str	r3, [r7, #120]	; 0x78
 8004da2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004da4:	2b07      	cmp	r3, #7
 8004da6:	ddea      	ble.n	8004d7e <Display_Print_Matrice+0x6aa>
			device->Shift[i] = 5;
 8004da8:	68fa      	ldr	r2, [r7, #12]
 8004daa:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8004dae:	4413      	add	r3, r2
 8004db0:	3355      	adds	r3, #85	; 0x55
 8004db2:	2205      	movs	r2, #5
 8004db4:	701a      	strb	r2, [r3, #0]
			break;
 8004db6:	e30f      	b.n	80053d8 <Display_Print_Matrice+0xd04>
		case 'H':
			for(int j =0;j<8;j++)
 8004db8:	2300      	movs	r3, #0
 8004dba:	677b      	str	r3, [r7, #116]	; 0x74
 8004dbc:	e011      	b.n	8004de2 <Display_Print_Matrice+0x70e>
				device->Raw[i][j] = LETTERS[17][j];
 8004dbe:	4a50      	ldr	r2, [pc, #320]	; (8004f00 <Display_Print_Matrice+0x82c>)
 8004dc0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004dc2:	4413      	add	r3, r2
 8004dc4:	3388      	adds	r3, #136	; 0x88
 8004dc6:	7819      	ldrb	r1, [r3, #0]
 8004dc8:	68fa      	ldr	r2, [r7, #12]
 8004dca:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8004dce:	00db      	lsls	r3, r3, #3
 8004dd0:	441a      	add	r2, r3
 8004dd2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004dd4:	4413      	add	r3, r2
 8004dd6:	3304      	adds	r3, #4
 8004dd8:	460a      	mov	r2, r1
 8004dda:	701a      	strb	r2, [r3, #0]
			for(int j =0;j<8;j++)
 8004ddc:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004dde:	3301      	adds	r3, #1
 8004de0:	677b      	str	r3, [r7, #116]	; 0x74
 8004de2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004de4:	2b07      	cmp	r3, #7
 8004de6:	ddea      	ble.n	8004dbe <Display_Print_Matrice+0x6ea>
			device->Shift[i] = 5;
 8004de8:	68fa      	ldr	r2, [r7, #12]
 8004dea:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8004dee:	4413      	add	r3, r2
 8004df0:	3355      	adds	r3, #85	; 0x55
 8004df2:	2205      	movs	r2, #5
 8004df4:	701a      	strb	r2, [r3, #0]
			break;
 8004df6:	e2ef      	b.n	80053d8 <Display_Print_Matrice+0xd04>
		case 'I':
			for(int j =0;j<8;j++)
 8004df8:	2300      	movs	r3, #0
 8004dfa:	673b      	str	r3, [r7, #112]	; 0x70
 8004dfc:	e011      	b.n	8004e22 <Display_Print_Matrice+0x74e>
				device->Raw[i][j] = LETTERS[18][j];
 8004dfe:	4a40      	ldr	r2, [pc, #256]	; (8004f00 <Display_Print_Matrice+0x82c>)
 8004e00:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004e02:	4413      	add	r3, r2
 8004e04:	3390      	adds	r3, #144	; 0x90
 8004e06:	7819      	ldrb	r1, [r3, #0]
 8004e08:	68fa      	ldr	r2, [r7, #12]
 8004e0a:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8004e0e:	00db      	lsls	r3, r3, #3
 8004e10:	441a      	add	r2, r3
 8004e12:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004e14:	4413      	add	r3, r2
 8004e16:	3304      	adds	r3, #4
 8004e18:	460a      	mov	r2, r1
 8004e1a:	701a      	strb	r2, [r3, #0]
			for(int j =0;j<8;j++)
 8004e1c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004e1e:	3301      	adds	r3, #1
 8004e20:	673b      	str	r3, [r7, #112]	; 0x70
 8004e22:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004e24:	2b07      	cmp	r3, #7
 8004e26:	ddea      	ble.n	8004dfe <Display_Print_Matrice+0x72a>
			device->Shift[i] = 4;
 8004e28:	68fa      	ldr	r2, [r7, #12]
 8004e2a:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8004e2e:	4413      	add	r3, r2
 8004e30:	3355      	adds	r3, #85	; 0x55
 8004e32:	2204      	movs	r2, #4
 8004e34:	701a      	strb	r2, [r3, #0]
			break;
 8004e36:	e2cf      	b.n	80053d8 <Display_Print_Matrice+0xd04>
		case 'J':
			for(int j =0;j<8;j++)
 8004e38:	2300      	movs	r3, #0
 8004e3a:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004e3c:	e011      	b.n	8004e62 <Display_Print_Matrice+0x78e>
				device->Raw[i][j] = LETTERS[19][j];
 8004e3e:	4a30      	ldr	r2, [pc, #192]	; (8004f00 <Display_Print_Matrice+0x82c>)
 8004e40:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004e42:	4413      	add	r3, r2
 8004e44:	3398      	adds	r3, #152	; 0x98
 8004e46:	7819      	ldrb	r1, [r3, #0]
 8004e48:	68fa      	ldr	r2, [r7, #12]
 8004e4a:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8004e4e:	00db      	lsls	r3, r3, #3
 8004e50:	441a      	add	r2, r3
 8004e52:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004e54:	4413      	add	r3, r2
 8004e56:	3304      	adds	r3, #4
 8004e58:	460a      	mov	r2, r1
 8004e5a:	701a      	strb	r2, [r3, #0]
			for(int j =0;j<8;j++)
 8004e5c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004e5e:	3301      	adds	r3, #1
 8004e60:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004e62:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004e64:	2b07      	cmp	r3, #7
 8004e66:	ddea      	ble.n	8004e3e <Display_Print_Matrice+0x76a>
			device->Shift[i] = 5;
 8004e68:	68fa      	ldr	r2, [r7, #12]
 8004e6a:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8004e6e:	4413      	add	r3, r2
 8004e70:	3355      	adds	r3, #85	; 0x55
 8004e72:	2205      	movs	r2, #5
 8004e74:	701a      	strb	r2, [r3, #0]
			break;
 8004e76:	e2af      	b.n	80053d8 <Display_Print_Matrice+0xd04>
		case 'K':
			for(int j =0;j<8;j++)
 8004e78:	2300      	movs	r3, #0
 8004e7a:	66bb      	str	r3, [r7, #104]	; 0x68
 8004e7c:	e011      	b.n	8004ea2 <Display_Print_Matrice+0x7ce>
				device->Raw[i][j] = LETTERS[20][j];
 8004e7e:	4a20      	ldr	r2, [pc, #128]	; (8004f00 <Display_Print_Matrice+0x82c>)
 8004e80:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004e82:	4413      	add	r3, r2
 8004e84:	33a0      	adds	r3, #160	; 0xa0
 8004e86:	7819      	ldrb	r1, [r3, #0]
 8004e88:	68fa      	ldr	r2, [r7, #12]
 8004e8a:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8004e8e:	00db      	lsls	r3, r3, #3
 8004e90:	441a      	add	r2, r3
 8004e92:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004e94:	4413      	add	r3, r2
 8004e96:	3304      	adds	r3, #4
 8004e98:	460a      	mov	r2, r1
 8004e9a:	701a      	strb	r2, [r3, #0]
			for(int j =0;j<8;j++)
 8004e9c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004e9e:	3301      	adds	r3, #1
 8004ea0:	66bb      	str	r3, [r7, #104]	; 0x68
 8004ea2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004ea4:	2b07      	cmp	r3, #7
 8004ea6:	ddea      	ble.n	8004e7e <Display_Print_Matrice+0x7aa>
			device->Shift[i] = 5;
 8004ea8:	68fa      	ldr	r2, [r7, #12]
 8004eaa:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8004eae:	4413      	add	r3, r2
 8004eb0:	3355      	adds	r3, #85	; 0x55
 8004eb2:	2205      	movs	r2, #5
 8004eb4:	701a      	strb	r2, [r3, #0]
			break;
 8004eb6:	e28f      	b.n	80053d8 <Display_Print_Matrice+0xd04>
		case 'L':
			for(int j =0;j<8;j++)
 8004eb8:	2300      	movs	r3, #0
 8004eba:	667b      	str	r3, [r7, #100]	; 0x64
 8004ebc:	e011      	b.n	8004ee2 <Display_Print_Matrice+0x80e>
				device->Raw[i][j] = LETTERS[21][j];
 8004ebe:	4a10      	ldr	r2, [pc, #64]	; (8004f00 <Display_Print_Matrice+0x82c>)
 8004ec0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004ec2:	4413      	add	r3, r2
 8004ec4:	33a8      	adds	r3, #168	; 0xa8
 8004ec6:	7819      	ldrb	r1, [r3, #0]
 8004ec8:	68fa      	ldr	r2, [r7, #12]
 8004eca:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8004ece:	00db      	lsls	r3, r3, #3
 8004ed0:	441a      	add	r2, r3
 8004ed2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004ed4:	4413      	add	r3, r2
 8004ed6:	3304      	adds	r3, #4
 8004ed8:	460a      	mov	r2, r1
 8004eda:	701a      	strb	r2, [r3, #0]
			for(int j =0;j<8;j++)
 8004edc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004ede:	3301      	adds	r3, #1
 8004ee0:	667b      	str	r3, [r7, #100]	; 0x64
 8004ee2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004ee4:	2b07      	cmp	r3, #7
 8004ee6:	ddea      	ble.n	8004ebe <Display_Print_Matrice+0x7ea>
			device->Shift[i] = 6;
 8004ee8:	68fa      	ldr	r2, [r7, #12]
 8004eea:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8004eee:	4413      	add	r3, r2
 8004ef0:	3355      	adds	r3, #85	; 0x55
 8004ef2:	2206      	movs	r2, #6
 8004ef4:	701a      	strb	r2, [r3, #0]
			break;
 8004ef6:	e26f      	b.n	80053d8 <Display_Print_Matrice+0xd04>
		case 'M':
			for(int j =0;j<8;j++)
 8004ef8:	2300      	movs	r3, #0
 8004efa:	663b      	str	r3, [r7, #96]	; 0x60
 8004efc:	e014      	b.n	8004f28 <Display_Print_Matrice+0x854>
 8004efe:	bf00      	nop
 8004f00:	2000000c 	.word	0x2000000c
				device->Raw[i][j] = LETTERS[22][j];
 8004f04:	4ab0      	ldr	r2, [pc, #704]	; (80051c8 <Display_Print_Matrice+0xaf4>)
 8004f06:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004f08:	4413      	add	r3, r2
 8004f0a:	33b0      	adds	r3, #176	; 0xb0
 8004f0c:	7819      	ldrb	r1, [r3, #0]
 8004f0e:	68fa      	ldr	r2, [r7, #12]
 8004f10:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8004f14:	00db      	lsls	r3, r3, #3
 8004f16:	441a      	add	r2, r3
 8004f18:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004f1a:	4413      	add	r3, r2
 8004f1c:	3304      	adds	r3, #4
 8004f1e:	460a      	mov	r2, r1
 8004f20:	701a      	strb	r2, [r3, #0]
			for(int j =0;j<8;j++)
 8004f22:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004f24:	3301      	adds	r3, #1
 8004f26:	663b      	str	r3, [r7, #96]	; 0x60
 8004f28:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004f2a:	2b07      	cmp	r3, #7
 8004f2c:	ddea      	ble.n	8004f04 <Display_Print_Matrice+0x830>
			device->Shift[i] = 6;
 8004f2e:	68fa      	ldr	r2, [r7, #12]
 8004f30:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8004f34:	4413      	add	r3, r2
 8004f36:	3355      	adds	r3, #85	; 0x55
 8004f38:	2206      	movs	r2, #6
 8004f3a:	701a      	strb	r2, [r3, #0]
			break;
 8004f3c:	e24c      	b.n	80053d8 <Display_Print_Matrice+0xd04>
		case 'N':
			for(int j =0;j<8;j++)
 8004f3e:	2300      	movs	r3, #0
 8004f40:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004f42:	e011      	b.n	8004f68 <Display_Print_Matrice+0x894>
				device->Raw[i][j] = LETTERS[23][j];
 8004f44:	4aa0      	ldr	r2, [pc, #640]	; (80051c8 <Display_Print_Matrice+0xaf4>)
 8004f46:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004f48:	4413      	add	r3, r2
 8004f4a:	33b8      	adds	r3, #184	; 0xb8
 8004f4c:	7819      	ldrb	r1, [r3, #0]
 8004f4e:	68fa      	ldr	r2, [r7, #12]
 8004f50:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8004f54:	00db      	lsls	r3, r3, #3
 8004f56:	441a      	add	r2, r3
 8004f58:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004f5a:	4413      	add	r3, r2
 8004f5c:	3304      	adds	r3, #4
 8004f5e:	460a      	mov	r2, r1
 8004f60:	701a      	strb	r2, [r3, #0]
			for(int j =0;j<8;j++)
 8004f62:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004f64:	3301      	adds	r3, #1
 8004f66:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004f68:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004f6a:	2b07      	cmp	r3, #7
 8004f6c:	ddea      	ble.n	8004f44 <Display_Print_Matrice+0x870>
			device->Shift[i] = 5;
 8004f6e:	68fa      	ldr	r2, [r7, #12]
 8004f70:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8004f74:	4413      	add	r3, r2
 8004f76:	3355      	adds	r3, #85	; 0x55
 8004f78:	2205      	movs	r2, #5
 8004f7a:	701a      	strb	r2, [r3, #0]
			break;
 8004f7c:	e22c      	b.n	80053d8 <Display_Print_Matrice+0xd04>
		case 'O':
			for(int j =0;j<8;j++)
 8004f7e:	2300      	movs	r3, #0
 8004f80:	65bb      	str	r3, [r7, #88]	; 0x58
 8004f82:	e011      	b.n	8004fa8 <Display_Print_Matrice+0x8d4>
				device->Raw[i][j] = LETTERS[24][j];
 8004f84:	4a90      	ldr	r2, [pc, #576]	; (80051c8 <Display_Print_Matrice+0xaf4>)
 8004f86:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004f88:	4413      	add	r3, r2
 8004f8a:	33c0      	adds	r3, #192	; 0xc0
 8004f8c:	7819      	ldrb	r1, [r3, #0]
 8004f8e:	68fa      	ldr	r2, [r7, #12]
 8004f90:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8004f94:	00db      	lsls	r3, r3, #3
 8004f96:	441a      	add	r2, r3
 8004f98:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004f9a:	4413      	add	r3, r2
 8004f9c:	3304      	adds	r3, #4
 8004f9e:	460a      	mov	r2, r1
 8004fa0:	701a      	strb	r2, [r3, #0]
			for(int j =0;j<8;j++)
 8004fa2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004fa4:	3301      	adds	r3, #1
 8004fa6:	65bb      	str	r3, [r7, #88]	; 0x58
 8004fa8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004faa:	2b07      	cmp	r3, #7
 8004fac:	ddea      	ble.n	8004f84 <Display_Print_Matrice+0x8b0>
			device->Shift[i] = 5;
 8004fae:	68fa      	ldr	r2, [r7, #12]
 8004fb0:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8004fb4:	4413      	add	r3, r2
 8004fb6:	3355      	adds	r3, #85	; 0x55
 8004fb8:	2205      	movs	r2, #5
 8004fba:	701a      	strb	r2, [r3, #0]
			break;
 8004fbc:	e20c      	b.n	80053d8 <Display_Print_Matrice+0xd04>
		case 'P':
			for(int j =0;j<8;j++)
 8004fbe:	2300      	movs	r3, #0
 8004fc0:	657b      	str	r3, [r7, #84]	; 0x54
 8004fc2:	e011      	b.n	8004fe8 <Display_Print_Matrice+0x914>
				device->Raw[i][j] = LETTERS[25][j];
 8004fc4:	4a80      	ldr	r2, [pc, #512]	; (80051c8 <Display_Print_Matrice+0xaf4>)
 8004fc6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004fc8:	4413      	add	r3, r2
 8004fca:	33c8      	adds	r3, #200	; 0xc8
 8004fcc:	7819      	ldrb	r1, [r3, #0]
 8004fce:	68fa      	ldr	r2, [r7, #12]
 8004fd0:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8004fd4:	00db      	lsls	r3, r3, #3
 8004fd6:	441a      	add	r2, r3
 8004fd8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004fda:	4413      	add	r3, r2
 8004fdc:	3304      	adds	r3, #4
 8004fde:	460a      	mov	r2, r1
 8004fe0:	701a      	strb	r2, [r3, #0]
			for(int j =0;j<8;j++)
 8004fe2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004fe4:	3301      	adds	r3, #1
 8004fe6:	657b      	str	r3, [r7, #84]	; 0x54
 8004fe8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004fea:	2b07      	cmp	r3, #7
 8004fec:	ddea      	ble.n	8004fc4 <Display_Print_Matrice+0x8f0>
			device->Shift[i] = 5;
 8004fee:	68fa      	ldr	r2, [r7, #12]
 8004ff0:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8004ff4:	4413      	add	r3, r2
 8004ff6:	3355      	adds	r3, #85	; 0x55
 8004ff8:	2205      	movs	r2, #5
 8004ffa:	701a      	strb	r2, [r3, #0]
			break;
 8004ffc:	e1ec      	b.n	80053d8 <Display_Print_Matrice+0xd04>
		case 'Q':
			for(int j =0;j<8;j++)
 8004ffe:	2300      	movs	r3, #0
 8005000:	653b      	str	r3, [r7, #80]	; 0x50
 8005002:	e011      	b.n	8005028 <Display_Print_Matrice+0x954>
				device->Raw[i][j] = LETTERS[26][j];
 8005004:	4a70      	ldr	r2, [pc, #448]	; (80051c8 <Display_Print_Matrice+0xaf4>)
 8005006:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005008:	4413      	add	r3, r2
 800500a:	33d0      	adds	r3, #208	; 0xd0
 800500c:	7819      	ldrb	r1, [r3, #0]
 800500e:	68fa      	ldr	r2, [r7, #12]
 8005010:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8005014:	00db      	lsls	r3, r3, #3
 8005016:	441a      	add	r2, r3
 8005018:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800501a:	4413      	add	r3, r2
 800501c:	3304      	adds	r3, #4
 800501e:	460a      	mov	r2, r1
 8005020:	701a      	strb	r2, [r3, #0]
			for(int j =0;j<8;j++)
 8005022:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005024:	3301      	adds	r3, #1
 8005026:	653b      	str	r3, [r7, #80]	; 0x50
 8005028:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800502a:	2b07      	cmp	r3, #7
 800502c:	ddea      	ble.n	8005004 <Display_Print_Matrice+0x930>
			device->Shift[i] = 5;
 800502e:	68fa      	ldr	r2, [r7, #12]
 8005030:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8005034:	4413      	add	r3, r2
 8005036:	3355      	adds	r3, #85	; 0x55
 8005038:	2205      	movs	r2, #5
 800503a:	701a      	strb	r2, [r3, #0]
			break;
 800503c:	e1cc      	b.n	80053d8 <Display_Print_Matrice+0xd04>
		case 'R':
			for(int j =0;j<8;j++)
 800503e:	2300      	movs	r3, #0
 8005040:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005042:	e011      	b.n	8005068 <Display_Print_Matrice+0x994>
				device->Raw[i][j] = LETTERS[27][j];
 8005044:	4a60      	ldr	r2, [pc, #384]	; (80051c8 <Display_Print_Matrice+0xaf4>)
 8005046:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005048:	4413      	add	r3, r2
 800504a:	33d8      	adds	r3, #216	; 0xd8
 800504c:	7819      	ldrb	r1, [r3, #0]
 800504e:	68fa      	ldr	r2, [r7, #12]
 8005050:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8005054:	00db      	lsls	r3, r3, #3
 8005056:	441a      	add	r2, r3
 8005058:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800505a:	4413      	add	r3, r2
 800505c:	3304      	adds	r3, #4
 800505e:	460a      	mov	r2, r1
 8005060:	701a      	strb	r2, [r3, #0]
			for(int j =0;j<8;j++)
 8005062:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005064:	3301      	adds	r3, #1
 8005066:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005068:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800506a:	2b07      	cmp	r3, #7
 800506c:	ddea      	ble.n	8005044 <Display_Print_Matrice+0x970>
			device->Shift[i] = 5;
 800506e:	68fa      	ldr	r2, [r7, #12]
 8005070:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8005074:	4413      	add	r3, r2
 8005076:	3355      	adds	r3, #85	; 0x55
 8005078:	2205      	movs	r2, #5
 800507a:	701a      	strb	r2, [r3, #0]
			break;
 800507c:	e1ac      	b.n	80053d8 <Display_Print_Matrice+0xd04>
		case 'S':
			for(int j =0;j<8;j++)
 800507e:	2300      	movs	r3, #0
 8005080:	64bb      	str	r3, [r7, #72]	; 0x48
 8005082:	e011      	b.n	80050a8 <Display_Print_Matrice+0x9d4>
				device->Raw[i][j] = LETTERS[28][j];
 8005084:	4a50      	ldr	r2, [pc, #320]	; (80051c8 <Display_Print_Matrice+0xaf4>)
 8005086:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005088:	4413      	add	r3, r2
 800508a:	33e0      	adds	r3, #224	; 0xe0
 800508c:	7819      	ldrb	r1, [r3, #0]
 800508e:	68fa      	ldr	r2, [r7, #12]
 8005090:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8005094:	00db      	lsls	r3, r3, #3
 8005096:	441a      	add	r2, r3
 8005098:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800509a:	4413      	add	r3, r2
 800509c:	3304      	adds	r3, #4
 800509e:	460a      	mov	r2, r1
 80050a0:	701a      	strb	r2, [r3, #0]
			for(int j =0;j<8;j++)
 80050a2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80050a4:	3301      	adds	r3, #1
 80050a6:	64bb      	str	r3, [r7, #72]	; 0x48
 80050a8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80050aa:	2b07      	cmp	r3, #7
 80050ac:	ddea      	ble.n	8005084 <Display_Print_Matrice+0x9b0>
			device->Shift[i] = 5;
 80050ae:	68fa      	ldr	r2, [r7, #12]
 80050b0:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80050b4:	4413      	add	r3, r2
 80050b6:	3355      	adds	r3, #85	; 0x55
 80050b8:	2205      	movs	r2, #5
 80050ba:	701a      	strb	r2, [r3, #0]
			break;
 80050bc:	e18c      	b.n	80053d8 <Display_Print_Matrice+0xd04>
		case 'T':
			for(int j =0;j<8;j++)
 80050be:	2300      	movs	r3, #0
 80050c0:	647b      	str	r3, [r7, #68]	; 0x44
 80050c2:	e011      	b.n	80050e8 <Display_Print_Matrice+0xa14>
				device->Raw[i][j] = LETTERS[29][j];
 80050c4:	4a40      	ldr	r2, [pc, #256]	; (80051c8 <Display_Print_Matrice+0xaf4>)
 80050c6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80050c8:	4413      	add	r3, r2
 80050ca:	33e8      	adds	r3, #232	; 0xe8
 80050cc:	7819      	ldrb	r1, [r3, #0]
 80050ce:	68fa      	ldr	r2, [r7, #12]
 80050d0:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80050d4:	00db      	lsls	r3, r3, #3
 80050d6:	441a      	add	r2, r3
 80050d8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80050da:	4413      	add	r3, r2
 80050dc:	3304      	adds	r3, #4
 80050de:	460a      	mov	r2, r1
 80050e0:	701a      	strb	r2, [r3, #0]
			for(int j =0;j<8;j++)
 80050e2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80050e4:	3301      	adds	r3, #1
 80050e6:	647b      	str	r3, [r7, #68]	; 0x44
 80050e8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80050ea:	2b07      	cmp	r3, #7
 80050ec:	ddea      	ble.n	80050c4 <Display_Print_Matrice+0x9f0>
			device->Shift[i] = 5;
 80050ee:	68fa      	ldr	r2, [r7, #12]
 80050f0:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80050f4:	4413      	add	r3, r2
 80050f6:	3355      	adds	r3, #85	; 0x55
 80050f8:	2205      	movs	r2, #5
 80050fa:	701a      	strb	r2, [r3, #0]
			break;
 80050fc:	e16c      	b.n	80053d8 <Display_Print_Matrice+0xd04>
		case 'U':
			for(int j =0;j<8;j++)
 80050fe:	2300      	movs	r3, #0
 8005100:	643b      	str	r3, [r7, #64]	; 0x40
 8005102:	e011      	b.n	8005128 <Display_Print_Matrice+0xa54>
				device->Raw[i][j] = LETTERS[30][j];
 8005104:	4a30      	ldr	r2, [pc, #192]	; (80051c8 <Display_Print_Matrice+0xaf4>)
 8005106:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005108:	4413      	add	r3, r2
 800510a:	33f0      	adds	r3, #240	; 0xf0
 800510c:	7819      	ldrb	r1, [r3, #0]
 800510e:	68fa      	ldr	r2, [r7, #12]
 8005110:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8005114:	00db      	lsls	r3, r3, #3
 8005116:	441a      	add	r2, r3
 8005118:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800511a:	4413      	add	r3, r2
 800511c:	3304      	adds	r3, #4
 800511e:	460a      	mov	r2, r1
 8005120:	701a      	strb	r2, [r3, #0]
			for(int j =0;j<8;j++)
 8005122:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005124:	3301      	adds	r3, #1
 8005126:	643b      	str	r3, [r7, #64]	; 0x40
 8005128:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800512a:	2b07      	cmp	r3, #7
 800512c:	ddea      	ble.n	8005104 <Display_Print_Matrice+0xa30>
			device->Shift[i] = 5;
 800512e:	68fa      	ldr	r2, [r7, #12]
 8005130:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8005134:	4413      	add	r3, r2
 8005136:	3355      	adds	r3, #85	; 0x55
 8005138:	2205      	movs	r2, #5
 800513a:	701a      	strb	r2, [r3, #0]
			break;
 800513c:	e14c      	b.n	80053d8 <Display_Print_Matrice+0xd04>
		case 'V':
			for(int j =0;j<8;j++)
 800513e:	2300      	movs	r3, #0
 8005140:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005142:	e011      	b.n	8005168 <Display_Print_Matrice+0xa94>
				device->Raw[i][j] = LETTERS[31][j];
 8005144:	4a20      	ldr	r2, [pc, #128]	; (80051c8 <Display_Print_Matrice+0xaf4>)
 8005146:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005148:	4413      	add	r3, r2
 800514a:	33f8      	adds	r3, #248	; 0xf8
 800514c:	7819      	ldrb	r1, [r3, #0]
 800514e:	68fa      	ldr	r2, [r7, #12]
 8005150:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8005154:	00db      	lsls	r3, r3, #3
 8005156:	441a      	add	r2, r3
 8005158:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800515a:	4413      	add	r3, r2
 800515c:	3304      	adds	r3, #4
 800515e:	460a      	mov	r2, r1
 8005160:	701a      	strb	r2, [r3, #0]
			for(int j =0;j<8;j++)
 8005162:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005164:	3301      	adds	r3, #1
 8005166:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005168:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800516a:	2b07      	cmp	r3, #7
 800516c:	ddea      	ble.n	8005144 <Display_Print_Matrice+0xa70>
			device->Shift[i] = 5;
 800516e:	68fa      	ldr	r2, [r7, #12]
 8005170:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8005174:	4413      	add	r3, r2
 8005176:	3355      	adds	r3, #85	; 0x55
 8005178:	2205      	movs	r2, #5
 800517a:	701a      	strb	r2, [r3, #0]
			break;
 800517c:	e12c      	b.n	80053d8 <Display_Print_Matrice+0xd04>
		case 'W':
			for(int j =0;j<8;j++)
 800517e:	2300      	movs	r3, #0
 8005180:	63bb      	str	r3, [r7, #56]	; 0x38
 8005182:	e012      	b.n	80051aa <Display_Print_Matrice+0xad6>
				device->Raw[i][j] = LETTERS[32][j];
 8005184:	4a10      	ldr	r2, [pc, #64]	; (80051c8 <Display_Print_Matrice+0xaf4>)
 8005186:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005188:	4413      	add	r3, r2
 800518a:	f503 7380 	add.w	r3, r3, #256	; 0x100
 800518e:	7819      	ldrb	r1, [r3, #0]
 8005190:	68fa      	ldr	r2, [r7, #12]
 8005192:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8005196:	00db      	lsls	r3, r3, #3
 8005198:	441a      	add	r2, r3
 800519a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800519c:	4413      	add	r3, r2
 800519e:	3304      	adds	r3, #4
 80051a0:	460a      	mov	r2, r1
 80051a2:	701a      	strb	r2, [r3, #0]
			for(int j =0;j<8;j++)
 80051a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80051a6:	3301      	adds	r3, #1
 80051a8:	63bb      	str	r3, [r7, #56]	; 0x38
 80051aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80051ac:	2b07      	cmp	r3, #7
 80051ae:	dde9      	ble.n	8005184 <Display_Print_Matrice+0xab0>
			device->Shift[i] = 5;
 80051b0:	68fa      	ldr	r2, [r7, #12]
 80051b2:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80051b6:	4413      	add	r3, r2
 80051b8:	3355      	adds	r3, #85	; 0x55
 80051ba:	2205      	movs	r2, #5
 80051bc:	701a      	strb	r2, [r3, #0]
			break;
 80051be:	e10b      	b.n	80053d8 <Display_Print_Matrice+0xd04>
		case 'X':
			for(int j =0;j<8;j++)
 80051c0:	2300      	movs	r3, #0
 80051c2:	637b      	str	r3, [r7, #52]	; 0x34
 80051c4:	e015      	b.n	80051f2 <Display_Print_Matrice+0xb1e>
 80051c6:	bf00      	nop
 80051c8:	2000000c 	.word	0x2000000c
				device->Raw[i][j] = LETTERS[33][j];
 80051cc:	4a8e      	ldr	r2, [pc, #568]	; (8005408 <Display_Print_Matrice+0xd34>)
 80051ce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80051d0:	4413      	add	r3, r2
 80051d2:	f503 7384 	add.w	r3, r3, #264	; 0x108
 80051d6:	7819      	ldrb	r1, [r3, #0]
 80051d8:	68fa      	ldr	r2, [r7, #12]
 80051da:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80051de:	00db      	lsls	r3, r3, #3
 80051e0:	441a      	add	r2, r3
 80051e2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80051e4:	4413      	add	r3, r2
 80051e6:	3304      	adds	r3, #4
 80051e8:	460a      	mov	r2, r1
 80051ea:	701a      	strb	r2, [r3, #0]
			for(int j =0;j<8;j++)
 80051ec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80051ee:	3301      	adds	r3, #1
 80051f0:	637b      	str	r3, [r7, #52]	; 0x34
 80051f2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80051f4:	2b07      	cmp	r3, #7
 80051f6:	dde9      	ble.n	80051cc <Display_Print_Matrice+0xaf8>
			device->Shift[i] = 5;
 80051f8:	68fa      	ldr	r2, [r7, #12]
 80051fa:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80051fe:	4413      	add	r3, r2
 8005200:	3355      	adds	r3, #85	; 0x55
 8005202:	2205      	movs	r2, #5
 8005204:	701a      	strb	r2, [r3, #0]
			break;
 8005206:	e0e7      	b.n	80053d8 <Display_Print_Matrice+0xd04>
		case 'Y':
			for(int j =0;j<8;j++)
 8005208:	2300      	movs	r3, #0
 800520a:	633b      	str	r3, [r7, #48]	; 0x30
 800520c:	e012      	b.n	8005234 <Display_Print_Matrice+0xb60>
				device->Raw[i][j] = LETTERS[34][j];
 800520e:	4a7e      	ldr	r2, [pc, #504]	; (8005408 <Display_Print_Matrice+0xd34>)
 8005210:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005212:	4413      	add	r3, r2
 8005214:	f503 7388 	add.w	r3, r3, #272	; 0x110
 8005218:	7819      	ldrb	r1, [r3, #0]
 800521a:	68fa      	ldr	r2, [r7, #12]
 800521c:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8005220:	00db      	lsls	r3, r3, #3
 8005222:	441a      	add	r2, r3
 8005224:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005226:	4413      	add	r3, r2
 8005228:	3304      	adds	r3, #4
 800522a:	460a      	mov	r2, r1
 800522c:	701a      	strb	r2, [r3, #0]
			for(int j =0;j<8;j++)
 800522e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005230:	3301      	adds	r3, #1
 8005232:	633b      	str	r3, [r7, #48]	; 0x30
 8005234:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005236:	2b07      	cmp	r3, #7
 8005238:	dde9      	ble.n	800520e <Display_Print_Matrice+0xb3a>
			device->Shift[i] = 5;
 800523a:	68fa      	ldr	r2, [r7, #12]
 800523c:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8005240:	4413      	add	r3, r2
 8005242:	3355      	adds	r3, #85	; 0x55
 8005244:	2205      	movs	r2, #5
 8005246:	701a      	strb	r2, [r3, #0]
			break;
 8005248:	e0c6      	b.n	80053d8 <Display_Print_Matrice+0xd04>
		case 'Z':
			for(int j =0;j<8;j++)
 800524a:	2300      	movs	r3, #0
 800524c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800524e:	e012      	b.n	8005276 <Display_Print_Matrice+0xba2>
				device->Raw[i][j] = LETTERS[35][j];
 8005250:	4a6d      	ldr	r2, [pc, #436]	; (8005408 <Display_Print_Matrice+0xd34>)
 8005252:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005254:	4413      	add	r3, r2
 8005256:	f503 738c 	add.w	r3, r3, #280	; 0x118
 800525a:	7819      	ldrb	r1, [r3, #0]
 800525c:	68fa      	ldr	r2, [r7, #12]
 800525e:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8005262:	00db      	lsls	r3, r3, #3
 8005264:	441a      	add	r2, r3
 8005266:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005268:	4413      	add	r3, r2
 800526a:	3304      	adds	r3, #4
 800526c:	460a      	mov	r2, r1
 800526e:	701a      	strb	r2, [r3, #0]
			for(int j =0;j<8;j++)
 8005270:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005272:	3301      	adds	r3, #1
 8005274:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005276:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005278:	2b07      	cmp	r3, #7
 800527a:	dde9      	ble.n	8005250 <Display_Print_Matrice+0xb7c>
			device->Shift[i] = 5;
 800527c:	68fa      	ldr	r2, [r7, #12]
 800527e:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8005282:	4413      	add	r3, r2
 8005284:	3355      	adds	r3, #85	; 0x55
 8005286:	2205      	movs	r2, #5
 8005288:	701a      	strb	r2, [r3, #0]
			break;
 800528a:	e0a5      	b.n	80053d8 <Display_Print_Matrice+0xd04>
		case '.':
			for(int j =0;j<8;j++)
 800528c:	2300      	movs	r3, #0
 800528e:	62bb      	str	r3, [r7, #40]	; 0x28
 8005290:	e012      	b.n	80052b8 <Display_Print_Matrice+0xbe4>
				device->Raw[i][j] = LETTERS[36][j];
 8005292:	4a5d      	ldr	r2, [pc, #372]	; (8005408 <Display_Print_Matrice+0xd34>)
 8005294:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005296:	4413      	add	r3, r2
 8005298:	f503 7390 	add.w	r3, r3, #288	; 0x120
 800529c:	7819      	ldrb	r1, [r3, #0]
 800529e:	68fa      	ldr	r2, [r7, #12]
 80052a0:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80052a4:	00db      	lsls	r3, r3, #3
 80052a6:	441a      	add	r2, r3
 80052a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80052aa:	4413      	add	r3, r2
 80052ac:	3304      	adds	r3, #4
 80052ae:	460a      	mov	r2, r1
 80052b0:	701a      	strb	r2, [r3, #0]
			for(int j =0;j<8;j++)
 80052b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80052b4:	3301      	adds	r3, #1
 80052b6:	62bb      	str	r3, [r7, #40]	; 0x28
 80052b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80052ba:	2b07      	cmp	r3, #7
 80052bc:	dde9      	ble.n	8005292 <Display_Print_Matrice+0xbbe>
			device->Shift[i] = 2;
 80052be:	68fa      	ldr	r2, [r7, #12]
 80052c0:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80052c4:	4413      	add	r3, r2
 80052c6:	3355      	adds	r3, #85	; 0x55
 80052c8:	2202      	movs	r2, #2
 80052ca:	701a      	strb	r2, [r3, #0]
			break;
 80052cc:	e084      	b.n	80053d8 <Display_Print_Matrice+0xd04>
		case ':':
			for(int j =0;j<8;j++)
 80052ce:	2300      	movs	r3, #0
 80052d0:	627b      	str	r3, [r7, #36]	; 0x24
 80052d2:	e012      	b.n	80052fa <Display_Print_Matrice+0xc26>
				device->Raw[i][j] = LETTERS[37][j];
 80052d4:	4a4c      	ldr	r2, [pc, #304]	; (8005408 <Display_Print_Matrice+0xd34>)
 80052d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052d8:	4413      	add	r3, r2
 80052da:	f503 7394 	add.w	r3, r3, #296	; 0x128
 80052de:	7819      	ldrb	r1, [r3, #0]
 80052e0:	68fa      	ldr	r2, [r7, #12]
 80052e2:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80052e6:	00db      	lsls	r3, r3, #3
 80052e8:	441a      	add	r2, r3
 80052ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052ec:	4413      	add	r3, r2
 80052ee:	3304      	adds	r3, #4
 80052f0:	460a      	mov	r2, r1
 80052f2:	701a      	strb	r2, [r3, #0]
			for(int j =0;j<8;j++)
 80052f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052f6:	3301      	adds	r3, #1
 80052f8:	627b      	str	r3, [r7, #36]	; 0x24
 80052fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052fc:	2b07      	cmp	r3, #7
 80052fe:	dde9      	ble.n	80052d4 <Display_Print_Matrice+0xc00>
			device->Shift[i] = 2;
 8005300:	68fa      	ldr	r2, [r7, #12]
 8005302:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8005306:	4413      	add	r3, r2
 8005308:	3355      	adds	r3, #85	; 0x55
 800530a:	2202      	movs	r2, #2
 800530c:	701a      	strb	r2, [r3, #0]
			break;
 800530e:	e063      	b.n	80053d8 <Display_Print_Matrice+0xd04>
		case ' ':
			for(int j =0;j<8;j++)
 8005310:	2300      	movs	r3, #0
 8005312:	623b      	str	r3, [r7, #32]
 8005314:	e012      	b.n	800533c <Display_Print_Matrice+0xc68>
				device->Raw[i][j] = LETTERS[38][j];
 8005316:	4a3c      	ldr	r2, [pc, #240]	; (8005408 <Display_Print_Matrice+0xd34>)
 8005318:	6a3b      	ldr	r3, [r7, #32]
 800531a:	4413      	add	r3, r2
 800531c:	f503 7398 	add.w	r3, r3, #304	; 0x130
 8005320:	7819      	ldrb	r1, [r3, #0]
 8005322:	68fa      	ldr	r2, [r7, #12]
 8005324:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8005328:	00db      	lsls	r3, r3, #3
 800532a:	441a      	add	r2, r3
 800532c:	6a3b      	ldr	r3, [r7, #32]
 800532e:	4413      	add	r3, r2
 8005330:	3304      	adds	r3, #4
 8005332:	460a      	mov	r2, r1
 8005334:	701a      	strb	r2, [r3, #0]
			for(int j =0;j<8;j++)
 8005336:	6a3b      	ldr	r3, [r7, #32]
 8005338:	3301      	adds	r3, #1
 800533a:	623b      	str	r3, [r7, #32]
 800533c:	6a3b      	ldr	r3, [r7, #32]
 800533e:	2b07      	cmp	r3, #7
 8005340:	dde9      	ble.n	8005316 <Display_Print_Matrice+0xc42>
			device->Shift[i] = 2;
 8005342:	68fa      	ldr	r2, [r7, #12]
 8005344:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8005348:	4413      	add	r3, r2
 800534a:	3355      	adds	r3, #85	; 0x55
 800534c:	2202      	movs	r2, #2
 800534e:	701a      	strb	r2, [r3, #0]
			break;
 8005350:	e042      	b.n	80053d8 <Display_Print_Matrice+0xd04>
		case 'd':										// Provisoire le temp de régler pb °
			for(int j =0;j<8;j++)
 8005352:	2300      	movs	r3, #0
 8005354:	61fb      	str	r3, [r7, #28]
 8005356:	e012      	b.n	800537e <Display_Print_Matrice+0xcaa>
				device->Raw[i][j] = LETTERS[39][j];
 8005358:	4a2b      	ldr	r2, [pc, #172]	; (8005408 <Display_Print_Matrice+0xd34>)
 800535a:	69fb      	ldr	r3, [r7, #28]
 800535c:	4413      	add	r3, r2
 800535e:	f503 739c 	add.w	r3, r3, #312	; 0x138
 8005362:	7819      	ldrb	r1, [r3, #0]
 8005364:	68fa      	ldr	r2, [r7, #12]
 8005366:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800536a:	00db      	lsls	r3, r3, #3
 800536c:	441a      	add	r2, r3
 800536e:	69fb      	ldr	r3, [r7, #28]
 8005370:	4413      	add	r3, r2
 8005372:	3304      	adds	r3, #4
 8005374:	460a      	mov	r2, r1
 8005376:	701a      	strb	r2, [r3, #0]
			for(int j =0;j<8;j++)
 8005378:	69fb      	ldr	r3, [r7, #28]
 800537a:	3301      	adds	r3, #1
 800537c:	61fb      	str	r3, [r7, #28]
 800537e:	69fb      	ldr	r3, [r7, #28]
 8005380:	2b07      	cmp	r3, #7
 8005382:	dde9      	ble.n	8005358 <Display_Print_Matrice+0xc84>
			device->Shift[i] = 4;
 8005384:	68fa      	ldr	r2, [r7, #12]
 8005386:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800538a:	4413      	add	r3, r2
 800538c:	3355      	adds	r3, #85	; 0x55
 800538e:	2204      	movs	r2, #4
 8005390:	701a      	strb	r2, [r3, #0]
			break;
 8005392:	e021      	b.n	80053d8 <Display_Print_Matrice+0xd04>
		case '%':
			for(int j =0;j<8;j++)
 8005394:	2300      	movs	r3, #0
 8005396:	61bb      	str	r3, [r7, #24]
 8005398:	e012      	b.n	80053c0 <Display_Print_Matrice+0xcec>
				device->Raw[i][j] = LETTERS[40][j];
 800539a:	4a1b      	ldr	r2, [pc, #108]	; (8005408 <Display_Print_Matrice+0xd34>)
 800539c:	69bb      	ldr	r3, [r7, #24]
 800539e:	4413      	add	r3, r2
 80053a0:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 80053a4:	7819      	ldrb	r1, [r3, #0]
 80053a6:	68fa      	ldr	r2, [r7, #12]
 80053a8:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80053ac:	00db      	lsls	r3, r3, #3
 80053ae:	441a      	add	r2, r3
 80053b0:	69bb      	ldr	r3, [r7, #24]
 80053b2:	4413      	add	r3, r2
 80053b4:	3304      	adds	r3, #4
 80053b6:	460a      	mov	r2, r1
 80053b8:	701a      	strb	r2, [r3, #0]
			for(int j =0;j<8;j++)
 80053ba:	69bb      	ldr	r3, [r7, #24]
 80053bc:	3301      	adds	r3, #1
 80053be:	61bb      	str	r3, [r7, #24]
 80053c0:	69bb      	ldr	r3, [r7, #24]
 80053c2:	2b07      	cmp	r3, #7
 80053c4:	dde9      	ble.n	800539a <Display_Print_Matrice+0xcc6>
			device->Shift[i] = 5;
 80053c6:	68fa      	ldr	r2, [r7, #12]
 80053c8:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80053cc:	4413      	add	r3, r2
 80053ce:	3355      	adds	r3, #85	; 0x55
 80053d0:	2205      	movs	r2, #5
 80053d2:	701a      	strb	r2, [r3, #0]
			break;
 80053d4:	e000      	b.n	80053d8 <Display_Print_Matrice+0xd04>
		case '\0':
			break;
		default:
			break;
 80053d6:	bf00      	nop
	for(int i = 0; i<device->Size; i++)
 80053d8:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80053dc:	3301      	adds	r3, #1
 80053de:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 80053e2:	68fb      	ldr	r3, [r7, #12]
 80053e4:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 80053e8:	461a      	mov	r2, r3
 80053ea:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80053ee:	4293      	cmp	r3, r2
 80053f0:	f6ff a984 	blt.w	80046fc <Display_Print_Matrice+0x28>
		}

	}
	Display_Raw_Matrice(device,opt);
 80053f4:	79fb      	ldrb	r3, [r7, #7]
 80053f6:	4619      	mov	r1, r3
 80053f8:	68f8      	ldr	r0, [r7, #12]
 80053fa:	f000 f807 	bl	800540c <Display_Raw_Matrice>
}
 80053fe:	bf00      	nop
 8005400:	37c0      	adds	r7, #192	; 0xc0
 8005402:	46bd      	mov	sp, r7
 8005404:	bd80      	pop	{r7, pc}
 8005406:	bf00      	nop
 8005408:	2000000c 	.word	0x2000000c

0800540c <Display_Raw_Matrice>:


void Display_Raw_Matrice(Matrix * device,uint8_t opt)
{
 800540c:	b580      	push	{r7, lr}
 800540e:	b088      	sub	sp, #32
 8005410:	af00      	add	r7, sp, #0
 8005412:	6078      	str	r0, [r7, #4]
 8005414:	460b      	mov	r3, r1
 8005416:	70fb      	strb	r3, [r7, #3]
	 uint8_t Commande[6]={0x00};
 8005418:	2300      	movs	r3, #0
 800541a:	60bb      	str	r3, [r7, #8]
 800541c:	2300      	movs	r3, #0
 800541e:	81bb      	strh	r3, [r7, #12]
	 int shift = 0;
 8005420:	2300      	movs	r3, #0
 8005422:	61fb      	str	r3, [r7, #28]
	 int cpt = 0;
 8005424:	2300      	movs	r3, #0
 8005426:	61bb      	str	r3, [r7, #24]

	 uint32_t mask1 =0;											// Mask grand pour faire le registre des 3 matrices en entiers
 8005428:	2300      	movs	r3, #0
 800542a:	617b      	str	r3, [r7, #20]
	 uint8_t mask2 = 0;
 800542c:	2300      	movs	r3, #0
 800542e:	73fb      	strb	r3, [r7, #15]
	 uint8_t mask3 = 0;
 8005430:	2300      	movs	r3, #0
 8005432:	73bb      	strb	r3, [r7, #14]

	 for(int j=1;j<=8;j++)
 8005434:	2301      	movs	r3, #1
 8005436:	613b      	str	r3, [r7, #16]
 8005438:	e050      	b.n	80054dc <Display_Raw_Matrice+0xd0>
	 {
		 	 while(cpt<device->Size)
		 	 {
		 		 mask1 += device->Raw[cpt][j-1]<<shift<<opt>>2;									//2 sert à recentrer au début de matrice
 800543a:	693b      	ldr	r3, [r7, #16]
 800543c:	3b01      	subs	r3, #1
 800543e:	6879      	ldr	r1, [r7, #4]
 8005440:	69ba      	ldr	r2, [r7, #24]
 8005442:	00d2      	lsls	r2, r2, #3
 8005444:	440a      	add	r2, r1
 8005446:	4413      	add	r3, r2
 8005448:	3304      	adds	r3, #4
 800544a:	781b      	ldrb	r3, [r3, #0]
 800544c:	461a      	mov	r2, r3
 800544e:	69fb      	ldr	r3, [r7, #28]
 8005450:	409a      	lsls	r2, r3
 8005452:	78fb      	ldrb	r3, [r7, #3]
 8005454:	fa02 f303 	lsl.w	r3, r2, r3
 8005458:	109b      	asrs	r3, r3, #2
 800545a:	461a      	mov	r2, r3
 800545c:	697b      	ldr	r3, [r7, #20]
 800545e:	4413      	add	r3, r2
 8005460:	617b      	str	r3, [r7, #20]
		 		 shift += device->Shift[cpt];
 8005462:	687a      	ldr	r2, [r7, #4]
 8005464:	69bb      	ldr	r3, [r7, #24]
 8005466:	4413      	add	r3, r2
 8005468:	3355      	adds	r3, #85	; 0x55
 800546a:	781b      	ldrb	r3, [r3, #0]
 800546c:	461a      	mov	r2, r3
 800546e:	69fb      	ldr	r3, [r7, #28]
 8005470:	4413      	add	r3, r2
 8005472:	61fb      	str	r3, [r7, #28]
		 		 cpt++;
 8005474:	69bb      	ldr	r3, [r7, #24]
 8005476:	3301      	adds	r3, #1
 8005478:	61bb      	str	r3, [r7, #24]
		 	 while(cpt<device->Size)
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8005480:	461a      	mov	r2, r3
 8005482:	69bb      	ldr	r3, [r7, #24]
 8005484:	4293      	cmp	r3, r2
 8005486:	dbd8      	blt.n	800543a <Display_Raw_Matrice+0x2e>

		 	 }
		 	 cpt = 0;
 8005488:	2300      	movs	r3, #0
 800548a:	61bb      	str	r3, [r7, #24]
		 	 shift = 0;
 800548c:	2300      	movs	r3, #0
 800548e:	61fb      	str	r3, [r7, #28]
		 	 mask2 = mask1>>8 ;																	// décalage des 8 bits de poids forts à droite
 8005490:	697b      	ldr	r3, [r7, #20]
 8005492:	0a1b      	lsrs	r3, r3, #8
 8005494:	73fb      	strb	r3, [r7, #15]
			 mask3 = mask1>>16;																// décalage des 16 bits de poids forts à droite lors de déplacement
 8005496:	697b      	ldr	r3, [r7, #20]
 8005498:	0c1b      	lsrs	r3, r3, #16
 800549a:	73bb      	strb	r3, [r7, #14]

			 Commande[4] = j;
 800549c:	693b      	ldr	r3, [r7, #16]
 800549e:	b2db      	uxtb	r3, r3
 80054a0:	733b      	strb	r3, [r7, #12]
			 Commande[5]= mask1;			//Matrice 1
 80054a2:	697b      	ldr	r3, [r7, #20]
 80054a4:	b2db      	uxtb	r3, r3
 80054a6:	737b      	strb	r3, [r7, #13]

			 Commande[2] = j;
 80054a8:	693b      	ldr	r3, [r7, #16]
 80054aa:	b2db      	uxtb	r3, r3
 80054ac:	72bb      	strb	r3, [r7, #10]
			 Commande[3]= mask2;			//Matrice 2
 80054ae:	7bfb      	ldrb	r3, [r7, #15]
 80054b0:	72fb      	strb	r3, [r7, #11]

			 Commande[0] = j;
 80054b2:	693b      	ldr	r3, [r7, #16]
 80054b4:	b2db      	uxtb	r3, r3
 80054b6:	723b      	strb	r3, [r7, #8]
			 Commande[1]= mask3;			//Matrice 3
 80054b8:	7bbb      	ldrb	r3, [r7, #14]
 80054ba:	727b      	strb	r3, [r7, #9]

		 MAX7219_SendPackage(device, Commande,sizeof(Commande));
 80054bc:	f107 0308 	add.w	r3, r7, #8
 80054c0:	2206      	movs	r2, #6
 80054c2:	4619      	mov	r1, r3
 80054c4:	6878      	ldr	r0, [r7, #4]
 80054c6:	f000 f891 	bl	80055ec <MAX7219_SendPackage>

		 mask1=0;
 80054ca:	2300      	movs	r3, #0
 80054cc:	617b      	str	r3, [r7, #20]
		 mask2=0;
 80054ce:	2300      	movs	r3, #0
 80054d0:	73fb      	strb	r3, [r7, #15]
		 mask3=0;
 80054d2:	2300      	movs	r3, #0
 80054d4:	73bb      	strb	r3, [r7, #14]
	 for(int j=1;j<=8;j++)
 80054d6:	693b      	ldr	r3, [r7, #16]
 80054d8:	3301      	adds	r3, #1
 80054da:	613b      	str	r3, [r7, #16]
 80054dc:	693b      	ldr	r3, [r7, #16]
 80054de:	2b08      	cmp	r3, #8
 80054e0:	ddcb      	ble.n	800547a <Display_Raw_Matrice+0x6e>

	 }

}
 80054e2:	bf00      	nop
 80054e4:	bf00      	nop
 80054e6:	3720      	adds	r7, #32
 80054e8:	46bd      	mov	sp, r7
 80054ea:	bd80      	pop	{r7, pc}

080054ec <MAX7219_init>:
		{0x0F,0x00},
};

//Fonction d'initialisation matrice à LED
void MAX7219_init(SPI_HandleTypeDef *hspi,Matrix *device)
{
 80054ec:	b580      	push	{r7, lr}
 80054ee:	b086      	sub	sp, #24
 80054f0:	af00      	add	r7, sp, #0
 80054f2:	6078      	str	r0, [r7, #4]
 80054f4:	6039      	str	r1, [r7, #0]

	HAL_StatusTypeDef ret = 0;
 80054f6:	2300      	movs	r3, #0
 80054f8:	73fb      	strb	r3, [r7, #15]
	device->hspi = hspi;
 80054fa:	683b      	ldr	r3, [r7, #0]
 80054fc:	687a      	ldr	r2, [r7, #4]
 80054fe:	601a      	str	r2, [r3, #0]

	uint8_t Commande[2];

	for(int j = 0;j<5;j++)
 8005500:	2300      	movs	r3, #0
 8005502:	617b      	str	r3, [r7, #20]
 8005504:	e02a      	b.n	800555c <MAX7219_init+0x70>
	{
		Commande[0] = Initialisation[j][0];
 8005506:	4a1a      	ldr	r2, [pc, #104]	; (8005570 <MAX7219_init+0x84>)
 8005508:	697b      	ldr	r3, [r7, #20]
 800550a:	f812 3013 	ldrb.w	r3, [r2, r3, lsl #1]
 800550e:	733b      	strb	r3, [r7, #12]
		Commande[1] = Initialisation [j][1];
 8005510:	4a17      	ldr	r2, [pc, #92]	; (8005570 <MAX7219_init+0x84>)
 8005512:	697b      	ldr	r3, [r7, #20]
 8005514:	005b      	lsls	r3, r3, #1
 8005516:	4413      	add	r3, r2
 8005518:	785b      	ldrb	r3, [r3, #1]
 800551a:	737b      	strb	r3, [r7, #13]

		for(int i =0;i<3;i++)
 800551c:	2300      	movs	r3, #0
 800551e:	613b      	str	r3, [r7, #16]
 8005520:	e016      	b.n	8005550 <MAX7219_init+0x64>
		{
			HAL_GPIO_WritePin(CS_GPIO_Port, CS_Pin, GPIO_PIN_RESET);
 8005522:	2200      	movs	r2, #0
 8005524:	2140      	movs	r1, #64	; 0x40
 8005526:	4813      	ldr	r0, [pc, #76]	; (8005574 <MAX7219_init+0x88>)
 8005528:	f7fc fae0 	bl	8001aec <HAL_GPIO_WritePin>
			ret = HAL_SPI_Transmit(device->hspi, Commande,2, 100);
 800552c:	683b      	ldr	r3, [r7, #0]
 800552e:	6818      	ldr	r0, [r3, #0]
 8005530:	f107 010c 	add.w	r1, r7, #12
 8005534:	2364      	movs	r3, #100	; 0x64
 8005536:	2202      	movs	r2, #2
 8005538:	f7fd ffdd 	bl	80034f6 <HAL_SPI_Transmit>
 800553c:	4603      	mov	r3, r0
 800553e:	73fb      	strb	r3, [r7, #15]
			HAL_GPIO_WritePin(CS_GPIO_Port, CS_Pin, GPIO_PIN_SET);
 8005540:	2201      	movs	r2, #1
 8005542:	2140      	movs	r1, #64	; 0x40
 8005544:	480b      	ldr	r0, [pc, #44]	; (8005574 <MAX7219_init+0x88>)
 8005546:	f7fc fad1 	bl	8001aec <HAL_GPIO_WritePin>
		for(int i =0;i<3;i++)
 800554a:	693b      	ldr	r3, [r7, #16]
 800554c:	3301      	adds	r3, #1
 800554e:	613b      	str	r3, [r7, #16]
 8005550:	693b      	ldr	r3, [r7, #16]
 8005552:	2b02      	cmp	r3, #2
 8005554:	dde5      	ble.n	8005522 <MAX7219_init+0x36>
	for(int j = 0;j<5;j++)
 8005556:	697b      	ldr	r3, [r7, #20]
 8005558:	3301      	adds	r3, #1
 800555a:	617b      	str	r3, [r7, #20]
 800555c:	697b      	ldr	r3, [r7, #20]
 800555e:	2b04      	cmp	r3, #4
 8005560:	ddd1      	ble.n	8005506 <MAX7219_init+0x1a>
		}
	}

	MAX7219_clear_all(device);
 8005562:	6838      	ldr	r0, [r7, #0]
 8005564:	f000 f808 	bl	8005578 <MAX7219_clear_all>
}
 8005568:	bf00      	nop
 800556a:	3718      	adds	r7, #24
 800556c:	46bd      	mov	sp, r7
 800556e:	bd80      	pop	{r7, pc}
 8005570:	20000164 	.word	0x20000164
 8005574:	40020400 	.word	0x40020400

08005578 <MAX7219_clear_all>:
}


//Fonction qui clear les 3 matrices
void MAX7219_clear_all(Matrix *device)
{
 8005578:	b580      	push	{r7, lr}
 800557a:	b086      	sub	sp, #24
 800557c:	af00      	add	r7, sp, #0
 800557e:	6078      	str	r0, [r7, #4]

	uint8_t Commande[2] = {0x00,0x00};
 8005580:	2300      	movs	r3, #0
 8005582:	81bb      	strh	r3, [r7, #12]
	HAL_StatusTypeDef ret = 0;
 8005584:	2300      	movs	r3, #0
 8005586:	73fb      	strb	r3, [r7, #15]

	for(int j=1;j<=8;j++)
 8005588:	2301      	movs	r3, #1
 800558a:	617b      	str	r3, [r7, #20]
 800558c:	e023      	b.n	80055d6 <MAX7219_clear_all+0x5e>
	{
		Commande[0] = j;
 800558e:	697b      	ldr	r3, [r7, #20]
 8005590:	b2db      	uxtb	r3, r3
 8005592:	733b      	strb	r3, [r7, #12]
		for(int i=0;i<3;i++)
 8005594:	2300      	movs	r3, #0
 8005596:	613b      	str	r3, [r7, #16]
 8005598:	e017      	b.n	80055ca <MAX7219_clear_all+0x52>
		{
			HAL_GPIO_WritePin(CS_GPIO_Port, CS_Pin, GPIO_PIN_RESET);
 800559a:	2200      	movs	r2, #0
 800559c:	2140      	movs	r1, #64	; 0x40
 800559e:	4812      	ldr	r0, [pc, #72]	; (80055e8 <MAX7219_clear_all+0x70>)
 80055a0:	f7fc faa4 	bl	8001aec <HAL_GPIO_WritePin>
			ret = HAL_SPI_Transmit(device->hspi,Commande,2, HAL_MAX_DELAY);
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	6818      	ldr	r0, [r3, #0]
 80055a8:	f107 010c 	add.w	r1, r7, #12
 80055ac:	f04f 33ff 	mov.w	r3, #4294967295
 80055b0:	2202      	movs	r2, #2
 80055b2:	f7fd ffa0 	bl	80034f6 <HAL_SPI_Transmit>
 80055b6:	4603      	mov	r3, r0
 80055b8:	73fb      	strb	r3, [r7, #15]
			HAL_GPIO_WritePin(CS_GPIO_Port, CS_Pin, GPIO_PIN_SET);
 80055ba:	2201      	movs	r2, #1
 80055bc:	2140      	movs	r1, #64	; 0x40
 80055be:	480a      	ldr	r0, [pc, #40]	; (80055e8 <MAX7219_clear_all+0x70>)
 80055c0:	f7fc fa94 	bl	8001aec <HAL_GPIO_WritePin>
		for(int i=0;i<3;i++)
 80055c4:	693b      	ldr	r3, [r7, #16]
 80055c6:	3301      	adds	r3, #1
 80055c8:	613b      	str	r3, [r7, #16]
 80055ca:	693b      	ldr	r3, [r7, #16]
 80055cc:	2b02      	cmp	r3, #2
 80055ce:	dde4      	ble.n	800559a <MAX7219_clear_all+0x22>
	for(int j=1;j<=8;j++)
 80055d0:	697b      	ldr	r3, [r7, #20]
 80055d2:	3301      	adds	r3, #1
 80055d4:	617b      	str	r3, [r7, #20]
 80055d6:	697b      	ldr	r3, [r7, #20]
 80055d8:	2b08      	cmp	r3, #8
 80055da:	ddd8      	ble.n	800558e <MAX7219_clear_all+0x16>

		}
	}
}
 80055dc:	bf00      	nop
 80055de:	bf00      	nop
 80055e0:	3718      	adds	r7, #24
 80055e2:	46bd      	mov	sp, r7
 80055e4:	bd80      	pop	{r7, pc}
 80055e6:	bf00      	nop
 80055e8:	40020400 	.word	0x40020400

080055ec <MAX7219_SendPackage>:

 }

 //Fonction pour envoyer directement des paquets pour toutes les matrices en cascade
 void MAX7219_SendPackage(Matrix *device,uint8_t *commande,uint8_t size)
 {
 80055ec:	b580      	push	{r7, lr}
 80055ee:	b086      	sub	sp, #24
 80055f0:	af00      	add	r7, sp, #0
 80055f2:	60f8      	str	r0, [r7, #12]
 80055f4:	60b9      	str	r1, [r7, #8]
 80055f6:	4613      	mov	r3, r2
 80055f8:	71fb      	strb	r3, [r7, #7]
	 HAL_StatusTypeDef ret = 0;
 80055fa:	2300      	movs	r3, #0
 80055fc:	75fb      	strb	r3, [r7, #23]

	 HAL_GPIO_WritePin(CS_GPIO_Port, CS_Pin, GPIO_PIN_RESET);
 80055fe:	2200      	movs	r2, #0
 8005600:	2140      	movs	r1, #64	; 0x40
 8005602:	480b      	ldr	r0, [pc, #44]	; (8005630 <MAX7219_SendPackage+0x44>)
 8005604:	f7fc fa72 	bl	8001aec <HAL_GPIO_WritePin>
	 ret = HAL_SPI_Transmit(device->hspi, commande, size, HAL_MAX_DELAY);
 8005608:	68fb      	ldr	r3, [r7, #12]
 800560a:	6818      	ldr	r0, [r3, #0]
 800560c:	79fb      	ldrb	r3, [r7, #7]
 800560e:	b29a      	uxth	r2, r3
 8005610:	f04f 33ff 	mov.w	r3, #4294967295
 8005614:	68b9      	ldr	r1, [r7, #8]
 8005616:	f7fd ff6e 	bl	80034f6 <HAL_SPI_Transmit>
 800561a:	4603      	mov	r3, r0
 800561c:	75fb      	strb	r3, [r7, #23]
	 HAL_GPIO_WritePin(CS_GPIO_Port, CS_Pin, GPIO_PIN_SET);
 800561e:	2201      	movs	r2, #1
 8005620:	2140      	movs	r1, #64	; 0x40
 8005622:	4803      	ldr	r0, [pc, #12]	; (8005630 <MAX7219_SendPackage+0x44>)
 8005624:	f7fc fa62 	bl	8001aec <HAL_GPIO_WritePin>

 }
 8005628:	bf00      	nop
 800562a:	3718      	adds	r7, #24
 800562c:	46bd      	mov	sp, r7
 800562e:	bd80      	pop	{r7, pc}
 8005630:	40020400 	.word	0x40020400

08005634 <siprintf>:
 8005634:	b40e      	push	{r1, r2, r3}
 8005636:	b500      	push	{lr}
 8005638:	b09c      	sub	sp, #112	; 0x70
 800563a:	ab1d      	add	r3, sp, #116	; 0x74
 800563c:	9002      	str	r0, [sp, #8]
 800563e:	9006      	str	r0, [sp, #24]
 8005640:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8005644:	4809      	ldr	r0, [pc, #36]	; (800566c <siprintf+0x38>)
 8005646:	9107      	str	r1, [sp, #28]
 8005648:	9104      	str	r1, [sp, #16]
 800564a:	4909      	ldr	r1, [pc, #36]	; (8005670 <siprintf+0x3c>)
 800564c:	f853 2b04 	ldr.w	r2, [r3], #4
 8005650:	9105      	str	r1, [sp, #20]
 8005652:	6800      	ldr	r0, [r0, #0]
 8005654:	9301      	str	r3, [sp, #4]
 8005656:	a902      	add	r1, sp, #8
 8005658:	f000 f992 	bl	8005980 <_svfiprintf_r>
 800565c:	9b02      	ldr	r3, [sp, #8]
 800565e:	2200      	movs	r2, #0
 8005660:	701a      	strb	r2, [r3, #0]
 8005662:	b01c      	add	sp, #112	; 0x70
 8005664:	f85d eb04 	ldr.w	lr, [sp], #4
 8005668:	b003      	add	sp, #12
 800566a:	4770      	bx	lr
 800566c:	200001bc 	.word	0x200001bc
 8005670:	ffff0208 	.word	0xffff0208

08005674 <memset>:
 8005674:	4402      	add	r2, r0
 8005676:	4603      	mov	r3, r0
 8005678:	4293      	cmp	r3, r2
 800567a:	d100      	bne.n	800567e <memset+0xa>
 800567c:	4770      	bx	lr
 800567e:	f803 1b01 	strb.w	r1, [r3], #1
 8005682:	e7f9      	b.n	8005678 <memset+0x4>

08005684 <__errno>:
 8005684:	4b01      	ldr	r3, [pc, #4]	; (800568c <__errno+0x8>)
 8005686:	6818      	ldr	r0, [r3, #0]
 8005688:	4770      	bx	lr
 800568a:	bf00      	nop
 800568c:	200001bc 	.word	0x200001bc

08005690 <__libc_init_array>:
 8005690:	b570      	push	{r4, r5, r6, lr}
 8005692:	4d0d      	ldr	r5, [pc, #52]	; (80056c8 <__libc_init_array+0x38>)
 8005694:	4c0d      	ldr	r4, [pc, #52]	; (80056cc <__libc_init_array+0x3c>)
 8005696:	1b64      	subs	r4, r4, r5
 8005698:	10a4      	asrs	r4, r4, #2
 800569a:	2600      	movs	r6, #0
 800569c:	42a6      	cmp	r6, r4
 800569e:	d109      	bne.n	80056b4 <__libc_init_array+0x24>
 80056a0:	4d0b      	ldr	r5, [pc, #44]	; (80056d0 <__libc_init_array+0x40>)
 80056a2:	4c0c      	ldr	r4, [pc, #48]	; (80056d4 <__libc_init_array+0x44>)
 80056a4:	f002 f944 	bl	8007930 <_init>
 80056a8:	1b64      	subs	r4, r4, r5
 80056aa:	10a4      	asrs	r4, r4, #2
 80056ac:	2600      	movs	r6, #0
 80056ae:	42a6      	cmp	r6, r4
 80056b0:	d105      	bne.n	80056be <__libc_init_array+0x2e>
 80056b2:	bd70      	pop	{r4, r5, r6, pc}
 80056b4:	f855 3b04 	ldr.w	r3, [r5], #4
 80056b8:	4798      	blx	r3
 80056ba:	3601      	adds	r6, #1
 80056bc:	e7ee      	b.n	800569c <__libc_init_array+0xc>
 80056be:	f855 3b04 	ldr.w	r3, [r5], #4
 80056c2:	4798      	blx	r3
 80056c4:	3601      	adds	r6, #1
 80056c6:	e7f2      	b.n	80056ae <__libc_init_array+0x1e>
 80056c8:	08007b48 	.word	0x08007b48
 80056cc:	08007b48 	.word	0x08007b48
 80056d0:	08007b48 	.word	0x08007b48
 80056d4:	08007b4c 	.word	0x08007b4c

080056d8 <__retarget_lock_acquire_recursive>:
 80056d8:	4770      	bx	lr

080056da <__retarget_lock_release_recursive>:
 80056da:	4770      	bx	lr

080056dc <_free_r>:
 80056dc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80056de:	2900      	cmp	r1, #0
 80056e0:	d044      	beq.n	800576c <_free_r+0x90>
 80056e2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80056e6:	9001      	str	r0, [sp, #4]
 80056e8:	2b00      	cmp	r3, #0
 80056ea:	f1a1 0404 	sub.w	r4, r1, #4
 80056ee:	bfb8      	it	lt
 80056f0:	18e4      	addlt	r4, r4, r3
 80056f2:	f000 f8df 	bl	80058b4 <__malloc_lock>
 80056f6:	4a1e      	ldr	r2, [pc, #120]	; (8005770 <_free_r+0x94>)
 80056f8:	9801      	ldr	r0, [sp, #4]
 80056fa:	6813      	ldr	r3, [r2, #0]
 80056fc:	b933      	cbnz	r3, 800570c <_free_r+0x30>
 80056fe:	6063      	str	r3, [r4, #4]
 8005700:	6014      	str	r4, [r2, #0]
 8005702:	b003      	add	sp, #12
 8005704:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8005708:	f000 b8da 	b.w	80058c0 <__malloc_unlock>
 800570c:	42a3      	cmp	r3, r4
 800570e:	d908      	bls.n	8005722 <_free_r+0x46>
 8005710:	6825      	ldr	r5, [r4, #0]
 8005712:	1961      	adds	r1, r4, r5
 8005714:	428b      	cmp	r3, r1
 8005716:	bf01      	itttt	eq
 8005718:	6819      	ldreq	r1, [r3, #0]
 800571a:	685b      	ldreq	r3, [r3, #4]
 800571c:	1949      	addeq	r1, r1, r5
 800571e:	6021      	streq	r1, [r4, #0]
 8005720:	e7ed      	b.n	80056fe <_free_r+0x22>
 8005722:	461a      	mov	r2, r3
 8005724:	685b      	ldr	r3, [r3, #4]
 8005726:	b10b      	cbz	r3, 800572c <_free_r+0x50>
 8005728:	42a3      	cmp	r3, r4
 800572a:	d9fa      	bls.n	8005722 <_free_r+0x46>
 800572c:	6811      	ldr	r1, [r2, #0]
 800572e:	1855      	adds	r5, r2, r1
 8005730:	42a5      	cmp	r5, r4
 8005732:	d10b      	bne.n	800574c <_free_r+0x70>
 8005734:	6824      	ldr	r4, [r4, #0]
 8005736:	4421      	add	r1, r4
 8005738:	1854      	adds	r4, r2, r1
 800573a:	42a3      	cmp	r3, r4
 800573c:	6011      	str	r1, [r2, #0]
 800573e:	d1e0      	bne.n	8005702 <_free_r+0x26>
 8005740:	681c      	ldr	r4, [r3, #0]
 8005742:	685b      	ldr	r3, [r3, #4]
 8005744:	6053      	str	r3, [r2, #4]
 8005746:	440c      	add	r4, r1
 8005748:	6014      	str	r4, [r2, #0]
 800574a:	e7da      	b.n	8005702 <_free_r+0x26>
 800574c:	d902      	bls.n	8005754 <_free_r+0x78>
 800574e:	230c      	movs	r3, #12
 8005750:	6003      	str	r3, [r0, #0]
 8005752:	e7d6      	b.n	8005702 <_free_r+0x26>
 8005754:	6825      	ldr	r5, [r4, #0]
 8005756:	1961      	adds	r1, r4, r5
 8005758:	428b      	cmp	r3, r1
 800575a:	bf04      	itt	eq
 800575c:	6819      	ldreq	r1, [r3, #0]
 800575e:	685b      	ldreq	r3, [r3, #4]
 8005760:	6063      	str	r3, [r4, #4]
 8005762:	bf04      	itt	eq
 8005764:	1949      	addeq	r1, r1, r5
 8005766:	6021      	streq	r1, [r4, #0]
 8005768:	6054      	str	r4, [r2, #4]
 800576a:	e7ca      	b.n	8005702 <_free_r+0x26>
 800576c:	b003      	add	sp, #12
 800576e:	bd30      	pop	{r4, r5, pc}
 8005770:	2000042c 	.word	0x2000042c

08005774 <sbrk_aligned>:
 8005774:	b570      	push	{r4, r5, r6, lr}
 8005776:	4e0e      	ldr	r6, [pc, #56]	; (80057b0 <sbrk_aligned+0x3c>)
 8005778:	460c      	mov	r4, r1
 800577a:	6831      	ldr	r1, [r6, #0]
 800577c:	4605      	mov	r5, r0
 800577e:	b911      	cbnz	r1, 8005786 <sbrk_aligned+0x12>
 8005780:	f000 fba6 	bl	8005ed0 <_sbrk_r>
 8005784:	6030      	str	r0, [r6, #0]
 8005786:	4621      	mov	r1, r4
 8005788:	4628      	mov	r0, r5
 800578a:	f000 fba1 	bl	8005ed0 <_sbrk_r>
 800578e:	1c43      	adds	r3, r0, #1
 8005790:	d00a      	beq.n	80057a8 <sbrk_aligned+0x34>
 8005792:	1cc4      	adds	r4, r0, #3
 8005794:	f024 0403 	bic.w	r4, r4, #3
 8005798:	42a0      	cmp	r0, r4
 800579a:	d007      	beq.n	80057ac <sbrk_aligned+0x38>
 800579c:	1a21      	subs	r1, r4, r0
 800579e:	4628      	mov	r0, r5
 80057a0:	f000 fb96 	bl	8005ed0 <_sbrk_r>
 80057a4:	3001      	adds	r0, #1
 80057a6:	d101      	bne.n	80057ac <sbrk_aligned+0x38>
 80057a8:	f04f 34ff 	mov.w	r4, #4294967295
 80057ac:	4620      	mov	r0, r4
 80057ae:	bd70      	pop	{r4, r5, r6, pc}
 80057b0:	20000430 	.word	0x20000430

080057b4 <_malloc_r>:
 80057b4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80057b8:	1ccd      	adds	r5, r1, #3
 80057ba:	f025 0503 	bic.w	r5, r5, #3
 80057be:	3508      	adds	r5, #8
 80057c0:	2d0c      	cmp	r5, #12
 80057c2:	bf38      	it	cc
 80057c4:	250c      	movcc	r5, #12
 80057c6:	2d00      	cmp	r5, #0
 80057c8:	4607      	mov	r7, r0
 80057ca:	db01      	blt.n	80057d0 <_malloc_r+0x1c>
 80057cc:	42a9      	cmp	r1, r5
 80057ce:	d905      	bls.n	80057dc <_malloc_r+0x28>
 80057d0:	230c      	movs	r3, #12
 80057d2:	603b      	str	r3, [r7, #0]
 80057d4:	2600      	movs	r6, #0
 80057d6:	4630      	mov	r0, r6
 80057d8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80057dc:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 80058b0 <_malloc_r+0xfc>
 80057e0:	f000 f868 	bl	80058b4 <__malloc_lock>
 80057e4:	f8d8 3000 	ldr.w	r3, [r8]
 80057e8:	461c      	mov	r4, r3
 80057ea:	bb5c      	cbnz	r4, 8005844 <_malloc_r+0x90>
 80057ec:	4629      	mov	r1, r5
 80057ee:	4638      	mov	r0, r7
 80057f0:	f7ff ffc0 	bl	8005774 <sbrk_aligned>
 80057f4:	1c43      	adds	r3, r0, #1
 80057f6:	4604      	mov	r4, r0
 80057f8:	d155      	bne.n	80058a6 <_malloc_r+0xf2>
 80057fa:	f8d8 4000 	ldr.w	r4, [r8]
 80057fe:	4626      	mov	r6, r4
 8005800:	2e00      	cmp	r6, #0
 8005802:	d145      	bne.n	8005890 <_malloc_r+0xdc>
 8005804:	2c00      	cmp	r4, #0
 8005806:	d048      	beq.n	800589a <_malloc_r+0xe6>
 8005808:	6823      	ldr	r3, [r4, #0]
 800580a:	4631      	mov	r1, r6
 800580c:	4638      	mov	r0, r7
 800580e:	eb04 0903 	add.w	r9, r4, r3
 8005812:	f000 fb5d 	bl	8005ed0 <_sbrk_r>
 8005816:	4581      	cmp	r9, r0
 8005818:	d13f      	bne.n	800589a <_malloc_r+0xe6>
 800581a:	6821      	ldr	r1, [r4, #0]
 800581c:	1a6d      	subs	r5, r5, r1
 800581e:	4629      	mov	r1, r5
 8005820:	4638      	mov	r0, r7
 8005822:	f7ff ffa7 	bl	8005774 <sbrk_aligned>
 8005826:	3001      	adds	r0, #1
 8005828:	d037      	beq.n	800589a <_malloc_r+0xe6>
 800582a:	6823      	ldr	r3, [r4, #0]
 800582c:	442b      	add	r3, r5
 800582e:	6023      	str	r3, [r4, #0]
 8005830:	f8d8 3000 	ldr.w	r3, [r8]
 8005834:	2b00      	cmp	r3, #0
 8005836:	d038      	beq.n	80058aa <_malloc_r+0xf6>
 8005838:	685a      	ldr	r2, [r3, #4]
 800583a:	42a2      	cmp	r2, r4
 800583c:	d12b      	bne.n	8005896 <_malloc_r+0xe2>
 800583e:	2200      	movs	r2, #0
 8005840:	605a      	str	r2, [r3, #4]
 8005842:	e00f      	b.n	8005864 <_malloc_r+0xb0>
 8005844:	6822      	ldr	r2, [r4, #0]
 8005846:	1b52      	subs	r2, r2, r5
 8005848:	d41f      	bmi.n	800588a <_malloc_r+0xd6>
 800584a:	2a0b      	cmp	r2, #11
 800584c:	d917      	bls.n	800587e <_malloc_r+0xca>
 800584e:	1961      	adds	r1, r4, r5
 8005850:	42a3      	cmp	r3, r4
 8005852:	6025      	str	r5, [r4, #0]
 8005854:	bf18      	it	ne
 8005856:	6059      	strne	r1, [r3, #4]
 8005858:	6863      	ldr	r3, [r4, #4]
 800585a:	bf08      	it	eq
 800585c:	f8c8 1000 	streq.w	r1, [r8]
 8005860:	5162      	str	r2, [r4, r5]
 8005862:	604b      	str	r3, [r1, #4]
 8005864:	4638      	mov	r0, r7
 8005866:	f104 060b 	add.w	r6, r4, #11
 800586a:	f000 f829 	bl	80058c0 <__malloc_unlock>
 800586e:	f026 0607 	bic.w	r6, r6, #7
 8005872:	1d23      	adds	r3, r4, #4
 8005874:	1af2      	subs	r2, r6, r3
 8005876:	d0ae      	beq.n	80057d6 <_malloc_r+0x22>
 8005878:	1b9b      	subs	r3, r3, r6
 800587a:	50a3      	str	r3, [r4, r2]
 800587c:	e7ab      	b.n	80057d6 <_malloc_r+0x22>
 800587e:	42a3      	cmp	r3, r4
 8005880:	6862      	ldr	r2, [r4, #4]
 8005882:	d1dd      	bne.n	8005840 <_malloc_r+0x8c>
 8005884:	f8c8 2000 	str.w	r2, [r8]
 8005888:	e7ec      	b.n	8005864 <_malloc_r+0xb0>
 800588a:	4623      	mov	r3, r4
 800588c:	6864      	ldr	r4, [r4, #4]
 800588e:	e7ac      	b.n	80057ea <_malloc_r+0x36>
 8005890:	4634      	mov	r4, r6
 8005892:	6876      	ldr	r6, [r6, #4]
 8005894:	e7b4      	b.n	8005800 <_malloc_r+0x4c>
 8005896:	4613      	mov	r3, r2
 8005898:	e7cc      	b.n	8005834 <_malloc_r+0x80>
 800589a:	230c      	movs	r3, #12
 800589c:	603b      	str	r3, [r7, #0]
 800589e:	4638      	mov	r0, r7
 80058a0:	f000 f80e 	bl	80058c0 <__malloc_unlock>
 80058a4:	e797      	b.n	80057d6 <_malloc_r+0x22>
 80058a6:	6025      	str	r5, [r4, #0]
 80058a8:	e7dc      	b.n	8005864 <_malloc_r+0xb0>
 80058aa:	605b      	str	r3, [r3, #4]
 80058ac:	deff      	udf	#255	; 0xff
 80058ae:	bf00      	nop
 80058b0:	2000042c 	.word	0x2000042c

080058b4 <__malloc_lock>:
 80058b4:	4801      	ldr	r0, [pc, #4]	; (80058bc <__malloc_lock+0x8>)
 80058b6:	f7ff bf0f 	b.w	80056d8 <__retarget_lock_acquire_recursive>
 80058ba:	bf00      	nop
 80058bc:	20000428 	.word	0x20000428

080058c0 <__malloc_unlock>:
 80058c0:	4801      	ldr	r0, [pc, #4]	; (80058c8 <__malloc_unlock+0x8>)
 80058c2:	f7ff bf0a 	b.w	80056da <__retarget_lock_release_recursive>
 80058c6:	bf00      	nop
 80058c8:	20000428 	.word	0x20000428

080058cc <__ssputs_r>:
 80058cc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80058d0:	688e      	ldr	r6, [r1, #8]
 80058d2:	461f      	mov	r7, r3
 80058d4:	42be      	cmp	r6, r7
 80058d6:	680b      	ldr	r3, [r1, #0]
 80058d8:	4682      	mov	sl, r0
 80058da:	460c      	mov	r4, r1
 80058dc:	4690      	mov	r8, r2
 80058de:	d82c      	bhi.n	800593a <__ssputs_r+0x6e>
 80058e0:	898a      	ldrh	r2, [r1, #12]
 80058e2:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80058e6:	d026      	beq.n	8005936 <__ssputs_r+0x6a>
 80058e8:	6965      	ldr	r5, [r4, #20]
 80058ea:	6909      	ldr	r1, [r1, #16]
 80058ec:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80058f0:	eba3 0901 	sub.w	r9, r3, r1
 80058f4:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80058f8:	1c7b      	adds	r3, r7, #1
 80058fa:	444b      	add	r3, r9
 80058fc:	106d      	asrs	r5, r5, #1
 80058fe:	429d      	cmp	r5, r3
 8005900:	bf38      	it	cc
 8005902:	461d      	movcc	r5, r3
 8005904:	0553      	lsls	r3, r2, #21
 8005906:	d527      	bpl.n	8005958 <__ssputs_r+0x8c>
 8005908:	4629      	mov	r1, r5
 800590a:	f7ff ff53 	bl	80057b4 <_malloc_r>
 800590e:	4606      	mov	r6, r0
 8005910:	b360      	cbz	r0, 800596c <__ssputs_r+0xa0>
 8005912:	6921      	ldr	r1, [r4, #16]
 8005914:	464a      	mov	r2, r9
 8005916:	f000 faeb 	bl	8005ef0 <memcpy>
 800591a:	89a3      	ldrh	r3, [r4, #12]
 800591c:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8005920:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005924:	81a3      	strh	r3, [r4, #12]
 8005926:	6126      	str	r6, [r4, #16]
 8005928:	6165      	str	r5, [r4, #20]
 800592a:	444e      	add	r6, r9
 800592c:	eba5 0509 	sub.w	r5, r5, r9
 8005930:	6026      	str	r6, [r4, #0]
 8005932:	60a5      	str	r5, [r4, #8]
 8005934:	463e      	mov	r6, r7
 8005936:	42be      	cmp	r6, r7
 8005938:	d900      	bls.n	800593c <__ssputs_r+0x70>
 800593a:	463e      	mov	r6, r7
 800593c:	6820      	ldr	r0, [r4, #0]
 800593e:	4632      	mov	r2, r6
 8005940:	4641      	mov	r1, r8
 8005942:	f000 faab 	bl	8005e9c <memmove>
 8005946:	68a3      	ldr	r3, [r4, #8]
 8005948:	1b9b      	subs	r3, r3, r6
 800594a:	60a3      	str	r3, [r4, #8]
 800594c:	6823      	ldr	r3, [r4, #0]
 800594e:	4433      	add	r3, r6
 8005950:	6023      	str	r3, [r4, #0]
 8005952:	2000      	movs	r0, #0
 8005954:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005958:	462a      	mov	r2, r5
 800595a:	f000 fad7 	bl	8005f0c <_realloc_r>
 800595e:	4606      	mov	r6, r0
 8005960:	2800      	cmp	r0, #0
 8005962:	d1e0      	bne.n	8005926 <__ssputs_r+0x5a>
 8005964:	6921      	ldr	r1, [r4, #16]
 8005966:	4650      	mov	r0, sl
 8005968:	f7ff feb8 	bl	80056dc <_free_r>
 800596c:	230c      	movs	r3, #12
 800596e:	f8ca 3000 	str.w	r3, [sl]
 8005972:	89a3      	ldrh	r3, [r4, #12]
 8005974:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005978:	81a3      	strh	r3, [r4, #12]
 800597a:	f04f 30ff 	mov.w	r0, #4294967295
 800597e:	e7e9      	b.n	8005954 <__ssputs_r+0x88>

08005980 <_svfiprintf_r>:
 8005980:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005984:	4698      	mov	r8, r3
 8005986:	898b      	ldrh	r3, [r1, #12]
 8005988:	061b      	lsls	r3, r3, #24
 800598a:	b09d      	sub	sp, #116	; 0x74
 800598c:	4607      	mov	r7, r0
 800598e:	460d      	mov	r5, r1
 8005990:	4614      	mov	r4, r2
 8005992:	d50e      	bpl.n	80059b2 <_svfiprintf_r+0x32>
 8005994:	690b      	ldr	r3, [r1, #16]
 8005996:	b963      	cbnz	r3, 80059b2 <_svfiprintf_r+0x32>
 8005998:	2140      	movs	r1, #64	; 0x40
 800599a:	f7ff ff0b 	bl	80057b4 <_malloc_r>
 800599e:	6028      	str	r0, [r5, #0]
 80059a0:	6128      	str	r0, [r5, #16]
 80059a2:	b920      	cbnz	r0, 80059ae <_svfiprintf_r+0x2e>
 80059a4:	230c      	movs	r3, #12
 80059a6:	603b      	str	r3, [r7, #0]
 80059a8:	f04f 30ff 	mov.w	r0, #4294967295
 80059ac:	e0d0      	b.n	8005b50 <_svfiprintf_r+0x1d0>
 80059ae:	2340      	movs	r3, #64	; 0x40
 80059b0:	616b      	str	r3, [r5, #20]
 80059b2:	2300      	movs	r3, #0
 80059b4:	9309      	str	r3, [sp, #36]	; 0x24
 80059b6:	2320      	movs	r3, #32
 80059b8:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80059bc:	f8cd 800c 	str.w	r8, [sp, #12]
 80059c0:	2330      	movs	r3, #48	; 0x30
 80059c2:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8005b68 <_svfiprintf_r+0x1e8>
 80059c6:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80059ca:	f04f 0901 	mov.w	r9, #1
 80059ce:	4623      	mov	r3, r4
 80059d0:	469a      	mov	sl, r3
 80059d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80059d6:	b10a      	cbz	r2, 80059dc <_svfiprintf_r+0x5c>
 80059d8:	2a25      	cmp	r2, #37	; 0x25
 80059da:	d1f9      	bne.n	80059d0 <_svfiprintf_r+0x50>
 80059dc:	ebba 0b04 	subs.w	fp, sl, r4
 80059e0:	d00b      	beq.n	80059fa <_svfiprintf_r+0x7a>
 80059e2:	465b      	mov	r3, fp
 80059e4:	4622      	mov	r2, r4
 80059e6:	4629      	mov	r1, r5
 80059e8:	4638      	mov	r0, r7
 80059ea:	f7ff ff6f 	bl	80058cc <__ssputs_r>
 80059ee:	3001      	adds	r0, #1
 80059f0:	f000 80a9 	beq.w	8005b46 <_svfiprintf_r+0x1c6>
 80059f4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80059f6:	445a      	add	r2, fp
 80059f8:	9209      	str	r2, [sp, #36]	; 0x24
 80059fa:	f89a 3000 	ldrb.w	r3, [sl]
 80059fe:	2b00      	cmp	r3, #0
 8005a00:	f000 80a1 	beq.w	8005b46 <_svfiprintf_r+0x1c6>
 8005a04:	2300      	movs	r3, #0
 8005a06:	f04f 32ff 	mov.w	r2, #4294967295
 8005a0a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005a0e:	f10a 0a01 	add.w	sl, sl, #1
 8005a12:	9304      	str	r3, [sp, #16]
 8005a14:	9307      	str	r3, [sp, #28]
 8005a16:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8005a1a:	931a      	str	r3, [sp, #104]	; 0x68
 8005a1c:	4654      	mov	r4, sl
 8005a1e:	2205      	movs	r2, #5
 8005a20:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005a24:	4850      	ldr	r0, [pc, #320]	; (8005b68 <_svfiprintf_r+0x1e8>)
 8005a26:	f7fa fbe3 	bl	80001f0 <memchr>
 8005a2a:	9a04      	ldr	r2, [sp, #16]
 8005a2c:	b9d8      	cbnz	r0, 8005a66 <_svfiprintf_r+0xe6>
 8005a2e:	06d0      	lsls	r0, r2, #27
 8005a30:	bf44      	itt	mi
 8005a32:	2320      	movmi	r3, #32
 8005a34:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005a38:	0711      	lsls	r1, r2, #28
 8005a3a:	bf44      	itt	mi
 8005a3c:	232b      	movmi	r3, #43	; 0x2b
 8005a3e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005a42:	f89a 3000 	ldrb.w	r3, [sl]
 8005a46:	2b2a      	cmp	r3, #42	; 0x2a
 8005a48:	d015      	beq.n	8005a76 <_svfiprintf_r+0xf6>
 8005a4a:	9a07      	ldr	r2, [sp, #28]
 8005a4c:	4654      	mov	r4, sl
 8005a4e:	2000      	movs	r0, #0
 8005a50:	f04f 0c0a 	mov.w	ip, #10
 8005a54:	4621      	mov	r1, r4
 8005a56:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005a5a:	3b30      	subs	r3, #48	; 0x30
 8005a5c:	2b09      	cmp	r3, #9
 8005a5e:	d94d      	bls.n	8005afc <_svfiprintf_r+0x17c>
 8005a60:	b1b0      	cbz	r0, 8005a90 <_svfiprintf_r+0x110>
 8005a62:	9207      	str	r2, [sp, #28]
 8005a64:	e014      	b.n	8005a90 <_svfiprintf_r+0x110>
 8005a66:	eba0 0308 	sub.w	r3, r0, r8
 8005a6a:	fa09 f303 	lsl.w	r3, r9, r3
 8005a6e:	4313      	orrs	r3, r2
 8005a70:	9304      	str	r3, [sp, #16]
 8005a72:	46a2      	mov	sl, r4
 8005a74:	e7d2      	b.n	8005a1c <_svfiprintf_r+0x9c>
 8005a76:	9b03      	ldr	r3, [sp, #12]
 8005a78:	1d19      	adds	r1, r3, #4
 8005a7a:	681b      	ldr	r3, [r3, #0]
 8005a7c:	9103      	str	r1, [sp, #12]
 8005a7e:	2b00      	cmp	r3, #0
 8005a80:	bfbb      	ittet	lt
 8005a82:	425b      	neglt	r3, r3
 8005a84:	f042 0202 	orrlt.w	r2, r2, #2
 8005a88:	9307      	strge	r3, [sp, #28]
 8005a8a:	9307      	strlt	r3, [sp, #28]
 8005a8c:	bfb8      	it	lt
 8005a8e:	9204      	strlt	r2, [sp, #16]
 8005a90:	7823      	ldrb	r3, [r4, #0]
 8005a92:	2b2e      	cmp	r3, #46	; 0x2e
 8005a94:	d10c      	bne.n	8005ab0 <_svfiprintf_r+0x130>
 8005a96:	7863      	ldrb	r3, [r4, #1]
 8005a98:	2b2a      	cmp	r3, #42	; 0x2a
 8005a9a:	d134      	bne.n	8005b06 <_svfiprintf_r+0x186>
 8005a9c:	9b03      	ldr	r3, [sp, #12]
 8005a9e:	1d1a      	adds	r2, r3, #4
 8005aa0:	681b      	ldr	r3, [r3, #0]
 8005aa2:	9203      	str	r2, [sp, #12]
 8005aa4:	2b00      	cmp	r3, #0
 8005aa6:	bfb8      	it	lt
 8005aa8:	f04f 33ff 	movlt.w	r3, #4294967295
 8005aac:	3402      	adds	r4, #2
 8005aae:	9305      	str	r3, [sp, #20]
 8005ab0:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 8005b78 <_svfiprintf_r+0x1f8>
 8005ab4:	7821      	ldrb	r1, [r4, #0]
 8005ab6:	2203      	movs	r2, #3
 8005ab8:	4650      	mov	r0, sl
 8005aba:	f7fa fb99 	bl	80001f0 <memchr>
 8005abe:	b138      	cbz	r0, 8005ad0 <_svfiprintf_r+0x150>
 8005ac0:	9b04      	ldr	r3, [sp, #16]
 8005ac2:	eba0 000a 	sub.w	r0, r0, sl
 8005ac6:	2240      	movs	r2, #64	; 0x40
 8005ac8:	4082      	lsls	r2, r0
 8005aca:	4313      	orrs	r3, r2
 8005acc:	3401      	adds	r4, #1
 8005ace:	9304      	str	r3, [sp, #16]
 8005ad0:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005ad4:	4825      	ldr	r0, [pc, #148]	; (8005b6c <_svfiprintf_r+0x1ec>)
 8005ad6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8005ada:	2206      	movs	r2, #6
 8005adc:	f7fa fb88 	bl	80001f0 <memchr>
 8005ae0:	2800      	cmp	r0, #0
 8005ae2:	d038      	beq.n	8005b56 <_svfiprintf_r+0x1d6>
 8005ae4:	4b22      	ldr	r3, [pc, #136]	; (8005b70 <_svfiprintf_r+0x1f0>)
 8005ae6:	bb1b      	cbnz	r3, 8005b30 <_svfiprintf_r+0x1b0>
 8005ae8:	9b03      	ldr	r3, [sp, #12]
 8005aea:	3307      	adds	r3, #7
 8005aec:	f023 0307 	bic.w	r3, r3, #7
 8005af0:	3308      	adds	r3, #8
 8005af2:	9303      	str	r3, [sp, #12]
 8005af4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005af6:	4433      	add	r3, r6
 8005af8:	9309      	str	r3, [sp, #36]	; 0x24
 8005afa:	e768      	b.n	80059ce <_svfiprintf_r+0x4e>
 8005afc:	fb0c 3202 	mla	r2, ip, r2, r3
 8005b00:	460c      	mov	r4, r1
 8005b02:	2001      	movs	r0, #1
 8005b04:	e7a6      	b.n	8005a54 <_svfiprintf_r+0xd4>
 8005b06:	2300      	movs	r3, #0
 8005b08:	3401      	adds	r4, #1
 8005b0a:	9305      	str	r3, [sp, #20]
 8005b0c:	4619      	mov	r1, r3
 8005b0e:	f04f 0c0a 	mov.w	ip, #10
 8005b12:	4620      	mov	r0, r4
 8005b14:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005b18:	3a30      	subs	r2, #48	; 0x30
 8005b1a:	2a09      	cmp	r2, #9
 8005b1c:	d903      	bls.n	8005b26 <_svfiprintf_r+0x1a6>
 8005b1e:	2b00      	cmp	r3, #0
 8005b20:	d0c6      	beq.n	8005ab0 <_svfiprintf_r+0x130>
 8005b22:	9105      	str	r1, [sp, #20]
 8005b24:	e7c4      	b.n	8005ab0 <_svfiprintf_r+0x130>
 8005b26:	fb0c 2101 	mla	r1, ip, r1, r2
 8005b2a:	4604      	mov	r4, r0
 8005b2c:	2301      	movs	r3, #1
 8005b2e:	e7f0      	b.n	8005b12 <_svfiprintf_r+0x192>
 8005b30:	ab03      	add	r3, sp, #12
 8005b32:	9300      	str	r3, [sp, #0]
 8005b34:	462a      	mov	r2, r5
 8005b36:	4b0f      	ldr	r3, [pc, #60]	; (8005b74 <_svfiprintf_r+0x1f4>)
 8005b38:	a904      	add	r1, sp, #16
 8005b3a:	4638      	mov	r0, r7
 8005b3c:	f3af 8000 	nop.w
 8005b40:	1c42      	adds	r2, r0, #1
 8005b42:	4606      	mov	r6, r0
 8005b44:	d1d6      	bne.n	8005af4 <_svfiprintf_r+0x174>
 8005b46:	89ab      	ldrh	r3, [r5, #12]
 8005b48:	065b      	lsls	r3, r3, #25
 8005b4a:	f53f af2d 	bmi.w	80059a8 <_svfiprintf_r+0x28>
 8005b4e:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005b50:	b01d      	add	sp, #116	; 0x74
 8005b52:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005b56:	ab03      	add	r3, sp, #12
 8005b58:	9300      	str	r3, [sp, #0]
 8005b5a:	462a      	mov	r2, r5
 8005b5c:	4b05      	ldr	r3, [pc, #20]	; (8005b74 <_svfiprintf_r+0x1f4>)
 8005b5e:	a904      	add	r1, sp, #16
 8005b60:	4638      	mov	r0, r7
 8005b62:	f000 f879 	bl	8005c58 <_printf_i>
 8005b66:	e7eb      	b.n	8005b40 <_svfiprintf_r+0x1c0>
 8005b68:	08007aac 	.word	0x08007aac
 8005b6c:	08007ab6 	.word	0x08007ab6
 8005b70:	00000000 	.word	0x00000000
 8005b74:	080058cd 	.word	0x080058cd
 8005b78:	08007ab2 	.word	0x08007ab2

08005b7c <_printf_common>:
 8005b7c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005b80:	4616      	mov	r6, r2
 8005b82:	4699      	mov	r9, r3
 8005b84:	688a      	ldr	r2, [r1, #8]
 8005b86:	690b      	ldr	r3, [r1, #16]
 8005b88:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005b8c:	4293      	cmp	r3, r2
 8005b8e:	bfb8      	it	lt
 8005b90:	4613      	movlt	r3, r2
 8005b92:	6033      	str	r3, [r6, #0]
 8005b94:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005b98:	4607      	mov	r7, r0
 8005b9a:	460c      	mov	r4, r1
 8005b9c:	b10a      	cbz	r2, 8005ba2 <_printf_common+0x26>
 8005b9e:	3301      	adds	r3, #1
 8005ba0:	6033      	str	r3, [r6, #0]
 8005ba2:	6823      	ldr	r3, [r4, #0]
 8005ba4:	0699      	lsls	r1, r3, #26
 8005ba6:	bf42      	ittt	mi
 8005ba8:	6833      	ldrmi	r3, [r6, #0]
 8005baa:	3302      	addmi	r3, #2
 8005bac:	6033      	strmi	r3, [r6, #0]
 8005bae:	6825      	ldr	r5, [r4, #0]
 8005bb0:	f015 0506 	ands.w	r5, r5, #6
 8005bb4:	d106      	bne.n	8005bc4 <_printf_common+0x48>
 8005bb6:	f104 0a19 	add.w	sl, r4, #25
 8005bba:	68e3      	ldr	r3, [r4, #12]
 8005bbc:	6832      	ldr	r2, [r6, #0]
 8005bbe:	1a9b      	subs	r3, r3, r2
 8005bc0:	42ab      	cmp	r3, r5
 8005bc2:	dc26      	bgt.n	8005c12 <_printf_common+0x96>
 8005bc4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8005bc8:	1e13      	subs	r3, r2, #0
 8005bca:	6822      	ldr	r2, [r4, #0]
 8005bcc:	bf18      	it	ne
 8005bce:	2301      	movne	r3, #1
 8005bd0:	0692      	lsls	r2, r2, #26
 8005bd2:	d42b      	bmi.n	8005c2c <_printf_common+0xb0>
 8005bd4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005bd8:	4649      	mov	r1, r9
 8005bda:	4638      	mov	r0, r7
 8005bdc:	47c0      	blx	r8
 8005bde:	3001      	adds	r0, #1
 8005be0:	d01e      	beq.n	8005c20 <_printf_common+0xa4>
 8005be2:	6823      	ldr	r3, [r4, #0]
 8005be4:	6922      	ldr	r2, [r4, #16]
 8005be6:	f003 0306 	and.w	r3, r3, #6
 8005bea:	2b04      	cmp	r3, #4
 8005bec:	bf02      	ittt	eq
 8005bee:	68e5      	ldreq	r5, [r4, #12]
 8005bf0:	6833      	ldreq	r3, [r6, #0]
 8005bf2:	1aed      	subeq	r5, r5, r3
 8005bf4:	68a3      	ldr	r3, [r4, #8]
 8005bf6:	bf0c      	ite	eq
 8005bf8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005bfc:	2500      	movne	r5, #0
 8005bfe:	4293      	cmp	r3, r2
 8005c00:	bfc4      	itt	gt
 8005c02:	1a9b      	subgt	r3, r3, r2
 8005c04:	18ed      	addgt	r5, r5, r3
 8005c06:	2600      	movs	r6, #0
 8005c08:	341a      	adds	r4, #26
 8005c0a:	42b5      	cmp	r5, r6
 8005c0c:	d11a      	bne.n	8005c44 <_printf_common+0xc8>
 8005c0e:	2000      	movs	r0, #0
 8005c10:	e008      	b.n	8005c24 <_printf_common+0xa8>
 8005c12:	2301      	movs	r3, #1
 8005c14:	4652      	mov	r2, sl
 8005c16:	4649      	mov	r1, r9
 8005c18:	4638      	mov	r0, r7
 8005c1a:	47c0      	blx	r8
 8005c1c:	3001      	adds	r0, #1
 8005c1e:	d103      	bne.n	8005c28 <_printf_common+0xac>
 8005c20:	f04f 30ff 	mov.w	r0, #4294967295
 8005c24:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005c28:	3501      	adds	r5, #1
 8005c2a:	e7c6      	b.n	8005bba <_printf_common+0x3e>
 8005c2c:	18e1      	adds	r1, r4, r3
 8005c2e:	1c5a      	adds	r2, r3, #1
 8005c30:	2030      	movs	r0, #48	; 0x30
 8005c32:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8005c36:	4422      	add	r2, r4
 8005c38:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8005c3c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005c40:	3302      	adds	r3, #2
 8005c42:	e7c7      	b.n	8005bd4 <_printf_common+0x58>
 8005c44:	2301      	movs	r3, #1
 8005c46:	4622      	mov	r2, r4
 8005c48:	4649      	mov	r1, r9
 8005c4a:	4638      	mov	r0, r7
 8005c4c:	47c0      	blx	r8
 8005c4e:	3001      	adds	r0, #1
 8005c50:	d0e6      	beq.n	8005c20 <_printf_common+0xa4>
 8005c52:	3601      	adds	r6, #1
 8005c54:	e7d9      	b.n	8005c0a <_printf_common+0x8e>
	...

08005c58 <_printf_i>:
 8005c58:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005c5c:	7e0f      	ldrb	r7, [r1, #24]
 8005c5e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8005c60:	2f78      	cmp	r7, #120	; 0x78
 8005c62:	4691      	mov	r9, r2
 8005c64:	4680      	mov	r8, r0
 8005c66:	460c      	mov	r4, r1
 8005c68:	469a      	mov	sl, r3
 8005c6a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8005c6e:	d807      	bhi.n	8005c80 <_printf_i+0x28>
 8005c70:	2f62      	cmp	r7, #98	; 0x62
 8005c72:	d80a      	bhi.n	8005c8a <_printf_i+0x32>
 8005c74:	2f00      	cmp	r7, #0
 8005c76:	f000 80d4 	beq.w	8005e22 <_printf_i+0x1ca>
 8005c7a:	2f58      	cmp	r7, #88	; 0x58
 8005c7c:	f000 80c0 	beq.w	8005e00 <_printf_i+0x1a8>
 8005c80:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005c84:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8005c88:	e03a      	b.n	8005d00 <_printf_i+0xa8>
 8005c8a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8005c8e:	2b15      	cmp	r3, #21
 8005c90:	d8f6      	bhi.n	8005c80 <_printf_i+0x28>
 8005c92:	a101      	add	r1, pc, #4	; (adr r1, 8005c98 <_printf_i+0x40>)
 8005c94:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005c98:	08005cf1 	.word	0x08005cf1
 8005c9c:	08005d05 	.word	0x08005d05
 8005ca0:	08005c81 	.word	0x08005c81
 8005ca4:	08005c81 	.word	0x08005c81
 8005ca8:	08005c81 	.word	0x08005c81
 8005cac:	08005c81 	.word	0x08005c81
 8005cb0:	08005d05 	.word	0x08005d05
 8005cb4:	08005c81 	.word	0x08005c81
 8005cb8:	08005c81 	.word	0x08005c81
 8005cbc:	08005c81 	.word	0x08005c81
 8005cc0:	08005c81 	.word	0x08005c81
 8005cc4:	08005e09 	.word	0x08005e09
 8005cc8:	08005d31 	.word	0x08005d31
 8005ccc:	08005dc3 	.word	0x08005dc3
 8005cd0:	08005c81 	.word	0x08005c81
 8005cd4:	08005c81 	.word	0x08005c81
 8005cd8:	08005e2b 	.word	0x08005e2b
 8005cdc:	08005c81 	.word	0x08005c81
 8005ce0:	08005d31 	.word	0x08005d31
 8005ce4:	08005c81 	.word	0x08005c81
 8005ce8:	08005c81 	.word	0x08005c81
 8005cec:	08005dcb 	.word	0x08005dcb
 8005cf0:	682b      	ldr	r3, [r5, #0]
 8005cf2:	1d1a      	adds	r2, r3, #4
 8005cf4:	681b      	ldr	r3, [r3, #0]
 8005cf6:	602a      	str	r2, [r5, #0]
 8005cf8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005cfc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005d00:	2301      	movs	r3, #1
 8005d02:	e09f      	b.n	8005e44 <_printf_i+0x1ec>
 8005d04:	6820      	ldr	r0, [r4, #0]
 8005d06:	682b      	ldr	r3, [r5, #0]
 8005d08:	0607      	lsls	r7, r0, #24
 8005d0a:	f103 0104 	add.w	r1, r3, #4
 8005d0e:	6029      	str	r1, [r5, #0]
 8005d10:	d501      	bpl.n	8005d16 <_printf_i+0xbe>
 8005d12:	681e      	ldr	r6, [r3, #0]
 8005d14:	e003      	b.n	8005d1e <_printf_i+0xc6>
 8005d16:	0646      	lsls	r6, r0, #25
 8005d18:	d5fb      	bpl.n	8005d12 <_printf_i+0xba>
 8005d1a:	f9b3 6000 	ldrsh.w	r6, [r3]
 8005d1e:	2e00      	cmp	r6, #0
 8005d20:	da03      	bge.n	8005d2a <_printf_i+0xd2>
 8005d22:	232d      	movs	r3, #45	; 0x2d
 8005d24:	4276      	negs	r6, r6
 8005d26:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005d2a:	485a      	ldr	r0, [pc, #360]	; (8005e94 <_printf_i+0x23c>)
 8005d2c:	230a      	movs	r3, #10
 8005d2e:	e012      	b.n	8005d56 <_printf_i+0xfe>
 8005d30:	682b      	ldr	r3, [r5, #0]
 8005d32:	6820      	ldr	r0, [r4, #0]
 8005d34:	1d19      	adds	r1, r3, #4
 8005d36:	6029      	str	r1, [r5, #0]
 8005d38:	0605      	lsls	r5, r0, #24
 8005d3a:	d501      	bpl.n	8005d40 <_printf_i+0xe8>
 8005d3c:	681e      	ldr	r6, [r3, #0]
 8005d3e:	e002      	b.n	8005d46 <_printf_i+0xee>
 8005d40:	0641      	lsls	r1, r0, #25
 8005d42:	d5fb      	bpl.n	8005d3c <_printf_i+0xe4>
 8005d44:	881e      	ldrh	r6, [r3, #0]
 8005d46:	4853      	ldr	r0, [pc, #332]	; (8005e94 <_printf_i+0x23c>)
 8005d48:	2f6f      	cmp	r7, #111	; 0x6f
 8005d4a:	bf0c      	ite	eq
 8005d4c:	2308      	moveq	r3, #8
 8005d4e:	230a      	movne	r3, #10
 8005d50:	2100      	movs	r1, #0
 8005d52:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8005d56:	6865      	ldr	r5, [r4, #4]
 8005d58:	60a5      	str	r5, [r4, #8]
 8005d5a:	2d00      	cmp	r5, #0
 8005d5c:	bfa2      	ittt	ge
 8005d5e:	6821      	ldrge	r1, [r4, #0]
 8005d60:	f021 0104 	bicge.w	r1, r1, #4
 8005d64:	6021      	strge	r1, [r4, #0]
 8005d66:	b90e      	cbnz	r6, 8005d6c <_printf_i+0x114>
 8005d68:	2d00      	cmp	r5, #0
 8005d6a:	d04b      	beq.n	8005e04 <_printf_i+0x1ac>
 8005d6c:	4615      	mov	r5, r2
 8005d6e:	fbb6 f1f3 	udiv	r1, r6, r3
 8005d72:	fb03 6711 	mls	r7, r3, r1, r6
 8005d76:	5dc7      	ldrb	r7, [r0, r7]
 8005d78:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8005d7c:	4637      	mov	r7, r6
 8005d7e:	42bb      	cmp	r3, r7
 8005d80:	460e      	mov	r6, r1
 8005d82:	d9f4      	bls.n	8005d6e <_printf_i+0x116>
 8005d84:	2b08      	cmp	r3, #8
 8005d86:	d10b      	bne.n	8005da0 <_printf_i+0x148>
 8005d88:	6823      	ldr	r3, [r4, #0]
 8005d8a:	07de      	lsls	r6, r3, #31
 8005d8c:	d508      	bpl.n	8005da0 <_printf_i+0x148>
 8005d8e:	6923      	ldr	r3, [r4, #16]
 8005d90:	6861      	ldr	r1, [r4, #4]
 8005d92:	4299      	cmp	r1, r3
 8005d94:	bfde      	ittt	le
 8005d96:	2330      	movle	r3, #48	; 0x30
 8005d98:	f805 3c01 	strble.w	r3, [r5, #-1]
 8005d9c:	f105 35ff 	addle.w	r5, r5, #4294967295
 8005da0:	1b52      	subs	r2, r2, r5
 8005da2:	6122      	str	r2, [r4, #16]
 8005da4:	f8cd a000 	str.w	sl, [sp]
 8005da8:	464b      	mov	r3, r9
 8005daa:	aa03      	add	r2, sp, #12
 8005dac:	4621      	mov	r1, r4
 8005dae:	4640      	mov	r0, r8
 8005db0:	f7ff fee4 	bl	8005b7c <_printf_common>
 8005db4:	3001      	adds	r0, #1
 8005db6:	d14a      	bne.n	8005e4e <_printf_i+0x1f6>
 8005db8:	f04f 30ff 	mov.w	r0, #4294967295
 8005dbc:	b004      	add	sp, #16
 8005dbe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005dc2:	6823      	ldr	r3, [r4, #0]
 8005dc4:	f043 0320 	orr.w	r3, r3, #32
 8005dc8:	6023      	str	r3, [r4, #0]
 8005dca:	4833      	ldr	r0, [pc, #204]	; (8005e98 <_printf_i+0x240>)
 8005dcc:	2778      	movs	r7, #120	; 0x78
 8005dce:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8005dd2:	6823      	ldr	r3, [r4, #0]
 8005dd4:	6829      	ldr	r1, [r5, #0]
 8005dd6:	061f      	lsls	r7, r3, #24
 8005dd8:	f851 6b04 	ldr.w	r6, [r1], #4
 8005ddc:	d402      	bmi.n	8005de4 <_printf_i+0x18c>
 8005dde:	065f      	lsls	r7, r3, #25
 8005de0:	bf48      	it	mi
 8005de2:	b2b6      	uxthmi	r6, r6
 8005de4:	07df      	lsls	r7, r3, #31
 8005de6:	bf48      	it	mi
 8005de8:	f043 0320 	orrmi.w	r3, r3, #32
 8005dec:	6029      	str	r1, [r5, #0]
 8005dee:	bf48      	it	mi
 8005df0:	6023      	strmi	r3, [r4, #0]
 8005df2:	b91e      	cbnz	r6, 8005dfc <_printf_i+0x1a4>
 8005df4:	6823      	ldr	r3, [r4, #0]
 8005df6:	f023 0320 	bic.w	r3, r3, #32
 8005dfa:	6023      	str	r3, [r4, #0]
 8005dfc:	2310      	movs	r3, #16
 8005dfe:	e7a7      	b.n	8005d50 <_printf_i+0xf8>
 8005e00:	4824      	ldr	r0, [pc, #144]	; (8005e94 <_printf_i+0x23c>)
 8005e02:	e7e4      	b.n	8005dce <_printf_i+0x176>
 8005e04:	4615      	mov	r5, r2
 8005e06:	e7bd      	b.n	8005d84 <_printf_i+0x12c>
 8005e08:	682b      	ldr	r3, [r5, #0]
 8005e0a:	6826      	ldr	r6, [r4, #0]
 8005e0c:	6961      	ldr	r1, [r4, #20]
 8005e0e:	1d18      	adds	r0, r3, #4
 8005e10:	6028      	str	r0, [r5, #0]
 8005e12:	0635      	lsls	r5, r6, #24
 8005e14:	681b      	ldr	r3, [r3, #0]
 8005e16:	d501      	bpl.n	8005e1c <_printf_i+0x1c4>
 8005e18:	6019      	str	r1, [r3, #0]
 8005e1a:	e002      	b.n	8005e22 <_printf_i+0x1ca>
 8005e1c:	0670      	lsls	r0, r6, #25
 8005e1e:	d5fb      	bpl.n	8005e18 <_printf_i+0x1c0>
 8005e20:	8019      	strh	r1, [r3, #0]
 8005e22:	2300      	movs	r3, #0
 8005e24:	6123      	str	r3, [r4, #16]
 8005e26:	4615      	mov	r5, r2
 8005e28:	e7bc      	b.n	8005da4 <_printf_i+0x14c>
 8005e2a:	682b      	ldr	r3, [r5, #0]
 8005e2c:	1d1a      	adds	r2, r3, #4
 8005e2e:	602a      	str	r2, [r5, #0]
 8005e30:	681d      	ldr	r5, [r3, #0]
 8005e32:	6862      	ldr	r2, [r4, #4]
 8005e34:	2100      	movs	r1, #0
 8005e36:	4628      	mov	r0, r5
 8005e38:	f7fa f9da 	bl	80001f0 <memchr>
 8005e3c:	b108      	cbz	r0, 8005e42 <_printf_i+0x1ea>
 8005e3e:	1b40      	subs	r0, r0, r5
 8005e40:	6060      	str	r0, [r4, #4]
 8005e42:	6863      	ldr	r3, [r4, #4]
 8005e44:	6123      	str	r3, [r4, #16]
 8005e46:	2300      	movs	r3, #0
 8005e48:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005e4c:	e7aa      	b.n	8005da4 <_printf_i+0x14c>
 8005e4e:	6923      	ldr	r3, [r4, #16]
 8005e50:	462a      	mov	r2, r5
 8005e52:	4649      	mov	r1, r9
 8005e54:	4640      	mov	r0, r8
 8005e56:	47d0      	blx	sl
 8005e58:	3001      	adds	r0, #1
 8005e5a:	d0ad      	beq.n	8005db8 <_printf_i+0x160>
 8005e5c:	6823      	ldr	r3, [r4, #0]
 8005e5e:	079b      	lsls	r3, r3, #30
 8005e60:	d413      	bmi.n	8005e8a <_printf_i+0x232>
 8005e62:	68e0      	ldr	r0, [r4, #12]
 8005e64:	9b03      	ldr	r3, [sp, #12]
 8005e66:	4298      	cmp	r0, r3
 8005e68:	bfb8      	it	lt
 8005e6a:	4618      	movlt	r0, r3
 8005e6c:	e7a6      	b.n	8005dbc <_printf_i+0x164>
 8005e6e:	2301      	movs	r3, #1
 8005e70:	4632      	mov	r2, r6
 8005e72:	4649      	mov	r1, r9
 8005e74:	4640      	mov	r0, r8
 8005e76:	47d0      	blx	sl
 8005e78:	3001      	adds	r0, #1
 8005e7a:	d09d      	beq.n	8005db8 <_printf_i+0x160>
 8005e7c:	3501      	adds	r5, #1
 8005e7e:	68e3      	ldr	r3, [r4, #12]
 8005e80:	9903      	ldr	r1, [sp, #12]
 8005e82:	1a5b      	subs	r3, r3, r1
 8005e84:	42ab      	cmp	r3, r5
 8005e86:	dcf2      	bgt.n	8005e6e <_printf_i+0x216>
 8005e88:	e7eb      	b.n	8005e62 <_printf_i+0x20a>
 8005e8a:	2500      	movs	r5, #0
 8005e8c:	f104 0619 	add.w	r6, r4, #25
 8005e90:	e7f5      	b.n	8005e7e <_printf_i+0x226>
 8005e92:	bf00      	nop
 8005e94:	08007abd 	.word	0x08007abd
 8005e98:	08007ace 	.word	0x08007ace

08005e9c <memmove>:
 8005e9c:	4288      	cmp	r0, r1
 8005e9e:	b510      	push	{r4, lr}
 8005ea0:	eb01 0402 	add.w	r4, r1, r2
 8005ea4:	d902      	bls.n	8005eac <memmove+0x10>
 8005ea6:	4284      	cmp	r4, r0
 8005ea8:	4623      	mov	r3, r4
 8005eaa:	d807      	bhi.n	8005ebc <memmove+0x20>
 8005eac:	1e43      	subs	r3, r0, #1
 8005eae:	42a1      	cmp	r1, r4
 8005eb0:	d008      	beq.n	8005ec4 <memmove+0x28>
 8005eb2:	f811 2b01 	ldrb.w	r2, [r1], #1
 8005eb6:	f803 2f01 	strb.w	r2, [r3, #1]!
 8005eba:	e7f8      	b.n	8005eae <memmove+0x12>
 8005ebc:	4402      	add	r2, r0
 8005ebe:	4601      	mov	r1, r0
 8005ec0:	428a      	cmp	r2, r1
 8005ec2:	d100      	bne.n	8005ec6 <memmove+0x2a>
 8005ec4:	bd10      	pop	{r4, pc}
 8005ec6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8005eca:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8005ece:	e7f7      	b.n	8005ec0 <memmove+0x24>

08005ed0 <_sbrk_r>:
 8005ed0:	b538      	push	{r3, r4, r5, lr}
 8005ed2:	4d06      	ldr	r5, [pc, #24]	; (8005eec <_sbrk_r+0x1c>)
 8005ed4:	2300      	movs	r3, #0
 8005ed6:	4604      	mov	r4, r0
 8005ed8:	4608      	mov	r0, r1
 8005eda:	602b      	str	r3, [r5, #0]
 8005edc:	f7fb fa7c 	bl	80013d8 <_sbrk>
 8005ee0:	1c43      	adds	r3, r0, #1
 8005ee2:	d102      	bne.n	8005eea <_sbrk_r+0x1a>
 8005ee4:	682b      	ldr	r3, [r5, #0]
 8005ee6:	b103      	cbz	r3, 8005eea <_sbrk_r+0x1a>
 8005ee8:	6023      	str	r3, [r4, #0]
 8005eea:	bd38      	pop	{r3, r4, r5, pc}
 8005eec:	20000424 	.word	0x20000424

08005ef0 <memcpy>:
 8005ef0:	440a      	add	r2, r1
 8005ef2:	4291      	cmp	r1, r2
 8005ef4:	f100 33ff 	add.w	r3, r0, #4294967295
 8005ef8:	d100      	bne.n	8005efc <memcpy+0xc>
 8005efa:	4770      	bx	lr
 8005efc:	b510      	push	{r4, lr}
 8005efe:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005f02:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005f06:	4291      	cmp	r1, r2
 8005f08:	d1f9      	bne.n	8005efe <memcpy+0xe>
 8005f0a:	bd10      	pop	{r4, pc}

08005f0c <_realloc_r>:
 8005f0c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005f10:	4680      	mov	r8, r0
 8005f12:	4614      	mov	r4, r2
 8005f14:	460e      	mov	r6, r1
 8005f16:	b921      	cbnz	r1, 8005f22 <_realloc_r+0x16>
 8005f18:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005f1c:	4611      	mov	r1, r2
 8005f1e:	f7ff bc49 	b.w	80057b4 <_malloc_r>
 8005f22:	b92a      	cbnz	r2, 8005f30 <_realloc_r+0x24>
 8005f24:	f7ff fbda 	bl	80056dc <_free_r>
 8005f28:	4625      	mov	r5, r4
 8005f2a:	4628      	mov	r0, r5
 8005f2c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005f30:	f000 f81b 	bl	8005f6a <_malloc_usable_size_r>
 8005f34:	4284      	cmp	r4, r0
 8005f36:	4607      	mov	r7, r0
 8005f38:	d802      	bhi.n	8005f40 <_realloc_r+0x34>
 8005f3a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8005f3e:	d812      	bhi.n	8005f66 <_realloc_r+0x5a>
 8005f40:	4621      	mov	r1, r4
 8005f42:	4640      	mov	r0, r8
 8005f44:	f7ff fc36 	bl	80057b4 <_malloc_r>
 8005f48:	4605      	mov	r5, r0
 8005f4a:	2800      	cmp	r0, #0
 8005f4c:	d0ed      	beq.n	8005f2a <_realloc_r+0x1e>
 8005f4e:	42bc      	cmp	r4, r7
 8005f50:	4622      	mov	r2, r4
 8005f52:	4631      	mov	r1, r6
 8005f54:	bf28      	it	cs
 8005f56:	463a      	movcs	r2, r7
 8005f58:	f7ff ffca 	bl	8005ef0 <memcpy>
 8005f5c:	4631      	mov	r1, r6
 8005f5e:	4640      	mov	r0, r8
 8005f60:	f7ff fbbc 	bl	80056dc <_free_r>
 8005f64:	e7e1      	b.n	8005f2a <_realloc_r+0x1e>
 8005f66:	4635      	mov	r5, r6
 8005f68:	e7df      	b.n	8005f2a <_realloc_r+0x1e>

08005f6a <_malloc_usable_size_r>:
 8005f6a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005f6e:	1f18      	subs	r0, r3, #4
 8005f70:	2b00      	cmp	r3, #0
 8005f72:	bfbc      	itt	lt
 8005f74:	580b      	ldrlt	r3, [r1, r0]
 8005f76:	18c0      	addlt	r0, r0, r3
 8005f78:	4770      	bx	lr

08005f7a <fmod>:
 8005f7a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005f7c:	ed2d 8b02 	vpush	{d8}
 8005f80:	ec57 6b10 	vmov	r6, r7, d0
 8005f84:	ec55 4b11 	vmov	r4, r5, d1
 8005f88:	f000 f926 	bl	80061d8 <__ieee754_fmod>
 8005f8c:	4622      	mov	r2, r4
 8005f8e:	462b      	mov	r3, r5
 8005f90:	4630      	mov	r0, r6
 8005f92:	4639      	mov	r1, r7
 8005f94:	eeb0 8a40 	vmov.f32	s16, s0
 8005f98:	eef0 8a60 	vmov.f32	s17, s1
 8005f9c:	f7fa fdce 	bl	8000b3c <__aeabi_dcmpun>
 8005fa0:	b990      	cbnz	r0, 8005fc8 <fmod+0x4e>
 8005fa2:	2200      	movs	r2, #0
 8005fa4:	2300      	movs	r3, #0
 8005fa6:	4620      	mov	r0, r4
 8005fa8:	4629      	mov	r1, r5
 8005faa:	f7fa fd95 	bl	8000ad8 <__aeabi_dcmpeq>
 8005fae:	b158      	cbz	r0, 8005fc8 <fmod+0x4e>
 8005fb0:	f7ff fb68 	bl	8005684 <__errno>
 8005fb4:	2321      	movs	r3, #33	; 0x21
 8005fb6:	6003      	str	r3, [r0, #0]
 8005fb8:	2200      	movs	r2, #0
 8005fba:	2300      	movs	r3, #0
 8005fbc:	4610      	mov	r0, r2
 8005fbe:	4619      	mov	r1, r3
 8005fc0:	f7fa fc4c 	bl	800085c <__aeabi_ddiv>
 8005fc4:	ec41 0b18 	vmov	d8, r0, r1
 8005fc8:	eeb0 0a48 	vmov.f32	s0, s16
 8005fcc:	eef0 0a68 	vmov.f32	s1, s17
 8005fd0:	ecbd 8b02 	vpop	{d8}
 8005fd4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08005fd8 <pow>:
 8005fd8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005fda:	ed2d 8b02 	vpush	{d8}
 8005fde:	eeb0 8a40 	vmov.f32	s16, s0
 8005fe2:	eef0 8a60 	vmov.f32	s17, s1
 8005fe6:	ec55 4b11 	vmov	r4, r5, d1
 8005fea:	f000 fa05 	bl	80063f8 <__ieee754_pow>
 8005fee:	4622      	mov	r2, r4
 8005ff0:	462b      	mov	r3, r5
 8005ff2:	4620      	mov	r0, r4
 8005ff4:	4629      	mov	r1, r5
 8005ff6:	ec57 6b10 	vmov	r6, r7, d0
 8005ffa:	f7fa fd9f 	bl	8000b3c <__aeabi_dcmpun>
 8005ffe:	2800      	cmp	r0, #0
 8006000:	d13b      	bne.n	800607a <pow+0xa2>
 8006002:	ec51 0b18 	vmov	r0, r1, d8
 8006006:	2200      	movs	r2, #0
 8006008:	2300      	movs	r3, #0
 800600a:	f7fa fd65 	bl	8000ad8 <__aeabi_dcmpeq>
 800600e:	b1b8      	cbz	r0, 8006040 <pow+0x68>
 8006010:	2200      	movs	r2, #0
 8006012:	2300      	movs	r3, #0
 8006014:	4620      	mov	r0, r4
 8006016:	4629      	mov	r1, r5
 8006018:	f7fa fd5e 	bl	8000ad8 <__aeabi_dcmpeq>
 800601c:	2800      	cmp	r0, #0
 800601e:	d146      	bne.n	80060ae <pow+0xd6>
 8006020:	ec45 4b10 	vmov	d0, r4, r5
 8006024:	f000 f8bf 	bl	80061a6 <finite>
 8006028:	b338      	cbz	r0, 800607a <pow+0xa2>
 800602a:	2200      	movs	r2, #0
 800602c:	2300      	movs	r3, #0
 800602e:	4620      	mov	r0, r4
 8006030:	4629      	mov	r1, r5
 8006032:	f7fa fd5b 	bl	8000aec <__aeabi_dcmplt>
 8006036:	b300      	cbz	r0, 800607a <pow+0xa2>
 8006038:	f7ff fb24 	bl	8005684 <__errno>
 800603c:	2322      	movs	r3, #34	; 0x22
 800603e:	e01b      	b.n	8006078 <pow+0xa0>
 8006040:	ec47 6b10 	vmov	d0, r6, r7
 8006044:	f000 f8af 	bl	80061a6 <finite>
 8006048:	b9e0      	cbnz	r0, 8006084 <pow+0xac>
 800604a:	eeb0 0a48 	vmov.f32	s0, s16
 800604e:	eef0 0a68 	vmov.f32	s1, s17
 8006052:	f000 f8a8 	bl	80061a6 <finite>
 8006056:	b1a8      	cbz	r0, 8006084 <pow+0xac>
 8006058:	ec45 4b10 	vmov	d0, r4, r5
 800605c:	f000 f8a3 	bl	80061a6 <finite>
 8006060:	b180      	cbz	r0, 8006084 <pow+0xac>
 8006062:	4632      	mov	r2, r6
 8006064:	463b      	mov	r3, r7
 8006066:	4630      	mov	r0, r6
 8006068:	4639      	mov	r1, r7
 800606a:	f7fa fd67 	bl	8000b3c <__aeabi_dcmpun>
 800606e:	2800      	cmp	r0, #0
 8006070:	d0e2      	beq.n	8006038 <pow+0x60>
 8006072:	f7ff fb07 	bl	8005684 <__errno>
 8006076:	2321      	movs	r3, #33	; 0x21
 8006078:	6003      	str	r3, [r0, #0]
 800607a:	ecbd 8b02 	vpop	{d8}
 800607e:	ec47 6b10 	vmov	d0, r6, r7
 8006082:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006084:	2200      	movs	r2, #0
 8006086:	2300      	movs	r3, #0
 8006088:	4630      	mov	r0, r6
 800608a:	4639      	mov	r1, r7
 800608c:	f7fa fd24 	bl	8000ad8 <__aeabi_dcmpeq>
 8006090:	2800      	cmp	r0, #0
 8006092:	d0f2      	beq.n	800607a <pow+0xa2>
 8006094:	eeb0 0a48 	vmov.f32	s0, s16
 8006098:	eef0 0a68 	vmov.f32	s1, s17
 800609c:	f000 f883 	bl	80061a6 <finite>
 80060a0:	2800      	cmp	r0, #0
 80060a2:	d0ea      	beq.n	800607a <pow+0xa2>
 80060a4:	ec45 4b10 	vmov	d0, r4, r5
 80060a8:	f000 f87d 	bl	80061a6 <finite>
 80060ac:	e7c3      	b.n	8006036 <pow+0x5e>
 80060ae:	4f01      	ldr	r7, [pc, #4]	; (80060b4 <pow+0xdc>)
 80060b0:	2600      	movs	r6, #0
 80060b2:	e7e2      	b.n	800607a <pow+0xa2>
 80060b4:	3ff00000 	.word	0x3ff00000

080060b8 <fmodf>:
 80060b8:	b508      	push	{r3, lr}
 80060ba:	ed2d 8b02 	vpush	{d8}
 80060be:	eef0 8a40 	vmov.f32	s17, s0
 80060c2:	eeb0 8a60 	vmov.f32	s16, s1
 80060c6:	f000 fecb 	bl	8006e60 <__ieee754_fmodf>
 80060ca:	eef4 8a48 	vcmp.f32	s17, s16
 80060ce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80060d2:	d60c      	bvs.n	80060ee <fmodf+0x36>
 80060d4:	eddf 8a07 	vldr	s17, [pc, #28]	; 80060f4 <fmodf+0x3c>
 80060d8:	eeb4 8a68 	vcmp.f32	s16, s17
 80060dc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80060e0:	d105      	bne.n	80060ee <fmodf+0x36>
 80060e2:	f7ff facf 	bl	8005684 <__errno>
 80060e6:	ee88 0aa8 	vdiv.f32	s0, s17, s17
 80060ea:	2321      	movs	r3, #33	; 0x21
 80060ec:	6003      	str	r3, [r0, #0]
 80060ee:	ecbd 8b02 	vpop	{d8}
 80060f2:	bd08      	pop	{r3, pc}
 80060f4:	00000000 	.word	0x00000000

080060f8 <powf>:
 80060f8:	b508      	push	{r3, lr}
 80060fa:	ed2d 8b04 	vpush	{d8-d9}
 80060fe:	eeb0 8a60 	vmov.f32	s16, s1
 8006102:	eeb0 9a40 	vmov.f32	s18, s0
 8006106:	f000 ff2d 	bl	8006f64 <__ieee754_powf>
 800610a:	eeb4 8a48 	vcmp.f32	s16, s16
 800610e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006112:	eef0 8a40 	vmov.f32	s17, s0
 8006116:	d63e      	bvs.n	8006196 <powf+0x9e>
 8006118:	eeb5 9a40 	vcmp.f32	s18, #0.0
 800611c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006120:	d112      	bne.n	8006148 <powf+0x50>
 8006122:	eeb5 8a40 	vcmp.f32	s16, #0.0
 8006126:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800612a:	d039      	beq.n	80061a0 <powf+0xa8>
 800612c:	eeb0 0a48 	vmov.f32	s0, s16
 8006130:	f000 f844 	bl	80061bc <finitef>
 8006134:	b378      	cbz	r0, 8006196 <powf+0x9e>
 8006136:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 800613a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800613e:	d52a      	bpl.n	8006196 <powf+0x9e>
 8006140:	f7ff faa0 	bl	8005684 <__errno>
 8006144:	2322      	movs	r3, #34	; 0x22
 8006146:	e014      	b.n	8006172 <powf+0x7a>
 8006148:	f000 f838 	bl	80061bc <finitef>
 800614c:	b998      	cbnz	r0, 8006176 <powf+0x7e>
 800614e:	eeb0 0a49 	vmov.f32	s0, s18
 8006152:	f000 f833 	bl	80061bc <finitef>
 8006156:	b170      	cbz	r0, 8006176 <powf+0x7e>
 8006158:	eeb0 0a48 	vmov.f32	s0, s16
 800615c:	f000 f82e 	bl	80061bc <finitef>
 8006160:	b148      	cbz	r0, 8006176 <powf+0x7e>
 8006162:	eef4 8a68 	vcmp.f32	s17, s17
 8006166:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800616a:	d7e9      	bvc.n	8006140 <powf+0x48>
 800616c:	f7ff fa8a 	bl	8005684 <__errno>
 8006170:	2321      	movs	r3, #33	; 0x21
 8006172:	6003      	str	r3, [r0, #0]
 8006174:	e00f      	b.n	8006196 <powf+0x9e>
 8006176:	eef5 8a40 	vcmp.f32	s17, #0.0
 800617a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800617e:	d10a      	bne.n	8006196 <powf+0x9e>
 8006180:	eeb0 0a49 	vmov.f32	s0, s18
 8006184:	f000 f81a 	bl	80061bc <finitef>
 8006188:	b128      	cbz	r0, 8006196 <powf+0x9e>
 800618a:	eeb0 0a48 	vmov.f32	s0, s16
 800618e:	f000 f815 	bl	80061bc <finitef>
 8006192:	2800      	cmp	r0, #0
 8006194:	d1d4      	bne.n	8006140 <powf+0x48>
 8006196:	eeb0 0a68 	vmov.f32	s0, s17
 800619a:	ecbd 8b04 	vpop	{d8-d9}
 800619e:	bd08      	pop	{r3, pc}
 80061a0:	eef7 8a00 	vmov.f32	s17, #112	; 0x3f800000  1.0
 80061a4:	e7f7      	b.n	8006196 <powf+0x9e>

080061a6 <finite>:
 80061a6:	b082      	sub	sp, #8
 80061a8:	ed8d 0b00 	vstr	d0, [sp]
 80061ac:	9801      	ldr	r0, [sp, #4]
 80061ae:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 80061b2:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 80061b6:	0fc0      	lsrs	r0, r0, #31
 80061b8:	b002      	add	sp, #8
 80061ba:	4770      	bx	lr

080061bc <finitef>:
 80061bc:	b082      	sub	sp, #8
 80061be:	ed8d 0a01 	vstr	s0, [sp, #4]
 80061c2:	9801      	ldr	r0, [sp, #4]
 80061c4:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 80061c8:	f1b0 4fff 	cmp.w	r0, #2139095040	; 0x7f800000
 80061cc:	bfac      	ite	ge
 80061ce:	2000      	movge	r0, #0
 80061d0:	2001      	movlt	r0, #1
 80061d2:	b002      	add	sp, #8
 80061d4:	4770      	bx	lr
	...

080061d8 <__ieee754_fmod>:
 80061d8:	ec53 2b11 	vmov	r2, r3, d1
 80061dc:	f023 4c00 	bic.w	ip, r3, #2147483648	; 0x80000000
 80061e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80061e4:	ea5c 0402 	orrs.w	r4, ip, r2
 80061e8:	ec51 0b10 	vmov	r0, r1, d0
 80061ec:	ee11 7a10 	vmov	r7, s2
 80061f0:	ee11 ea10 	vmov	lr, s2
 80061f4:	461e      	mov	r6, r3
 80061f6:	d00c      	beq.n	8006212 <__ieee754_fmod+0x3a>
 80061f8:	4c78      	ldr	r4, [pc, #480]	; (80063dc <__ieee754_fmod+0x204>)
 80061fa:	f021 4800 	bic.w	r8, r1, #2147483648	; 0x80000000
 80061fe:	45a0      	cmp	r8, r4
 8006200:	4689      	mov	r9, r1
 8006202:	dc06      	bgt.n	8006212 <__ieee754_fmod+0x3a>
 8006204:	4254      	negs	r4, r2
 8006206:	4d76      	ldr	r5, [pc, #472]	; (80063e0 <__ieee754_fmod+0x208>)
 8006208:	4314      	orrs	r4, r2
 800620a:	ea4c 74d4 	orr.w	r4, ip, r4, lsr #31
 800620e:	42ac      	cmp	r4, r5
 8006210:	d909      	bls.n	8006226 <__ieee754_fmod+0x4e>
 8006212:	f7fa f9f9 	bl	8000608 <__aeabi_dmul>
 8006216:	4602      	mov	r2, r0
 8006218:	460b      	mov	r3, r1
 800621a:	f7fa fb1f 	bl	800085c <__aeabi_ddiv>
 800621e:	ec41 0b10 	vmov	d0, r0, r1
 8006222:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006226:	45e0      	cmp	r8, ip
 8006228:	ee10 aa10 	vmov	sl, s0
 800622c:	ee10 4a10 	vmov	r4, s0
 8006230:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8006234:	dc09      	bgt.n	800624a <__ieee754_fmod+0x72>
 8006236:	dbf2      	blt.n	800621e <__ieee754_fmod+0x46>
 8006238:	4290      	cmp	r0, r2
 800623a:	d3f0      	bcc.n	800621e <__ieee754_fmod+0x46>
 800623c:	d105      	bne.n	800624a <__ieee754_fmod+0x72>
 800623e:	4b69      	ldr	r3, [pc, #420]	; (80063e4 <__ieee754_fmod+0x20c>)
 8006240:	eb03 7315 	add.w	r3, r3, r5, lsr #28
 8006244:	e9d3 0100 	ldrd	r0, r1, [r3]
 8006248:	e7e9      	b.n	800621e <__ieee754_fmod+0x46>
 800624a:	4a65      	ldr	r2, [pc, #404]	; (80063e0 <__ieee754_fmod+0x208>)
 800624c:	ea19 0f02 	tst.w	r9, r2
 8006250:	d148      	bne.n	80062e4 <__ieee754_fmod+0x10c>
 8006252:	f1b8 0f00 	cmp.w	r8, #0
 8006256:	d13d      	bne.n	80062d4 <__ieee754_fmod+0xfc>
 8006258:	4963      	ldr	r1, [pc, #396]	; (80063e8 <__ieee754_fmod+0x210>)
 800625a:	4653      	mov	r3, sl
 800625c:	2b00      	cmp	r3, #0
 800625e:	dc36      	bgt.n	80062ce <__ieee754_fmod+0xf6>
 8006260:	4216      	tst	r6, r2
 8006262:	d14f      	bne.n	8006304 <__ieee754_fmod+0x12c>
 8006264:	f1bc 0f00 	cmp.w	ip, #0
 8006268:	d144      	bne.n	80062f4 <__ieee754_fmod+0x11c>
 800626a:	4a5f      	ldr	r2, [pc, #380]	; (80063e8 <__ieee754_fmod+0x210>)
 800626c:	463b      	mov	r3, r7
 800626e:	2b00      	cmp	r3, #0
 8006270:	dc3d      	bgt.n	80062ee <__ieee754_fmod+0x116>
 8006272:	485e      	ldr	r0, [pc, #376]	; (80063ec <__ieee754_fmod+0x214>)
 8006274:	4281      	cmp	r1, r0
 8006276:	db4a      	blt.n	800630e <__ieee754_fmod+0x136>
 8006278:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800627c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006280:	485a      	ldr	r0, [pc, #360]	; (80063ec <__ieee754_fmod+0x214>)
 8006282:	4282      	cmp	r2, r0
 8006284:	db57      	blt.n	8006336 <__ieee754_fmod+0x15e>
 8006286:	f3c6 0613 	ubfx	r6, r6, #0, #20
 800628a:	f446 1680 	orr.w	r6, r6, #1048576	; 0x100000
 800628e:	1a89      	subs	r1, r1, r2
 8006290:	1b98      	subs	r0, r3, r6
 8006292:	eba4 070e 	sub.w	r7, r4, lr
 8006296:	2900      	cmp	r1, #0
 8006298:	d162      	bne.n	8006360 <__ieee754_fmod+0x188>
 800629a:	4574      	cmp	r4, lr
 800629c:	bf38      	it	cc
 800629e:	f100 30ff 	addcc.w	r0, r0, #4294967295
 80062a2:	2800      	cmp	r0, #0
 80062a4:	bfa4      	itt	ge
 80062a6:	463c      	movge	r4, r7
 80062a8:	4603      	movge	r3, r0
 80062aa:	ea53 0104 	orrs.w	r1, r3, r4
 80062ae:	d0c6      	beq.n	800623e <__ieee754_fmod+0x66>
 80062b0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80062b4:	db69      	blt.n	800638a <__ieee754_fmod+0x1b2>
 80062b6:	494d      	ldr	r1, [pc, #308]	; (80063ec <__ieee754_fmod+0x214>)
 80062b8:	428a      	cmp	r2, r1
 80062ba:	db6c      	blt.n	8006396 <__ieee754_fmod+0x1be>
 80062bc:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 80062c0:	432b      	orrs	r3, r5
 80062c2:	f202 32ff 	addw	r2, r2, #1023	; 0x3ff
 80062c6:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 80062ca:	4620      	mov	r0, r4
 80062cc:	e7a7      	b.n	800621e <__ieee754_fmod+0x46>
 80062ce:	3901      	subs	r1, #1
 80062d0:	005b      	lsls	r3, r3, #1
 80062d2:	e7c3      	b.n	800625c <__ieee754_fmod+0x84>
 80062d4:	4945      	ldr	r1, [pc, #276]	; (80063ec <__ieee754_fmod+0x214>)
 80062d6:	ea4f 23c8 	mov.w	r3, r8, lsl #11
 80062da:	2b00      	cmp	r3, #0
 80062dc:	ddc0      	ble.n	8006260 <__ieee754_fmod+0x88>
 80062de:	3901      	subs	r1, #1
 80062e0:	005b      	lsls	r3, r3, #1
 80062e2:	e7fa      	b.n	80062da <__ieee754_fmod+0x102>
 80062e4:	ea4f 5128 	mov.w	r1, r8, asr #20
 80062e8:	f2a1 31ff 	subw	r1, r1, #1023	; 0x3ff
 80062ec:	e7b8      	b.n	8006260 <__ieee754_fmod+0x88>
 80062ee:	3a01      	subs	r2, #1
 80062f0:	005b      	lsls	r3, r3, #1
 80062f2:	e7bc      	b.n	800626e <__ieee754_fmod+0x96>
 80062f4:	4a3d      	ldr	r2, [pc, #244]	; (80063ec <__ieee754_fmod+0x214>)
 80062f6:	ea4f 23cc 	mov.w	r3, ip, lsl #11
 80062fa:	2b00      	cmp	r3, #0
 80062fc:	ddb9      	ble.n	8006272 <__ieee754_fmod+0x9a>
 80062fe:	3a01      	subs	r2, #1
 8006300:	005b      	lsls	r3, r3, #1
 8006302:	e7fa      	b.n	80062fa <__ieee754_fmod+0x122>
 8006304:	ea4f 522c 	mov.w	r2, ip, asr #20
 8006308:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 800630c:	e7b1      	b.n	8006272 <__ieee754_fmod+0x9a>
 800630e:	1a40      	subs	r0, r0, r1
 8006310:	281f      	cmp	r0, #31
 8006312:	dc0a      	bgt.n	800632a <__ieee754_fmod+0x152>
 8006314:	f201 431e 	addw	r3, r1, #1054	; 0x41e
 8006318:	fa08 f800 	lsl.w	r8, r8, r0
 800631c:	fa2a f303 	lsr.w	r3, sl, r3
 8006320:	ea43 0308 	orr.w	r3, r3, r8
 8006324:	fa0a f400 	lsl.w	r4, sl, r0
 8006328:	e7aa      	b.n	8006280 <__ieee754_fmod+0xa8>
 800632a:	4b31      	ldr	r3, [pc, #196]	; (80063f0 <__ieee754_fmod+0x218>)
 800632c:	1a5b      	subs	r3, r3, r1
 800632e:	fa0a f303 	lsl.w	r3, sl, r3
 8006332:	2400      	movs	r4, #0
 8006334:	e7a4      	b.n	8006280 <__ieee754_fmod+0xa8>
 8006336:	1a80      	subs	r0, r0, r2
 8006338:	281f      	cmp	r0, #31
 800633a:	dc0a      	bgt.n	8006352 <__ieee754_fmod+0x17a>
 800633c:	f202 461e 	addw	r6, r2, #1054	; 0x41e
 8006340:	fa0c fc00 	lsl.w	ip, ip, r0
 8006344:	fa27 f606 	lsr.w	r6, r7, r6
 8006348:	ea46 060c 	orr.w	r6, r6, ip
 800634c:	fa07 fe00 	lsl.w	lr, r7, r0
 8006350:	e79d      	b.n	800628e <__ieee754_fmod+0xb6>
 8006352:	4e27      	ldr	r6, [pc, #156]	; (80063f0 <__ieee754_fmod+0x218>)
 8006354:	1ab6      	subs	r6, r6, r2
 8006356:	fa07 f606 	lsl.w	r6, r7, r6
 800635a:	f04f 0e00 	mov.w	lr, #0
 800635e:	e796      	b.n	800628e <__ieee754_fmod+0xb6>
 8006360:	4574      	cmp	r4, lr
 8006362:	bf38      	it	cc
 8006364:	f100 30ff 	addcc.w	r0, r0, #4294967295
 8006368:	2800      	cmp	r0, #0
 800636a:	da05      	bge.n	8006378 <__ieee754_fmod+0x1a0>
 800636c:	0fe0      	lsrs	r0, r4, #31
 800636e:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 8006372:	0064      	lsls	r4, r4, #1
 8006374:	3901      	subs	r1, #1
 8006376:	e78b      	b.n	8006290 <__ieee754_fmod+0xb8>
 8006378:	ea50 0307 	orrs.w	r3, r0, r7
 800637c:	f43f af5f 	beq.w	800623e <__ieee754_fmod+0x66>
 8006380:	0ffb      	lsrs	r3, r7, #31
 8006382:	eb03 0340 	add.w	r3, r3, r0, lsl #1
 8006386:	007c      	lsls	r4, r7, #1
 8006388:	e7f4      	b.n	8006374 <__ieee754_fmod+0x19c>
 800638a:	0fe1      	lsrs	r1, r4, #31
 800638c:	eb01 0343 	add.w	r3, r1, r3, lsl #1
 8006390:	0064      	lsls	r4, r4, #1
 8006392:	3a01      	subs	r2, #1
 8006394:	e78c      	b.n	80062b0 <__ieee754_fmod+0xd8>
 8006396:	1a89      	subs	r1, r1, r2
 8006398:	2914      	cmp	r1, #20
 800639a:	dc0a      	bgt.n	80063b2 <__ieee754_fmod+0x1da>
 800639c:	f202 421e 	addw	r2, r2, #1054	; 0x41e
 80063a0:	fa03 f202 	lsl.w	r2, r3, r2
 80063a4:	40cc      	lsrs	r4, r1
 80063a6:	4322      	orrs	r2, r4
 80063a8:	410b      	asrs	r3, r1
 80063aa:	ea43 0105 	orr.w	r1, r3, r5
 80063ae:	4610      	mov	r0, r2
 80063b0:	e735      	b.n	800621e <__ieee754_fmod+0x46>
 80063b2:	291f      	cmp	r1, #31
 80063b4:	dc07      	bgt.n	80063c6 <__ieee754_fmod+0x1ee>
 80063b6:	f202 421e 	addw	r2, r2, #1054	; 0x41e
 80063ba:	40cc      	lsrs	r4, r1
 80063bc:	fa03 f202 	lsl.w	r2, r3, r2
 80063c0:	4322      	orrs	r2, r4
 80063c2:	462b      	mov	r3, r5
 80063c4:	e7f1      	b.n	80063aa <__ieee754_fmod+0x1d2>
 80063c6:	f1c2 427f 	rsb	r2, r2, #4278190080	; 0xff000000
 80063ca:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 80063ce:	f502 427b 	add.w	r2, r2, #64256	; 0xfb00
 80063d2:	32e2      	adds	r2, #226	; 0xe2
 80063d4:	fa43 f202 	asr.w	r2, r3, r2
 80063d8:	e7f3      	b.n	80063c2 <__ieee754_fmod+0x1ea>
 80063da:	bf00      	nop
 80063dc:	7fefffff 	.word	0x7fefffff
 80063e0:	7ff00000 	.word	0x7ff00000
 80063e4:	08007ae0 	.word	0x08007ae0
 80063e8:	fffffbed 	.word	0xfffffbed
 80063ec:	fffffc02 	.word	0xfffffc02
 80063f0:	fffffbe2 	.word	0xfffffbe2
 80063f4:	00000000 	.word	0x00000000

080063f8 <__ieee754_pow>:
 80063f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80063fc:	ed2d 8b06 	vpush	{d8-d10}
 8006400:	b089      	sub	sp, #36	; 0x24
 8006402:	ed8d 1b00 	vstr	d1, [sp]
 8006406:	e9dd 2900 	ldrd	r2, r9, [sp]
 800640a:	f029 4800 	bic.w	r8, r9, #2147483648	; 0x80000000
 800640e:	ea58 0102 	orrs.w	r1, r8, r2
 8006412:	ec57 6b10 	vmov	r6, r7, d0
 8006416:	d115      	bne.n	8006444 <__ieee754_pow+0x4c>
 8006418:	19b3      	adds	r3, r6, r6
 800641a:	f487 2200 	eor.w	r2, r7, #524288	; 0x80000
 800641e:	4152      	adcs	r2, r2
 8006420:	4299      	cmp	r1, r3
 8006422:	4b89      	ldr	r3, [pc, #548]	; (8006648 <__ieee754_pow+0x250>)
 8006424:	4193      	sbcs	r3, r2
 8006426:	f080 84d1 	bcs.w	8006dcc <__ieee754_pow+0x9d4>
 800642a:	e9dd 2300 	ldrd	r2, r3, [sp]
 800642e:	4630      	mov	r0, r6
 8006430:	4639      	mov	r1, r7
 8006432:	f7f9 ff33 	bl	800029c <__adddf3>
 8006436:	ec41 0b10 	vmov	d0, r0, r1
 800643a:	b009      	add	sp, #36	; 0x24
 800643c:	ecbd 8b06 	vpop	{d8-d10}
 8006440:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006444:	4b81      	ldr	r3, [pc, #516]	; (800664c <__ieee754_pow+0x254>)
 8006446:	f027 4400 	bic.w	r4, r7, #2147483648	; 0x80000000
 800644a:	429c      	cmp	r4, r3
 800644c:	ee10 aa10 	vmov	sl, s0
 8006450:	463d      	mov	r5, r7
 8006452:	dc06      	bgt.n	8006462 <__ieee754_pow+0x6a>
 8006454:	d101      	bne.n	800645a <__ieee754_pow+0x62>
 8006456:	2e00      	cmp	r6, #0
 8006458:	d1e7      	bne.n	800642a <__ieee754_pow+0x32>
 800645a:	4598      	cmp	r8, r3
 800645c:	dc01      	bgt.n	8006462 <__ieee754_pow+0x6a>
 800645e:	d10f      	bne.n	8006480 <__ieee754_pow+0x88>
 8006460:	b172      	cbz	r2, 8006480 <__ieee754_pow+0x88>
 8006462:	f105 4540 	add.w	r5, r5, #3221225472	; 0xc0000000
 8006466:	f505 1580 	add.w	r5, r5, #1048576	; 0x100000
 800646a:	ea55 050a 	orrs.w	r5, r5, sl
 800646e:	d1dc      	bne.n	800642a <__ieee754_pow+0x32>
 8006470:	e9dd 3200 	ldrd	r3, r2, [sp]
 8006474:	18db      	adds	r3, r3, r3
 8006476:	f482 2200 	eor.w	r2, r2, #524288	; 0x80000
 800647a:	4152      	adcs	r2, r2
 800647c:	429d      	cmp	r5, r3
 800647e:	e7d0      	b.n	8006422 <__ieee754_pow+0x2a>
 8006480:	2d00      	cmp	r5, #0
 8006482:	da3b      	bge.n	80064fc <__ieee754_pow+0x104>
 8006484:	4b72      	ldr	r3, [pc, #456]	; (8006650 <__ieee754_pow+0x258>)
 8006486:	4598      	cmp	r8, r3
 8006488:	dc51      	bgt.n	800652e <__ieee754_pow+0x136>
 800648a:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 800648e:	4598      	cmp	r8, r3
 8006490:	f340 84ab 	ble.w	8006dea <__ieee754_pow+0x9f2>
 8006494:	ea4f 5328 	mov.w	r3, r8, asr #20
 8006498:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800649c:	2b14      	cmp	r3, #20
 800649e:	dd0f      	ble.n	80064c0 <__ieee754_pow+0xc8>
 80064a0:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 80064a4:	fa22 f103 	lsr.w	r1, r2, r3
 80064a8:	fa01 f303 	lsl.w	r3, r1, r3
 80064ac:	4293      	cmp	r3, r2
 80064ae:	f040 849c 	bne.w	8006dea <__ieee754_pow+0x9f2>
 80064b2:	f001 0101 	and.w	r1, r1, #1
 80064b6:	f1c1 0302 	rsb	r3, r1, #2
 80064ba:	9304      	str	r3, [sp, #16]
 80064bc:	b182      	cbz	r2, 80064e0 <__ieee754_pow+0xe8>
 80064be:	e05f      	b.n	8006580 <__ieee754_pow+0x188>
 80064c0:	2a00      	cmp	r2, #0
 80064c2:	d15b      	bne.n	800657c <__ieee754_pow+0x184>
 80064c4:	f1c3 0314 	rsb	r3, r3, #20
 80064c8:	fa48 f103 	asr.w	r1, r8, r3
 80064cc:	fa01 f303 	lsl.w	r3, r1, r3
 80064d0:	4543      	cmp	r3, r8
 80064d2:	f040 8487 	bne.w	8006de4 <__ieee754_pow+0x9ec>
 80064d6:	f001 0101 	and.w	r1, r1, #1
 80064da:	f1c1 0302 	rsb	r3, r1, #2
 80064de:	9304      	str	r3, [sp, #16]
 80064e0:	4b5c      	ldr	r3, [pc, #368]	; (8006654 <__ieee754_pow+0x25c>)
 80064e2:	4598      	cmp	r8, r3
 80064e4:	d132      	bne.n	800654c <__ieee754_pow+0x154>
 80064e6:	f1b9 0f00 	cmp.w	r9, #0
 80064ea:	f280 8477 	bge.w	8006ddc <__ieee754_pow+0x9e4>
 80064ee:	4959      	ldr	r1, [pc, #356]	; (8006654 <__ieee754_pow+0x25c>)
 80064f0:	4632      	mov	r2, r6
 80064f2:	463b      	mov	r3, r7
 80064f4:	2000      	movs	r0, #0
 80064f6:	f7fa f9b1 	bl	800085c <__aeabi_ddiv>
 80064fa:	e79c      	b.n	8006436 <__ieee754_pow+0x3e>
 80064fc:	2300      	movs	r3, #0
 80064fe:	9304      	str	r3, [sp, #16]
 8006500:	2a00      	cmp	r2, #0
 8006502:	d13d      	bne.n	8006580 <__ieee754_pow+0x188>
 8006504:	4b51      	ldr	r3, [pc, #324]	; (800664c <__ieee754_pow+0x254>)
 8006506:	4598      	cmp	r8, r3
 8006508:	d1ea      	bne.n	80064e0 <__ieee754_pow+0xe8>
 800650a:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 800650e:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 8006512:	ea53 030a 	orrs.w	r3, r3, sl
 8006516:	f000 8459 	beq.w	8006dcc <__ieee754_pow+0x9d4>
 800651a:	4b4f      	ldr	r3, [pc, #316]	; (8006658 <__ieee754_pow+0x260>)
 800651c:	429c      	cmp	r4, r3
 800651e:	dd08      	ble.n	8006532 <__ieee754_pow+0x13a>
 8006520:	f1b9 0f00 	cmp.w	r9, #0
 8006524:	f2c0 8456 	blt.w	8006dd4 <__ieee754_pow+0x9dc>
 8006528:	e9dd 0100 	ldrd	r0, r1, [sp]
 800652c:	e783      	b.n	8006436 <__ieee754_pow+0x3e>
 800652e:	2302      	movs	r3, #2
 8006530:	e7e5      	b.n	80064fe <__ieee754_pow+0x106>
 8006532:	f1b9 0f00 	cmp.w	r9, #0
 8006536:	f04f 0000 	mov.w	r0, #0
 800653a:	f04f 0100 	mov.w	r1, #0
 800653e:	f6bf af7a 	bge.w	8006436 <__ieee754_pow+0x3e>
 8006542:	e9dd 0300 	ldrd	r0, r3, [sp]
 8006546:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 800654a:	e774      	b.n	8006436 <__ieee754_pow+0x3e>
 800654c:	f1b9 4f80 	cmp.w	r9, #1073741824	; 0x40000000
 8006550:	d106      	bne.n	8006560 <__ieee754_pow+0x168>
 8006552:	4632      	mov	r2, r6
 8006554:	463b      	mov	r3, r7
 8006556:	4630      	mov	r0, r6
 8006558:	4639      	mov	r1, r7
 800655a:	f7fa f855 	bl	8000608 <__aeabi_dmul>
 800655e:	e76a      	b.n	8006436 <__ieee754_pow+0x3e>
 8006560:	4b3e      	ldr	r3, [pc, #248]	; (800665c <__ieee754_pow+0x264>)
 8006562:	4599      	cmp	r9, r3
 8006564:	d10c      	bne.n	8006580 <__ieee754_pow+0x188>
 8006566:	2d00      	cmp	r5, #0
 8006568:	db0a      	blt.n	8006580 <__ieee754_pow+0x188>
 800656a:	ec47 6b10 	vmov	d0, r6, r7
 800656e:	b009      	add	sp, #36	; 0x24
 8006570:	ecbd 8b06 	vpop	{d8-d10}
 8006574:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006578:	f001 b8fc 	b.w	8007774 <__ieee754_sqrt>
 800657c:	2300      	movs	r3, #0
 800657e:	9304      	str	r3, [sp, #16]
 8006580:	ec47 6b10 	vmov	d0, r6, r7
 8006584:	f000 fc62 	bl	8006e4c <fabs>
 8006588:	ec51 0b10 	vmov	r0, r1, d0
 800658c:	f1ba 0f00 	cmp.w	sl, #0
 8006590:	d129      	bne.n	80065e6 <__ieee754_pow+0x1ee>
 8006592:	b124      	cbz	r4, 800659e <__ieee754_pow+0x1a6>
 8006594:	4b2f      	ldr	r3, [pc, #188]	; (8006654 <__ieee754_pow+0x25c>)
 8006596:	f025 4240 	bic.w	r2, r5, #3221225472	; 0xc0000000
 800659a:	429a      	cmp	r2, r3
 800659c:	d123      	bne.n	80065e6 <__ieee754_pow+0x1ee>
 800659e:	f1b9 0f00 	cmp.w	r9, #0
 80065a2:	da05      	bge.n	80065b0 <__ieee754_pow+0x1b8>
 80065a4:	4602      	mov	r2, r0
 80065a6:	460b      	mov	r3, r1
 80065a8:	2000      	movs	r0, #0
 80065aa:	492a      	ldr	r1, [pc, #168]	; (8006654 <__ieee754_pow+0x25c>)
 80065ac:	f7fa f956 	bl	800085c <__aeabi_ddiv>
 80065b0:	2d00      	cmp	r5, #0
 80065b2:	f6bf af40 	bge.w	8006436 <__ieee754_pow+0x3e>
 80065b6:	9b04      	ldr	r3, [sp, #16]
 80065b8:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 80065bc:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 80065c0:	431c      	orrs	r4, r3
 80065c2:	d108      	bne.n	80065d6 <__ieee754_pow+0x1de>
 80065c4:	4602      	mov	r2, r0
 80065c6:	460b      	mov	r3, r1
 80065c8:	4610      	mov	r0, r2
 80065ca:	4619      	mov	r1, r3
 80065cc:	f7f9 fe64 	bl	8000298 <__aeabi_dsub>
 80065d0:	4602      	mov	r2, r0
 80065d2:	460b      	mov	r3, r1
 80065d4:	e78f      	b.n	80064f6 <__ieee754_pow+0xfe>
 80065d6:	9b04      	ldr	r3, [sp, #16]
 80065d8:	2b01      	cmp	r3, #1
 80065da:	f47f af2c 	bne.w	8006436 <__ieee754_pow+0x3e>
 80065de:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80065e2:	4619      	mov	r1, r3
 80065e4:	e727      	b.n	8006436 <__ieee754_pow+0x3e>
 80065e6:	0feb      	lsrs	r3, r5, #31
 80065e8:	3b01      	subs	r3, #1
 80065ea:	9306      	str	r3, [sp, #24]
 80065ec:	9a06      	ldr	r2, [sp, #24]
 80065ee:	9b04      	ldr	r3, [sp, #16]
 80065f0:	4313      	orrs	r3, r2
 80065f2:	d102      	bne.n	80065fa <__ieee754_pow+0x202>
 80065f4:	4632      	mov	r2, r6
 80065f6:	463b      	mov	r3, r7
 80065f8:	e7e6      	b.n	80065c8 <__ieee754_pow+0x1d0>
 80065fa:	4b19      	ldr	r3, [pc, #100]	; (8006660 <__ieee754_pow+0x268>)
 80065fc:	4598      	cmp	r8, r3
 80065fe:	f340 80fb 	ble.w	80067f8 <__ieee754_pow+0x400>
 8006602:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 8006606:	4598      	cmp	r8, r3
 8006608:	4b13      	ldr	r3, [pc, #76]	; (8006658 <__ieee754_pow+0x260>)
 800660a:	dd0c      	ble.n	8006626 <__ieee754_pow+0x22e>
 800660c:	429c      	cmp	r4, r3
 800660e:	dc0f      	bgt.n	8006630 <__ieee754_pow+0x238>
 8006610:	f1b9 0f00 	cmp.w	r9, #0
 8006614:	da0f      	bge.n	8006636 <__ieee754_pow+0x23e>
 8006616:	2000      	movs	r0, #0
 8006618:	b009      	add	sp, #36	; 0x24
 800661a:	ecbd 8b06 	vpop	{d8-d10}
 800661e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006622:	f001 b816 	b.w	8007652 <__math_oflow>
 8006626:	429c      	cmp	r4, r3
 8006628:	dbf2      	blt.n	8006610 <__ieee754_pow+0x218>
 800662a:	4b0a      	ldr	r3, [pc, #40]	; (8006654 <__ieee754_pow+0x25c>)
 800662c:	429c      	cmp	r4, r3
 800662e:	dd19      	ble.n	8006664 <__ieee754_pow+0x26c>
 8006630:	f1b9 0f00 	cmp.w	r9, #0
 8006634:	dcef      	bgt.n	8006616 <__ieee754_pow+0x21e>
 8006636:	2000      	movs	r0, #0
 8006638:	b009      	add	sp, #36	; 0x24
 800663a:	ecbd 8b06 	vpop	{d8-d10}
 800663e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006642:	f000 bffd 	b.w	8007640 <__math_uflow>
 8006646:	bf00      	nop
 8006648:	fff00000 	.word	0xfff00000
 800664c:	7ff00000 	.word	0x7ff00000
 8006650:	433fffff 	.word	0x433fffff
 8006654:	3ff00000 	.word	0x3ff00000
 8006658:	3fefffff 	.word	0x3fefffff
 800665c:	3fe00000 	.word	0x3fe00000
 8006660:	41e00000 	.word	0x41e00000
 8006664:	4b60      	ldr	r3, [pc, #384]	; (80067e8 <__ieee754_pow+0x3f0>)
 8006666:	2200      	movs	r2, #0
 8006668:	f7f9 fe16 	bl	8000298 <__aeabi_dsub>
 800666c:	a354      	add	r3, pc, #336	; (adr r3, 80067c0 <__ieee754_pow+0x3c8>)
 800666e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006672:	4604      	mov	r4, r0
 8006674:	460d      	mov	r5, r1
 8006676:	f7f9 ffc7 	bl	8000608 <__aeabi_dmul>
 800667a:	a353      	add	r3, pc, #332	; (adr r3, 80067c8 <__ieee754_pow+0x3d0>)
 800667c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006680:	4606      	mov	r6, r0
 8006682:	460f      	mov	r7, r1
 8006684:	4620      	mov	r0, r4
 8006686:	4629      	mov	r1, r5
 8006688:	f7f9 ffbe 	bl	8000608 <__aeabi_dmul>
 800668c:	4b57      	ldr	r3, [pc, #348]	; (80067ec <__ieee754_pow+0x3f4>)
 800668e:	4682      	mov	sl, r0
 8006690:	468b      	mov	fp, r1
 8006692:	2200      	movs	r2, #0
 8006694:	4620      	mov	r0, r4
 8006696:	4629      	mov	r1, r5
 8006698:	f7f9 ffb6 	bl	8000608 <__aeabi_dmul>
 800669c:	4602      	mov	r2, r0
 800669e:	460b      	mov	r3, r1
 80066a0:	a14b      	add	r1, pc, #300	; (adr r1, 80067d0 <__ieee754_pow+0x3d8>)
 80066a2:	e9d1 0100 	ldrd	r0, r1, [r1]
 80066a6:	f7f9 fdf7 	bl	8000298 <__aeabi_dsub>
 80066aa:	4622      	mov	r2, r4
 80066ac:	462b      	mov	r3, r5
 80066ae:	f7f9 ffab 	bl	8000608 <__aeabi_dmul>
 80066b2:	4602      	mov	r2, r0
 80066b4:	460b      	mov	r3, r1
 80066b6:	2000      	movs	r0, #0
 80066b8:	494d      	ldr	r1, [pc, #308]	; (80067f0 <__ieee754_pow+0x3f8>)
 80066ba:	f7f9 fded 	bl	8000298 <__aeabi_dsub>
 80066be:	4622      	mov	r2, r4
 80066c0:	4680      	mov	r8, r0
 80066c2:	4689      	mov	r9, r1
 80066c4:	462b      	mov	r3, r5
 80066c6:	4620      	mov	r0, r4
 80066c8:	4629      	mov	r1, r5
 80066ca:	f7f9 ff9d 	bl	8000608 <__aeabi_dmul>
 80066ce:	4602      	mov	r2, r0
 80066d0:	460b      	mov	r3, r1
 80066d2:	4640      	mov	r0, r8
 80066d4:	4649      	mov	r1, r9
 80066d6:	f7f9 ff97 	bl	8000608 <__aeabi_dmul>
 80066da:	a33f      	add	r3, pc, #252	; (adr r3, 80067d8 <__ieee754_pow+0x3e0>)
 80066dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80066e0:	f7f9 ff92 	bl	8000608 <__aeabi_dmul>
 80066e4:	4602      	mov	r2, r0
 80066e6:	460b      	mov	r3, r1
 80066e8:	4650      	mov	r0, sl
 80066ea:	4659      	mov	r1, fp
 80066ec:	f7f9 fdd4 	bl	8000298 <__aeabi_dsub>
 80066f0:	4602      	mov	r2, r0
 80066f2:	460b      	mov	r3, r1
 80066f4:	4680      	mov	r8, r0
 80066f6:	4689      	mov	r9, r1
 80066f8:	4630      	mov	r0, r6
 80066fa:	4639      	mov	r1, r7
 80066fc:	f7f9 fdce 	bl	800029c <__adddf3>
 8006700:	2000      	movs	r0, #0
 8006702:	4632      	mov	r2, r6
 8006704:	463b      	mov	r3, r7
 8006706:	4604      	mov	r4, r0
 8006708:	460d      	mov	r5, r1
 800670a:	f7f9 fdc5 	bl	8000298 <__aeabi_dsub>
 800670e:	4602      	mov	r2, r0
 8006710:	460b      	mov	r3, r1
 8006712:	4640      	mov	r0, r8
 8006714:	4649      	mov	r1, r9
 8006716:	f7f9 fdbf 	bl	8000298 <__aeabi_dsub>
 800671a:	9b04      	ldr	r3, [sp, #16]
 800671c:	9a06      	ldr	r2, [sp, #24]
 800671e:	3b01      	subs	r3, #1
 8006720:	4313      	orrs	r3, r2
 8006722:	4682      	mov	sl, r0
 8006724:	468b      	mov	fp, r1
 8006726:	f040 81e7 	bne.w	8006af8 <__ieee754_pow+0x700>
 800672a:	ed9f 7b2d 	vldr	d7, [pc, #180]	; 80067e0 <__ieee754_pow+0x3e8>
 800672e:	eeb0 8a47 	vmov.f32	s16, s14
 8006732:	eef0 8a67 	vmov.f32	s17, s15
 8006736:	e9dd 6700 	ldrd	r6, r7, [sp]
 800673a:	2600      	movs	r6, #0
 800673c:	4632      	mov	r2, r6
 800673e:	463b      	mov	r3, r7
 8006740:	e9dd 0100 	ldrd	r0, r1, [sp]
 8006744:	f7f9 fda8 	bl	8000298 <__aeabi_dsub>
 8006748:	4622      	mov	r2, r4
 800674a:	462b      	mov	r3, r5
 800674c:	f7f9 ff5c 	bl	8000608 <__aeabi_dmul>
 8006750:	e9dd 2300 	ldrd	r2, r3, [sp]
 8006754:	4680      	mov	r8, r0
 8006756:	4689      	mov	r9, r1
 8006758:	4650      	mov	r0, sl
 800675a:	4659      	mov	r1, fp
 800675c:	f7f9 ff54 	bl	8000608 <__aeabi_dmul>
 8006760:	4602      	mov	r2, r0
 8006762:	460b      	mov	r3, r1
 8006764:	4640      	mov	r0, r8
 8006766:	4649      	mov	r1, r9
 8006768:	f7f9 fd98 	bl	800029c <__adddf3>
 800676c:	4632      	mov	r2, r6
 800676e:	463b      	mov	r3, r7
 8006770:	4680      	mov	r8, r0
 8006772:	4689      	mov	r9, r1
 8006774:	4620      	mov	r0, r4
 8006776:	4629      	mov	r1, r5
 8006778:	f7f9 ff46 	bl	8000608 <__aeabi_dmul>
 800677c:	460b      	mov	r3, r1
 800677e:	4604      	mov	r4, r0
 8006780:	460d      	mov	r5, r1
 8006782:	4602      	mov	r2, r0
 8006784:	4649      	mov	r1, r9
 8006786:	4640      	mov	r0, r8
 8006788:	f7f9 fd88 	bl	800029c <__adddf3>
 800678c:	4b19      	ldr	r3, [pc, #100]	; (80067f4 <__ieee754_pow+0x3fc>)
 800678e:	4299      	cmp	r1, r3
 8006790:	ec45 4b19 	vmov	d9, r4, r5
 8006794:	4606      	mov	r6, r0
 8006796:	460f      	mov	r7, r1
 8006798:	468b      	mov	fp, r1
 800679a:	f340 82f0 	ble.w	8006d7e <__ieee754_pow+0x986>
 800679e:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 80067a2:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 80067a6:	4303      	orrs	r3, r0
 80067a8:	f000 81e4 	beq.w	8006b74 <__ieee754_pow+0x77c>
 80067ac:	ec51 0b18 	vmov	r0, r1, d8
 80067b0:	2200      	movs	r2, #0
 80067b2:	2300      	movs	r3, #0
 80067b4:	f7fa f99a 	bl	8000aec <__aeabi_dcmplt>
 80067b8:	3800      	subs	r0, #0
 80067ba:	bf18      	it	ne
 80067bc:	2001      	movne	r0, #1
 80067be:	e72b      	b.n	8006618 <__ieee754_pow+0x220>
 80067c0:	60000000 	.word	0x60000000
 80067c4:	3ff71547 	.word	0x3ff71547
 80067c8:	f85ddf44 	.word	0xf85ddf44
 80067cc:	3e54ae0b 	.word	0x3e54ae0b
 80067d0:	55555555 	.word	0x55555555
 80067d4:	3fd55555 	.word	0x3fd55555
 80067d8:	652b82fe 	.word	0x652b82fe
 80067dc:	3ff71547 	.word	0x3ff71547
 80067e0:	00000000 	.word	0x00000000
 80067e4:	bff00000 	.word	0xbff00000
 80067e8:	3ff00000 	.word	0x3ff00000
 80067ec:	3fd00000 	.word	0x3fd00000
 80067f0:	3fe00000 	.word	0x3fe00000
 80067f4:	408fffff 	.word	0x408fffff
 80067f8:	4bd5      	ldr	r3, [pc, #852]	; (8006b50 <__ieee754_pow+0x758>)
 80067fa:	402b      	ands	r3, r5
 80067fc:	2200      	movs	r2, #0
 80067fe:	b92b      	cbnz	r3, 800680c <__ieee754_pow+0x414>
 8006800:	4bd4      	ldr	r3, [pc, #848]	; (8006b54 <__ieee754_pow+0x75c>)
 8006802:	f7f9 ff01 	bl	8000608 <__aeabi_dmul>
 8006806:	f06f 0234 	mvn.w	r2, #52	; 0x34
 800680a:	460c      	mov	r4, r1
 800680c:	1523      	asrs	r3, r4, #20
 800680e:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8006812:	4413      	add	r3, r2
 8006814:	9305      	str	r3, [sp, #20]
 8006816:	4bd0      	ldr	r3, [pc, #832]	; (8006b58 <__ieee754_pow+0x760>)
 8006818:	f3c4 0413 	ubfx	r4, r4, #0, #20
 800681c:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 8006820:	429c      	cmp	r4, r3
 8006822:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 8006826:	dd08      	ble.n	800683a <__ieee754_pow+0x442>
 8006828:	4bcc      	ldr	r3, [pc, #816]	; (8006b5c <__ieee754_pow+0x764>)
 800682a:	429c      	cmp	r4, r3
 800682c:	f340 8162 	ble.w	8006af4 <__ieee754_pow+0x6fc>
 8006830:	9b05      	ldr	r3, [sp, #20]
 8006832:	3301      	adds	r3, #1
 8006834:	9305      	str	r3, [sp, #20]
 8006836:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 800683a:	2400      	movs	r4, #0
 800683c:	00e3      	lsls	r3, r4, #3
 800683e:	9307      	str	r3, [sp, #28]
 8006840:	4bc7      	ldr	r3, [pc, #796]	; (8006b60 <__ieee754_pow+0x768>)
 8006842:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8006846:	ed93 7b00 	vldr	d7, [r3]
 800684a:	4629      	mov	r1, r5
 800684c:	ec53 2b17 	vmov	r2, r3, d7
 8006850:	eeb0 9a47 	vmov.f32	s18, s14
 8006854:	eef0 9a67 	vmov.f32	s19, s15
 8006858:	4682      	mov	sl, r0
 800685a:	f7f9 fd1d 	bl	8000298 <__aeabi_dsub>
 800685e:	4652      	mov	r2, sl
 8006860:	4606      	mov	r6, r0
 8006862:	460f      	mov	r7, r1
 8006864:	462b      	mov	r3, r5
 8006866:	ec51 0b19 	vmov	r0, r1, d9
 800686a:	f7f9 fd17 	bl	800029c <__adddf3>
 800686e:	4602      	mov	r2, r0
 8006870:	460b      	mov	r3, r1
 8006872:	2000      	movs	r0, #0
 8006874:	49bb      	ldr	r1, [pc, #748]	; (8006b64 <__ieee754_pow+0x76c>)
 8006876:	f7f9 fff1 	bl	800085c <__aeabi_ddiv>
 800687a:	ec41 0b1a 	vmov	d10, r0, r1
 800687e:	4602      	mov	r2, r0
 8006880:	460b      	mov	r3, r1
 8006882:	4630      	mov	r0, r6
 8006884:	4639      	mov	r1, r7
 8006886:	f7f9 febf 	bl	8000608 <__aeabi_dmul>
 800688a:	2300      	movs	r3, #0
 800688c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006890:	9302      	str	r3, [sp, #8]
 8006892:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 8006896:	46ab      	mov	fp, r5
 8006898:	106d      	asrs	r5, r5, #1
 800689a:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 800689e:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 80068a2:	ec41 0b18 	vmov	d8, r0, r1
 80068a6:	eb05 4384 	add.w	r3, r5, r4, lsl #18
 80068aa:	2200      	movs	r2, #0
 80068ac:	4640      	mov	r0, r8
 80068ae:	4649      	mov	r1, r9
 80068b0:	4614      	mov	r4, r2
 80068b2:	461d      	mov	r5, r3
 80068b4:	f7f9 fea8 	bl	8000608 <__aeabi_dmul>
 80068b8:	4602      	mov	r2, r0
 80068ba:	460b      	mov	r3, r1
 80068bc:	4630      	mov	r0, r6
 80068be:	4639      	mov	r1, r7
 80068c0:	f7f9 fcea 	bl	8000298 <__aeabi_dsub>
 80068c4:	ec53 2b19 	vmov	r2, r3, d9
 80068c8:	4606      	mov	r6, r0
 80068ca:	460f      	mov	r7, r1
 80068cc:	4620      	mov	r0, r4
 80068ce:	4629      	mov	r1, r5
 80068d0:	f7f9 fce2 	bl	8000298 <__aeabi_dsub>
 80068d4:	4602      	mov	r2, r0
 80068d6:	460b      	mov	r3, r1
 80068d8:	4650      	mov	r0, sl
 80068da:	4659      	mov	r1, fp
 80068dc:	f7f9 fcdc 	bl	8000298 <__aeabi_dsub>
 80068e0:	4642      	mov	r2, r8
 80068e2:	464b      	mov	r3, r9
 80068e4:	f7f9 fe90 	bl	8000608 <__aeabi_dmul>
 80068e8:	4602      	mov	r2, r0
 80068ea:	460b      	mov	r3, r1
 80068ec:	4630      	mov	r0, r6
 80068ee:	4639      	mov	r1, r7
 80068f0:	f7f9 fcd2 	bl	8000298 <__aeabi_dsub>
 80068f4:	ec53 2b1a 	vmov	r2, r3, d10
 80068f8:	f7f9 fe86 	bl	8000608 <__aeabi_dmul>
 80068fc:	ec53 2b18 	vmov	r2, r3, d8
 8006900:	ec41 0b19 	vmov	d9, r0, r1
 8006904:	ec51 0b18 	vmov	r0, r1, d8
 8006908:	f7f9 fe7e 	bl	8000608 <__aeabi_dmul>
 800690c:	a37c      	add	r3, pc, #496	; (adr r3, 8006b00 <__ieee754_pow+0x708>)
 800690e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006912:	4604      	mov	r4, r0
 8006914:	460d      	mov	r5, r1
 8006916:	f7f9 fe77 	bl	8000608 <__aeabi_dmul>
 800691a:	a37b      	add	r3, pc, #492	; (adr r3, 8006b08 <__ieee754_pow+0x710>)
 800691c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006920:	f7f9 fcbc 	bl	800029c <__adddf3>
 8006924:	4622      	mov	r2, r4
 8006926:	462b      	mov	r3, r5
 8006928:	f7f9 fe6e 	bl	8000608 <__aeabi_dmul>
 800692c:	a378      	add	r3, pc, #480	; (adr r3, 8006b10 <__ieee754_pow+0x718>)
 800692e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006932:	f7f9 fcb3 	bl	800029c <__adddf3>
 8006936:	4622      	mov	r2, r4
 8006938:	462b      	mov	r3, r5
 800693a:	f7f9 fe65 	bl	8000608 <__aeabi_dmul>
 800693e:	a376      	add	r3, pc, #472	; (adr r3, 8006b18 <__ieee754_pow+0x720>)
 8006940:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006944:	f7f9 fcaa 	bl	800029c <__adddf3>
 8006948:	4622      	mov	r2, r4
 800694a:	462b      	mov	r3, r5
 800694c:	f7f9 fe5c 	bl	8000608 <__aeabi_dmul>
 8006950:	a373      	add	r3, pc, #460	; (adr r3, 8006b20 <__ieee754_pow+0x728>)
 8006952:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006956:	f7f9 fca1 	bl	800029c <__adddf3>
 800695a:	4622      	mov	r2, r4
 800695c:	462b      	mov	r3, r5
 800695e:	f7f9 fe53 	bl	8000608 <__aeabi_dmul>
 8006962:	a371      	add	r3, pc, #452	; (adr r3, 8006b28 <__ieee754_pow+0x730>)
 8006964:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006968:	f7f9 fc98 	bl	800029c <__adddf3>
 800696c:	4622      	mov	r2, r4
 800696e:	4606      	mov	r6, r0
 8006970:	460f      	mov	r7, r1
 8006972:	462b      	mov	r3, r5
 8006974:	4620      	mov	r0, r4
 8006976:	4629      	mov	r1, r5
 8006978:	f7f9 fe46 	bl	8000608 <__aeabi_dmul>
 800697c:	4602      	mov	r2, r0
 800697e:	460b      	mov	r3, r1
 8006980:	4630      	mov	r0, r6
 8006982:	4639      	mov	r1, r7
 8006984:	f7f9 fe40 	bl	8000608 <__aeabi_dmul>
 8006988:	4642      	mov	r2, r8
 800698a:	4604      	mov	r4, r0
 800698c:	460d      	mov	r5, r1
 800698e:	464b      	mov	r3, r9
 8006990:	ec51 0b18 	vmov	r0, r1, d8
 8006994:	f7f9 fc82 	bl	800029c <__adddf3>
 8006998:	ec53 2b19 	vmov	r2, r3, d9
 800699c:	f7f9 fe34 	bl	8000608 <__aeabi_dmul>
 80069a0:	4622      	mov	r2, r4
 80069a2:	462b      	mov	r3, r5
 80069a4:	f7f9 fc7a 	bl	800029c <__adddf3>
 80069a8:	4642      	mov	r2, r8
 80069aa:	4682      	mov	sl, r0
 80069ac:	468b      	mov	fp, r1
 80069ae:	464b      	mov	r3, r9
 80069b0:	4640      	mov	r0, r8
 80069b2:	4649      	mov	r1, r9
 80069b4:	f7f9 fe28 	bl	8000608 <__aeabi_dmul>
 80069b8:	4b6b      	ldr	r3, [pc, #428]	; (8006b68 <__ieee754_pow+0x770>)
 80069ba:	2200      	movs	r2, #0
 80069bc:	4606      	mov	r6, r0
 80069be:	460f      	mov	r7, r1
 80069c0:	f7f9 fc6c 	bl	800029c <__adddf3>
 80069c4:	4652      	mov	r2, sl
 80069c6:	465b      	mov	r3, fp
 80069c8:	f7f9 fc68 	bl	800029c <__adddf3>
 80069cc:	2000      	movs	r0, #0
 80069ce:	4604      	mov	r4, r0
 80069d0:	460d      	mov	r5, r1
 80069d2:	4602      	mov	r2, r0
 80069d4:	460b      	mov	r3, r1
 80069d6:	4640      	mov	r0, r8
 80069d8:	4649      	mov	r1, r9
 80069da:	f7f9 fe15 	bl	8000608 <__aeabi_dmul>
 80069de:	4b62      	ldr	r3, [pc, #392]	; (8006b68 <__ieee754_pow+0x770>)
 80069e0:	4680      	mov	r8, r0
 80069e2:	4689      	mov	r9, r1
 80069e4:	2200      	movs	r2, #0
 80069e6:	4620      	mov	r0, r4
 80069e8:	4629      	mov	r1, r5
 80069ea:	f7f9 fc55 	bl	8000298 <__aeabi_dsub>
 80069ee:	4632      	mov	r2, r6
 80069f0:	463b      	mov	r3, r7
 80069f2:	f7f9 fc51 	bl	8000298 <__aeabi_dsub>
 80069f6:	4602      	mov	r2, r0
 80069f8:	460b      	mov	r3, r1
 80069fa:	4650      	mov	r0, sl
 80069fc:	4659      	mov	r1, fp
 80069fe:	f7f9 fc4b 	bl	8000298 <__aeabi_dsub>
 8006a02:	ec53 2b18 	vmov	r2, r3, d8
 8006a06:	f7f9 fdff 	bl	8000608 <__aeabi_dmul>
 8006a0a:	4622      	mov	r2, r4
 8006a0c:	4606      	mov	r6, r0
 8006a0e:	460f      	mov	r7, r1
 8006a10:	462b      	mov	r3, r5
 8006a12:	ec51 0b19 	vmov	r0, r1, d9
 8006a16:	f7f9 fdf7 	bl	8000608 <__aeabi_dmul>
 8006a1a:	4602      	mov	r2, r0
 8006a1c:	460b      	mov	r3, r1
 8006a1e:	4630      	mov	r0, r6
 8006a20:	4639      	mov	r1, r7
 8006a22:	f7f9 fc3b 	bl	800029c <__adddf3>
 8006a26:	4606      	mov	r6, r0
 8006a28:	460f      	mov	r7, r1
 8006a2a:	4602      	mov	r2, r0
 8006a2c:	460b      	mov	r3, r1
 8006a2e:	4640      	mov	r0, r8
 8006a30:	4649      	mov	r1, r9
 8006a32:	f7f9 fc33 	bl	800029c <__adddf3>
 8006a36:	a33e      	add	r3, pc, #248	; (adr r3, 8006b30 <__ieee754_pow+0x738>)
 8006a38:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a3c:	2000      	movs	r0, #0
 8006a3e:	4604      	mov	r4, r0
 8006a40:	460d      	mov	r5, r1
 8006a42:	f7f9 fde1 	bl	8000608 <__aeabi_dmul>
 8006a46:	4642      	mov	r2, r8
 8006a48:	ec41 0b18 	vmov	d8, r0, r1
 8006a4c:	464b      	mov	r3, r9
 8006a4e:	4620      	mov	r0, r4
 8006a50:	4629      	mov	r1, r5
 8006a52:	f7f9 fc21 	bl	8000298 <__aeabi_dsub>
 8006a56:	4602      	mov	r2, r0
 8006a58:	460b      	mov	r3, r1
 8006a5a:	4630      	mov	r0, r6
 8006a5c:	4639      	mov	r1, r7
 8006a5e:	f7f9 fc1b 	bl	8000298 <__aeabi_dsub>
 8006a62:	a335      	add	r3, pc, #212	; (adr r3, 8006b38 <__ieee754_pow+0x740>)
 8006a64:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a68:	f7f9 fdce 	bl	8000608 <__aeabi_dmul>
 8006a6c:	a334      	add	r3, pc, #208	; (adr r3, 8006b40 <__ieee754_pow+0x748>)
 8006a6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a72:	4606      	mov	r6, r0
 8006a74:	460f      	mov	r7, r1
 8006a76:	4620      	mov	r0, r4
 8006a78:	4629      	mov	r1, r5
 8006a7a:	f7f9 fdc5 	bl	8000608 <__aeabi_dmul>
 8006a7e:	4602      	mov	r2, r0
 8006a80:	460b      	mov	r3, r1
 8006a82:	4630      	mov	r0, r6
 8006a84:	4639      	mov	r1, r7
 8006a86:	f7f9 fc09 	bl	800029c <__adddf3>
 8006a8a:	9a07      	ldr	r2, [sp, #28]
 8006a8c:	4b37      	ldr	r3, [pc, #220]	; (8006b6c <__ieee754_pow+0x774>)
 8006a8e:	4413      	add	r3, r2
 8006a90:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a94:	f7f9 fc02 	bl	800029c <__adddf3>
 8006a98:	4682      	mov	sl, r0
 8006a9a:	9805      	ldr	r0, [sp, #20]
 8006a9c:	468b      	mov	fp, r1
 8006a9e:	f7f9 fd49 	bl	8000534 <__aeabi_i2d>
 8006aa2:	9a07      	ldr	r2, [sp, #28]
 8006aa4:	4b32      	ldr	r3, [pc, #200]	; (8006b70 <__ieee754_pow+0x778>)
 8006aa6:	4413      	add	r3, r2
 8006aa8:	e9d3 8900 	ldrd	r8, r9, [r3]
 8006aac:	4606      	mov	r6, r0
 8006aae:	460f      	mov	r7, r1
 8006ab0:	4652      	mov	r2, sl
 8006ab2:	465b      	mov	r3, fp
 8006ab4:	ec51 0b18 	vmov	r0, r1, d8
 8006ab8:	f7f9 fbf0 	bl	800029c <__adddf3>
 8006abc:	4642      	mov	r2, r8
 8006abe:	464b      	mov	r3, r9
 8006ac0:	f7f9 fbec 	bl	800029c <__adddf3>
 8006ac4:	4632      	mov	r2, r6
 8006ac6:	463b      	mov	r3, r7
 8006ac8:	f7f9 fbe8 	bl	800029c <__adddf3>
 8006acc:	2000      	movs	r0, #0
 8006ace:	4632      	mov	r2, r6
 8006ad0:	463b      	mov	r3, r7
 8006ad2:	4604      	mov	r4, r0
 8006ad4:	460d      	mov	r5, r1
 8006ad6:	f7f9 fbdf 	bl	8000298 <__aeabi_dsub>
 8006ada:	4642      	mov	r2, r8
 8006adc:	464b      	mov	r3, r9
 8006ade:	f7f9 fbdb 	bl	8000298 <__aeabi_dsub>
 8006ae2:	ec53 2b18 	vmov	r2, r3, d8
 8006ae6:	f7f9 fbd7 	bl	8000298 <__aeabi_dsub>
 8006aea:	4602      	mov	r2, r0
 8006aec:	460b      	mov	r3, r1
 8006aee:	4650      	mov	r0, sl
 8006af0:	4659      	mov	r1, fp
 8006af2:	e610      	b.n	8006716 <__ieee754_pow+0x31e>
 8006af4:	2401      	movs	r4, #1
 8006af6:	e6a1      	b.n	800683c <__ieee754_pow+0x444>
 8006af8:	ed9f 7b13 	vldr	d7, [pc, #76]	; 8006b48 <__ieee754_pow+0x750>
 8006afc:	e617      	b.n	800672e <__ieee754_pow+0x336>
 8006afe:	bf00      	nop
 8006b00:	4a454eef 	.word	0x4a454eef
 8006b04:	3fca7e28 	.word	0x3fca7e28
 8006b08:	93c9db65 	.word	0x93c9db65
 8006b0c:	3fcd864a 	.word	0x3fcd864a
 8006b10:	a91d4101 	.word	0xa91d4101
 8006b14:	3fd17460 	.word	0x3fd17460
 8006b18:	518f264d 	.word	0x518f264d
 8006b1c:	3fd55555 	.word	0x3fd55555
 8006b20:	db6fabff 	.word	0xdb6fabff
 8006b24:	3fdb6db6 	.word	0x3fdb6db6
 8006b28:	33333303 	.word	0x33333303
 8006b2c:	3fe33333 	.word	0x3fe33333
 8006b30:	e0000000 	.word	0xe0000000
 8006b34:	3feec709 	.word	0x3feec709
 8006b38:	dc3a03fd 	.word	0xdc3a03fd
 8006b3c:	3feec709 	.word	0x3feec709
 8006b40:	145b01f5 	.word	0x145b01f5
 8006b44:	be3e2fe0 	.word	0xbe3e2fe0
 8006b48:	00000000 	.word	0x00000000
 8006b4c:	3ff00000 	.word	0x3ff00000
 8006b50:	7ff00000 	.word	0x7ff00000
 8006b54:	43400000 	.word	0x43400000
 8006b58:	0003988e 	.word	0x0003988e
 8006b5c:	000bb679 	.word	0x000bb679
 8006b60:	08007af0 	.word	0x08007af0
 8006b64:	3ff00000 	.word	0x3ff00000
 8006b68:	40080000 	.word	0x40080000
 8006b6c:	08007b10 	.word	0x08007b10
 8006b70:	08007b00 	.word	0x08007b00
 8006b74:	a3b3      	add	r3, pc, #716	; (adr r3, 8006e44 <__ieee754_pow+0xa4c>)
 8006b76:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b7a:	4640      	mov	r0, r8
 8006b7c:	4649      	mov	r1, r9
 8006b7e:	f7f9 fb8d 	bl	800029c <__adddf3>
 8006b82:	4622      	mov	r2, r4
 8006b84:	ec41 0b1a 	vmov	d10, r0, r1
 8006b88:	462b      	mov	r3, r5
 8006b8a:	4630      	mov	r0, r6
 8006b8c:	4639      	mov	r1, r7
 8006b8e:	f7f9 fb83 	bl	8000298 <__aeabi_dsub>
 8006b92:	4602      	mov	r2, r0
 8006b94:	460b      	mov	r3, r1
 8006b96:	ec51 0b1a 	vmov	r0, r1, d10
 8006b9a:	f7f9 ffc5 	bl	8000b28 <__aeabi_dcmpgt>
 8006b9e:	2800      	cmp	r0, #0
 8006ba0:	f47f ae04 	bne.w	80067ac <__ieee754_pow+0x3b4>
 8006ba4:	4aa2      	ldr	r2, [pc, #648]	; (8006e30 <__ieee754_pow+0xa38>)
 8006ba6:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8006baa:	4293      	cmp	r3, r2
 8006bac:	f340 8107 	ble.w	8006dbe <__ieee754_pow+0x9c6>
 8006bb0:	151b      	asrs	r3, r3, #20
 8006bb2:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 8006bb6:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 8006bba:	fa4a fa03 	asr.w	sl, sl, r3
 8006bbe:	44da      	add	sl, fp
 8006bc0:	f3ca 510a 	ubfx	r1, sl, #20, #11
 8006bc4:	489b      	ldr	r0, [pc, #620]	; (8006e34 <__ieee754_pow+0xa3c>)
 8006bc6:	f2a1 31ff 	subw	r1, r1, #1023	; 0x3ff
 8006bca:	4108      	asrs	r0, r1
 8006bcc:	ea00 030a 	and.w	r3, r0, sl
 8006bd0:	f3ca 0a13 	ubfx	sl, sl, #0, #20
 8006bd4:	f1c1 0114 	rsb	r1, r1, #20
 8006bd8:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 8006bdc:	fa4a fa01 	asr.w	sl, sl, r1
 8006be0:	f1bb 0f00 	cmp.w	fp, #0
 8006be4:	f04f 0200 	mov.w	r2, #0
 8006be8:	4620      	mov	r0, r4
 8006bea:	4629      	mov	r1, r5
 8006bec:	bfb8      	it	lt
 8006bee:	f1ca 0a00 	rsblt	sl, sl, #0
 8006bf2:	f7f9 fb51 	bl	8000298 <__aeabi_dsub>
 8006bf6:	ec41 0b19 	vmov	d9, r0, r1
 8006bfa:	4642      	mov	r2, r8
 8006bfc:	464b      	mov	r3, r9
 8006bfe:	ec51 0b19 	vmov	r0, r1, d9
 8006c02:	f7f9 fb4b 	bl	800029c <__adddf3>
 8006c06:	a37a      	add	r3, pc, #488	; (adr r3, 8006df0 <__ieee754_pow+0x9f8>)
 8006c08:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c0c:	2000      	movs	r0, #0
 8006c0e:	4604      	mov	r4, r0
 8006c10:	460d      	mov	r5, r1
 8006c12:	f7f9 fcf9 	bl	8000608 <__aeabi_dmul>
 8006c16:	ec53 2b19 	vmov	r2, r3, d9
 8006c1a:	4606      	mov	r6, r0
 8006c1c:	460f      	mov	r7, r1
 8006c1e:	4620      	mov	r0, r4
 8006c20:	4629      	mov	r1, r5
 8006c22:	f7f9 fb39 	bl	8000298 <__aeabi_dsub>
 8006c26:	4602      	mov	r2, r0
 8006c28:	460b      	mov	r3, r1
 8006c2a:	4640      	mov	r0, r8
 8006c2c:	4649      	mov	r1, r9
 8006c2e:	f7f9 fb33 	bl	8000298 <__aeabi_dsub>
 8006c32:	a371      	add	r3, pc, #452	; (adr r3, 8006df8 <__ieee754_pow+0xa00>)
 8006c34:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c38:	f7f9 fce6 	bl	8000608 <__aeabi_dmul>
 8006c3c:	a370      	add	r3, pc, #448	; (adr r3, 8006e00 <__ieee754_pow+0xa08>)
 8006c3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c42:	4680      	mov	r8, r0
 8006c44:	4689      	mov	r9, r1
 8006c46:	4620      	mov	r0, r4
 8006c48:	4629      	mov	r1, r5
 8006c4a:	f7f9 fcdd 	bl	8000608 <__aeabi_dmul>
 8006c4e:	4602      	mov	r2, r0
 8006c50:	460b      	mov	r3, r1
 8006c52:	4640      	mov	r0, r8
 8006c54:	4649      	mov	r1, r9
 8006c56:	f7f9 fb21 	bl	800029c <__adddf3>
 8006c5a:	4604      	mov	r4, r0
 8006c5c:	460d      	mov	r5, r1
 8006c5e:	4602      	mov	r2, r0
 8006c60:	460b      	mov	r3, r1
 8006c62:	4630      	mov	r0, r6
 8006c64:	4639      	mov	r1, r7
 8006c66:	f7f9 fb19 	bl	800029c <__adddf3>
 8006c6a:	4632      	mov	r2, r6
 8006c6c:	463b      	mov	r3, r7
 8006c6e:	4680      	mov	r8, r0
 8006c70:	4689      	mov	r9, r1
 8006c72:	f7f9 fb11 	bl	8000298 <__aeabi_dsub>
 8006c76:	4602      	mov	r2, r0
 8006c78:	460b      	mov	r3, r1
 8006c7a:	4620      	mov	r0, r4
 8006c7c:	4629      	mov	r1, r5
 8006c7e:	f7f9 fb0b 	bl	8000298 <__aeabi_dsub>
 8006c82:	4642      	mov	r2, r8
 8006c84:	4606      	mov	r6, r0
 8006c86:	460f      	mov	r7, r1
 8006c88:	464b      	mov	r3, r9
 8006c8a:	4640      	mov	r0, r8
 8006c8c:	4649      	mov	r1, r9
 8006c8e:	f7f9 fcbb 	bl	8000608 <__aeabi_dmul>
 8006c92:	a35d      	add	r3, pc, #372	; (adr r3, 8006e08 <__ieee754_pow+0xa10>)
 8006c94:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c98:	4604      	mov	r4, r0
 8006c9a:	460d      	mov	r5, r1
 8006c9c:	f7f9 fcb4 	bl	8000608 <__aeabi_dmul>
 8006ca0:	a35b      	add	r3, pc, #364	; (adr r3, 8006e10 <__ieee754_pow+0xa18>)
 8006ca2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006ca6:	f7f9 faf7 	bl	8000298 <__aeabi_dsub>
 8006caa:	4622      	mov	r2, r4
 8006cac:	462b      	mov	r3, r5
 8006cae:	f7f9 fcab 	bl	8000608 <__aeabi_dmul>
 8006cb2:	a359      	add	r3, pc, #356	; (adr r3, 8006e18 <__ieee754_pow+0xa20>)
 8006cb4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006cb8:	f7f9 faf0 	bl	800029c <__adddf3>
 8006cbc:	4622      	mov	r2, r4
 8006cbe:	462b      	mov	r3, r5
 8006cc0:	f7f9 fca2 	bl	8000608 <__aeabi_dmul>
 8006cc4:	a356      	add	r3, pc, #344	; (adr r3, 8006e20 <__ieee754_pow+0xa28>)
 8006cc6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006cca:	f7f9 fae5 	bl	8000298 <__aeabi_dsub>
 8006cce:	4622      	mov	r2, r4
 8006cd0:	462b      	mov	r3, r5
 8006cd2:	f7f9 fc99 	bl	8000608 <__aeabi_dmul>
 8006cd6:	a354      	add	r3, pc, #336	; (adr r3, 8006e28 <__ieee754_pow+0xa30>)
 8006cd8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006cdc:	f7f9 fade 	bl	800029c <__adddf3>
 8006ce0:	4622      	mov	r2, r4
 8006ce2:	462b      	mov	r3, r5
 8006ce4:	f7f9 fc90 	bl	8000608 <__aeabi_dmul>
 8006ce8:	4602      	mov	r2, r0
 8006cea:	460b      	mov	r3, r1
 8006cec:	4640      	mov	r0, r8
 8006cee:	4649      	mov	r1, r9
 8006cf0:	f7f9 fad2 	bl	8000298 <__aeabi_dsub>
 8006cf4:	4604      	mov	r4, r0
 8006cf6:	460d      	mov	r5, r1
 8006cf8:	4602      	mov	r2, r0
 8006cfa:	460b      	mov	r3, r1
 8006cfc:	4640      	mov	r0, r8
 8006cfe:	4649      	mov	r1, r9
 8006d00:	f7f9 fc82 	bl	8000608 <__aeabi_dmul>
 8006d04:	2200      	movs	r2, #0
 8006d06:	ec41 0b19 	vmov	d9, r0, r1
 8006d0a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8006d0e:	4620      	mov	r0, r4
 8006d10:	4629      	mov	r1, r5
 8006d12:	f7f9 fac1 	bl	8000298 <__aeabi_dsub>
 8006d16:	4602      	mov	r2, r0
 8006d18:	460b      	mov	r3, r1
 8006d1a:	ec51 0b19 	vmov	r0, r1, d9
 8006d1e:	f7f9 fd9d 	bl	800085c <__aeabi_ddiv>
 8006d22:	4632      	mov	r2, r6
 8006d24:	4604      	mov	r4, r0
 8006d26:	460d      	mov	r5, r1
 8006d28:	463b      	mov	r3, r7
 8006d2a:	4640      	mov	r0, r8
 8006d2c:	4649      	mov	r1, r9
 8006d2e:	f7f9 fc6b 	bl	8000608 <__aeabi_dmul>
 8006d32:	4632      	mov	r2, r6
 8006d34:	463b      	mov	r3, r7
 8006d36:	f7f9 fab1 	bl	800029c <__adddf3>
 8006d3a:	4602      	mov	r2, r0
 8006d3c:	460b      	mov	r3, r1
 8006d3e:	4620      	mov	r0, r4
 8006d40:	4629      	mov	r1, r5
 8006d42:	f7f9 faa9 	bl	8000298 <__aeabi_dsub>
 8006d46:	4642      	mov	r2, r8
 8006d48:	464b      	mov	r3, r9
 8006d4a:	f7f9 faa5 	bl	8000298 <__aeabi_dsub>
 8006d4e:	460b      	mov	r3, r1
 8006d50:	4602      	mov	r2, r0
 8006d52:	4939      	ldr	r1, [pc, #228]	; (8006e38 <__ieee754_pow+0xa40>)
 8006d54:	2000      	movs	r0, #0
 8006d56:	f7f9 fa9f 	bl	8000298 <__aeabi_dsub>
 8006d5a:	ec41 0b10 	vmov	d0, r0, r1
 8006d5e:	ee10 3a90 	vmov	r3, s1
 8006d62:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 8006d66:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006d6a:	da2b      	bge.n	8006dc4 <__ieee754_pow+0x9cc>
 8006d6c:	4650      	mov	r0, sl
 8006d6e:	f000 fbcb 	bl	8007508 <scalbn>
 8006d72:	ec51 0b10 	vmov	r0, r1, d0
 8006d76:	ec53 2b18 	vmov	r2, r3, d8
 8006d7a:	f7ff bbee 	b.w	800655a <__ieee754_pow+0x162>
 8006d7e:	4b2f      	ldr	r3, [pc, #188]	; (8006e3c <__ieee754_pow+0xa44>)
 8006d80:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 8006d84:	429e      	cmp	r6, r3
 8006d86:	f77f af0d 	ble.w	8006ba4 <__ieee754_pow+0x7ac>
 8006d8a:	4b2d      	ldr	r3, [pc, #180]	; (8006e40 <__ieee754_pow+0xa48>)
 8006d8c:	440b      	add	r3, r1
 8006d8e:	4303      	orrs	r3, r0
 8006d90:	d009      	beq.n	8006da6 <__ieee754_pow+0x9ae>
 8006d92:	ec51 0b18 	vmov	r0, r1, d8
 8006d96:	2200      	movs	r2, #0
 8006d98:	2300      	movs	r3, #0
 8006d9a:	f7f9 fea7 	bl	8000aec <__aeabi_dcmplt>
 8006d9e:	3800      	subs	r0, #0
 8006da0:	bf18      	it	ne
 8006da2:	2001      	movne	r0, #1
 8006da4:	e448      	b.n	8006638 <__ieee754_pow+0x240>
 8006da6:	4622      	mov	r2, r4
 8006da8:	462b      	mov	r3, r5
 8006daa:	f7f9 fa75 	bl	8000298 <__aeabi_dsub>
 8006dae:	4642      	mov	r2, r8
 8006db0:	464b      	mov	r3, r9
 8006db2:	f7f9 feaf 	bl	8000b14 <__aeabi_dcmpge>
 8006db6:	2800      	cmp	r0, #0
 8006db8:	f43f aef4 	beq.w	8006ba4 <__ieee754_pow+0x7ac>
 8006dbc:	e7e9      	b.n	8006d92 <__ieee754_pow+0x99a>
 8006dbe:	f04f 0a00 	mov.w	sl, #0
 8006dc2:	e71a      	b.n	8006bfa <__ieee754_pow+0x802>
 8006dc4:	ec51 0b10 	vmov	r0, r1, d0
 8006dc8:	4619      	mov	r1, r3
 8006dca:	e7d4      	b.n	8006d76 <__ieee754_pow+0x97e>
 8006dcc:	491a      	ldr	r1, [pc, #104]	; (8006e38 <__ieee754_pow+0xa40>)
 8006dce:	2000      	movs	r0, #0
 8006dd0:	f7ff bb31 	b.w	8006436 <__ieee754_pow+0x3e>
 8006dd4:	2000      	movs	r0, #0
 8006dd6:	2100      	movs	r1, #0
 8006dd8:	f7ff bb2d 	b.w	8006436 <__ieee754_pow+0x3e>
 8006ddc:	4630      	mov	r0, r6
 8006dde:	4639      	mov	r1, r7
 8006de0:	f7ff bb29 	b.w	8006436 <__ieee754_pow+0x3e>
 8006de4:	9204      	str	r2, [sp, #16]
 8006de6:	f7ff bb7b 	b.w	80064e0 <__ieee754_pow+0xe8>
 8006dea:	2300      	movs	r3, #0
 8006dec:	f7ff bb65 	b.w	80064ba <__ieee754_pow+0xc2>
 8006df0:	00000000 	.word	0x00000000
 8006df4:	3fe62e43 	.word	0x3fe62e43
 8006df8:	fefa39ef 	.word	0xfefa39ef
 8006dfc:	3fe62e42 	.word	0x3fe62e42
 8006e00:	0ca86c39 	.word	0x0ca86c39
 8006e04:	be205c61 	.word	0xbe205c61
 8006e08:	72bea4d0 	.word	0x72bea4d0
 8006e0c:	3e663769 	.word	0x3e663769
 8006e10:	c5d26bf1 	.word	0xc5d26bf1
 8006e14:	3ebbbd41 	.word	0x3ebbbd41
 8006e18:	af25de2c 	.word	0xaf25de2c
 8006e1c:	3f11566a 	.word	0x3f11566a
 8006e20:	16bebd93 	.word	0x16bebd93
 8006e24:	3f66c16c 	.word	0x3f66c16c
 8006e28:	5555553e 	.word	0x5555553e
 8006e2c:	3fc55555 	.word	0x3fc55555
 8006e30:	3fe00000 	.word	0x3fe00000
 8006e34:	fff00000 	.word	0xfff00000
 8006e38:	3ff00000 	.word	0x3ff00000
 8006e3c:	4090cbff 	.word	0x4090cbff
 8006e40:	3f6f3400 	.word	0x3f6f3400
 8006e44:	652b82fe 	.word	0x652b82fe
 8006e48:	3c971547 	.word	0x3c971547

08006e4c <fabs>:
 8006e4c:	ec51 0b10 	vmov	r0, r1, d0
 8006e50:	ee10 2a10 	vmov	r2, s0
 8006e54:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8006e58:	ec43 2b10 	vmov	d0, r2, r3
 8006e5c:	4770      	bx	lr
	...

08006e60 <__ieee754_fmodf>:
 8006e60:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006e62:	ee10 4a90 	vmov	r4, s1
 8006e66:	f034 4000 	bics.w	r0, r4, #2147483648	; 0x80000000
 8006e6a:	d009      	beq.n	8006e80 <__ieee754_fmodf+0x20>
 8006e6c:	ee10 3a10 	vmov	r3, s0
 8006e70:	f023 4600 	bic.w	r6, r3, #2147483648	; 0x80000000
 8006e74:	f1b6 4fff 	cmp.w	r6, #2139095040	; 0x7f800000
 8006e78:	da02      	bge.n	8006e80 <__ieee754_fmodf+0x20>
 8006e7a:	f1b0 4fff 	cmp.w	r0, #2139095040	; 0x7f800000
 8006e7e:	dd04      	ble.n	8006e8a <__ieee754_fmodf+0x2a>
 8006e80:	ee60 0a20 	vmul.f32	s1, s0, s1
 8006e84:	ee80 0aa0 	vdiv.f32	s0, s1, s1
 8006e88:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006e8a:	4286      	cmp	r6, r0
 8006e8c:	dbfc      	blt.n	8006e88 <__ieee754_fmodf+0x28>
 8006e8e:	f003 4500 	and.w	r5, r3, #2147483648	; 0x80000000
 8006e92:	d105      	bne.n	8006ea0 <__ieee754_fmodf+0x40>
 8006e94:	4b32      	ldr	r3, [pc, #200]	; (8006f60 <__ieee754_fmodf+0x100>)
 8006e96:	eb03 7355 	add.w	r3, r3, r5, lsr #29
 8006e9a:	ed93 0a00 	vldr	s0, [r3]
 8006e9e:	e7f3      	b.n	8006e88 <__ieee754_fmodf+0x28>
 8006ea0:	f013 4fff 	tst.w	r3, #2139095040	; 0x7f800000
 8006ea4:	d140      	bne.n	8006f28 <__ieee754_fmodf+0xc8>
 8006ea6:	0232      	lsls	r2, r6, #8
 8006ea8:	f06f 017d 	mvn.w	r1, #125	; 0x7d
 8006eac:	2a00      	cmp	r2, #0
 8006eae:	dc38      	bgt.n	8006f22 <__ieee754_fmodf+0xc2>
 8006eb0:	f014 4fff 	tst.w	r4, #2139095040	; 0x7f800000
 8006eb4:	d13e      	bne.n	8006f34 <__ieee754_fmodf+0xd4>
 8006eb6:	0207      	lsls	r7, r0, #8
 8006eb8:	f06f 027d 	mvn.w	r2, #125	; 0x7d
 8006ebc:	2f00      	cmp	r7, #0
 8006ebe:	da36      	bge.n	8006f2e <__ieee754_fmodf+0xce>
 8006ec0:	f111 0f7e 	cmn.w	r1, #126	; 0x7e
 8006ec4:	bfb9      	ittee	lt
 8006ec6:	f06f 037d 	mvnlt.w	r3, #125	; 0x7d
 8006eca:	1a5b      	sublt	r3, r3, r1
 8006ecc:	f3c3 0316 	ubfxge	r3, r3, #0, #23
 8006ed0:	f443 0300 	orrge.w	r3, r3, #8388608	; 0x800000
 8006ed4:	bfb8      	it	lt
 8006ed6:	fa06 f303 	lsllt.w	r3, r6, r3
 8006eda:	f112 0f7e 	cmn.w	r2, #126	; 0x7e
 8006ede:	bfb5      	itete	lt
 8006ee0:	f06f 047d 	mvnlt.w	r4, #125	; 0x7d
 8006ee4:	f3c4 0416 	ubfxge	r4, r4, #0, #23
 8006ee8:	1aa4      	sublt	r4, r4, r2
 8006eea:	f444 0000 	orrge.w	r0, r4, #8388608	; 0x800000
 8006eee:	bfb8      	it	lt
 8006ef0:	40a0      	lsllt	r0, r4
 8006ef2:	1a89      	subs	r1, r1, r2
 8006ef4:	1a1c      	subs	r4, r3, r0
 8006ef6:	bb01      	cbnz	r1, 8006f3a <__ieee754_fmodf+0xda>
 8006ef8:	ea13 0324 	ands.w	r3, r3, r4, asr #32
 8006efc:	bf38      	it	cc
 8006efe:	4623      	movcc	r3, r4
 8006f00:	2b00      	cmp	r3, #0
 8006f02:	d0c7      	beq.n	8006e94 <__ieee754_fmodf+0x34>
 8006f04:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8006f08:	db1f      	blt.n	8006f4a <__ieee754_fmodf+0xea>
 8006f0a:	f112 0f7e 	cmn.w	r2, #126	; 0x7e
 8006f0e:	db1f      	blt.n	8006f50 <__ieee754_fmodf+0xf0>
 8006f10:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8006f14:	327f      	adds	r2, #127	; 0x7f
 8006f16:	432b      	orrs	r3, r5
 8006f18:	ea43 53c2 	orr.w	r3, r3, r2, lsl #23
 8006f1c:	ee00 3a10 	vmov	s0, r3
 8006f20:	e7b2      	b.n	8006e88 <__ieee754_fmodf+0x28>
 8006f22:	3901      	subs	r1, #1
 8006f24:	0052      	lsls	r2, r2, #1
 8006f26:	e7c1      	b.n	8006eac <__ieee754_fmodf+0x4c>
 8006f28:	15f1      	asrs	r1, r6, #23
 8006f2a:	397f      	subs	r1, #127	; 0x7f
 8006f2c:	e7c0      	b.n	8006eb0 <__ieee754_fmodf+0x50>
 8006f2e:	3a01      	subs	r2, #1
 8006f30:	007f      	lsls	r7, r7, #1
 8006f32:	e7c3      	b.n	8006ebc <__ieee754_fmodf+0x5c>
 8006f34:	15c2      	asrs	r2, r0, #23
 8006f36:	3a7f      	subs	r2, #127	; 0x7f
 8006f38:	e7c2      	b.n	8006ec0 <__ieee754_fmodf+0x60>
 8006f3a:	2c00      	cmp	r4, #0
 8006f3c:	da02      	bge.n	8006f44 <__ieee754_fmodf+0xe4>
 8006f3e:	005b      	lsls	r3, r3, #1
 8006f40:	3901      	subs	r1, #1
 8006f42:	e7d7      	b.n	8006ef4 <__ieee754_fmodf+0x94>
 8006f44:	d0a6      	beq.n	8006e94 <__ieee754_fmodf+0x34>
 8006f46:	0063      	lsls	r3, r4, #1
 8006f48:	e7fa      	b.n	8006f40 <__ieee754_fmodf+0xe0>
 8006f4a:	005b      	lsls	r3, r3, #1
 8006f4c:	3a01      	subs	r2, #1
 8006f4e:	e7d9      	b.n	8006f04 <__ieee754_fmodf+0xa4>
 8006f50:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 8006f54:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 8006f58:	3282      	adds	r2, #130	; 0x82
 8006f5a:	4113      	asrs	r3, r2
 8006f5c:	432b      	orrs	r3, r5
 8006f5e:	e7dd      	b.n	8006f1c <__ieee754_fmodf+0xbc>
 8006f60:	08007b20 	.word	0x08007b20

08006f64 <__ieee754_powf>:
 8006f64:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006f68:	ee10 4a90 	vmov	r4, s1
 8006f6c:	f034 4800 	bics.w	r8, r4, #2147483648	; 0x80000000
 8006f70:	ed2d 8b02 	vpush	{d8}
 8006f74:	ee10 7a10 	vmov	r7, s0
 8006f78:	eeb0 8a40 	vmov.f32	s16, s0
 8006f7c:	eef0 8a60 	vmov.f32	s17, s1
 8006f80:	d10c      	bne.n	8006f9c <__ieee754_powf+0x38>
 8006f82:	f487 0780 	eor.w	r7, r7, #4194304	; 0x400000
 8006f86:	007f      	lsls	r7, r7, #1
 8006f88:	f517 0f00 	cmn.w	r7, #8388608	; 0x800000
 8006f8c:	f240 8292 	bls.w	80074b4 <__ieee754_powf+0x550>
 8006f90:	ee38 0a28 	vadd.f32	s0, s16, s17
 8006f94:	ecbd 8b02 	vpop	{d8}
 8006f98:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006f9c:	f027 4500 	bic.w	r5, r7, #2147483648	; 0x80000000
 8006fa0:	f1b5 4fff 	cmp.w	r5, #2139095040	; 0x7f800000
 8006fa4:	dcf4      	bgt.n	8006f90 <__ieee754_powf+0x2c>
 8006fa6:	f1b8 4fff 	cmp.w	r8, #2139095040	; 0x7f800000
 8006faa:	dd08      	ble.n	8006fbe <__ieee754_powf+0x5a>
 8006fac:	f1b7 5f7e 	cmp.w	r7, #1065353216	; 0x3f800000
 8006fb0:	d1ee      	bne.n	8006f90 <__ieee754_powf+0x2c>
 8006fb2:	f484 0480 	eor.w	r4, r4, #4194304	; 0x400000
 8006fb6:	0064      	lsls	r4, r4, #1
 8006fb8:	f514 0f00 	cmn.w	r4, #8388608	; 0x800000
 8006fbc:	e7e6      	b.n	8006f8c <__ieee754_powf+0x28>
 8006fbe:	2f00      	cmp	r7, #0
 8006fc0:	da20      	bge.n	8007004 <__ieee754_powf+0xa0>
 8006fc2:	f1b8 4f97 	cmp.w	r8, #1266679808	; 0x4b800000
 8006fc6:	da2d      	bge.n	8007024 <__ieee754_powf+0xc0>
 8006fc8:	f1b8 5f7e 	cmp.w	r8, #1065353216	; 0x3f800000
 8006fcc:	f2c0 827b 	blt.w	80074c6 <__ieee754_powf+0x562>
 8006fd0:	ea4f 53e8 	mov.w	r3, r8, asr #23
 8006fd4:	f1c3 0396 	rsb	r3, r3, #150	; 0x96
 8006fd8:	fa48 f603 	asr.w	r6, r8, r3
 8006fdc:	fa06 f303 	lsl.w	r3, r6, r3
 8006fe0:	4543      	cmp	r3, r8
 8006fe2:	f040 8270 	bne.w	80074c6 <__ieee754_powf+0x562>
 8006fe6:	f006 0601 	and.w	r6, r6, #1
 8006fea:	f1c6 0602 	rsb	r6, r6, #2
 8006fee:	f1b8 5f7e 	cmp.w	r8, #1065353216	; 0x3f800000
 8006ff2:	d11f      	bne.n	8007034 <__ieee754_powf+0xd0>
 8006ff4:	2c00      	cmp	r4, #0
 8006ff6:	f280 8263 	bge.w	80074c0 <__ieee754_powf+0x55c>
 8006ffa:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8006ffe:	ee87 0a88 	vdiv.f32	s0, s15, s16
 8007002:	e7c7      	b.n	8006f94 <__ieee754_powf+0x30>
 8007004:	2600      	movs	r6, #0
 8007006:	f1b8 4fff 	cmp.w	r8, #2139095040	; 0x7f800000
 800700a:	d1f0      	bne.n	8006fee <__ieee754_powf+0x8a>
 800700c:	f1b5 5f7e 	cmp.w	r5, #1065353216	; 0x3f800000
 8007010:	f000 8250 	beq.w	80074b4 <__ieee754_powf+0x550>
 8007014:	dd08      	ble.n	8007028 <__ieee754_powf+0xc4>
 8007016:	ed9f 0ac1 	vldr	s0, [pc, #772]	; 800731c <__ieee754_powf+0x3b8>
 800701a:	2c00      	cmp	r4, #0
 800701c:	bfa8      	it	ge
 800701e:	eeb0 0a68 	vmovge.f32	s0, s17
 8007022:	e7b7      	b.n	8006f94 <__ieee754_powf+0x30>
 8007024:	2602      	movs	r6, #2
 8007026:	e7ee      	b.n	8007006 <__ieee754_powf+0xa2>
 8007028:	2c00      	cmp	r4, #0
 800702a:	f280 8246 	bge.w	80074ba <__ieee754_powf+0x556>
 800702e:	eeb1 0a68 	vneg.f32	s0, s17
 8007032:	e7af      	b.n	8006f94 <__ieee754_powf+0x30>
 8007034:	f1b4 4f80 	cmp.w	r4, #1073741824	; 0x40000000
 8007038:	d102      	bne.n	8007040 <__ieee754_powf+0xdc>
 800703a:	ee28 0a08 	vmul.f32	s0, s16, s16
 800703e:	e7a9      	b.n	8006f94 <__ieee754_powf+0x30>
 8007040:	f1b4 5f7c 	cmp.w	r4, #1056964608	; 0x3f000000
 8007044:	eeb0 0a48 	vmov.f32	s0, s16
 8007048:	d107      	bne.n	800705a <__ieee754_powf+0xf6>
 800704a:	2f00      	cmp	r7, #0
 800704c:	db05      	blt.n	800705a <__ieee754_powf+0xf6>
 800704e:	ecbd 8b02 	vpop	{d8}
 8007052:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007056:	f000 bc67 	b.w	8007928 <__ieee754_sqrtf>
 800705a:	f000 fa4d 	bl	80074f8 <fabsf>
 800705e:	b125      	cbz	r5, 800706a <__ieee754_powf+0x106>
 8007060:	f027 4340 	bic.w	r3, r7, #3221225472	; 0xc0000000
 8007064:	f1b3 5f7e 	cmp.w	r3, #1065353216	; 0x3f800000
 8007068:	d115      	bne.n	8007096 <__ieee754_powf+0x132>
 800706a:	2c00      	cmp	r4, #0
 800706c:	bfbc      	itt	lt
 800706e:	eef7 7a00 	vmovlt.f32	s15, #112	; 0x3f800000  1.0
 8007072:	ee87 0a80 	vdivlt.f32	s0, s15, s0
 8007076:	2f00      	cmp	r7, #0
 8007078:	da8c      	bge.n	8006f94 <__ieee754_powf+0x30>
 800707a:	f1a5 557e 	sub.w	r5, r5, #1065353216	; 0x3f800000
 800707e:	4335      	orrs	r5, r6
 8007080:	d104      	bne.n	800708c <__ieee754_powf+0x128>
 8007082:	ee70 7a40 	vsub.f32	s15, s0, s0
 8007086:	ee87 0aa7 	vdiv.f32	s0, s15, s15
 800708a:	e783      	b.n	8006f94 <__ieee754_powf+0x30>
 800708c:	2e01      	cmp	r6, #1
 800708e:	d181      	bne.n	8006f94 <__ieee754_powf+0x30>
 8007090:	eeb1 0a40 	vneg.f32	s0, s0
 8007094:	e77e      	b.n	8006f94 <__ieee754_powf+0x30>
 8007096:	0ff8      	lsrs	r0, r7, #31
 8007098:	3801      	subs	r0, #1
 800709a:	ea56 0300 	orrs.w	r3, r6, r0
 800709e:	d104      	bne.n	80070aa <__ieee754_powf+0x146>
 80070a0:	ee38 8a48 	vsub.f32	s16, s16, s16
 80070a4:	ee88 0a08 	vdiv.f32	s0, s16, s16
 80070a8:	e774      	b.n	8006f94 <__ieee754_powf+0x30>
 80070aa:	f1b8 4f9a 	cmp.w	r8, #1291845632	; 0x4d000000
 80070ae:	dd73      	ble.n	8007198 <__ieee754_powf+0x234>
 80070b0:	4b9b      	ldr	r3, [pc, #620]	; (8007320 <__ieee754_powf+0x3bc>)
 80070b2:	429d      	cmp	r5, r3
 80070b4:	dc08      	bgt.n	80070c8 <__ieee754_powf+0x164>
 80070b6:	2c00      	cmp	r4, #0
 80070b8:	da0b      	bge.n	80070d2 <__ieee754_powf+0x16e>
 80070ba:	2000      	movs	r0, #0
 80070bc:	ecbd 8b02 	vpop	{d8}
 80070c0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80070c4:	f000 bb50 	b.w	8007768 <__math_oflowf>
 80070c8:	4b96      	ldr	r3, [pc, #600]	; (8007324 <__ieee754_powf+0x3c0>)
 80070ca:	429d      	cmp	r5, r3
 80070cc:	dd08      	ble.n	80070e0 <__ieee754_powf+0x17c>
 80070ce:	2c00      	cmp	r4, #0
 80070d0:	dcf3      	bgt.n	80070ba <__ieee754_powf+0x156>
 80070d2:	2000      	movs	r0, #0
 80070d4:	ecbd 8b02 	vpop	{d8}
 80070d8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80070dc:	f000 bb3e 	b.w	800775c <__math_uflowf>
 80070e0:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 80070e4:	ee30 0a67 	vsub.f32	s0, s0, s15
 80070e8:	eddf 6a8f 	vldr	s13, [pc, #572]	; 8007328 <__ieee754_powf+0x3c4>
 80070ec:	eef5 7a00 	vmov.f32	s15, #80	; 0x3e800000  0.250
 80070f0:	eee0 6a67 	vfms.f32	s13, s0, s15
 80070f4:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 80070f8:	eee6 7ac0 	vfms.f32	s15, s13, s0
 80070fc:	ee20 7a00 	vmul.f32	s14, s0, s0
 8007100:	ee27 7a27 	vmul.f32	s14, s14, s15
 8007104:	eddf 7a89 	vldr	s15, [pc, #548]	; 800732c <__ieee754_powf+0x3c8>
 8007108:	ee67 7ac7 	vnmul.f32	s15, s15, s14
 800710c:	ed9f 7a88 	vldr	s14, [pc, #544]	; 8007330 <__ieee754_powf+0x3cc>
 8007110:	eee0 7a07 	vfma.f32	s15, s0, s14
 8007114:	ed9f 7a87 	vldr	s14, [pc, #540]	; 8007334 <__ieee754_powf+0x3d0>
 8007118:	eef0 6a67 	vmov.f32	s13, s15
 800711c:	eee0 6a07 	vfma.f32	s13, s0, s14
 8007120:	ee16 3a90 	vmov	r3, s13
 8007124:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 8007128:	f023 030f 	bic.w	r3, r3, #15
 800712c:	ee06 3a90 	vmov	s13, r3
 8007130:	eee0 6a47 	vfms.f32	s13, s0, s14
 8007134:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8007138:	3e01      	subs	r6, #1
 800713a:	f424 647f 	bic.w	r4, r4, #4080	; 0xff0
 800713e:	4306      	orrs	r6, r0
 8007140:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 8007144:	f024 040f 	bic.w	r4, r4, #15
 8007148:	eeb7 8a00 	vmov.f32	s16, #112	; 0x3f800000  1.0
 800714c:	bf08      	it	eq
 800714e:	eeb0 8a47 	vmoveq.f32	s16, s14
 8007152:	ee07 4a10 	vmov	s14, r4
 8007156:	ee67 0aa8 	vmul.f32	s1, s15, s17
 800715a:	ee38 7ac7 	vsub.f32	s14, s17, s14
 800715e:	ee07 3a90 	vmov	s15, r3
 8007162:	eee7 0a27 	vfma.f32	s1, s14, s15
 8007166:	ee07 4a10 	vmov	s14, r4
 800716a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800716e:	ee30 7aa7 	vadd.f32	s14, s1, s15
 8007172:	ee17 1a10 	vmov	r1, s14
 8007176:	2900      	cmp	r1, #0
 8007178:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800717c:	f340 817c 	ble.w	8007478 <__ieee754_powf+0x514>
 8007180:	f1b3 4f86 	cmp.w	r3, #1124073472	; 0x43000000
 8007184:	f340 80f8 	ble.w	8007378 <__ieee754_powf+0x414>
 8007188:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 800718c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007190:	bf4c      	ite	mi
 8007192:	2001      	movmi	r0, #1
 8007194:	2000      	movpl	r0, #0
 8007196:	e791      	b.n	80070bc <__ieee754_powf+0x158>
 8007198:	f017 4fff 	tst.w	r7, #2139095040	; 0x7f800000
 800719c:	bf01      	itttt	eq
 800719e:	eddf 7a66 	vldreq	s15, [pc, #408]	; 8007338 <__ieee754_powf+0x3d4>
 80071a2:	ee60 7a27 	vmuleq.f32	s15, s0, s15
 80071a6:	f06f 0317 	mvneq.w	r3, #23
 80071aa:	ee17 5a90 	vmoveq	r5, s15
 80071ae:	ea4f 52e5 	mov.w	r2, r5, asr #23
 80071b2:	bf18      	it	ne
 80071b4:	2300      	movne	r3, #0
 80071b6:	3a7f      	subs	r2, #127	; 0x7f
 80071b8:	441a      	add	r2, r3
 80071ba:	4b60      	ldr	r3, [pc, #384]	; (800733c <__ieee754_powf+0x3d8>)
 80071bc:	f3c5 0516 	ubfx	r5, r5, #0, #23
 80071c0:	429d      	cmp	r5, r3
 80071c2:	f045 517e 	orr.w	r1, r5, #1065353216	; 0x3f800000
 80071c6:	dd06      	ble.n	80071d6 <__ieee754_powf+0x272>
 80071c8:	4b5d      	ldr	r3, [pc, #372]	; (8007340 <__ieee754_powf+0x3dc>)
 80071ca:	429d      	cmp	r5, r3
 80071cc:	f340 80a4 	ble.w	8007318 <__ieee754_powf+0x3b4>
 80071d0:	3201      	adds	r2, #1
 80071d2:	f5a1 0100 	sub.w	r1, r1, #8388608	; 0x800000
 80071d6:	2500      	movs	r5, #0
 80071d8:	4b5a      	ldr	r3, [pc, #360]	; (8007344 <__ieee754_powf+0x3e0>)
 80071da:	eb03 0385 	add.w	r3, r3, r5, lsl #2
 80071de:	ee07 1a10 	vmov	s14, r1
 80071e2:	edd3 5a00 	vldr	s11, [r3]
 80071e6:	4b58      	ldr	r3, [pc, #352]	; (8007348 <__ieee754_powf+0x3e4>)
 80071e8:	ee75 7a87 	vadd.f32	s15, s11, s14
 80071ec:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80071f0:	eec6 4aa7 	vdiv.f32	s9, s13, s15
 80071f4:	1049      	asrs	r1, r1, #1
 80071f6:	f041 5100 	orr.w	r1, r1, #536870912	; 0x20000000
 80071fa:	f501 2180 	add.w	r1, r1, #262144	; 0x40000
 80071fe:	eb01 5145 	add.w	r1, r1, r5, lsl #21
 8007202:	ee37 6a65 	vsub.f32	s12, s14, s11
 8007206:	ee07 1a90 	vmov	s15, r1
 800720a:	ee26 5a24 	vmul.f32	s10, s12, s9
 800720e:	ee77 5ae5 	vsub.f32	s11, s15, s11
 8007212:	ee15 7a10 	vmov	r7, s10
 8007216:	401f      	ands	r7, r3
 8007218:	ee06 7a90 	vmov	s13, r7
 800721c:	eea6 6ae7 	vfms.f32	s12, s13, s15
 8007220:	ee37 7a65 	vsub.f32	s14, s14, s11
 8007224:	ee65 7a05 	vmul.f32	s15, s10, s10
 8007228:	eea6 6ac7 	vfms.f32	s12, s13, s14
 800722c:	eddf 5a47 	vldr	s11, [pc, #284]	; 800734c <__ieee754_powf+0x3e8>
 8007230:	ed9f 7a47 	vldr	s14, [pc, #284]	; 8007350 <__ieee754_powf+0x3ec>
 8007234:	eee7 5a87 	vfma.f32	s11, s15, s14
 8007238:	ed9f 7a46 	vldr	s14, [pc, #280]	; 8007354 <__ieee754_powf+0x3f0>
 800723c:	eea5 7aa7 	vfma.f32	s14, s11, s15
 8007240:	eddf 5a39 	vldr	s11, [pc, #228]	; 8007328 <__ieee754_powf+0x3c4>
 8007244:	eee7 5a27 	vfma.f32	s11, s14, s15
 8007248:	ed9f 7a43 	vldr	s14, [pc, #268]	; 8007358 <__ieee754_powf+0x3f4>
 800724c:	eea5 7aa7 	vfma.f32	s14, s11, s15
 8007250:	eddf 5a42 	vldr	s11, [pc, #264]	; 800735c <__ieee754_powf+0x3f8>
 8007254:	ee26 6a24 	vmul.f32	s12, s12, s9
 8007258:	eee7 5a27 	vfma.f32	s11, s14, s15
 800725c:	ee35 7a26 	vadd.f32	s14, s10, s13
 8007260:	ee67 4aa7 	vmul.f32	s9, s15, s15
 8007264:	ee27 7a06 	vmul.f32	s14, s14, s12
 8007268:	eef0 7a08 	vmov.f32	s15, #8	; 0x40400000  3.0
 800726c:	eea4 7aa5 	vfma.f32	s14, s9, s11
 8007270:	eef0 5a67 	vmov.f32	s11, s15
 8007274:	eee6 5aa6 	vfma.f32	s11, s13, s13
 8007278:	ee75 5a87 	vadd.f32	s11, s11, s14
 800727c:	ee15 1a90 	vmov	r1, s11
 8007280:	4019      	ands	r1, r3
 8007282:	ee05 1a90 	vmov	s11, r1
 8007286:	ee75 7ae7 	vsub.f32	s15, s11, s15
 800728a:	eee6 7ae6 	vfms.f32	s15, s13, s13
 800728e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8007292:	ee67 7a85 	vmul.f32	s15, s15, s10
 8007296:	eee6 7a25 	vfma.f32	s15, s12, s11
 800729a:	eeb0 6a67 	vmov.f32	s12, s15
 800729e:	eea6 6aa5 	vfma.f32	s12, s13, s11
 80072a2:	ee16 1a10 	vmov	r1, s12
 80072a6:	4019      	ands	r1, r3
 80072a8:	ee07 1a10 	vmov	s14, r1
 80072ac:	eea6 7ae5 	vfms.f32	s14, s13, s11
 80072b0:	ee06 1a10 	vmov	s12, r1
 80072b4:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80072b8:	ed9f 7a29 	vldr	s14, [pc, #164]	; 8007360 <__ieee754_powf+0x3fc>
 80072bc:	4929      	ldr	r1, [pc, #164]	; (8007364 <__ieee754_powf+0x400>)
 80072be:	eddf 5a2a 	vldr	s11, [pc, #168]	; 8007368 <__ieee754_powf+0x404>
 80072c2:	ee67 7a87 	vmul.f32	s15, s15, s14
 80072c6:	ed9f 7a29 	vldr	s14, [pc, #164]	; 800736c <__ieee754_powf+0x408>
 80072ca:	eee6 7a07 	vfma.f32	s15, s12, s14
 80072ce:	eb01 0185 	add.w	r1, r1, r5, lsl #2
 80072d2:	ed91 7a00 	vldr	s14, [r1]
 80072d6:	ee77 7a87 	vadd.f32	s15, s15, s14
 80072da:	ee07 2a10 	vmov	s14, r2
 80072de:	eef0 6a67 	vmov.f32	s13, s15
 80072e2:	4a23      	ldr	r2, [pc, #140]	; (8007370 <__ieee754_powf+0x40c>)
 80072e4:	eee6 6a25 	vfma.f32	s13, s12, s11
 80072e8:	eb02 0285 	add.w	r2, r2, r5, lsl #2
 80072ec:	ed92 5a00 	vldr	s10, [r2]
 80072f0:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 80072f4:	ee76 6a85 	vadd.f32	s13, s13, s10
 80072f8:	ee76 6a87 	vadd.f32	s13, s13, s14
 80072fc:	ee16 2a90 	vmov	r2, s13
 8007300:	4013      	ands	r3, r2
 8007302:	ee06 3a90 	vmov	s13, r3
 8007306:	ee36 7ac7 	vsub.f32	s14, s13, s14
 800730a:	ee37 7a45 	vsub.f32	s14, s14, s10
 800730e:	eea6 7a65 	vfms.f32	s14, s12, s11
 8007312:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8007316:	e70f      	b.n	8007138 <__ieee754_powf+0x1d4>
 8007318:	2501      	movs	r5, #1
 800731a:	e75d      	b.n	80071d8 <__ieee754_powf+0x274>
 800731c:	00000000 	.word	0x00000000
 8007320:	3f7ffff3 	.word	0x3f7ffff3
 8007324:	3f800007 	.word	0x3f800007
 8007328:	3eaaaaab 	.word	0x3eaaaaab
 800732c:	3fb8aa3b 	.word	0x3fb8aa3b
 8007330:	36eca570 	.word	0x36eca570
 8007334:	3fb8aa00 	.word	0x3fb8aa00
 8007338:	4b800000 	.word	0x4b800000
 800733c:	001cc471 	.word	0x001cc471
 8007340:	005db3d6 	.word	0x005db3d6
 8007344:	08007b28 	.word	0x08007b28
 8007348:	fffff000 	.word	0xfffff000
 800734c:	3e6c3255 	.word	0x3e6c3255
 8007350:	3e53f142 	.word	0x3e53f142
 8007354:	3e8ba305 	.word	0x3e8ba305
 8007358:	3edb6db7 	.word	0x3edb6db7
 800735c:	3f19999a 	.word	0x3f19999a
 8007360:	3f76384f 	.word	0x3f76384f
 8007364:	08007b38 	.word	0x08007b38
 8007368:	3f763800 	.word	0x3f763800
 800736c:	369dc3a0 	.word	0x369dc3a0
 8007370:	08007b30 	.word	0x08007b30
 8007374:	3338aa3c 	.word	0x3338aa3c
 8007378:	f040 8093 	bne.w	80074a2 <__ieee754_powf+0x53e>
 800737c:	ed5f 6a03 	vldr	s13, [pc, #-12]	; 8007374 <__ieee754_powf+0x410>
 8007380:	ee37 7a67 	vsub.f32	s14, s14, s15
 8007384:	ee70 6aa6 	vadd.f32	s13, s1, s13
 8007388:	eef4 6ac7 	vcmpe.f32	s13, s14
 800738c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007390:	f73f aefa 	bgt.w	8007188 <__ieee754_powf+0x224>
 8007394:	15db      	asrs	r3, r3, #23
 8007396:	3b7e      	subs	r3, #126	; 0x7e
 8007398:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
 800739c:	4118      	asrs	r0, r3
 800739e:	4408      	add	r0, r1
 80073a0:	f3c0 53c7 	ubfx	r3, r0, #23, #8
 80073a4:	4a49      	ldr	r2, [pc, #292]	; (80074cc <__ieee754_powf+0x568>)
 80073a6:	3b7f      	subs	r3, #127	; 0x7f
 80073a8:	411a      	asrs	r2, r3
 80073aa:	4002      	ands	r2, r0
 80073ac:	ee07 2a10 	vmov	s14, r2
 80073b0:	f3c0 0016 	ubfx	r0, r0, #0, #23
 80073b4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80073b8:	f1c3 0317 	rsb	r3, r3, #23
 80073bc:	4118      	asrs	r0, r3
 80073be:	2900      	cmp	r1, #0
 80073c0:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80073c4:	bfb8      	it	lt
 80073c6:	4240      	neglt	r0, r0
 80073c8:	ee37 7aa0 	vadd.f32	s14, s15, s1
 80073cc:	eddf 6a40 	vldr	s13, [pc, #256]	; 80074d0 <__ieee754_powf+0x56c>
 80073d0:	ed9f 6a40 	vldr	s12, [pc, #256]	; 80074d4 <__ieee754_powf+0x570>
 80073d4:	ee17 3a10 	vmov	r3, s14
 80073d8:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 80073dc:	f023 030f 	bic.w	r3, r3, #15
 80073e0:	ee07 3a10 	vmov	s14, r3
 80073e4:	ee77 7a67 	vsub.f32	s15, s14, s15
 80073e8:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 80073ec:	ee70 0ae7 	vsub.f32	s1, s1, s15
 80073f0:	eddf 7a39 	vldr	s15, [pc, #228]	; 80074d8 <__ieee754_powf+0x574>
 80073f4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80073f8:	eee0 7aa6 	vfma.f32	s15, s1, s13
 80073fc:	eef0 6a67 	vmov.f32	s13, s15
 8007400:	eee7 6a06 	vfma.f32	s13, s14, s12
 8007404:	eef0 5a66 	vmov.f32	s11, s13
 8007408:	eee7 5a46 	vfms.f32	s11, s14, s12
 800740c:	ee26 7aa6 	vmul.f32	s14, s13, s13
 8007410:	ee77 7ae5 	vsub.f32	s15, s15, s11
 8007414:	ed9f 6a31 	vldr	s12, [pc, #196]	; 80074dc <__ieee754_powf+0x578>
 8007418:	eddf 5a31 	vldr	s11, [pc, #196]	; 80074e0 <__ieee754_powf+0x57c>
 800741c:	eea7 6a25 	vfma.f32	s12, s14, s11
 8007420:	eddf 5a30 	vldr	s11, [pc, #192]	; 80074e4 <__ieee754_powf+0x580>
 8007424:	eee6 5a07 	vfma.f32	s11, s12, s14
 8007428:	ed9f 6a2f 	vldr	s12, [pc, #188]	; 80074e8 <__ieee754_powf+0x584>
 800742c:	eea5 6a87 	vfma.f32	s12, s11, s14
 8007430:	eddf 5a2e 	vldr	s11, [pc, #184]	; 80074ec <__ieee754_powf+0x588>
 8007434:	eee6 5a07 	vfma.f32	s11, s12, s14
 8007438:	eeb0 6a66 	vmov.f32	s12, s13
 800743c:	eea5 6ac7 	vfms.f32	s12, s11, s14
 8007440:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 8007444:	ee66 5a86 	vmul.f32	s11, s13, s12
 8007448:	ee36 6a47 	vsub.f32	s12, s12, s14
 800744c:	eee6 7aa7 	vfma.f32	s15, s13, s15
 8007450:	ee85 7a86 	vdiv.f32	s14, s11, s12
 8007454:	ee77 7a67 	vsub.f32	s15, s14, s15
 8007458:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800745c:	ee30 0a67 	vsub.f32	s0, s0, s15
 8007460:	ee10 3a10 	vmov	r3, s0
 8007464:	eb03 53c0 	add.w	r3, r3, r0, lsl #23
 8007468:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800746c:	da1f      	bge.n	80074ae <__ieee754_powf+0x54a>
 800746e:	f000 f8f9 	bl	8007664 <scalbnf>
 8007472:	ee20 0a08 	vmul.f32	s0, s0, s16
 8007476:	e58d      	b.n	8006f94 <__ieee754_powf+0x30>
 8007478:	4a1d      	ldr	r2, [pc, #116]	; (80074f0 <__ieee754_powf+0x58c>)
 800747a:	4293      	cmp	r3, r2
 800747c:	dd07      	ble.n	800748e <__ieee754_powf+0x52a>
 800747e:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 8007482:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007486:	bf4c      	ite	mi
 8007488:	2001      	movmi	r0, #1
 800748a:	2000      	movpl	r0, #0
 800748c:	e622      	b.n	80070d4 <__ieee754_powf+0x170>
 800748e:	d108      	bne.n	80074a2 <__ieee754_powf+0x53e>
 8007490:	ee37 7a67 	vsub.f32	s14, s14, s15
 8007494:	eeb4 7ae0 	vcmpe.f32	s14, s1
 8007498:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800749c:	f6ff af7a 	blt.w	8007394 <__ieee754_powf+0x430>
 80074a0:	e7ed      	b.n	800747e <__ieee754_powf+0x51a>
 80074a2:	f1b3 5f7c 	cmp.w	r3, #1056964608	; 0x3f000000
 80074a6:	f73f af75 	bgt.w	8007394 <__ieee754_powf+0x430>
 80074aa:	2000      	movs	r0, #0
 80074ac:	e78c      	b.n	80073c8 <__ieee754_powf+0x464>
 80074ae:	ee00 3a10 	vmov	s0, r3
 80074b2:	e7de      	b.n	8007472 <__ieee754_powf+0x50e>
 80074b4:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 80074b8:	e56c      	b.n	8006f94 <__ieee754_powf+0x30>
 80074ba:	ed9f 0a0e 	vldr	s0, [pc, #56]	; 80074f4 <__ieee754_powf+0x590>
 80074be:	e569      	b.n	8006f94 <__ieee754_powf+0x30>
 80074c0:	eeb0 0a48 	vmov.f32	s0, s16
 80074c4:	e566      	b.n	8006f94 <__ieee754_powf+0x30>
 80074c6:	2600      	movs	r6, #0
 80074c8:	e591      	b.n	8006fee <__ieee754_powf+0x8a>
 80074ca:	bf00      	nop
 80074cc:	ff800000 	.word	0xff800000
 80074d0:	3f317218 	.word	0x3f317218
 80074d4:	3f317200 	.word	0x3f317200
 80074d8:	35bfbe8c 	.word	0x35bfbe8c
 80074dc:	b5ddea0e 	.word	0xb5ddea0e
 80074e0:	3331bb4c 	.word	0x3331bb4c
 80074e4:	388ab355 	.word	0x388ab355
 80074e8:	bb360b61 	.word	0xbb360b61
 80074ec:	3e2aaaab 	.word	0x3e2aaaab
 80074f0:	43160000 	.word	0x43160000
 80074f4:	00000000 	.word	0x00000000

080074f8 <fabsf>:
 80074f8:	ee10 3a10 	vmov	r3, s0
 80074fc:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8007500:	ee00 3a10 	vmov	s0, r3
 8007504:	4770      	bx	lr
	...

08007508 <scalbn>:
 8007508:	b570      	push	{r4, r5, r6, lr}
 800750a:	ec55 4b10 	vmov	r4, r5, d0
 800750e:	f3c5 510a 	ubfx	r1, r5, #20, #11
 8007512:	4606      	mov	r6, r0
 8007514:	462b      	mov	r3, r5
 8007516:	b999      	cbnz	r1, 8007540 <scalbn+0x38>
 8007518:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800751c:	4323      	orrs	r3, r4
 800751e:	d03f      	beq.n	80075a0 <scalbn+0x98>
 8007520:	4b35      	ldr	r3, [pc, #212]	; (80075f8 <scalbn+0xf0>)
 8007522:	4629      	mov	r1, r5
 8007524:	ee10 0a10 	vmov	r0, s0
 8007528:	2200      	movs	r2, #0
 800752a:	f7f9 f86d 	bl	8000608 <__aeabi_dmul>
 800752e:	4b33      	ldr	r3, [pc, #204]	; (80075fc <scalbn+0xf4>)
 8007530:	429e      	cmp	r6, r3
 8007532:	4604      	mov	r4, r0
 8007534:	460d      	mov	r5, r1
 8007536:	da10      	bge.n	800755a <scalbn+0x52>
 8007538:	a327      	add	r3, pc, #156	; (adr r3, 80075d8 <scalbn+0xd0>)
 800753a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800753e:	e01f      	b.n	8007580 <scalbn+0x78>
 8007540:	f240 72ff 	movw	r2, #2047	; 0x7ff
 8007544:	4291      	cmp	r1, r2
 8007546:	d10c      	bne.n	8007562 <scalbn+0x5a>
 8007548:	ee10 2a10 	vmov	r2, s0
 800754c:	4620      	mov	r0, r4
 800754e:	4629      	mov	r1, r5
 8007550:	f7f8 fea4 	bl	800029c <__adddf3>
 8007554:	4604      	mov	r4, r0
 8007556:	460d      	mov	r5, r1
 8007558:	e022      	b.n	80075a0 <scalbn+0x98>
 800755a:	460b      	mov	r3, r1
 800755c:	f3c1 510a 	ubfx	r1, r1, #20, #11
 8007560:	3936      	subs	r1, #54	; 0x36
 8007562:	f24c 3250 	movw	r2, #50000	; 0xc350
 8007566:	4296      	cmp	r6, r2
 8007568:	dd0d      	ble.n	8007586 <scalbn+0x7e>
 800756a:	2d00      	cmp	r5, #0
 800756c:	a11c      	add	r1, pc, #112	; (adr r1, 80075e0 <scalbn+0xd8>)
 800756e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007572:	da02      	bge.n	800757a <scalbn+0x72>
 8007574:	a11c      	add	r1, pc, #112	; (adr r1, 80075e8 <scalbn+0xe0>)
 8007576:	e9d1 0100 	ldrd	r0, r1, [r1]
 800757a:	a319      	add	r3, pc, #100	; (adr r3, 80075e0 <scalbn+0xd8>)
 800757c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007580:	f7f9 f842 	bl	8000608 <__aeabi_dmul>
 8007584:	e7e6      	b.n	8007554 <scalbn+0x4c>
 8007586:	1872      	adds	r2, r6, r1
 8007588:	f240 71fe 	movw	r1, #2046	; 0x7fe
 800758c:	428a      	cmp	r2, r1
 800758e:	dcec      	bgt.n	800756a <scalbn+0x62>
 8007590:	2a00      	cmp	r2, #0
 8007592:	dd08      	ble.n	80075a6 <scalbn+0x9e>
 8007594:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8007598:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800759c:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 80075a0:	ec45 4b10 	vmov	d0, r4, r5
 80075a4:	bd70      	pop	{r4, r5, r6, pc}
 80075a6:	f112 0f35 	cmn.w	r2, #53	; 0x35
 80075aa:	da08      	bge.n	80075be <scalbn+0xb6>
 80075ac:	2d00      	cmp	r5, #0
 80075ae:	a10a      	add	r1, pc, #40	; (adr r1, 80075d8 <scalbn+0xd0>)
 80075b0:	e9d1 0100 	ldrd	r0, r1, [r1]
 80075b4:	dac0      	bge.n	8007538 <scalbn+0x30>
 80075b6:	a10e      	add	r1, pc, #56	; (adr r1, 80075f0 <scalbn+0xe8>)
 80075b8:	e9d1 0100 	ldrd	r0, r1, [r1]
 80075bc:	e7bc      	b.n	8007538 <scalbn+0x30>
 80075be:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 80075c2:	3236      	adds	r2, #54	; 0x36
 80075c4:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 80075c8:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 80075cc:	4620      	mov	r0, r4
 80075ce:	4b0c      	ldr	r3, [pc, #48]	; (8007600 <scalbn+0xf8>)
 80075d0:	2200      	movs	r2, #0
 80075d2:	e7d5      	b.n	8007580 <scalbn+0x78>
 80075d4:	f3af 8000 	nop.w
 80075d8:	c2f8f359 	.word	0xc2f8f359
 80075dc:	01a56e1f 	.word	0x01a56e1f
 80075e0:	8800759c 	.word	0x8800759c
 80075e4:	7e37e43c 	.word	0x7e37e43c
 80075e8:	8800759c 	.word	0x8800759c
 80075ec:	fe37e43c 	.word	0xfe37e43c
 80075f0:	c2f8f359 	.word	0xc2f8f359
 80075f4:	81a56e1f 	.word	0x81a56e1f
 80075f8:	43500000 	.word	0x43500000
 80075fc:	ffff3cb0 	.word	0xffff3cb0
 8007600:	3c900000 	.word	0x3c900000

08007604 <with_errno>:
 8007604:	b570      	push	{r4, r5, r6, lr}
 8007606:	4604      	mov	r4, r0
 8007608:	460d      	mov	r5, r1
 800760a:	4616      	mov	r6, r2
 800760c:	f7fe f83a 	bl	8005684 <__errno>
 8007610:	4629      	mov	r1, r5
 8007612:	6006      	str	r6, [r0, #0]
 8007614:	4620      	mov	r0, r4
 8007616:	bd70      	pop	{r4, r5, r6, pc}

08007618 <xflow>:
 8007618:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800761a:	4614      	mov	r4, r2
 800761c:	461d      	mov	r5, r3
 800761e:	b108      	cbz	r0, 8007624 <xflow+0xc>
 8007620:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8007624:	e9cd 2300 	strd	r2, r3, [sp]
 8007628:	e9dd 2300 	ldrd	r2, r3, [sp]
 800762c:	4620      	mov	r0, r4
 800762e:	4629      	mov	r1, r5
 8007630:	f7f8 ffea 	bl	8000608 <__aeabi_dmul>
 8007634:	2222      	movs	r2, #34	; 0x22
 8007636:	b003      	add	sp, #12
 8007638:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800763c:	f7ff bfe2 	b.w	8007604 <with_errno>

08007640 <__math_uflow>:
 8007640:	b508      	push	{r3, lr}
 8007642:	2200      	movs	r2, #0
 8007644:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8007648:	f7ff ffe6 	bl	8007618 <xflow>
 800764c:	ec41 0b10 	vmov	d0, r0, r1
 8007650:	bd08      	pop	{r3, pc}

08007652 <__math_oflow>:
 8007652:	b508      	push	{r3, lr}
 8007654:	2200      	movs	r2, #0
 8007656:	f04f 43e0 	mov.w	r3, #1879048192	; 0x70000000
 800765a:	f7ff ffdd 	bl	8007618 <xflow>
 800765e:	ec41 0b10 	vmov	d0, r0, r1
 8007662:	bd08      	pop	{r3, pc}

08007664 <scalbnf>:
 8007664:	ee10 3a10 	vmov	r3, s0
 8007668:	f033 4200 	bics.w	r2, r3, #2147483648	; 0x80000000
 800766c:	d02b      	beq.n	80076c6 <scalbnf+0x62>
 800766e:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
 8007672:	d302      	bcc.n	800767a <scalbnf+0x16>
 8007674:	ee30 0a00 	vadd.f32	s0, s0, s0
 8007678:	4770      	bx	lr
 800767a:	f013 4fff 	tst.w	r3, #2139095040	; 0x7f800000
 800767e:	d123      	bne.n	80076c8 <scalbnf+0x64>
 8007680:	4b24      	ldr	r3, [pc, #144]	; (8007714 <scalbnf+0xb0>)
 8007682:	eddf 7a25 	vldr	s15, [pc, #148]	; 8007718 <scalbnf+0xb4>
 8007686:	4298      	cmp	r0, r3
 8007688:	ee20 0a27 	vmul.f32	s0, s0, s15
 800768c:	db17      	blt.n	80076be <scalbnf+0x5a>
 800768e:	ee10 3a10 	vmov	r3, s0
 8007692:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 8007696:	3a19      	subs	r2, #25
 8007698:	f24c 3150 	movw	r1, #50000	; 0xc350
 800769c:	4288      	cmp	r0, r1
 800769e:	dd15      	ble.n	80076cc <scalbnf+0x68>
 80076a0:	eddf 7a1e 	vldr	s15, [pc, #120]	; 800771c <scalbnf+0xb8>
 80076a4:	eddf 6a1e 	vldr	s13, [pc, #120]	; 8007720 <scalbnf+0xbc>
 80076a8:	ee10 3a10 	vmov	r3, s0
 80076ac:	eeb0 7a67 	vmov.f32	s14, s15
 80076b0:	2b00      	cmp	r3, #0
 80076b2:	bfb8      	it	lt
 80076b4:	eef0 7a66 	vmovlt.f32	s15, s13
 80076b8:	ee27 0a87 	vmul.f32	s0, s15, s14
 80076bc:	4770      	bx	lr
 80076be:	eddf 7a19 	vldr	s15, [pc, #100]	; 8007724 <scalbnf+0xc0>
 80076c2:	ee27 0a80 	vmul.f32	s0, s15, s0
 80076c6:	4770      	bx	lr
 80076c8:	0dd2      	lsrs	r2, r2, #23
 80076ca:	e7e5      	b.n	8007698 <scalbnf+0x34>
 80076cc:	4410      	add	r0, r2
 80076ce:	28fe      	cmp	r0, #254	; 0xfe
 80076d0:	dce6      	bgt.n	80076a0 <scalbnf+0x3c>
 80076d2:	2800      	cmp	r0, #0
 80076d4:	dd06      	ble.n	80076e4 <scalbnf+0x80>
 80076d6:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 80076da:	ea43 53c0 	orr.w	r3, r3, r0, lsl #23
 80076de:	ee00 3a10 	vmov	s0, r3
 80076e2:	4770      	bx	lr
 80076e4:	f110 0f16 	cmn.w	r0, #22
 80076e8:	da09      	bge.n	80076fe <scalbnf+0x9a>
 80076ea:	eddf 7a0e 	vldr	s15, [pc, #56]	; 8007724 <scalbnf+0xc0>
 80076ee:	eddf 6a0e 	vldr	s13, [pc, #56]	; 8007728 <scalbnf+0xc4>
 80076f2:	ee10 3a10 	vmov	r3, s0
 80076f6:	eeb0 7a67 	vmov.f32	s14, s15
 80076fa:	2b00      	cmp	r3, #0
 80076fc:	e7d9      	b.n	80076b2 <scalbnf+0x4e>
 80076fe:	3019      	adds	r0, #25
 8007700:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8007704:	ea43 53c0 	orr.w	r3, r3, r0, lsl #23
 8007708:	ed9f 0a08 	vldr	s0, [pc, #32]	; 800772c <scalbnf+0xc8>
 800770c:	ee07 3a90 	vmov	s15, r3
 8007710:	e7d7      	b.n	80076c2 <scalbnf+0x5e>
 8007712:	bf00      	nop
 8007714:	ffff3cb0 	.word	0xffff3cb0
 8007718:	4c000000 	.word	0x4c000000
 800771c:	7149f2ca 	.word	0x7149f2ca
 8007720:	f149f2ca 	.word	0xf149f2ca
 8007724:	0da24260 	.word	0x0da24260
 8007728:	8da24260 	.word	0x8da24260
 800772c:	33000000 	.word	0x33000000

08007730 <with_errnof>:
 8007730:	b513      	push	{r0, r1, r4, lr}
 8007732:	4604      	mov	r4, r0
 8007734:	ed8d 0a01 	vstr	s0, [sp, #4]
 8007738:	f7fd ffa4 	bl	8005684 <__errno>
 800773c:	ed9d 0a01 	vldr	s0, [sp, #4]
 8007740:	6004      	str	r4, [r0, #0]
 8007742:	b002      	add	sp, #8
 8007744:	bd10      	pop	{r4, pc}

08007746 <xflowf>:
 8007746:	b130      	cbz	r0, 8007756 <xflowf+0x10>
 8007748:	eef1 7a40 	vneg.f32	s15, s0
 800774c:	ee27 0a80 	vmul.f32	s0, s15, s0
 8007750:	2022      	movs	r0, #34	; 0x22
 8007752:	f7ff bfed 	b.w	8007730 <with_errnof>
 8007756:	eef0 7a40 	vmov.f32	s15, s0
 800775a:	e7f7      	b.n	800774c <xflowf+0x6>

0800775c <__math_uflowf>:
 800775c:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8007764 <__math_uflowf+0x8>
 8007760:	f7ff bff1 	b.w	8007746 <xflowf>
 8007764:	10000000 	.word	0x10000000

08007768 <__math_oflowf>:
 8007768:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8007770 <__math_oflowf+0x8>
 800776c:	f7ff bfeb 	b.w	8007746 <xflowf>
 8007770:	70000000 	.word	0x70000000

08007774 <__ieee754_sqrt>:
 8007774:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007778:	ec55 4b10 	vmov	r4, r5, d0
 800777c:	4e67      	ldr	r6, [pc, #412]	; (800791c <__ieee754_sqrt+0x1a8>)
 800777e:	43ae      	bics	r6, r5
 8007780:	ee10 0a10 	vmov	r0, s0
 8007784:	ee10 2a10 	vmov	r2, s0
 8007788:	4629      	mov	r1, r5
 800778a:	462b      	mov	r3, r5
 800778c:	d10d      	bne.n	80077aa <__ieee754_sqrt+0x36>
 800778e:	f7f8 ff3b 	bl	8000608 <__aeabi_dmul>
 8007792:	4602      	mov	r2, r0
 8007794:	460b      	mov	r3, r1
 8007796:	4620      	mov	r0, r4
 8007798:	4629      	mov	r1, r5
 800779a:	f7f8 fd7f 	bl	800029c <__adddf3>
 800779e:	4604      	mov	r4, r0
 80077a0:	460d      	mov	r5, r1
 80077a2:	ec45 4b10 	vmov	d0, r4, r5
 80077a6:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80077aa:	2d00      	cmp	r5, #0
 80077ac:	dc0b      	bgt.n	80077c6 <__ieee754_sqrt+0x52>
 80077ae:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 80077b2:	4326      	orrs	r6, r4
 80077b4:	d0f5      	beq.n	80077a2 <__ieee754_sqrt+0x2e>
 80077b6:	b135      	cbz	r5, 80077c6 <__ieee754_sqrt+0x52>
 80077b8:	f7f8 fd6e 	bl	8000298 <__aeabi_dsub>
 80077bc:	4602      	mov	r2, r0
 80077be:	460b      	mov	r3, r1
 80077c0:	f7f9 f84c 	bl	800085c <__aeabi_ddiv>
 80077c4:	e7eb      	b.n	800779e <__ieee754_sqrt+0x2a>
 80077c6:	1509      	asrs	r1, r1, #20
 80077c8:	f000 808d 	beq.w	80078e6 <__ieee754_sqrt+0x172>
 80077cc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80077d0:	f2a1 36ff 	subw	r6, r1, #1023	; 0x3ff
 80077d4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80077d8:	07c9      	lsls	r1, r1, #31
 80077da:	bf5c      	itt	pl
 80077dc:	005b      	lslpl	r3, r3, #1
 80077de:	eb03 73d2 	addpl.w	r3, r3, r2, lsr #31
 80077e2:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80077e6:	bf58      	it	pl
 80077e8:	0052      	lslpl	r2, r2, #1
 80077ea:	2500      	movs	r5, #0
 80077ec:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 80077f0:	1076      	asrs	r6, r6, #1
 80077f2:	0052      	lsls	r2, r2, #1
 80077f4:	f04f 0e16 	mov.w	lr, #22
 80077f8:	46ac      	mov	ip, r5
 80077fa:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80077fe:	eb0c 0001 	add.w	r0, ip, r1
 8007802:	4298      	cmp	r0, r3
 8007804:	bfde      	ittt	le
 8007806:	1a1b      	suble	r3, r3, r0
 8007808:	eb00 0c01 	addle.w	ip, r0, r1
 800780c:	186d      	addle	r5, r5, r1
 800780e:	005b      	lsls	r3, r3, #1
 8007810:	f1be 0e01 	subs.w	lr, lr, #1
 8007814:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 8007818:	ea4f 0151 	mov.w	r1, r1, lsr #1
 800781c:	ea4f 0242 	mov.w	r2, r2, lsl #1
 8007820:	d1ed      	bne.n	80077fe <__ieee754_sqrt+0x8a>
 8007822:	4674      	mov	r4, lr
 8007824:	2720      	movs	r7, #32
 8007826:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 800782a:	4563      	cmp	r3, ip
 800782c:	eb01 000e 	add.w	r0, r1, lr
 8007830:	dc02      	bgt.n	8007838 <__ieee754_sqrt+0xc4>
 8007832:	d113      	bne.n	800785c <__ieee754_sqrt+0xe8>
 8007834:	4290      	cmp	r0, r2
 8007836:	d811      	bhi.n	800785c <__ieee754_sqrt+0xe8>
 8007838:	2800      	cmp	r0, #0
 800783a:	eb00 0e01 	add.w	lr, r0, r1
 800783e:	da57      	bge.n	80078f0 <__ieee754_sqrt+0x17c>
 8007840:	f1be 0f00 	cmp.w	lr, #0
 8007844:	db54      	blt.n	80078f0 <__ieee754_sqrt+0x17c>
 8007846:	f10c 0801 	add.w	r8, ip, #1
 800784a:	eba3 030c 	sub.w	r3, r3, ip
 800784e:	4290      	cmp	r0, r2
 8007850:	bf88      	it	hi
 8007852:	f103 33ff 	addhi.w	r3, r3, #4294967295
 8007856:	1a12      	subs	r2, r2, r0
 8007858:	440c      	add	r4, r1
 800785a:	46c4      	mov	ip, r8
 800785c:	005b      	lsls	r3, r3, #1
 800785e:	3f01      	subs	r7, #1
 8007860:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 8007864:	ea4f 0151 	mov.w	r1, r1, lsr #1
 8007868:	ea4f 0242 	mov.w	r2, r2, lsl #1
 800786c:	d1dd      	bne.n	800782a <__ieee754_sqrt+0xb6>
 800786e:	4313      	orrs	r3, r2
 8007870:	d01b      	beq.n	80078aa <__ieee754_sqrt+0x136>
 8007872:	f8df a0ac 	ldr.w	sl, [pc, #172]	; 8007920 <__ieee754_sqrt+0x1ac>
 8007876:	f8df b0ac 	ldr.w	fp, [pc, #172]	; 8007924 <__ieee754_sqrt+0x1b0>
 800787a:	e9da 0100 	ldrd	r0, r1, [sl]
 800787e:	e9db 2300 	ldrd	r2, r3, [fp]
 8007882:	f7f8 fd09 	bl	8000298 <__aeabi_dsub>
 8007886:	e9da 8900 	ldrd	r8, r9, [sl]
 800788a:	4602      	mov	r2, r0
 800788c:	460b      	mov	r3, r1
 800788e:	4640      	mov	r0, r8
 8007890:	4649      	mov	r1, r9
 8007892:	f7f9 f935 	bl	8000b00 <__aeabi_dcmple>
 8007896:	b140      	cbz	r0, 80078aa <__ieee754_sqrt+0x136>
 8007898:	f1b4 3fff 	cmp.w	r4, #4294967295
 800789c:	e9da 0100 	ldrd	r0, r1, [sl]
 80078a0:	e9db 2300 	ldrd	r2, r3, [fp]
 80078a4:	d126      	bne.n	80078f4 <__ieee754_sqrt+0x180>
 80078a6:	3501      	adds	r5, #1
 80078a8:	463c      	mov	r4, r7
 80078aa:	106a      	asrs	r2, r5, #1
 80078ac:	0863      	lsrs	r3, r4, #1
 80078ae:	07e9      	lsls	r1, r5, #31
 80078b0:	f102 527f 	add.w	r2, r2, #1069547520	; 0x3fc00000
 80078b4:	f502 1200 	add.w	r2, r2, #2097152	; 0x200000
 80078b8:	bf48      	it	mi
 80078ba:	f043 4300 	orrmi.w	r3, r3, #2147483648	; 0x80000000
 80078be:	eb02 5506 	add.w	r5, r2, r6, lsl #20
 80078c2:	461c      	mov	r4, r3
 80078c4:	e76d      	b.n	80077a2 <__ieee754_sqrt+0x2e>
 80078c6:	0ad3      	lsrs	r3, r2, #11
 80078c8:	3815      	subs	r0, #21
 80078ca:	0552      	lsls	r2, r2, #21
 80078cc:	2b00      	cmp	r3, #0
 80078ce:	d0fa      	beq.n	80078c6 <__ieee754_sqrt+0x152>
 80078d0:	02dc      	lsls	r4, r3, #11
 80078d2:	d50a      	bpl.n	80078ea <__ieee754_sqrt+0x176>
 80078d4:	f1c1 0420 	rsb	r4, r1, #32
 80078d8:	fa22 f404 	lsr.w	r4, r2, r4
 80078dc:	1e4d      	subs	r5, r1, #1
 80078de:	408a      	lsls	r2, r1
 80078e0:	4323      	orrs	r3, r4
 80078e2:	1b41      	subs	r1, r0, r5
 80078e4:	e772      	b.n	80077cc <__ieee754_sqrt+0x58>
 80078e6:	4608      	mov	r0, r1
 80078e8:	e7f0      	b.n	80078cc <__ieee754_sqrt+0x158>
 80078ea:	005b      	lsls	r3, r3, #1
 80078ec:	3101      	adds	r1, #1
 80078ee:	e7ef      	b.n	80078d0 <__ieee754_sqrt+0x15c>
 80078f0:	46e0      	mov	r8, ip
 80078f2:	e7aa      	b.n	800784a <__ieee754_sqrt+0xd6>
 80078f4:	f7f8 fcd2 	bl	800029c <__adddf3>
 80078f8:	e9da 8900 	ldrd	r8, r9, [sl]
 80078fc:	4602      	mov	r2, r0
 80078fe:	460b      	mov	r3, r1
 8007900:	4640      	mov	r0, r8
 8007902:	4649      	mov	r1, r9
 8007904:	f7f9 f8f2 	bl	8000aec <__aeabi_dcmplt>
 8007908:	b120      	cbz	r0, 8007914 <__ieee754_sqrt+0x1a0>
 800790a:	1ca0      	adds	r0, r4, #2
 800790c:	bf08      	it	eq
 800790e:	3501      	addeq	r5, #1
 8007910:	3402      	adds	r4, #2
 8007912:	e7ca      	b.n	80078aa <__ieee754_sqrt+0x136>
 8007914:	3401      	adds	r4, #1
 8007916:	f024 0401 	bic.w	r4, r4, #1
 800791a:	e7c6      	b.n	80078aa <__ieee754_sqrt+0x136>
 800791c:	7ff00000 	.word	0x7ff00000
 8007920:	200001c0 	.word	0x200001c0
 8007924:	200001c8 	.word	0x200001c8

08007928 <__ieee754_sqrtf>:
 8007928:	eeb1 0ac0 	vsqrt.f32	s0, s0
 800792c:	4770      	bx	lr
	...

08007930 <_init>:
 8007930:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007932:	bf00      	nop
 8007934:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007936:	bc08      	pop	{r3}
 8007938:	469e      	mov	lr, r3
 800793a:	4770      	bx	lr

0800793c <_fini>:
 800793c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800793e:	bf00      	nop
 8007940:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007942:	bc08      	pop	{r3}
 8007944:	469e      	mov	lr, r3
 8007946:	4770      	bx	lr
