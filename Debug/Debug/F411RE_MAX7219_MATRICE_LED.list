
F411RE_MAX7219_MATRICE_LED.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006c58  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000050  08006df8  08006df8  00016df8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006e48  08006e48  000201c0  2**0
                  CONTENTS
  4 .ARM          00000008  08006e48  08006e48  00016e48  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006e50  08006e50  000201c0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006e50  08006e50  00016e50  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006e54  08006e54  00016e54  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001c0  20000000  08006e58  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000270  200001c0  08007018  000201c0  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000430  08007018  00020430  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201c0  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  000201f0  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000f80b  00000000  00000000  00020233  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000211e  00000000  00000000  0002fa3e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000c48  00000000  00000000  00031b60  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000009ac  00000000  00000000  000327a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001622a  00000000  00000000  00033154  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000114c8  00000000  00000000  0004937e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0008a334  00000000  00000000  0005a846  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000037cc  00000000  00000000  000e4b7c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000077  00000000  00000000  000e8348  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200001c0 	.word	0x200001c0
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08006de0 	.word	0x08006de0

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200001c4 	.word	0x200001c4
 80001dc:	08006de0 	.word	0x08006de0

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_uldivmod>:
 8000290:	b953      	cbnz	r3, 80002a8 <__aeabi_uldivmod+0x18>
 8000292:	b94a      	cbnz	r2, 80002a8 <__aeabi_uldivmod+0x18>
 8000294:	2900      	cmp	r1, #0
 8000296:	bf08      	it	eq
 8000298:	2800      	cmpeq	r0, #0
 800029a:	bf1c      	itt	ne
 800029c:	f04f 31ff 	movne.w	r1, #4294967295
 80002a0:	f04f 30ff 	movne.w	r0, #4294967295
 80002a4:	f000 b970 	b.w	8000588 <__aeabi_idiv0>
 80002a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002b0:	f000 f806 	bl	80002c0 <__udivmoddi4>
 80002b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002bc:	b004      	add	sp, #16
 80002be:	4770      	bx	lr

080002c0 <__udivmoddi4>:
 80002c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002c4:	9e08      	ldr	r6, [sp, #32]
 80002c6:	460d      	mov	r5, r1
 80002c8:	4604      	mov	r4, r0
 80002ca:	460f      	mov	r7, r1
 80002cc:	2b00      	cmp	r3, #0
 80002ce:	d14a      	bne.n	8000366 <__udivmoddi4+0xa6>
 80002d0:	428a      	cmp	r2, r1
 80002d2:	4694      	mov	ip, r2
 80002d4:	d965      	bls.n	80003a2 <__udivmoddi4+0xe2>
 80002d6:	fab2 f382 	clz	r3, r2
 80002da:	b143      	cbz	r3, 80002ee <__udivmoddi4+0x2e>
 80002dc:	fa02 fc03 	lsl.w	ip, r2, r3
 80002e0:	f1c3 0220 	rsb	r2, r3, #32
 80002e4:	409f      	lsls	r7, r3
 80002e6:	fa20 f202 	lsr.w	r2, r0, r2
 80002ea:	4317      	orrs	r7, r2
 80002ec:	409c      	lsls	r4, r3
 80002ee:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80002f2:	fa1f f58c 	uxth.w	r5, ip
 80002f6:	fbb7 f1fe 	udiv	r1, r7, lr
 80002fa:	0c22      	lsrs	r2, r4, #16
 80002fc:	fb0e 7711 	mls	r7, lr, r1, r7
 8000300:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000304:	fb01 f005 	mul.w	r0, r1, r5
 8000308:	4290      	cmp	r0, r2
 800030a:	d90a      	bls.n	8000322 <__udivmoddi4+0x62>
 800030c:	eb1c 0202 	adds.w	r2, ip, r2
 8000310:	f101 37ff 	add.w	r7, r1, #4294967295
 8000314:	f080 811c 	bcs.w	8000550 <__udivmoddi4+0x290>
 8000318:	4290      	cmp	r0, r2
 800031a:	f240 8119 	bls.w	8000550 <__udivmoddi4+0x290>
 800031e:	3902      	subs	r1, #2
 8000320:	4462      	add	r2, ip
 8000322:	1a12      	subs	r2, r2, r0
 8000324:	b2a4      	uxth	r4, r4
 8000326:	fbb2 f0fe 	udiv	r0, r2, lr
 800032a:	fb0e 2210 	mls	r2, lr, r0, r2
 800032e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000332:	fb00 f505 	mul.w	r5, r0, r5
 8000336:	42a5      	cmp	r5, r4
 8000338:	d90a      	bls.n	8000350 <__udivmoddi4+0x90>
 800033a:	eb1c 0404 	adds.w	r4, ip, r4
 800033e:	f100 32ff 	add.w	r2, r0, #4294967295
 8000342:	f080 8107 	bcs.w	8000554 <__udivmoddi4+0x294>
 8000346:	42a5      	cmp	r5, r4
 8000348:	f240 8104 	bls.w	8000554 <__udivmoddi4+0x294>
 800034c:	4464      	add	r4, ip
 800034e:	3802      	subs	r0, #2
 8000350:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000354:	1b64      	subs	r4, r4, r5
 8000356:	2100      	movs	r1, #0
 8000358:	b11e      	cbz	r6, 8000362 <__udivmoddi4+0xa2>
 800035a:	40dc      	lsrs	r4, r3
 800035c:	2300      	movs	r3, #0
 800035e:	e9c6 4300 	strd	r4, r3, [r6]
 8000362:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000366:	428b      	cmp	r3, r1
 8000368:	d908      	bls.n	800037c <__udivmoddi4+0xbc>
 800036a:	2e00      	cmp	r6, #0
 800036c:	f000 80ed 	beq.w	800054a <__udivmoddi4+0x28a>
 8000370:	2100      	movs	r1, #0
 8000372:	e9c6 0500 	strd	r0, r5, [r6]
 8000376:	4608      	mov	r0, r1
 8000378:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800037c:	fab3 f183 	clz	r1, r3
 8000380:	2900      	cmp	r1, #0
 8000382:	d149      	bne.n	8000418 <__udivmoddi4+0x158>
 8000384:	42ab      	cmp	r3, r5
 8000386:	d302      	bcc.n	800038e <__udivmoddi4+0xce>
 8000388:	4282      	cmp	r2, r0
 800038a:	f200 80f8 	bhi.w	800057e <__udivmoddi4+0x2be>
 800038e:	1a84      	subs	r4, r0, r2
 8000390:	eb65 0203 	sbc.w	r2, r5, r3
 8000394:	2001      	movs	r0, #1
 8000396:	4617      	mov	r7, r2
 8000398:	2e00      	cmp	r6, #0
 800039a:	d0e2      	beq.n	8000362 <__udivmoddi4+0xa2>
 800039c:	e9c6 4700 	strd	r4, r7, [r6]
 80003a0:	e7df      	b.n	8000362 <__udivmoddi4+0xa2>
 80003a2:	b902      	cbnz	r2, 80003a6 <__udivmoddi4+0xe6>
 80003a4:	deff      	udf	#255	; 0xff
 80003a6:	fab2 f382 	clz	r3, r2
 80003aa:	2b00      	cmp	r3, #0
 80003ac:	f040 8090 	bne.w	80004d0 <__udivmoddi4+0x210>
 80003b0:	1a8a      	subs	r2, r1, r2
 80003b2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003b6:	fa1f fe8c 	uxth.w	lr, ip
 80003ba:	2101      	movs	r1, #1
 80003bc:	fbb2 f5f7 	udiv	r5, r2, r7
 80003c0:	fb07 2015 	mls	r0, r7, r5, r2
 80003c4:	0c22      	lsrs	r2, r4, #16
 80003c6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80003ca:	fb0e f005 	mul.w	r0, lr, r5
 80003ce:	4290      	cmp	r0, r2
 80003d0:	d908      	bls.n	80003e4 <__udivmoddi4+0x124>
 80003d2:	eb1c 0202 	adds.w	r2, ip, r2
 80003d6:	f105 38ff 	add.w	r8, r5, #4294967295
 80003da:	d202      	bcs.n	80003e2 <__udivmoddi4+0x122>
 80003dc:	4290      	cmp	r0, r2
 80003de:	f200 80cb 	bhi.w	8000578 <__udivmoddi4+0x2b8>
 80003e2:	4645      	mov	r5, r8
 80003e4:	1a12      	subs	r2, r2, r0
 80003e6:	b2a4      	uxth	r4, r4
 80003e8:	fbb2 f0f7 	udiv	r0, r2, r7
 80003ec:	fb07 2210 	mls	r2, r7, r0, r2
 80003f0:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80003f4:	fb0e fe00 	mul.w	lr, lr, r0
 80003f8:	45a6      	cmp	lr, r4
 80003fa:	d908      	bls.n	800040e <__udivmoddi4+0x14e>
 80003fc:	eb1c 0404 	adds.w	r4, ip, r4
 8000400:	f100 32ff 	add.w	r2, r0, #4294967295
 8000404:	d202      	bcs.n	800040c <__udivmoddi4+0x14c>
 8000406:	45a6      	cmp	lr, r4
 8000408:	f200 80bb 	bhi.w	8000582 <__udivmoddi4+0x2c2>
 800040c:	4610      	mov	r0, r2
 800040e:	eba4 040e 	sub.w	r4, r4, lr
 8000412:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000416:	e79f      	b.n	8000358 <__udivmoddi4+0x98>
 8000418:	f1c1 0720 	rsb	r7, r1, #32
 800041c:	408b      	lsls	r3, r1
 800041e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000422:	ea4c 0c03 	orr.w	ip, ip, r3
 8000426:	fa05 f401 	lsl.w	r4, r5, r1
 800042a:	fa20 f307 	lsr.w	r3, r0, r7
 800042e:	40fd      	lsrs	r5, r7
 8000430:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000434:	4323      	orrs	r3, r4
 8000436:	fbb5 f8f9 	udiv	r8, r5, r9
 800043a:	fa1f fe8c 	uxth.w	lr, ip
 800043e:	fb09 5518 	mls	r5, r9, r8, r5
 8000442:	0c1c      	lsrs	r4, r3, #16
 8000444:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000448:	fb08 f50e 	mul.w	r5, r8, lr
 800044c:	42a5      	cmp	r5, r4
 800044e:	fa02 f201 	lsl.w	r2, r2, r1
 8000452:	fa00 f001 	lsl.w	r0, r0, r1
 8000456:	d90b      	bls.n	8000470 <__udivmoddi4+0x1b0>
 8000458:	eb1c 0404 	adds.w	r4, ip, r4
 800045c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000460:	f080 8088 	bcs.w	8000574 <__udivmoddi4+0x2b4>
 8000464:	42a5      	cmp	r5, r4
 8000466:	f240 8085 	bls.w	8000574 <__udivmoddi4+0x2b4>
 800046a:	f1a8 0802 	sub.w	r8, r8, #2
 800046e:	4464      	add	r4, ip
 8000470:	1b64      	subs	r4, r4, r5
 8000472:	b29d      	uxth	r5, r3
 8000474:	fbb4 f3f9 	udiv	r3, r4, r9
 8000478:	fb09 4413 	mls	r4, r9, r3, r4
 800047c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000480:	fb03 fe0e 	mul.w	lr, r3, lr
 8000484:	45a6      	cmp	lr, r4
 8000486:	d908      	bls.n	800049a <__udivmoddi4+0x1da>
 8000488:	eb1c 0404 	adds.w	r4, ip, r4
 800048c:	f103 35ff 	add.w	r5, r3, #4294967295
 8000490:	d26c      	bcs.n	800056c <__udivmoddi4+0x2ac>
 8000492:	45a6      	cmp	lr, r4
 8000494:	d96a      	bls.n	800056c <__udivmoddi4+0x2ac>
 8000496:	3b02      	subs	r3, #2
 8000498:	4464      	add	r4, ip
 800049a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800049e:	fba3 9502 	umull	r9, r5, r3, r2
 80004a2:	eba4 040e 	sub.w	r4, r4, lr
 80004a6:	42ac      	cmp	r4, r5
 80004a8:	46c8      	mov	r8, r9
 80004aa:	46ae      	mov	lr, r5
 80004ac:	d356      	bcc.n	800055c <__udivmoddi4+0x29c>
 80004ae:	d053      	beq.n	8000558 <__udivmoddi4+0x298>
 80004b0:	b156      	cbz	r6, 80004c8 <__udivmoddi4+0x208>
 80004b2:	ebb0 0208 	subs.w	r2, r0, r8
 80004b6:	eb64 040e 	sbc.w	r4, r4, lr
 80004ba:	fa04 f707 	lsl.w	r7, r4, r7
 80004be:	40ca      	lsrs	r2, r1
 80004c0:	40cc      	lsrs	r4, r1
 80004c2:	4317      	orrs	r7, r2
 80004c4:	e9c6 7400 	strd	r7, r4, [r6]
 80004c8:	4618      	mov	r0, r3
 80004ca:	2100      	movs	r1, #0
 80004cc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004d0:	f1c3 0120 	rsb	r1, r3, #32
 80004d4:	fa02 fc03 	lsl.w	ip, r2, r3
 80004d8:	fa20 f201 	lsr.w	r2, r0, r1
 80004dc:	fa25 f101 	lsr.w	r1, r5, r1
 80004e0:	409d      	lsls	r5, r3
 80004e2:	432a      	orrs	r2, r5
 80004e4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004e8:	fa1f fe8c 	uxth.w	lr, ip
 80004ec:	fbb1 f0f7 	udiv	r0, r1, r7
 80004f0:	fb07 1510 	mls	r5, r7, r0, r1
 80004f4:	0c11      	lsrs	r1, r2, #16
 80004f6:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 80004fa:	fb00 f50e 	mul.w	r5, r0, lr
 80004fe:	428d      	cmp	r5, r1
 8000500:	fa04 f403 	lsl.w	r4, r4, r3
 8000504:	d908      	bls.n	8000518 <__udivmoddi4+0x258>
 8000506:	eb1c 0101 	adds.w	r1, ip, r1
 800050a:	f100 38ff 	add.w	r8, r0, #4294967295
 800050e:	d22f      	bcs.n	8000570 <__udivmoddi4+0x2b0>
 8000510:	428d      	cmp	r5, r1
 8000512:	d92d      	bls.n	8000570 <__udivmoddi4+0x2b0>
 8000514:	3802      	subs	r0, #2
 8000516:	4461      	add	r1, ip
 8000518:	1b49      	subs	r1, r1, r5
 800051a:	b292      	uxth	r2, r2
 800051c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000520:	fb07 1115 	mls	r1, r7, r5, r1
 8000524:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000528:	fb05 f10e 	mul.w	r1, r5, lr
 800052c:	4291      	cmp	r1, r2
 800052e:	d908      	bls.n	8000542 <__udivmoddi4+0x282>
 8000530:	eb1c 0202 	adds.w	r2, ip, r2
 8000534:	f105 38ff 	add.w	r8, r5, #4294967295
 8000538:	d216      	bcs.n	8000568 <__udivmoddi4+0x2a8>
 800053a:	4291      	cmp	r1, r2
 800053c:	d914      	bls.n	8000568 <__udivmoddi4+0x2a8>
 800053e:	3d02      	subs	r5, #2
 8000540:	4462      	add	r2, ip
 8000542:	1a52      	subs	r2, r2, r1
 8000544:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000548:	e738      	b.n	80003bc <__udivmoddi4+0xfc>
 800054a:	4631      	mov	r1, r6
 800054c:	4630      	mov	r0, r6
 800054e:	e708      	b.n	8000362 <__udivmoddi4+0xa2>
 8000550:	4639      	mov	r1, r7
 8000552:	e6e6      	b.n	8000322 <__udivmoddi4+0x62>
 8000554:	4610      	mov	r0, r2
 8000556:	e6fb      	b.n	8000350 <__udivmoddi4+0x90>
 8000558:	4548      	cmp	r0, r9
 800055a:	d2a9      	bcs.n	80004b0 <__udivmoddi4+0x1f0>
 800055c:	ebb9 0802 	subs.w	r8, r9, r2
 8000560:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000564:	3b01      	subs	r3, #1
 8000566:	e7a3      	b.n	80004b0 <__udivmoddi4+0x1f0>
 8000568:	4645      	mov	r5, r8
 800056a:	e7ea      	b.n	8000542 <__udivmoddi4+0x282>
 800056c:	462b      	mov	r3, r5
 800056e:	e794      	b.n	800049a <__udivmoddi4+0x1da>
 8000570:	4640      	mov	r0, r8
 8000572:	e7d1      	b.n	8000518 <__udivmoddi4+0x258>
 8000574:	46d0      	mov	r8, sl
 8000576:	e77b      	b.n	8000470 <__udivmoddi4+0x1b0>
 8000578:	3d02      	subs	r5, #2
 800057a:	4462      	add	r2, ip
 800057c:	e732      	b.n	80003e4 <__udivmoddi4+0x124>
 800057e:	4608      	mov	r0, r1
 8000580:	e70a      	b.n	8000398 <__udivmoddi4+0xd8>
 8000582:	4464      	add	r4, ip
 8000584:	3802      	subs	r0, #2
 8000586:	e742      	b.n	800040e <__udivmoddi4+0x14e>

08000588 <__aeabi_idiv0>:
 8000588:	4770      	bx	lr
 800058a:	bf00      	nop

0800058c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800058c:	b580      	push	{r7, lr}
 800058e:	b0b6      	sub	sp, #216	; 0xd8
 8000590:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000592:	f000 fb07 	bl	8000ba4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000596:	f000 f827 	bl	80005e8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800059a:	f000 f913 	bl	80007c4 <MX_GPIO_Init>
  MX_SPI1_Init();
 800059e:	f000 f8af 	bl	8000700 <MX_SPI1_Init>
  MX_I2C1_Init();
 80005a2:	f000 f87f 	bl	80006a4 <MX_I2C1_Init>
  MX_USART2_UART_Init();
 80005a6:	f000 f8e3 	bl	8000770 <MX_USART2_UART_Init>
  /* USER CODE BEGIN WHILE */

  Matrix Matrix;
  AHT20 aht;

  AHT_Init(&hi2c1, &huart2,&aht);
 80005aa:	1d3b      	adds	r3, r7, #4
 80005ac:	461a      	mov	r2, r3
 80005ae:	490b      	ldr	r1, [pc, #44]	; (80005dc <main+0x50>)
 80005b0:	480b      	ldr	r0, [pc, #44]	; (80005e0 <main+0x54>)
 80005b2:	f003 f85f 	bl	8003674 <AHT_Init>
  MAX7219_init(&hspi1,&Matrix);
 80005b6:	f107 031c 	add.w	r3, r7, #28
 80005ba:	4619      	mov	r1, r3
 80005bc:	4809      	ldr	r0, [pc, #36]	; (80005e4 <main+0x58>)
 80005be:	f005 fec7 	bl	8006350 <MAX7219_init>
  Display_Reset_Data_Matrice_All(&Matrix);
 80005c2:	f107 031c 	add.w	r3, r7, #28
 80005c6:	4618      	mov	r0, r3
 80005c8:	f005 fd3e 	bl	8006048 <Display_Reset_Data_Matrice_All>


  while (1)
  {

	  Task_Display_3(&aht, &Matrix);
 80005cc:	f107 021c 	add.w	r2, r7, #28
 80005d0:	1d3b      	adds	r3, r7, #4
 80005d2:	4611      	mov	r1, r2
 80005d4:	4618      	mov	r0, r3
 80005d6:	f003 f987 	bl	80038e8 <Task_Display_3>
 80005da:	e7f7      	b.n	80005cc <main+0x40>
 80005dc:	20000288 	.word	0x20000288
 80005e0:	200001dc 	.word	0x200001dc
 80005e4:	20000230 	.word	0x20000230

080005e8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005e8:	b580      	push	{r7, lr}
 80005ea:	b094      	sub	sp, #80	; 0x50
 80005ec:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005ee:	f107 0320 	add.w	r3, r7, #32
 80005f2:	2230      	movs	r2, #48	; 0x30
 80005f4:	2100      	movs	r1, #0
 80005f6:	4618      	mov	r0, r3
 80005f8:	f005 ff6e 	bl	80064d8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005fc:	f107 030c 	add.w	r3, r7, #12
 8000600:	2200      	movs	r2, #0
 8000602:	601a      	str	r2, [r3, #0]
 8000604:	605a      	str	r2, [r3, #4]
 8000606:	609a      	str	r2, [r3, #8]
 8000608:	60da      	str	r2, [r3, #12]
 800060a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800060c:	2300      	movs	r3, #0
 800060e:	60bb      	str	r3, [r7, #8]
 8000610:	4b22      	ldr	r3, [pc, #136]	; (800069c <SystemClock_Config+0xb4>)
 8000612:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000614:	4a21      	ldr	r2, [pc, #132]	; (800069c <SystemClock_Config+0xb4>)
 8000616:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800061a:	6413      	str	r3, [r2, #64]	; 0x40
 800061c:	4b1f      	ldr	r3, [pc, #124]	; (800069c <SystemClock_Config+0xb4>)
 800061e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000620:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000624:	60bb      	str	r3, [r7, #8]
 8000626:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000628:	2300      	movs	r3, #0
 800062a:	607b      	str	r3, [r7, #4]
 800062c:	4b1c      	ldr	r3, [pc, #112]	; (80006a0 <SystemClock_Config+0xb8>)
 800062e:	681b      	ldr	r3, [r3, #0]
 8000630:	4a1b      	ldr	r2, [pc, #108]	; (80006a0 <SystemClock_Config+0xb8>)
 8000632:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000636:	6013      	str	r3, [r2, #0]
 8000638:	4b19      	ldr	r3, [pc, #100]	; (80006a0 <SystemClock_Config+0xb8>)
 800063a:	681b      	ldr	r3, [r3, #0]
 800063c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000640:	607b      	str	r3, [r7, #4]
 8000642:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000644:	2302      	movs	r3, #2
 8000646:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000648:	2301      	movs	r3, #1
 800064a:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800064c:	2310      	movs	r3, #16
 800064e:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000650:	2300      	movs	r3, #0
 8000652:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000654:	f107 0320 	add.w	r3, r7, #32
 8000658:	4618      	mov	r0, r3
 800065a:	f001 fddf 	bl	800221c <HAL_RCC_OscConfig>
 800065e:	4603      	mov	r3, r0
 8000660:	2b00      	cmp	r3, #0
 8000662:	d001      	beq.n	8000668 <SystemClock_Config+0x80>
  {
    Error_Handler();
 8000664:	f000 f8fc 	bl	8000860 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000668:	230f      	movs	r3, #15
 800066a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 800066c:	2300      	movs	r3, #0
 800066e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000670:	2300      	movs	r3, #0
 8000672:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000674:	2300      	movs	r3, #0
 8000676:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000678:	2300      	movs	r3, #0
 800067a:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800067c:	f107 030c 	add.w	r3, r7, #12
 8000680:	2100      	movs	r1, #0
 8000682:	4618      	mov	r0, r3
 8000684:	f002 f842 	bl	800270c <HAL_RCC_ClockConfig>
 8000688:	4603      	mov	r3, r0
 800068a:	2b00      	cmp	r3, #0
 800068c:	d001      	beq.n	8000692 <SystemClock_Config+0xaa>
  {
    Error_Handler();
 800068e:	f000 f8e7 	bl	8000860 <Error_Handler>
  }
}
 8000692:	bf00      	nop
 8000694:	3750      	adds	r7, #80	; 0x50
 8000696:	46bd      	mov	sp, r7
 8000698:	bd80      	pop	{r7, pc}
 800069a:	bf00      	nop
 800069c:	40023800 	.word	0x40023800
 80006a0:	40007000 	.word	0x40007000

080006a4 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80006a4:	b580      	push	{r7, lr}
 80006a6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80006a8:	4b12      	ldr	r3, [pc, #72]	; (80006f4 <MX_I2C1_Init+0x50>)
 80006aa:	4a13      	ldr	r2, [pc, #76]	; (80006f8 <MX_I2C1_Init+0x54>)
 80006ac:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80006ae:	4b11      	ldr	r3, [pc, #68]	; (80006f4 <MX_I2C1_Init+0x50>)
 80006b0:	4a12      	ldr	r2, [pc, #72]	; (80006fc <MX_I2C1_Init+0x58>)
 80006b2:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80006b4:	4b0f      	ldr	r3, [pc, #60]	; (80006f4 <MX_I2C1_Init+0x50>)
 80006b6:	2200      	movs	r2, #0
 80006b8:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80006ba:	4b0e      	ldr	r3, [pc, #56]	; (80006f4 <MX_I2C1_Init+0x50>)
 80006bc:	2200      	movs	r2, #0
 80006be:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80006c0:	4b0c      	ldr	r3, [pc, #48]	; (80006f4 <MX_I2C1_Init+0x50>)
 80006c2:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80006c6:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80006c8:	4b0a      	ldr	r3, [pc, #40]	; (80006f4 <MX_I2C1_Init+0x50>)
 80006ca:	2200      	movs	r2, #0
 80006cc:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80006ce:	4b09      	ldr	r3, [pc, #36]	; (80006f4 <MX_I2C1_Init+0x50>)
 80006d0:	2200      	movs	r2, #0
 80006d2:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80006d4:	4b07      	ldr	r3, [pc, #28]	; (80006f4 <MX_I2C1_Init+0x50>)
 80006d6:	2200      	movs	r2, #0
 80006d8:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80006da:	4b06      	ldr	r3, [pc, #24]	; (80006f4 <MX_I2C1_Init+0x50>)
 80006dc:	2200      	movs	r2, #0
 80006de:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80006e0:	4804      	ldr	r0, [pc, #16]	; (80006f4 <MX_I2C1_Init+0x50>)
 80006e2:	f000 fd91 	bl	8001208 <HAL_I2C_Init>
 80006e6:	4603      	mov	r3, r0
 80006e8:	2b00      	cmp	r3, #0
 80006ea:	d001      	beq.n	80006f0 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80006ec:	f000 f8b8 	bl	8000860 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80006f0:	bf00      	nop
 80006f2:	bd80      	pop	{r7, pc}
 80006f4:	200001dc 	.word	0x200001dc
 80006f8:	40005400 	.word	0x40005400
 80006fc:	000186a0 	.word	0x000186a0

08000700 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000700:	b580      	push	{r7, lr}
 8000702:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000704:	4b18      	ldr	r3, [pc, #96]	; (8000768 <MX_SPI1_Init+0x68>)
 8000706:	4a19      	ldr	r2, [pc, #100]	; (800076c <MX_SPI1_Init+0x6c>)
 8000708:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800070a:	4b17      	ldr	r3, [pc, #92]	; (8000768 <MX_SPI1_Init+0x68>)
 800070c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000710:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_1LINE;
 8000712:	4b15      	ldr	r3, [pc, #84]	; (8000768 <MX_SPI1_Init+0x68>)
 8000714:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8000718:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 800071a:	4b13      	ldr	r3, [pc, #76]	; (8000768 <MX_SPI1_Init+0x68>)
 800071c:	2200      	movs	r2, #0
 800071e:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000720:	4b11      	ldr	r3, [pc, #68]	; (8000768 <MX_SPI1_Init+0x68>)
 8000722:	2200      	movs	r2, #0
 8000724:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000726:	4b10      	ldr	r3, [pc, #64]	; (8000768 <MX_SPI1_Init+0x68>)
 8000728:	2200      	movs	r2, #0
 800072a:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800072c:	4b0e      	ldr	r3, [pc, #56]	; (8000768 <MX_SPI1_Init+0x68>)
 800072e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000732:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000734:	4b0c      	ldr	r3, [pc, #48]	; (8000768 <MX_SPI1_Init+0x68>)
 8000736:	2200      	movs	r2, #0
 8000738:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800073a:	4b0b      	ldr	r3, [pc, #44]	; (8000768 <MX_SPI1_Init+0x68>)
 800073c:	2200      	movs	r2, #0
 800073e:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000740:	4b09      	ldr	r3, [pc, #36]	; (8000768 <MX_SPI1_Init+0x68>)
 8000742:	2200      	movs	r2, #0
 8000744:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000746:	4b08      	ldr	r3, [pc, #32]	; (8000768 <MX_SPI1_Init+0x68>)
 8000748:	2200      	movs	r2, #0
 800074a:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 800074c:	4b06      	ldr	r3, [pc, #24]	; (8000768 <MX_SPI1_Init+0x68>)
 800074e:	220a      	movs	r2, #10
 8000750:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000752:	4805      	ldr	r0, [pc, #20]	; (8000768 <MX_SPI1_Init+0x68>)
 8000754:	f002 f9ba 	bl	8002acc <HAL_SPI_Init>
 8000758:	4603      	mov	r3, r0
 800075a:	2b00      	cmp	r3, #0
 800075c:	d001      	beq.n	8000762 <MX_SPI1_Init+0x62>
  {
    Error_Handler();
 800075e:	f000 f87f 	bl	8000860 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000762:	bf00      	nop
 8000764:	bd80      	pop	{r7, pc}
 8000766:	bf00      	nop
 8000768:	20000230 	.word	0x20000230
 800076c:	40013000 	.word	0x40013000

08000770 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000770:	b580      	push	{r7, lr}
 8000772:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000774:	4b11      	ldr	r3, [pc, #68]	; (80007bc <MX_USART2_UART_Init+0x4c>)
 8000776:	4a12      	ldr	r2, [pc, #72]	; (80007c0 <MX_USART2_UART_Init+0x50>)
 8000778:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800077a:	4b10      	ldr	r3, [pc, #64]	; (80007bc <MX_USART2_UART_Init+0x4c>)
 800077c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000780:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000782:	4b0e      	ldr	r3, [pc, #56]	; (80007bc <MX_USART2_UART_Init+0x4c>)
 8000784:	2200      	movs	r2, #0
 8000786:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000788:	4b0c      	ldr	r3, [pc, #48]	; (80007bc <MX_USART2_UART_Init+0x4c>)
 800078a:	2200      	movs	r2, #0
 800078c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800078e:	4b0b      	ldr	r3, [pc, #44]	; (80007bc <MX_USART2_UART_Init+0x4c>)
 8000790:	2200      	movs	r2, #0
 8000792:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000794:	4b09      	ldr	r3, [pc, #36]	; (80007bc <MX_USART2_UART_Init+0x4c>)
 8000796:	220c      	movs	r2, #12
 8000798:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800079a:	4b08      	ldr	r3, [pc, #32]	; (80007bc <MX_USART2_UART_Init+0x4c>)
 800079c:	2200      	movs	r2, #0
 800079e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80007a0:	4b06      	ldr	r3, [pc, #24]	; (80007bc <MX_USART2_UART_Init+0x4c>)
 80007a2:	2200      	movs	r2, #0
 80007a4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80007a6:	4805      	ldr	r0, [pc, #20]	; (80007bc <MX_USART2_UART_Init+0x4c>)
 80007a8:	f002 fc38 	bl	800301c <HAL_UART_Init>
 80007ac:	4603      	mov	r3, r0
 80007ae:	2b00      	cmp	r3, #0
 80007b0:	d001      	beq.n	80007b6 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80007b2:	f000 f855 	bl	8000860 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80007b6:	bf00      	nop
 80007b8:	bd80      	pop	{r7, pc}
 80007ba:	bf00      	nop
 80007bc:	20000288 	.word	0x20000288
 80007c0:	40004400 	.word	0x40004400

080007c4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80007c4:	b580      	push	{r7, lr}
 80007c6:	b088      	sub	sp, #32
 80007c8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007ca:	f107 030c 	add.w	r3, r7, #12
 80007ce:	2200      	movs	r2, #0
 80007d0:	601a      	str	r2, [r3, #0]
 80007d2:	605a      	str	r2, [r3, #4]
 80007d4:	609a      	str	r2, [r3, #8]
 80007d6:	60da      	str	r2, [r3, #12]
 80007d8:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80007da:	2300      	movs	r3, #0
 80007dc:	60bb      	str	r3, [r7, #8]
 80007de:	4b1e      	ldr	r3, [pc, #120]	; (8000858 <MX_GPIO_Init+0x94>)
 80007e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007e2:	4a1d      	ldr	r2, [pc, #116]	; (8000858 <MX_GPIO_Init+0x94>)
 80007e4:	f043 0301 	orr.w	r3, r3, #1
 80007e8:	6313      	str	r3, [r2, #48]	; 0x30
 80007ea:	4b1b      	ldr	r3, [pc, #108]	; (8000858 <MX_GPIO_Init+0x94>)
 80007ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007ee:	f003 0301 	and.w	r3, r3, #1
 80007f2:	60bb      	str	r3, [r7, #8]
 80007f4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80007f6:	2300      	movs	r3, #0
 80007f8:	607b      	str	r3, [r7, #4]
 80007fa:	4b17      	ldr	r3, [pc, #92]	; (8000858 <MX_GPIO_Init+0x94>)
 80007fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007fe:	4a16      	ldr	r2, [pc, #88]	; (8000858 <MX_GPIO_Init+0x94>)
 8000800:	f043 0302 	orr.w	r3, r3, #2
 8000804:	6313      	str	r3, [r2, #48]	; 0x30
 8000806:	4b14      	ldr	r3, [pc, #80]	; (8000858 <MX_GPIO_Init+0x94>)
 8000808:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800080a:	f003 0302 	and.w	r3, r3, #2
 800080e:	607b      	str	r3, [r7, #4]
 8000810:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_GPIO_Port, CS_Pin, GPIO_PIN_RESET);
 8000812:	2200      	movs	r2, #0
 8000814:	2140      	movs	r1, #64	; 0x40
 8000816:	4811      	ldr	r0, [pc, #68]	; (800085c <MX_GPIO_Init+0x98>)
 8000818:	f000 fcdc 	bl	80011d4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : BP0_Pin */
  GPIO_InitStruct.Pin = BP0_Pin;
 800081c:	2301      	movs	r3, #1
 800081e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000820:	2300      	movs	r3, #0
 8000822:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000824:	2300      	movs	r3, #0
 8000826:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(BP0_GPIO_Port, &GPIO_InitStruct);
 8000828:	f107 030c 	add.w	r3, r7, #12
 800082c:	4619      	mov	r1, r3
 800082e:	480b      	ldr	r0, [pc, #44]	; (800085c <MX_GPIO_Init+0x98>)
 8000830:	f000 fb34 	bl	8000e9c <HAL_GPIO_Init>

  /*Configure GPIO pin : CS_Pin */
  GPIO_InitStruct.Pin = CS_Pin;
 8000834:	2340      	movs	r3, #64	; 0x40
 8000836:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000838:	2301      	movs	r3, #1
 800083a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800083c:	2300      	movs	r3, #0
 800083e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000840:	2300      	movs	r3, #0
 8000842:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(CS_GPIO_Port, &GPIO_InitStruct);
 8000844:	f107 030c 	add.w	r3, r7, #12
 8000848:	4619      	mov	r1, r3
 800084a:	4804      	ldr	r0, [pc, #16]	; (800085c <MX_GPIO_Init+0x98>)
 800084c:	f000 fb26 	bl	8000e9c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000850:	bf00      	nop
 8000852:	3720      	adds	r7, #32
 8000854:	46bd      	mov	sp, r7
 8000856:	bd80      	pop	{r7, pc}
 8000858:	40023800 	.word	0x40023800
 800085c:	40020400 	.word	0x40020400

08000860 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000860:	b480      	push	{r7}
 8000862:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000864:	b672      	cpsid	i
}
 8000866:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000868:	e7fe      	b.n	8000868 <Error_Handler+0x8>
	...

0800086c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800086c:	b480      	push	{r7}
 800086e:	b083      	sub	sp, #12
 8000870:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000872:	2300      	movs	r3, #0
 8000874:	607b      	str	r3, [r7, #4]
 8000876:	4b10      	ldr	r3, [pc, #64]	; (80008b8 <HAL_MspInit+0x4c>)
 8000878:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800087a:	4a0f      	ldr	r2, [pc, #60]	; (80008b8 <HAL_MspInit+0x4c>)
 800087c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000880:	6453      	str	r3, [r2, #68]	; 0x44
 8000882:	4b0d      	ldr	r3, [pc, #52]	; (80008b8 <HAL_MspInit+0x4c>)
 8000884:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000886:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800088a:	607b      	str	r3, [r7, #4]
 800088c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800088e:	2300      	movs	r3, #0
 8000890:	603b      	str	r3, [r7, #0]
 8000892:	4b09      	ldr	r3, [pc, #36]	; (80008b8 <HAL_MspInit+0x4c>)
 8000894:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000896:	4a08      	ldr	r2, [pc, #32]	; (80008b8 <HAL_MspInit+0x4c>)
 8000898:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800089c:	6413      	str	r3, [r2, #64]	; 0x40
 800089e:	4b06      	ldr	r3, [pc, #24]	; (80008b8 <HAL_MspInit+0x4c>)
 80008a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008a2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80008a6:	603b      	str	r3, [r7, #0]
 80008a8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80008aa:	bf00      	nop
 80008ac:	370c      	adds	r7, #12
 80008ae:	46bd      	mov	sp, r7
 80008b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008b4:	4770      	bx	lr
 80008b6:	bf00      	nop
 80008b8:	40023800 	.word	0x40023800

080008bc <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80008bc:	b580      	push	{r7, lr}
 80008be:	b08a      	sub	sp, #40	; 0x28
 80008c0:	af00      	add	r7, sp, #0
 80008c2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008c4:	f107 0314 	add.w	r3, r7, #20
 80008c8:	2200      	movs	r2, #0
 80008ca:	601a      	str	r2, [r3, #0]
 80008cc:	605a      	str	r2, [r3, #4]
 80008ce:	609a      	str	r2, [r3, #8]
 80008d0:	60da      	str	r2, [r3, #12]
 80008d2:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 80008d4:	687b      	ldr	r3, [r7, #4]
 80008d6:	681b      	ldr	r3, [r3, #0]
 80008d8:	4a19      	ldr	r2, [pc, #100]	; (8000940 <HAL_I2C_MspInit+0x84>)
 80008da:	4293      	cmp	r3, r2
 80008dc:	d12c      	bne.n	8000938 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80008de:	2300      	movs	r3, #0
 80008e0:	613b      	str	r3, [r7, #16]
 80008e2:	4b18      	ldr	r3, [pc, #96]	; (8000944 <HAL_I2C_MspInit+0x88>)
 80008e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008e6:	4a17      	ldr	r2, [pc, #92]	; (8000944 <HAL_I2C_MspInit+0x88>)
 80008e8:	f043 0302 	orr.w	r3, r3, #2
 80008ec:	6313      	str	r3, [r2, #48]	; 0x30
 80008ee:	4b15      	ldr	r3, [pc, #84]	; (8000944 <HAL_I2C_MspInit+0x88>)
 80008f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008f2:	f003 0302 	and.w	r3, r3, #2
 80008f6:	613b      	str	r3, [r7, #16]
 80008f8:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80008fa:	f44f 7340 	mov.w	r3, #768	; 0x300
 80008fe:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000900:	2312      	movs	r3, #18
 8000902:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000904:	2300      	movs	r3, #0
 8000906:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000908:	2303      	movs	r3, #3
 800090a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800090c:	2304      	movs	r3, #4
 800090e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000910:	f107 0314 	add.w	r3, r7, #20
 8000914:	4619      	mov	r1, r3
 8000916:	480c      	ldr	r0, [pc, #48]	; (8000948 <HAL_I2C_MspInit+0x8c>)
 8000918:	f000 fac0 	bl	8000e9c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800091c:	2300      	movs	r3, #0
 800091e:	60fb      	str	r3, [r7, #12]
 8000920:	4b08      	ldr	r3, [pc, #32]	; (8000944 <HAL_I2C_MspInit+0x88>)
 8000922:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000924:	4a07      	ldr	r2, [pc, #28]	; (8000944 <HAL_I2C_MspInit+0x88>)
 8000926:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800092a:	6413      	str	r3, [r2, #64]	; 0x40
 800092c:	4b05      	ldr	r3, [pc, #20]	; (8000944 <HAL_I2C_MspInit+0x88>)
 800092e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000930:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000934:	60fb      	str	r3, [r7, #12]
 8000936:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000938:	bf00      	nop
 800093a:	3728      	adds	r7, #40	; 0x28
 800093c:	46bd      	mov	sp, r7
 800093e:	bd80      	pop	{r7, pc}
 8000940:	40005400 	.word	0x40005400
 8000944:	40023800 	.word	0x40023800
 8000948:	40020400 	.word	0x40020400

0800094c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 800094c:	b580      	push	{r7, lr}
 800094e:	b08a      	sub	sp, #40	; 0x28
 8000950:	af00      	add	r7, sp, #0
 8000952:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000954:	f107 0314 	add.w	r3, r7, #20
 8000958:	2200      	movs	r2, #0
 800095a:	601a      	str	r2, [r3, #0]
 800095c:	605a      	str	r2, [r3, #4]
 800095e:	609a      	str	r2, [r3, #8]
 8000960:	60da      	str	r2, [r3, #12]
 8000962:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8000964:	687b      	ldr	r3, [r7, #4]
 8000966:	681b      	ldr	r3, [r3, #0]
 8000968:	4a19      	ldr	r2, [pc, #100]	; (80009d0 <HAL_SPI_MspInit+0x84>)
 800096a:	4293      	cmp	r3, r2
 800096c:	d12b      	bne.n	80009c6 <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800096e:	2300      	movs	r3, #0
 8000970:	613b      	str	r3, [r7, #16]
 8000972:	4b18      	ldr	r3, [pc, #96]	; (80009d4 <HAL_SPI_MspInit+0x88>)
 8000974:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000976:	4a17      	ldr	r2, [pc, #92]	; (80009d4 <HAL_SPI_MspInit+0x88>)
 8000978:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800097c:	6453      	str	r3, [r2, #68]	; 0x44
 800097e:	4b15      	ldr	r3, [pc, #84]	; (80009d4 <HAL_SPI_MspInit+0x88>)
 8000980:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000982:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000986:	613b      	str	r3, [r7, #16]
 8000988:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800098a:	2300      	movs	r3, #0
 800098c:	60fb      	str	r3, [r7, #12]
 800098e:	4b11      	ldr	r3, [pc, #68]	; (80009d4 <HAL_SPI_MspInit+0x88>)
 8000990:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000992:	4a10      	ldr	r2, [pc, #64]	; (80009d4 <HAL_SPI_MspInit+0x88>)
 8000994:	f043 0301 	orr.w	r3, r3, #1
 8000998:	6313      	str	r3, [r2, #48]	; 0x30
 800099a:	4b0e      	ldr	r3, [pc, #56]	; (80009d4 <HAL_SPI_MspInit+0x88>)
 800099c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800099e:	f003 0301 	and.w	r3, r3, #1
 80009a2:	60fb      	str	r3, [r7, #12]
 80009a4:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 80009a6:	23a0      	movs	r3, #160	; 0xa0
 80009a8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009aa:	2302      	movs	r3, #2
 80009ac:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009ae:	2300      	movs	r3, #0
 80009b0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80009b2:	2303      	movs	r3, #3
 80009b4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80009b6:	2305      	movs	r3, #5
 80009b8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009ba:	f107 0314 	add.w	r3, r7, #20
 80009be:	4619      	mov	r1, r3
 80009c0:	4805      	ldr	r0, [pc, #20]	; (80009d8 <HAL_SPI_MspInit+0x8c>)
 80009c2:	f000 fa6b 	bl	8000e9c <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 80009c6:	bf00      	nop
 80009c8:	3728      	adds	r7, #40	; 0x28
 80009ca:	46bd      	mov	sp, r7
 80009cc:	bd80      	pop	{r7, pc}
 80009ce:	bf00      	nop
 80009d0:	40013000 	.word	0x40013000
 80009d4:	40023800 	.word	0x40023800
 80009d8:	40020000 	.word	0x40020000

080009dc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80009dc:	b580      	push	{r7, lr}
 80009de:	b08a      	sub	sp, #40	; 0x28
 80009e0:	af00      	add	r7, sp, #0
 80009e2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009e4:	f107 0314 	add.w	r3, r7, #20
 80009e8:	2200      	movs	r2, #0
 80009ea:	601a      	str	r2, [r3, #0]
 80009ec:	605a      	str	r2, [r3, #4]
 80009ee:	609a      	str	r2, [r3, #8]
 80009f0:	60da      	str	r2, [r3, #12]
 80009f2:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 80009f4:	687b      	ldr	r3, [r7, #4]
 80009f6:	681b      	ldr	r3, [r3, #0]
 80009f8:	4a19      	ldr	r2, [pc, #100]	; (8000a60 <HAL_UART_MspInit+0x84>)
 80009fa:	4293      	cmp	r3, r2
 80009fc:	d12b      	bne.n	8000a56 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80009fe:	2300      	movs	r3, #0
 8000a00:	613b      	str	r3, [r7, #16]
 8000a02:	4b18      	ldr	r3, [pc, #96]	; (8000a64 <HAL_UART_MspInit+0x88>)
 8000a04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a06:	4a17      	ldr	r2, [pc, #92]	; (8000a64 <HAL_UART_MspInit+0x88>)
 8000a08:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000a0c:	6413      	str	r3, [r2, #64]	; 0x40
 8000a0e:	4b15      	ldr	r3, [pc, #84]	; (8000a64 <HAL_UART_MspInit+0x88>)
 8000a10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a12:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000a16:	613b      	str	r3, [r7, #16]
 8000a18:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a1a:	2300      	movs	r3, #0
 8000a1c:	60fb      	str	r3, [r7, #12]
 8000a1e:	4b11      	ldr	r3, [pc, #68]	; (8000a64 <HAL_UART_MspInit+0x88>)
 8000a20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a22:	4a10      	ldr	r2, [pc, #64]	; (8000a64 <HAL_UART_MspInit+0x88>)
 8000a24:	f043 0301 	orr.w	r3, r3, #1
 8000a28:	6313      	str	r3, [r2, #48]	; 0x30
 8000a2a:	4b0e      	ldr	r3, [pc, #56]	; (8000a64 <HAL_UART_MspInit+0x88>)
 8000a2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a2e:	f003 0301 	and.w	r3, r3, #1
 8000a32:	60fb      	str	r3, [r7, #12]
 8000a34:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000a36:	230c      	movs	r3, #12
 8000a38:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a3a:	2302      	movs	r3, #2
 8000a3c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a3e:	2300      	movs	r3, #0
 8000a40:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a42:	2303      	movs	r3, #3
 8000a44:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000a46:	2307      	movs	r3, #7
 8000a48:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a4a:	f107 0314 	add.w	r3, r7, #20
 8000a4e:	4619      	mov	r1, r3
 8000a50:	4805      	ldr	r0, [pc, #20]	; (8000a68 <HAL_UART_MspInit+0x8c>)
 8000a52:	f000 fa23 	bl	8000e9c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000a56:	bf00      	nop
 8000a58:	3728      	adds	r7, #40	; 0x28
 8000a5a:	46bd      	mov	sp, r7
 8000a5c:	bd80      	pop	{r7, pc}
 8000a5e:	bf00      	nop
 8000a60:	40004400 	.word	0x40004400
 8000a64:	40023800 	.word	0x40023800
 8000a68:	40020000 	.word	0x40020000

08000a6c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000a6c:	b480      	push	{r7}
 8000a6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000a70:	e7fe      	b.n	8000a70 <NMI_Handler+0x4>

08000a72 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000a72:	b480      	push	{r7}
 8000a74:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000a76:	e7fe      	b.n	8000a76 <HardFault_Handler+0x4>

08000a78 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000a78:	b480      	push	{r7}
 8000a7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000a7c:	e7fe      	b.n	8000a7c <MemManage_Handler+0x4>

08000a7e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000a7e:	b480      	push	{r7}
 8000a80:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000a82:	e7fe      	b.n	8000a82 <BusFault_Handler+0x4>

08000a84 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000a84:	b480      	push	{r7}
 8000a86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000a88:	e7fe      	b.n	8000a88 <UsageFault_Handler+0x4>

08000a8a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000a8a:	b480      	push	{r7}
 8000a8c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000a8e:	bf00      	nop
 8000a90:	46bd      	mov	sp, r7
 8000a92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a96:	4770      	bx	lr

08000a98 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000a98:	b480      	push	{r7}
 8000a9a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000a9c:	bf00      	nop
 8000a9e:	46bd      	mov	sp, r7
 8000aa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aa4:	4770      	bx	lr

08000aa6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000aa6:	b480      	push	{r7}
 8000aa8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000aaa:	bf00      	nop
 8000aac:	46bd      	mov	sp, r7
 8000aae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ab2:	4770      	bx	lr

08000ab4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000ab4:	b580      	push	{r7, lr}
 8000ab6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000ab8:	f000 f8c6 	bl	8000c48 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000abc:	bf00      	nop
 8000abe:	bd80      	pop	{r7, pc}

08000ac0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000ac0:	b580      	push	{r7, lr}
 8000ac2:	b086      	sub	sp, #24
 8000ac4:	af00      	add	r7, sp, #0
 8000ac6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000ac8:	4a14      	ldr	r2, [pc, #80]	; (8000b1c <_sbrk+0x5c>)
 8000aca:	4b15      	ldr	r3, [pc, #84]	; (8000b20 <_sbrk+0x60>)
 8000acc:	1ad3      	subs	r3, r2, r3
 8000ace:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000ad0:	697b      	ldr	r3, [r7, #20]
 8000ad2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000ad4:	4b13      	ldr	r3, [pc, #76]	; (8000b24 <_sbrk+0x64>)
 8000ad6:	681b      	ldr	r3, [r3, #0]
 8000ad8:	2b00      	cmp	r3, #0
 8000ada:	d102      	bne.n	8000ae2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000adc:	4b11      	ldr	r3, [pc, #68]	; (8000b24 <_sbrk+0x64>)
 8000ade:	4a12      	ldr	r2, [pc, #72]	; (8000b28 <_sbrk+0x68>)
 8000ae0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000ae2:	4b10      	ldr	r3, [pc, #64]	; (8000b24 <_sbrk+0x64>)
 8000ae4:	681a      	ldr	r2, [r3, #0]
 8000ae6:	687b      	ldr	r3, [r7, #4]
 8000ae8:	4413      	add	r3, r2
 8000aea:	693a      	ldr	r2, [r7, #16]
 8000aec:	429a      	cmp	r2, r3
 8000aee:	d207      	bcs.n	8000b00 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000af0:	f005 fcfa 	bl	80064e8 <__errno>
 8000af4:	4603      	mov	r3, r0
 8000af6:	220c      	movs	r2, #12
 8000af8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000afa:	f04f 33ff 	mov.w	r3, #4294967295
 8000afe:	e009      	b.n	8000b14 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000b00:	4b08      	ldr	r3, [pc, #32]	; (8000b24 <_sbrk+0x64>)
 8000b02:	681b      	ldr	r3, [r3, #0]
 8000b04:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000b06:	4b07      	ldr	r3, [pc, #28]	; (8000b24 <_sbrk+0x64>)
 8000b08:	681a      	ldr	r2, [r3, #0]
 8000b0a:	687b      	ldr	r3, [r7, #4]
 8000b0c:	4413      	add	r3, r2
 8000b0e:	4a05      	ldr	r2, [pc, #20]	; (8000b24 <_sbrk+0x64>)
 8000b10:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000b12:	68fb      	ldr	r3, [r7, #12]
}
 8000b14:	4618      	mov	r0, r3
 8000b16:	3718      	adds	r7, #24
 8000b18:	46bd      	mov	sp, r7
 8000b1a:	bd80      	pop	{r7, pc}
 8000b1c:	20020000 	.word	0x20020000
 8000b20:	00000400 	.word	0x00000400
 8000b24:	200002d0 	.word	0x200002d0
 8000b28:	20000430 	.word	0x20000430

08000b2c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000b2c:	b480      	push	{r7}
 8000b2e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000b30:	4b06      	ldr	r3, [pc, #24]	; (8000b4c <SystemInit+0x20>)
 8000b32:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000b36:	4a05      	ldr	r2, [pc, #20]	; (8000b4c <SystemInit+0x20>)
 8000b38:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000b3c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000b40:	bf00      	nop
 8000b42:	46bd      	mov	sp, r7
 8000b44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b48:	4770      	bx	lr
 8000b4a:	bf00      	nop
 8000b4c:	e000ed00 	.word	0xe000ed00

08000b50 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
	  ldr   sp, =_estack    		 /* set stack pointer */
 8000b50:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000b88 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000b54:	f7ff ffea 	bl	8000b2c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000b58:	480c      	ldr	r0, [pc, #48]	; (8000b8c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000b5a:	490d      	ldr	r1, [pc, #52]	; (8000b90 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000b5c:	4a0d      	ldr	r2, [pc, #52]	; (8000b94 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000b5e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000b60:	e002      	b.n	8000b68 <LoopCopyDataInit>

08000b62 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000b62:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000b64:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000b66:	3304      	adds	r3, #4

08000b68 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000b68:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000b6a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000b6c:	d3f9      	bcc.n	8000b62 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000b6e:	4a0a      	ldr	r2, [pc, #40]	; (8000b98 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000b70:	4c0a      	ldr	r4, [pc, #40]	; (8000b9c <LoopFillZerobss+0x22>)
  movs r3, #0
 8000b72:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000b74:	e001      	b.n	8000b7a <LoopFillZerobss>

08000b76 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000b76:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000b78:	3204      	adds	r2, #4

08000b7a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000b7a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000b7c:	d3fb      	bcc.n	8000b76 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000b7e:	f005 fcb9 	bl	80064f4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000b82:	f7ff fd03 	bl	800058c <main>
  bx  lr    
 8000b86:	4770      	bx	lr
	  ldr   sp, =_estack    		 /* set stack pointer */
 8000b88:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000b8c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000b90:	200001c0 	.word	0x200001c0
  ldr r2, =_sidata
 8000b94:	08006e58 	.word	0x08006e58
  ldr r2, =_sbss
 8000b98:	200001c0 	.word	0x200001c0
  ldr r4, =_ebss
 8000b9c:	20000430 	.word	0x20000430

08000ba0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000ba0:	e7fe      	b.n	8000ba0 <ADC_IRQHandler>
	...

08000ba4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000ba4:	b580      	push	{r7, lr}
 8000ba6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000ba8:	4b0e      	ldr	r3, [pc, #56]	; (8000be4 <HAL_Init+0x40>)
 8000baa:	681b      	ldr	r3, [r3, #0]
 8000bac:	4a0d      	ldr	r2, [pc, #52]	; (8000be4 <HAL_Init+0x40>)
 8000bae:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000bb2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000bb4:	4b0b      	ldr	r3, [pc, #44]	; (8000be4 <HAL_Init+0x40>)
 8000bb6:	681b      	ldr	r3, [r3, #0]
 8000bb8:	4a0a      	ldr	r2, [pc, #40]	; (8000be4 <HAL_Init+0x40>)
 8000bba:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000bbe:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000bc0:	4b08      	ldr	r3, [pc, #32]	; (8000be4 <HAL_Init+0x40>)
 8000bc2:	681b      	ldr	r3, [r3, #0]
 8000bc4:	4a07      	ldr	r2, [pc, #28]	; (8000be4 <HAL_Init+0x40>)
 8000bc6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000bca:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000bcc:	2003      	movs	r0, #3
 8000bce:	f000 f931 	bl	8000e34 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000bd2:	200f      	movs	r0, #15
 8000bd4:	f000 f808 	bl	8000be8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000bd8:	f7ff fe48 	bl	800086c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000bdc:	2300      	movs	r3, #0
}
 8000bde:	4618      	mov	r0, r3
 8000be0:	bd80      	pop	{r7, pc}
 8000be2:	bf00      	nop
 8000be4:	40023c00 	.word	0x40023c00

08000be8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000be8:	b580      	push	{r7, lr}
 8000bea:	b082      	sub	sp, #8
 8000bec:	af00      	add	r7, sp, #0
 8000bee:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000bf0:	4b12      	ldr	r3, [pc, #72]	; (8000c3c <HAL_InitTick+0x54>)
 8000bf2:	681a      	ldr	r2, [r3, #0]
 8000bf4:	4b12      	ldr	r3, [pc, #72]	; (8000c40 <HAL_InitTick+0x58>)
 8000bf6:	781b      	ldrb	r3, [r3, #0]
 8000bf8:	4619      	mov	r1, r3
 8000bfa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000bfe:	fbb3 f3f1 	udiv	r3, r3, r1
 8000c02:	fbb2 f3f3 	udiv	r3, r2, r3
 8000c06:	4618      	mov	r0, r3
 8000c08:	f000 f93b 	bl	8000e82 <HAL_SYSTICK_Config>
 8000c0c:	4603      	mov	r3, r0
 8000c0e:	2b00      	cmp	r3, #0
 8000c10:	d001      	beq.n	8000c16 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000c12:	2301      	movs	r3, #1
 8000c14:	e00e      	b.n	8000c34 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000c16:	687b      	ldr	r3, [r7, #4]
 8000c18:	2b0f      	cmp	r3, #15
 8000c1a:	d80a      	bhi.n	8000c32 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000c1c:	2200      	movs	r2, #0
 8000c1e:	6879      	ldr	r1, [r7, #4]
 8000c20:	f04f 30ff 	mov.w	r0, #4294967295
 8000c24:	f000 f911 	bl	8000e4a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000c28:	4a06      	ldr	r2, [pc, #24]	; (8000c44 <HAL_InitTick+0x5c>)
 8000c2a:	687b      	ldr	r3, [r7, #4]
 8000c2c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000c2e:	2300      	movs	r3, #0
 8000c30:	e000      	b.n	8000c34 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000c32:	2301      	movs	r3, #1
}
 8000c34:	4618      	mov	r0, r3
 8000c36:	3708      	adds	r7, #8
 8000c38:	46bd      	mov	sp, r7
 8000c3a:	bd80      	pop	{r7, pc}
 8000c3c:	20000000 	.word	0x20000000
 8000c40:	20000008 	.word	0x20000008
 8000c44:	20000004 	.word	0x20000004

08000c48 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000c48:	b480      	push	{r7}
 8000c4a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000c4c:	4b06      	ldr	r3, [pc, #24]	; (8000c68 <HAL_IncTick+0x20>)
 8000c4e:	781b      	ldrb	r3, [r3, #0]
 8000c50:	461a      	mov	r2, r3
 8000c52:	4b06      	ldr	r3, [pc, #24]	; (8000c6c <HAL_IncTick+0x24>)
 8000c54:	681b      	ldr	r3, [r3, #0]
 8000c56:	4413      	add	r3, r2
 8000c58:	4a04      	ldr	r2, [pc, #16]	; (8000c6c <HAL_IncTick+0x24>)
 8000c5a:	6013      	str	r3, [r2, #0]
}
 8000c5c:	bf00      	nop
 8000c5e:	46bd      	mov	sp, r7
 8000c60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c64:	4770      	bx	lr
 8000c66:	bf00      	nop
 8000c68:	20000008 	.word	0x20000008
 8000c6c:	200002d4 	.word	0x200002d4

08000c70 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000c70:	b480      	push	{r7}
 8000c72:	af00      	add	r7, sp, #0
  return uwTick;
 8000c74:	4b03      	ldr	r3, [pc, #12]	; (8000c84 <HAL_GetTick+0x14>)
 8000c76:	681b      	ldr	r3, [r3, #0]
}
 8000c78:	4618      	mov	r0, r3
 8000c7a:	46bd      	mov	sp, r7
 8000c7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c80:	4770      	bx	lr
 8000c82:	bf00      	nop
 8000c84:	200002d4 	.word	0x200002d4

08000c88 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000c88:	b580      	push	{r7, lr}
 8000c8a:	b084      	sub	sp, #16
 8000c8c:	af00      	add	r7, sp, #0
 8000c8e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000c90:	f7ff ffee 	bl	8000c70 <HAL_GetTick>
 8000c94:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000c96:	687b      	ldr	r3, [r7, #4]
 8000c98:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000c9a:	68fb      	ldr	r3, [r7, #12]
 8000c9c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000ca0:	d005      	beq.n	8000cae <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000ca2:	4b0a      	ldr	r3, [pc, #40]	; (8000ccc <HAL_Delay+0x44>)
 8000ca4:	781b      	ldrb	r3, [r3, #0]
 8000ca6:	461a      	mov	r2, r3
 8000ca8:	68fb      	ldr	r3, [r7, #12]
 8000caa:	4413      	add	r3, r2
 8000cac:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000cae:	bf00      	nop
 8000cb0:	f7ff ffde 	bl	8000c70 <HAL_GetTick>
 8000cb4:	4602      	mov	r2, r0
 8000cb6:	68bb      	ldr	r3, [r7, #8]
 8000cb8:	1ad3      	subs	r3, r2, r3
 8000cba:	68fa      	ldr	r2, [r7, #12]
 8000cbc:	429a      	cmp	r2, r3
 8000cbe:	d8f7      	bhi.n	8000cb0 <HAL_Delay+0x28>
  {
  }
}
 8000cc0:	bf00      	nop
 8000cc2:	bf00      	nop
 8000cc4:	3710      	adds	r7, #16
 8000cc6:	46bd      	mov	sp, r7
 8000cc8:	bd80      	pop	{r7, pc}
 8000cca:	bf00      	nop
 8000ccc:	20000008 	.word	0x20000008

08000cd0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000cd0:	b480      	push	{r7}
 8000cd2:	b085      	sub	sp, #20
 8000cd4:	af00      	add	r7, sp, #0
 8000cd6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000cd8:	687b      	ldr	r3, [r7, #4]
 8000cda:	f003 0307 	and.w	r3, r3, #7
 8000cde:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000ce0:	4b0c      	ldr	r3, [pc, #48]	; (8000d14 <__NVIC_SetPriorityGrouping+0x44>)
 8000ce2:	68db      	ldr	r3, [r3, #12]
 8000ce4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000ce6:	68ba      	ldr	r2, [r7, #8]
 8000ce8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000cec:	4013      	ands	r3, r2
 8000cee:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000cf0:	68fb      	ldr	r3, [r7, #12]
 8000cf2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000cf4:	68bb      	ldr	r3, [r7, #8]
 8000cf6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000cf8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000cfc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000d00:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000d02:	4a04      	ldr	r2, [pc, #16]	; (8000d14 <__NVIC_SetPriorityGrouping+0x44>)
 8000d04:	68bb      	ldr	r3, [r7, #8]
 8000d06:	60d3      	str	r3, [r2, #12]
}
 8000d08:	bf00      	nop
 8000d0a:	3714      	adds	r7, #20
 8000d0c:	46bd      	mov	sp, r7
 8000d0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d12:	4770      	bx	lr
 8000d14:	e000ed00 	.word	0xe000ed00

08000d18 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000d18:	b480      	push	{r7}
 8000d1a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000d1c:	4b04      	ldr	r3, [pc, #16]	; (8000d30 <__NVIC_GetPriorityGrouping+0x18>)
 8000d1e:	68db      	ldr	r3, [r3, #12]
 8000d20:	0a1b      	lsrs	r3, r3, #8
 8000d22:	f003 0307 	and.w	r3, r3, #7
}
 8000d26:	4618      	mov	r0, r3
 8000d28:	46bd      	mov	sp, r7
 8000d2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d2e:	4770      	bx	lr
 8000d30:	e000ed00 	.word	0xe000ed00

08000d34 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000d34:	b480      	push	{r7}
 8000d36:	b083      	sub	sp, #12
 8000d38:	af00      	add	r7, sp, #0
 8000d3a:	4603      	mov	r3, r0
 8000d3c:	6039      	str	r1, [r7, #0]
 8000d3e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000d40:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d44:	2b00      	cmp	r3, #0
 8000d46:	db0a      	blt.n	8000d5e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d48:	683b      	ldr	r3, [r7, #0]
 8000d4a:	b2da      	uxtb	r2, r3
 8000d4c:	490c      	ldr	r1, [pc, #48]	; (8000d80 <__NVIC_SetPriority+0x4c>)
 8000d4e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d52:	0112      	lsls	r2, r2, #4
 8000d54:	b2d2      	uxtb	r2, r2
 8000d56:	440b      	add	r3, r1
 8000d58:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000d5c:	e00a      	b.n	8000d74 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d5e:	683b      	ldr	r3, [r7, #0]
 8000d60:	b2da      	uxtb	r2, r3
 8000d62:	4908      	ldr	r1, [pc, #32]	; (8000d84 <__NVIC_SetPriority+0x50>)
 8000d64:	79fb      	ldrb	r3, [r7, #7]
 8000d66:	f003 030f 	and.w	r3, r3, #15
 8000d6a:	3b04      	subs	r3, #4
 8000d6c:	0112      	lsls	r2, r2, #4
 8000d6e:	b2d2      	uxtb	r2, r2
 8000d70:	440b      	add	r3, r1
 8000d72:	761a      	strb	r2, [r3, #24]
}
 8000d74:	bf00      	nop
 8000d76:	370c      	adds	r7, #12
 8000d78:	46bd      	mov	sp, r7
 8000d7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d7e:	4770      	bx	lr
 8000d80:	e000e100 	.word	0xe000e100
 8000d84:	e000ed00 	.word	0xe000ed00

08000d88 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000d88:	b480      	push	{r7}
 8000d8a:	b089      	sub	sp, #36	; 0x24
 8000d8c:	af00      	add	r7, sp, #0
 8000d8e:	60f8      	str	r0, [r7, #12]
 8000d90:	60b9      	str	r1, [r7, #8]
 8000d92:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000d94:	68fb      	ldr	r3, [r7, #12]
 8000d96:	f003 0307 	and.w	r3, r3, #7
 8000d9a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000d9c:	69fb      	ldr	r3, [r7, #28]
 8000d9e:	f1c3 0307 	rsb	r3, r3, #7
 8000da2:	2b04      	cmp	r3, #4
 8000da4:	bf28      	it	cs
 8000da6:	2304      	movcs	r3, #4
 8000da8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000daa:	69fb      	ldr	r3, [r7, #28]
 8000dac:	3304      	adds	r3, #4
 8000dae:	2b06      	cmp	r3, #6
 8000db0:	d902      	bls.n	8000db8 <NVIC_EncodePriority+0x30>
 8000db2:	69fb      	ldr	r3, [r7, #28]
 8000db4:	3b03      	subs	r3, #3
 8000db6:	e000      	b.n	8000dba <NVIC_EncodePriority+0x32>
 8000db8:	2300      	movs	r3, #0
 8000dba:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000dbc:	f04f 32ff 	mov.w	r2, #4294967295
 8000dc0:	69bb      	ldr	r3, [r7, #24]
 8000dc2:	fa02 f303 	lsl.w	r3, r2, r3
 8000dc6:	43da      	mvns	r2, r3
 8000dc8:	68bb      	ldr	r3, [r7, #8]
 8000dca:	401a      	ands	r2, r3
 8000dcc:	697b      	ldr	r3, [r7, #20]
 8000dce:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000dd0:	f04f 31ff 	mov.w	r1, #4294967295
 8000dd4:	697b      	ldr	r3, [r7, #20]
 8000dd6:	fa01 f303 	lsl.w	r3, r1, r3
 8000dda:	43d9      	mvns	r1, r3
 8000ddc:	687b      	ldr	r3, [r7, #4]
 8000dde:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000de0:	4313      	orrs	r3, r2
         );
}
 8000de2:	4618      	mov	r0, r3
 8000de4:	3724      	adds	r7, #36	; 0x24
 8000de6:	46bd      	mov	sp, r7
 8000de8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dec:	4770      	bx	lr
	...

08000df0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000df0:	b580      	push	{r7, lr}
 8000df2:	b082      	sub	sp, #8
 8000df4:	af00      	add	r7, sp, #0
 8000df6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000df8:	687b      	ldr	r3, [r7, #4]
 8000dfa:	3b01      	subs	r3, #1
 8000dfc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000e00:	d301      	bcc.n	8000e06 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000e02:	2301      	movs	r3, #1
 8000e04:	e00f      	b.n	8000e26 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000e06:	4a0a      	ldr	r2, [pc, #40]	; (8000e30 <SysTick_Config+0x40>)
 8000e08:	687b      	ldr	r3, [r7, #4]
 8000e0a:	3b01      	subs	r3, #1
 8000e0c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000e0e:	210f      	movs	r1, #15
 8000e10:	f04f 30ff 	mov.w	r0, #4294967295
 8000e14:	f7ff ff8e 	bl	8000d34 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000e18:	4b05      	ldr	r3, [pc, #20]	; (8000e30 <SysTick_Config+0x40>)
 8000e1a:	2200      	movs	r2, #0
 8000e1c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000e1e:	4b04      	ldr	r3, [pc, #16]	; (8000e30 <SysTick_Config+0x40>)
 8000e20:	2207      	movs	r2, #7
 8000e22:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000e24:	2300      	movs	r3, #0
}
 8000e26:	4618      	mov	r0, r3
 8000e28:	3708      	adds	r7, #8
 8000e2a:	46bd      	mov	sp, r7
 8000e2c:	bd80      	pop	{r7, pc}
 8000e2e:	bf00      	nop
 8000e30:	e000e010 	.word	0xe000e010

08000e34 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e34:	b580      	push	{r7, lr}
 8000e36:	b082      	sub	sp, #8
 8000e38:	af00      	add	r7, sp, #0
 8000e3a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000e3c:	6878      	ldr	r0, [r7, #4]
 8000e3e:	f7ff ff47 	bl	8000cd0 <__NVIC_SetPriorityGrouping>
}
 8000e42:	bf00      	nop
 8000e44:	3708      	adds	r7, #8
 8000e46:	46bd      	mov	sp, r7
 8000e48:	bd80      	pop	{r7, pc}

08000e4a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000e4a:	b580      	push	{r7, lr}
 8000e4c:	b086      	sub	sp, #24
 8000e4e:	af00      	add	r7, sp, #0
 8000e50:	4603      	mov	r3, r0
 8000e52:	60b9      	str	r1, [r7, #8]
 8000e54:	607a      	str	r2, [r7, #4]
 8000e56:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000e58:	2300      	movs	r3, #0
 8000e5a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000e5c:	f7ff ff5c 	bl	8000d18 <__NVIC_GetPriorityGrouping>
 8000e60:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000e62:	687a      	ldr	r2, [r7, #4]
 8000e64:	68b9      	ldr	r1, [r7, #8]
 8000e66:	6978      	ldr	r0, [r7, #20]
 8000e68:	f7ff ff8e 	bl	8000d88 <NVIC_EncodePriority>
 8000e6c:	4602      	mov	r2, r0
 8000e6e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000e72:	4611      	mov	r1, r2
 8000e74:	4618      	mov	r0, r3
 8000e76:	f7ff ff5d 	bl	8000d34 <__NVIC_SetPriority>
}
 8000e7a:	bf00      	nop
 8000e7c:	3718      	adds	r7, #24
 8000e7e:	46bd      	mov	sp, r7
 8000e80:	bd80      	pop	{r7, pc}

08000e82 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000e82:	b580      	push	{r7, lr}
 8000e84:	b082      	sub	sp, #8
 8000e86:	af00      	add	r7, sp, #0
 8000e88:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000e8a:	6878      	ldr	r0, [r7, #4]
 8000e8c:	f7ff ffb0 	bl	8000df0 <SysTick_Config>
 8000e90:	4603      	mov	r3, r0
}
 8000e92:	4618      	mov	r0, r3
 8000e94:	3708      	adds	r7, #8
 8000e96:	46bd      	mov	sp, r7
 8000e98:	bd80      	pop	{r7, pc}
	...

08000e9c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000e9c:	b480      	push	{r7}
 8000e9e:	b089      	sub	sp, #36	; 0x24
 8000ea0:	af00      	add	r7, sp, #0
 8000ea2:	6078      	str	r0, [r7, #4]
 8000ea4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000ea6:	2300      	movs	r3, #0
 8000ea8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000eaa:	2300      	movs	r3, #0
 8000eac:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000eae:	2300      	movs	r3, #0
 8000eb0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000eb2:	2300      	movs	r3, #0
 8000eb4:	61fb      	str	r3, [r7, #28]
 8000eb6:	e159      	b.n	800116c <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000eb8:	2201      	movs	r2, #1
 8000eba:	69fb      	ldr	r3, [r7, #28]
 8000ebc:	fa02 f303 	lsl.w	r3, r2, r3
 8000ec0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000ec2:	683b      	ldr	r3, [r7, #0]
 8000ec4:	681b      	ldr	r3, [r3, #0]
 8000ec6:	697a      	ldr	r2, [r7, #20]
 8000ec8:	4013      	ands	r3, r2
 8000eca:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000ecc:	693a      	ldr	r2, [r7, #16]
 8000ece:	697b      	ldr	r3, [r7, #20]
 8000ed0:	429a      	cmp	r2, r3
 8000ed2:	f040 8148 	bne.w	8001166 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000ed6:	683b      	ldr	r3, [r7, #0]
 8000ed8:	685b      	ldr	r3, [r3, #4]
 8000eda:	f003 0303 	and.w	r3, r3, #3
 8000ede:	2b01      	cmp	r3, #1
 8000ee0:	d005      	beq.n	8000eee <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000ee2:	683b      	ldr	r3, [r7, #0]
 8000ee4:	685b      	ldr	r3, [r3, #4]
 8000ee6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000eea:	2b02      	cmp	r3, #2
 8000eec:	d130      	bne.n	8000f50 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000eee:	687b      	ldr	r3, [r7, #4]
 8000ef0:	689b      	ldr	r3, [r3, #8]
 8000ef2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000ef4:	69fb      	ldr	r3, [r7, #28]
 8000ef6:	005b      	lsls	r3, r3, #1
 8000ef8:	2203      	movs	r2, #3
 8000efa:	fa02 f303 	lsl.w	r3, r2, r3
 8000efe:	43db      	mvns	r3, r3
 8000f00:	69ba      	ldr	r2, [r7, #24]
 8000f02:	4013      	ands	r3, r2
 8000f04:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000f06:	683b      	ldr	r3, [r7, #0]
 8000f08:	68da      	ldr	r2, [r3, #12]
 8000f0a:	69fb      	ldr	r3, [r7, #28]
 8000f0c:	005b      	lsls	r3, r3, #1
 8000f0e:	fa02 f303 	lsl.w	r3, r2, r3
 8000f12:	69ba      	ldr	r2, [r7, #24]
 8000f14:	4313      	orrs	r3, r2
 8000f16:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000f18:	687b      	ldr	r3, [r7, #4]
 8000f1a:	69ba      	ldr	r2, [r7, #24]
 8000f1c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000f1e:	687b      	ldr	r3, [r7, #4]
 8000f20:	685b      	ldr	r3, [r3, #4]
 8000f22:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000f24:	2201      	movs	r2, #1
 8000f26:	69fb      	ldr	r3, [r7, #28]
 8000f28:	fa02 f303 	lsl.w	r3, r2, r3
 8000f2c:	43db      	mvns	r3, r3
 8000f2e:	69ba      	ldr	r2, [r7, #24]
 8000f30:	4013      	ands	r3, r2
 8000f32:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000f34:	683b      	ldr	r3, [r7, #0]
 8000f36:	685b      	ldr	r3, [r3, #4]
 8000f38:	091b      	lsrs	r3, r3, #4
 8000f3a:	f003 0201 	and.w	r2, r3, #1
 8000f3e:	69fb      	ldr	r3, [r7, #28]
 8000f40:	fa02 f303 	lsl.w	r3, r2, r3
 8000f44:	69ba      	ldr	r2, [r7, #24]
 8000f46:	4313      	orrs	r3, r2
 8000f48:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000f4a:	687b      	ldr	r3, [r7, #4]
 8000f4c:	69ba      	ldr	r2, [r7, #24]
 8000f4e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000f50:	683b      	ldr	r3, [r7, #0]
 8000f52:	685b      	ldr	r3, [r3, #4]
 8000f54:	f003 0303 	and.w	r3, r3, #3
 8000f58:	2b03      	cmp	r3, #3
 8000f5a:	d017      	beq.n	8000f8c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000f5c:	687b      	ldr	r3, [r7, #4]
 8000f5e:	68db      	ldr	r3, [r3, #12]
 8000f60:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000f62:	69fb      	ldr	r3, [r7, #28]
 8000f64:	005b      	lsls	r3, r3, #1
 8000f66:	2203      	movs	r2, #3
 8000f68:	fa02 f303 	lsl.w	r3, r2, r3
 8000f6c:	43db      	mvns	r3, r3
 8000f6e:	69ba      	ldr	r2, [r7, #24]
 8000f70:	4013      	ands	r3, r2
 8000f72:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000f74:	683b      	ldr	r3, [r7, #0]
 8000f76:	689a      	ldr	r2, [r3, #8]
 8000f78:	69fb      	ldr	r3, [r7, #28]
 8000f7a:	005b      	lsls	r3, r3, #1
 8000f7c:	fa02 f303 	lsl.w	r3, r2, r3
 8000f80:	69ba      	ldr	r2, [r7, #24]
 8000f82:	4313      	orrs	r3, r2
 8000f84:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8000f86:	687b      	ldr	r3, [r7, #4]
 8000f88:	69ba      	ldr	r2, [r7, #24]
 8000f8a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000f8c:	683b      	ldr	r3, [r7, #0]
 8000f8e:	685b      	ldr	r3, [r3, #4]
 8000f90:	f003 0303 	and.w	r3, r3, #3
 8000f94:	2b02      	cmp	r3, #2
 8000f96:	d123      	bne.n	8000fe0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000f98:	69fb      	ldr	r3, [r7, #28]
 8000f9a:	08da      	lsrs	r2, r3, #3
 8000f9c:	687b      	ldr	r3, [r7, #4]
 8000f9e:	3208      	adds	r2, #8
 8000fa0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000fa4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000fa6:	69fb      	ldr	r3, [r7, #28]
 8000fa8:	f003 0307 	and.w	r3, r3, #7
 8000fac:	009b      	lsls	r3, r3, #2
 8000fae:	220f      	movs	r2, #15
 8000fb0:	fa02 f303 	lsl.w	r3, r2, r3
 8000fb4:	43db      	mvns	r3, r3
 8000fb6:	69ba      	ldr	r2, [r7, #24]
 8000fb8:	4013      	ands	r3, r2
 8000fba:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000fbc:	683b      	ldr	r3, [r7, #0]
 8000fbe:	691a      	ldr	r2, [r3, #16]
 8000fc0:	69fb      	ldr	r3, [r7, #28]
 8000fc2:	f003 0307 	and.w	r3, r3, #7
 8000fc6:	009b      	lsls	r3, r3, #2
 8000fc8:	fa02 f303 	lsl.w	r3, r2, r3
 8000fcc:	69ba      	ldr	r2, [r7, #24]
 8000fce:	4313      	orrs	r3, r2
 8000fd0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000fd2:	69fb      	ldr	r3, [r7, #28]
 8000fd4:	08da      	lsrs	r2, r3, #3
 8000fd6:	687b      	ldr	r3, [r7, #4]
 8000fd8:	3208      	adds	r2, #8
 8000fda:	69b9      	ldr	r1, [r7, #24]
 8000fdc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000fe0:	687b      	ldr	r3, [r7, #4]
 8000fe2:	681b      	ldr	r3, [r3, #0]
 8000fe4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000fe6:	69fb      	ldr	r3, [r7, #28]
 8000fe8:	005b      	lsls	r3, r3, #1
 8000fea:	2203      	movs	r2, #3
 8000fec:	fa02 f303 	lsl.w	r3, r2, r3
 8000ff0:	43db      	mvns	r3, r3
 8000ff2:	69ba      	ldr	r2, [r7, #24]
 8000ff4:	4013      	ands	r3, r2
 8000ff6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000ff8:	683b      	ldr	r3, [r7, #0]
 8000ffa:	685b      	ldr	r3, [r3, #4]
 8000ffc:	f003 0203 	and.w	r2, r3, #3
 8001000:	69fb      	ldr	r3, [r7, #28]
 8001002:	005b      	lsls	r3, r3, #1
 8001004:	fa02 f303 	lsl.w	r3, r2, r3
 8001008:	69ba      	ldr	r2, [r7, #24]
 800100a:	4313      	orrs	r3, r2
 800100c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800100e:	687b      	ldr	r3, [r7, #4]
 8001010:	69ba      	ldr	r2, [r7, #24]
 8001012:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001014:	683b      	ldr	r3, [r7, #0]
 8001016:	685b      	ldr	r3, [r3, #4]
 8001018:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800101c:	2b00      	cmp	r3, #0
 800101e:	f000 80a2 	beq.w	8001166 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001022:	2300      	movs	r3, #0
 8001024:	60fb      	str	r3, [r7, #12]
 8001026:	4b57      	ldr	r3, [pc, #348]	; (8001184 <HAL_GPIO_Init+0x2e8>)
 8001028:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800102a:	4a56      	ldr	r2, [pc, #344]	; (8001184 <HAL_GPIO_Init+0x2e8>)
 800102c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001030:	6453      	str	r3, [r2, #68]	; 0x44
 8001032:	4b54      	ldr	r3, [pc, #336]	; (8001184 <HAL_GPIO_Init+0x2e8>)
 8001034:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001036:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800103a:	60fb      	str	r3, [r7, #12]
 800103c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800103e:	4a52      	ldr	r2, [pc, #328]	; (8001188 <HAL_GPIO_Init+0x2ec>)
 8001040:	69fb      	ldr	r3, [r7, #28]
 8001042:	089b      	lsrs	r3, r3, #2
 8001044:	3302      	adds	r3, #2
 8001046:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800104a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800104c:	69fb      	ldr	r3, [r7, #28]
 800104e:	f003 0303 	and.w	r3, r3, #3
 8001052:	009b      	lsls	r3, r3, #2
 8001054:	220f      	movs	r2, #15
 8001056:	fa02 f303 	lsl.w	r3, r2, r3
 800105a:	43db      	mvns	r3, r3
 800105c:	69ba      	ldr	r2, [r7, #24]
 800105e:	4013      	ands	r3, r2
 8001060:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001062:	687b      	ldr	r3, [r7, #4]
 8001064:	4a49      	ldr	r2, [pc, #292]	; (800118c <HAL_GPIO_Init+0x2f0>)
 8001066:	4293      	cmp	r3, r2
 8001068:	d019      	beq.n	800109e <HAL_GPIO_Init+0x202>
 800106a:	687b      	ldr	r3, [r7, #4]
 800106c:	4a48      	ldr	r2, [pc, #288]	; (8001190 <HAL_GPIO_Init+0x2f4>)
 800106e:	4293      	cmp	r3, r2
 8001070:	d013      	beq.n	800109a <HAL_GPIO_Init+0x1fe>
 8001072:	687b      	ldr	r3, [r7, #4]
 8001074:	4a47      	ldr	r2, [pc, #284]	; (8001194 <HAL_GPIO_Init+0x2f8>)
 8001076:	4293      	cmp	r3, r2
 8001078:	d00d      	beq.n	8001096 <HAL_GPIO_Init+0x1fa>
 800107a:	687b      	ldr	r3, [r7, #4]
 800107c:	4a46      	ldr	r2, [pc, #280]	; (8001198 <HAL_GPIO_Init+0x2fc>)
 800107e:	4293      	cmp	r3, r2
 8001080:	d007      	beq.n	8001092 <HAL_GPIO_Init+0x1f6>
 8001082:	687b      	ldr	r3, [r7, #4]
 8001084:	4a45      	ldr	r2, [pc, #276]	; (800119c <HAL_GPIO_Init+0x300>)
 8001086:	4293      	cmp	r3, r2
 8001088:	d101      	bne.n	800108e <HAL_GPIO_Init+0x1f2>
 800108a:	2304      	movs	r3, #4
 800108c:	e008      	b.n	80010a0 <HAL_GPIO_Init+0x204>
 800108e:	2307      	movs	r3, #7
 8001090:	e006      	b.n	80010a0 <HAL_GPIO_Init+0x204>
 8001092:	2303      	movs	r3, #3
 8001094:	e004      	b.n	80010a0 <HAL_GPIO_Init+0x204>
 8001096:	2302      	movs	r3, #2
 8001098:	e002      	b.n	80010a0 <HAL_GPIO_Init+0x204>
 800109a:	2301      	movs	r3, #1
 800109c:	e000      	b.n	80010a0 <HAL_GPIO_Init+0x204>
 800109e:	2300      	movs	r3, #0
 80010a0:	69fa      	ldr	r2, [r7, #28]
 80010a2:	f002 0203 	and.w	r2, r2, #3
 80010a6:	0092      	lsls	r2, r2, #2
 80010a8:	4093      	lsls	r3, r2
 80010aa:	69ba      	ldr	r2, [r7, #24]
 80010ac:	4313      	orrs	r3, r2
 80010ae:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80010b0:	4935      	ldr	r1, [pc, #212]	; (8001188 <HAL_GPIO_Init+0x2ec>)
 80010b2:	69fb      	ldr	r3, [r7, #28]
 80010b4:	089b      	lsrs	r3, r3, #2
 80010b6:	3302      	adds	r3, #2
 80010b8:	69ba      	ldr	r2, [r7, #24]
 80010ba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80010be:	4b38      	ldr	r3, [pc, #224]	; (80011a0 <HAL_GPIO_Init+0x304>)
 80010c0:	689b      	ldr	r3, [r3, #8]
 80010c2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80010c4:	693b      	ldr	r3, [r7, #16]
 80010c6:	43db      	mvns	r3, r3
 80010c8:	69ba      	ldr	r2, [r7, #24]
 80010ca:	4013      	ands	r3, r2
 80010cc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80010ce:	683b      	ldr	r3, [r7, #0]
 80010d0:	685b      	ldr	r3, [r3, #4]
 80010d2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80010d6:	2b00      	cmp	r3, #0
 80010d8:	d003      	beq.n	80010e2 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 80010da:	69ba      	ldr	r2, [r7, #24]
 80010dc:	693b      	ldr	r3, [r7, #16]
 80010de:	4313      	orrs	r3, r2
 80010e0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80010e2:	4a2f      	ldr	r2, [pc, #188]	; (80011a0 <HAL_GPIO_Init+0x304>)
 80010e4:	69bb      	ldr	r3, [r7, #24]
 80010e6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80010e8:	4b2d      	ldr	r3, [pc, #180]	; (80011a0 <HAL_GPIO_Init+0x304>)
 80010ea:	68db      	ldr	r3, [r3, #12]
 80010ec:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80010ee:	693b      	ldr	r3, [r7, #16]
 80010f0:	43db      	mvns	r3, r3
 80010f2:	69ba      	ldr	r2, [r7, #24]
 80010f4:	4013      	ands	r3, r2
 80010f6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80010f8:	683b      	ldr	r3, [r7, #0]
 80010fa:	685b      	ldr	r3, [r3, #4]
 80010fc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001100:	2b00      	cmp	r3, #0
 8001102:	d003      	beq.n	800110c <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8001104:	69ba      	ldr	r2, [r7, #24]
 8001106:	693b      	ldr	r3, [r7, #16]
 8001108:	4313      	orrs	r3, r2
 800110a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800110c:	4a24      	ldr	r2, [pc, #144]	; (80011a0 <HAL_GPIO_Init+0x304>)
 800110e:	69bb      	ldr	r3, [r7, #24]
 8001110:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001112:	4b23      	ldr	r3, [pc, #140]	; (80011a0 <HAL_GPIO_Init+0x304>)
 8001114:	685b      	ldr	r3, [r3, #4]
 8001116:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001118:	693b      	ldr	r3, [r7, #16]
 800111a:	43db      	mvns	r3, r3
 800111c:	69ba      	ldr	r2, [r7, #24]
 800111e:	4013      	ands	r3, r2
 8001120:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001122:	683b      	ldr	r3, [r7, #0]
 8001124:	685b      	ldr	r3, [r3, #4]
 8001126:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800112a:	2b00      	cmp	r3, #0
 800112c:	d003      	beq.n	8001136 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 800112e:	69ba      	ldr	r2, [r7, #24]
 8001130:	693b      	ldr	r3, [r7, #16]
 8001132:	4313      	orrs	r3, r2
 8001134:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001136:	4a1a      	ldr	r2, [pc, #104]	; (80011a0 <HAL_GPIO_Init+0x304>)
 8001138:	69bb      	ldr	r3, [r7, #24]
 800113a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800113c:	4b18      	ldr	r3, [pc, #96]	; (80011a0 <HAL_GPIO_Init+0x304>)
 800113e:	681b      	ldr	r3, [r3, #0]
 8001140:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001142:	693b      	ldr	r3, [r7, #16]
 8001144:	43db      	mvns	r3, r3
 8001146:	69ba      	ldr	r2, [r7, #24]
 8001148:	4013      	ands	r3, r2
 800114a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800114c:	683b      	ldr	r3, [r7, #0]
 800114e:	685b      	ldr	r3, [r3, #4]
 8001150:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001154:	2b00      	cmp	r3, #0
 8001156:	d003      	beq.n	8001160 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8001158:	69ba      	ldr	r2, [r7, #24]
 800115a:	693b      	ldr	r3, [r7, #16]
 800115c:	4313      	orrs	r3, r2
 800115e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001160:	4a0f      	ldr	r2, [pc, #60]	; (80011a0 <HAL_GPIO_Init+0x304>)
 8001162:	69bb      	ldr	r3, [r7, #24]
 8001164:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001166:	69fb      	ldr	r3, [r7, #28]
 8001168:	3301      	adds	r3, #1
 800116a:	61fb      	str	r3, [r7, #28]
 800116c:	69fb      	ldr	r3, [r7, #28]
 800116e:	2b0f      	cmp	r3, #15
 8001170:	f67f aea2 	bls.w	8000eb8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001174:	bf00      	nop
 8001176:	bf00      	nop
 8001178:	3724      	adds	r7, #36	; 0x24
 800117a:	46bd      	mov	sp, r7
 800117c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001180:	4770      	bx	lr
 8001182:	bf00      	nop
 8001184:	40023800 	.word	0x40023800
 8001188:	40013800 	.word	0x40013800
 800118c:	40020000 	.word	0x40020000
 8001190:	40020400 	.word	0x40020400
 8001194:	40020800 	.word	0x40020800
 8001198:	40020c00 	.word	0x40020c00
 800119c:	40021000 	.word	0x40021000
 80011a0:	40013c00 	.word	0x40013c00

080011a4 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80011a4:	b480      	push	{r7}
 80011a6:	b085      	sub	sp, #20
 80011a8:	af00      	add	r7, sp, #0
 80011aa:	6078      	str	r0, [r7, #4]
 80011ac:	460b      	mov	r3, r1
 80011ae:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	691a      	ldr	r2, [r3, #16]
 80011b4:	887b      	ldrh	r3, [r7, #2]
 80011b6:	4013      	ands	r3, r2
 80011b8:	2b00      	cmp	r3, #0
 80011ba:	d002      	beq.n	80011c2 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80011bc:	2301      	movs	r3, #1
 80011be:	73fb      	strb	r3, [r7, #15]
 80011c0:	e001      	b.n	80011c6 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80011c2:	2300      	movs	r3, #0
 80011c4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80011c6:	7bfb      	ldrb	r3, [r7, #15]
}
 80011c8:	4618      	mov	r0, r3
 80011ca:	3714      	adds	r7, #20
 80011cc:	46bd      	mov	sp, r7
 80011ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011d2:	4770      	bx	lr

080011d4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80011d4:	b480      	push	{r7}
 80011d6:	b083      	sub	sp, #12
 80011d8:	af00      	add	r7, sp, #0
 80011da:	6078      	str	r0, [r7, #4]
 80011dc:	460b      	mov	r3, r1
 80011de:	807b      	strh	r3, [r7, #2]
 80011e0:	4613      	mov	r3, r2
 80011e2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80011e4:	787b      	ldrb	r3, [r7, #1]
 80011e6:	2b00      	cmp	r3, #0
 80011e8:	d003      	beq.n	80011f2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80011ea:	887a      	ldrh	r2, [r7, #2]
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80011f0:	e003      	b.n	80011fa <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80011f2:	887b      	ldrh	r3, [r7, #2]
 80011f4:	041a      	lsls	r2, r3, #16
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	619a      	str	r2, [r3, #24]
}
 80011fa:	bf00      	nop
 80011fc:	370c      	adds	r7, #12
 80011fe:	46bd      	mov	sp, r7
 8001200:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001204:	4770      	bx	lr
	...

08001208 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001208:	b580      	push	{r7, lr}
 800120a:	b084      	sub	sp, #16
 800120c:	af00      	add	r7, sp, #0
 800120e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	2b00      	cmp	r3, #0
 8001214:	d101      	bne.n	800121a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001216:	2301      	movs	r3, #1
 8001218:	e12b      	b.n	8001472 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001220:	b2db      	uxtb	r3, r3
 8001222:	2b00      	cmp	r3, #0
 8001224:	d106      	bne.n	8001234 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	2200      	movs	r2, #0
 800122a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800122e:	6878      	ldr	r0, [r7, #4]
 8001230:	f7ff fb44 	bl	80008bc <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	2224      	movs	r2, #36	; 0x24
 8001238:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	681b      	ldr	r3, [r3, #0]
 8001240:	681a      	ldr	r2, [r3, #0]
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	681b      	ldr	r3, [r3, #0]
 8001246:	f022 0201 	bic.w	r2, r2, #1
 800124a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	681b      	ldr	r3, [r3, #0]
 8001250:	681a      	ldr	r2, [r3, #0]
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	681b      	ldr	r3, [r3, #0]
 8001256:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800125a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	681b      	ldr	r3, [r3, #0]
 8001260:	681a      	ldr	r2, [r3, #0]
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	681b      	ldr	r3, [r3, #0]
 8001266:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800126a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800126c:	f001 fc06 	bl	8002a7c <HAL_RCC_GetPCLK1Freq>
 8001270:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	685b      	ldr	r3, [r3, #4]
 8001276:	4a81      	ldr	r2, [pc, #516]	; (800147c <HAL_I2C_Init+0x274>)
 8001278:	4293      	cmp	r3, r2
 800127a:	d807      	bhi.n	800128c <HAL_I2C_Init+0x84>
 800127c:	68fb      	ldr	r3, [r7, #12]
 800127e:	4a80      	ldr	r2, [pc, #512]	; (8001480 <HAL_I2C_Init+0x278>)
 8001280:	4293      	cmp	r3, r2
 8001282:	bf94      	ite	ls
 8001284:	2301      	movls	r3, #1
 8001286:	2300      	movhi	r3, #0
 8001288:	b2db      	uxtb	r3, r3
 800128a:	e006      	b.n	800129a <HAL_I2C_Init+0x92>
 800128c:	68fb      	ldr	r3, [r7, #12]
 800128e:	4a7d      	ldr	r2, [pc, #500]	; (8001484 <HAL_I2C_Init+0x27c>)
 8001290:	4293      	cmp	r3, r2
 8001292:	bf94      	ite	ls
 8001294:	2301      	movls	r3, #1
 8001296:	2300      	movhi	r3, #0
 8001298:	b2db      	uxtb	r3, r3
 800129a:	2b00      	cmp	r3, #0
 800129c:	d001      	beq.n	80012a2 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800129e:	2301      	movs	r3, #1
 80012a0:	e0e7      	b.n	8001472 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80012a2:	68fb      	ldr	r3, [r7, #12]
 80012a4:	4a78      	ldr	r2, [pc, #480]	; (8001488 <HAL_I2C_Init+0x280>)
 80012a6:	fba2 2303 	umull	r2, r3, r2, r3
 80012aa:	0c9b      	lsrs	r3, r3, #18
 80012ac:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	681b      	ldr	r3, [r3, #0]
 80012b2:	685b      	ldr	r3, [r3, #4]
 80012b4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	681b      	ldr	r3, [r3, #0]
 80012bc:	68ba      	ldr	r2, [r7, #8]
 80012be:	430a      	orrs	r2, r1
 80012c0:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	681b      	ldr	r3, [r3, #0]
 80012c6:	6a1b      	ldr	r3, [r3, #32]
 80012c8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	685b      	ldr	r3, [r3, #4]
 80012d0:	4a6a      	ldr	r2, [pc, #424]	; (800147c <HAL_I2C_Init+0x274>)
 80012d2:	4293      	cmp	r3, r2
 80012d4:	d802      	bhi.n	80012dc <HAL_I2C_Init+0xd4>
 80012d6:	68bb      	ldr	r3, [r7, #8]
 80012d8:	3301      	adds	r3, #1
 80012da:	e009      	b.n	80012f0 <HAL_I2C_Init+0xe8>
 80012dc:	68bb      	ldr	r3, [r7, #8]
 80012de:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80012e2:	fb02 f303 	mul.w	r3, r2, r3
 80012e6:	4a69      	ldr	r2, [pc, #420]	; (800148c <HAL_I2C_Init+0x284>)
 80012e8:	fba2 2303 	umull	r2, r3, r2, r3
 80012ec:	099b      	lsrs	r3, r3, #6
 80012ee:	3301      	adds	r3, #1
 80012f0:	687a      	ldr	r2, [r7, #4]
 80012f2:	6812      	ldr	r2, [r2, #0]
 80012f4:	430b      	orrs	r3, r1
 80012f6:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	681b      	ldr	r3, [r3, #0]
 80012fc:	69db      	ldr	r3, [r3, #28]
 80012fe:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8001302:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	685b      	ldr	r3, [r3, #4]
 800130a:	495c      	ldr	r1, [pc, #368]	; (800147c <HAL_I2C_Init+0x274>)
 800130c:	428b      	cmp	r3, r1
 800130e:	d819      	bhi.n	8001344 <HAL_I2C_Init+0x13c>
 8001310:	68fb      	ldr	r3, [r7, #12]
 8001312:	1e59      	subs	r1, r3, #1
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	685b      	ldr	r3, [r3, #4]
 8001318:	005b      	lsls	r3, r3, #1
 800131a:	fbb1 f3f3 	udiv	r3, r1, r3
 800131e:	1c59      	adds	r1, r3, #1
 8001320:	f640 73fc 	movw	r3, #4092	; 0xffc
 8001324:	400b      	ands	r3, r1
 8001326:	2b00      	cmp	r3, #0
 8001328:	d00a      	beq.n	8001340 <HAL_I2C_Init+0x138>
 800132a:	68fb      	ldr	r3, [r7, #12]
 800132c:	1e59      	subs	r1, r3, #1
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	685b      	ldr	r3, [r3, #4]
 8001332:	005b      	lsls	r3, r3, #1
 8001334:	fbb1 f3f3 	udiv	r3, r1, r3
 8001338:	3301      	adds	r3, #1
 800133a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800133e:	e051      	b.n	80013e4 <HAL_I2C_Init+0x1dc>
 8001340:	2304      	movs	r3, #4
 8001342:	e04f      	b.n	80013e4 <HAL_I2C_Init+0x1dc>
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	689b      	ldr	r3, [r3, #8]
 8001348:	2b00      	cmp	r3, #0
 800134a:	d111      	bne.n	8001370 <HAL_I2C_Init+0x168>
 800134c:	68fb      	ldr	r3, [r7, #12]
 800134e:	1e58      	subs	r0, r3, #1
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	6859      	ldr	r1, [r3, #4]
 8001354:	460b      	mov	r3, r1
 8001356:	005b      	lsls	r3, r3, #1
 8001358:	440b      	add	r3, r1
 800135a:	fbb0 f3f3 	udiv	r3, r0, r3
 800135e:	3301      	adds	r3, #1
 8001360:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001364:	2b00      	cmp	r3, #0
 8001366:	bf0c      	ite	eq
 8001368:	2301      	moveq	r3, #1
 800136a:	2300      	movne	r3, #0
 800136c:	b2db      	uxtb	r3, r3
 800136e:	e012      	b.n	8001396 <HAL_I2C_Init+0x18e>
 8001370:	68fb      	ldr	r3, [r7, #12]
 8001372:	1e58      	subs	r0, r3, #1
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	6859      	ldr	r1, [r3, #4]
 8001378:	460b      	mov	r3, r1
 800137a:	009b      	lsls	r3, r3, #2
 800137c:	440b      	add	r3, r1
 800137e:	0099      	lsls	r1, r3, #2
 8001380:	440b      	add	r3, r1
 8001382:	fbb0 f3f3 	udiv	r3, r0, r3
 8001386:	3301      	adds	r3, #1
 8001388:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800138c:	2b00      	cmp	r3, #0
 800138e:	bf0c      	ite	eq
 8001390:	2301      	moveq	r3, #1
 8001392:	2300      	movne	r3, #0
 8001394:	b2db      	uxtb	r3, r3
 8001396:	2b00      	cmp	r3, #0
 8001398:	d001      	beq.n	800139e <HAL_I2C_Init+0x196>
 800139a:	2301      	movs	r3, #1
 800139c:	e022      	b.n	80013e4 <HAL_I2C_Init+0x1dc>
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	689b      	ldr	r3, [r3, #8]
 80013a2:	2b00      	cmp	r3, #0
 80013a4:	d10e      	bne.n	80013c4 <HAL_I2C_Init+0x1bc>
 80013a6:	68fb      	ldr	r3, [r7, #12]
 80013a8:	1e58      	subs	r0, r3, #1
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	6859      	ldr	r1, [r3, #4]
 80013ae:	460b      	mov	r3, r1
 80013b0:	005b      	lsls	r3, r3, #1
 80013b2:	440b      	add	r3, r1
 80013b4:	fbb0 f3f3 	udiv	r3, r0, r3
 80013b8:	3301      	adds	r3, #1
 80013ba:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80013be:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80013c2:	e00f      	b.n	80013e4 <HAL_I2C_Init+0x1dc>
 80013c4:	68fb      	ldr	r3, [r7, #12]
 80013c6:	1e58      	subs	r0, r3, #1
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	6859      	ldr	r1, [r3, #4]
 80013cc:	460b      	mov	r3, r1
 80013ce:	009b      	lsls	r3, r3, #2
 80013d0:	440b      	add	r3, r1
 80013d2:	0099      	lsls	r1, r3, #2
 80013d4:	440b      	add	r3, r1
 80013d6:	fbb0 f3f3 	udiv	r3, r0, r3
 80013da:	3301      	adds	r3, #1
 80013dc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80013e0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80013e4:	6879      	ldr	r1, [r7, #4]
 80013e6:	6809      	ldr	r1, [r1, #0]
 80013e8:	4313      	orrs	r3, r2
 80013ea:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	681b      	ldr	r3, [r3, #0]
 80013f0:	681b      	ldr	r3, [r3, #0]
 80013f2:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	69da      	ldr	r2, [r3, #28]
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	6a1b      	ldr	r3, [r3, #32]
 80013fe:	431a      	orrs	r2, r3
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	681b      	ldr	r3, [r3, #0]
 8001404:	430a      	orrs	r2, r1
 8001406:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	681b      	ldr	r3, [r3, #0]
 800140c:	689b      	ldr	r3, [r3, #8]
 800140e:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8001412:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8001416:	687a      	ldr	r2, [r7, #4]
 8001418:	6911      	ldr	r1, [r2, #16]
 800141a:	687a      	ldr	r2, [r7, #4]
 800141c:	68d2      	ldr	r2, [r2, #12]
 800141e:	4311      	orrs	r1, r2
 8001420:	687a      	ldr	r2, [r7, #4]
 8001422:	6812      	ldr	r2, [r2, #0]
 8001424:	430b      	orrs	r3, r1
 8001426:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	681b      	ldr	r3, [r3, #0]
 800142c:	68db      	ldr	r3, [r3, #12]
 800142e:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	695a      	ldr	r2, [r3, #20]
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	699b      	ldr	r3, [r3, #24]
 800143a:	431a      	orrs	r2, r3
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	681b      	ldr	r3, [r3, #0]
 8001440:	430a      	orrs	r2, r1
 8001442:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	681b      	ldr	r3, [r3, #0]
 8001448:	681a      	ldr	r2, [r3, #0]
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	681b      	ldr	r3, [r3, #0]
 800144e:	f042 0201 	orr.w	r2, r2, #1
 8001452:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	2200      	movs	r2, #0
 8001458:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	2220      	movs	r2, #32
 800145e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	2200      	movs	r2, #0
 8001466:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	2200      	movs	r2, #0
 800146c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8001470:	2300      	movs	r3, #0
}
 8001472:	4618      	mov	r0, r3
 8001474:	3710      	adds	r7, #16
 8001476:	46bd      	mov	sp, r7
 8001478:	bd80      	pop	{r7, pc}
 800147a:	bf00      	nop
 800147c:	000186a0 	.word	0x000186a0
 8001480:	001e847f 	.word	0x001e847f
 8001484:	003d08ff 	.word	0x003d08ff
 8001488:	431bde83 	.word	0x431bde83
 800148c:	10624dd3 	.word	0x10624dd3

08001490 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001490:	b580      	push	{r7, lr}
 8001492:	b08c      	sub	sp, #48	; 0x30
 8001494:	af02      	add	r7, sp, #8
 8001496:	60f8      	str	r0, [r7, #12]
 8001498:	607a      	str	r2, [r7, #4]
 800149a:	461a      	mov	r2, r3
 800149c:	460b      	mov	r3, r1
 800149e:	817b      	strh	r3, [r7, #10]
 80014a0:	4613      	mov	r3, r2
 80014a2:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80014a4:	f7ff fbe4 	bl	8000c70 <HAL_GetTick>
 80014a8:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 80014aa:	68fb      	ldr	r3, [r7, #12]
 80014ac:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80014b0:	b2db      	uxtb	r3, r3
 80014b2:	2b20      	cmp	r3, #32
 80014b4:	f040 8217 	bne.w	80018e6 <HAL_I2C_Master_Receive+0x456>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80014b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014ba:	9300      	str	r3, [sp, #0]
 80014bc:	2319      	movs	r3, #25
 80014be:	2201      	movs	r2, #1
 80014c0:	497c      	ldr	r1, [pc, #496]	; (80016b4 <HAL_I2C_Master_Receive+0x224>)
 80014c2:	68f8      	ldr	r0, [r7, #12]
 80014c4:	f000 fc74 	bl	8001db0 <I2C_WaitOnFlagUntilTimeout>
 80014c8:	4603      	mov	r3, r0
 80014ca:	2b00      	cmp	r3, #0
 80014cc:	d001      	beq.n	80014d2 <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 80014ce:	2302      	movs	r3, #2
 80014d0:	e20a      	b.n	80018e8 <HAL_I2C_Master_Receive+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80014d2:	68fb      	ldr	r3, [r7, #12]
 80014d4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80014d8:	2b01      	cmp	r3, #1
 80014da:	d101      	bne.n	80014e0 <HAL_I2C_Master_Receive+0x50>
 80014dc:	2302      	movs	r3, #2
 80014de:	e203      	b.n	80018e8 <HAL_I2C_Master_Receive+0x458>
 80014e0:	68fb      	ldr	r3, [r7, #12]
 80014e2:	2201      	movs	r2, #1
 80014e4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80014e8:	68fb      	ldr	r3, [r7, #12]
 80014ea:	681b      	ldr	r3, [r3, #0]
 80014ec:	681b      	ldr	r3, [r3, #0]
 80014ee:	f003 0301 	and.w	r3, r3, #1
 80014f2:	2b01      	cmp	r3, #1
 80014f4:	d007      	beq.n	8001506 <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80014f6:	68fb      	ldr	r3, [r7, #12]
 80014f8:	681b      	ldr	r3, [r3, #0]
 80014fa:	681a      	ldr	r2, [r3, #0]
 80014fc:	68fb      	ldr	r3, [r7, #12]
 80014fe:	681b      	ldr	r3, [r3, #0]
 8001500:	f042 0201 	orr.w	r2, r2, #1
 8001504:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001506:	68fb      	ldr	r3, [r7, #12]
 8001508:	681b      	ldr	r3, [r3, #0]
 800150a:	681a      	ldr	r2, [r3, #0]
 800150c:	68fb      	ldr	r3, [r7, #12]
 800150e:	681b      	ldr	r3, [r3, #0]
 8001510:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001514:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8001516:	68fb      	ldr	r3, [r7, #12]
 8001518:	2222      	movs	r2, #34	; 0x22
 800151a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800151e:	68fb      	ldr	r3, [r7, #12]
 8001520:	2210      	movs	r2, #16
 8001522:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8001526:	68fb      	ldr	r3, [r7, #12]
 8001528:	2200      	movs	r2, #0
 800152a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800152c:	68fb      	ldr	r3, [r7, #12]
 800152e:	687a      	ldr	r2, [r7, #4]
 8001530:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8001532:	68fb      	ldr	r3, [r7, #12]
 8001534:	893a      	ldrh	r2, [r7, #8]
 8001536:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8001538:	68fb      	ldr	r3, [r7, #12]
 800153a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800153c:	b29a      	uxth	r2, r3
 800153e:	68fb      	ldr	r3, [r7, #12]
 8001540:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001542:	68fb      	ldr	r3, [r7, #12]
 8001544:	4a5c      	ldr	r2, [pc, #368]	; (80016b8 <HAL_I2C_Master_Receive+0x228>)
 8001546:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8001548:	8979      	ldrh	r1, [r7, #10]
 800154a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800154c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800154e:	68f8      	ldr	r0, [r7, #12]
 8001550:	f000 faca 	bl	8001ae8 <I2C_MasterRequestRead>
 8001554:	4603      	mov	r3, r0
 8001556:	2b00      	cmp	r3, #0
 8001558:	d001      	beq.n	800155e <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 800155a:	2301      	movs	r3, #1
 800155c:	e1c4      	b.n	80018e8 <HAL_I2C_Master_Receive+0x458>
    }

    if (hi2c->XferSize == 0U)
 800155e:	68fb      	ldr	r3, [r7, #12]
 8001560:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001562:	2b00      	cmp	r3, #0
 8001564:	d113      	bne.n	800158e <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001566:	2300      	movs	r3, #0
 8001568:	623b      	str	r3, [r7, #32]
 800156a:	68fb      	ldr	r3, [r7, #12]
 800156c:	681b      	ldr	r3, [r3, #0]
 800156e:	695b      	ldr	r3, [r3, #20]
 8001570:	623b      	str	r3, [r7, #32]
 8001572:	68fb      	ldr	r3, [r7, #12]
 8001574:	681b      	ldr	r3, [r3, #0]
 8001576:	699b      	ldr	r3, [r3, #24]
 8001578:	623b      	str	r3, [r7, #32]
 800157a:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800157c:	68fb      	ldr	r3, [r7, #12]
 800157e:	681b      	ldr	r3, [r3, #0]
 8001580:	681a      	ldr	r2, [r3, #0]
 8001582:	68fb      	ldr	r3, [r7, #12]
 8001584:	681b      	ldr	r3, [r3, #0]
 8001586:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800158a:	601a      	str	r2, [r3, #0]
 800158c:	e198      	b.n	80018c0 <HAL_I2C_Master_Receive+0x430>
    }
    else if (hi2c->XferSize == 1U)
 800158e:	68fb      	ldr	r3, [r7, #12]
 8001590:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001592:	2b01      	cmp	r3, #1
 8001594:	d11b      	bne.n	80015ce <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001596:	68fb      	ldr	r3, [r7, #12]
 8001598:	681b      	ldr	r3, [r3, #0]
 800159a:	681a      	ldr	r2, [r3, #0]
 800159c:	68fb      	ldr	r3, [r7, #12]
 800159e:	681b      	ldr	r3, [r3, #0]
 80015a0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80015a4:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80015a6:	2300      	movs	r3, #0
 80015a8:	61fb      	str	r3, [r7, #28]
 80015aa:	68fb      	ldr	r3, [r7, #12]
 80015ac:	681b      	ldr	r3, [r3, #0]
 80015ae:	695b      	ldr	r3, [r3, #20]
 80015b0:	61fb      	str	r3, [r7, #28]
 80015b2:	68fb      	ldr	r3, [r7, #12]
 80015b4:	681b      	ldr	r3, [r3, #0]
 80015b6:	699b      	ldr	r3, [r3, #24]
 80015b8:	61fb      	str	r3, [r7, #28]
 80015ba:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80015bc:	68fb      	ldr	r3, [r7, #12]
 80015be:	681b      	ldr	r3, [r3, #0]
 80015c0:	681a      	ldr	r2, [r3, #0]
 80015c2:	68fb      	ldr	r3, [r7, #12]
 80015c4:	681b      	ldr	r3, [r3, #0]
 80015c6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80015ca:	601a      	str	r2, [r3, #0]
 80015cc:	e178      	b.n	80018c0 <HAL_I2C_Master_Receive+0x430>
    }
    else if (hi2c->XferSize == 2U)
 80015ce:	68fb      	ldr	r3, [r7, #12]
 80015d0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80015d2:	2b02      	cmp	r3, #2
 80015d4:	d11b      	bne.n	800160e <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80015d6:	68fb      	ldr	r3, [r7, #12]
 80015d8:	681b      	ldr	r3, [r3, #0]
 80015da:	681a      	ldr	r2, [r3, #0]
 80015dc:	68fb      	ldr	r3, [r7, #12]
 80015de:	681b      	ldr	r3, [r3, #0]
 80015e0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80015e4:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80015e6:	68fb      	ldr	r3, [r7, #12]
 80015e8:	681b      	ldr	r3, [r3, #0]
 80015ea:	681a      	ldr	r2, [r3, #0]
 80015ec:	68fb      	ldr	r3, [r7, #12]
 80015ee:	681b      	ldr	r3, [r3, #0]
 80015f0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80015f4:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80015f6:	2300      	movs	r3, #0
 80015f8:	61bb      	str	r3, [r7, #24]
 80015fa:	68fb      	ldr	r3, [r7, #12]
 80015fc:	681b      	ldr	r3, [r3, #0]
 80015fe:	695b      	ldr	r3, [r3, #20]
 8001600:	61bb      	str	r3, [r7, #24]
 8001602:	68fb      	ldr	r3, [r7, #12]
 8001604:	681b      	ldr	r3, [r3, #0]
 8001606:	699b      	ldr	r3, [r3, #24]
 8001608:	61bb      	str	r3, [r7, #24]
 800160a:	69bb      	ldr	r3, [r7, #24]
 800160c:	e158      	b.n	80018c0 <HAL_I2C_Master_Receive+0x430>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800160e:	68fb      	ldr	r3, [r7, #12]
 8001610:	681b      	ldr	r3, [r3, #0]
 8001612:	681a      	ldr	r2, [r3, #0]
 8001614:	68fb      	ldr	r3, [r7, #12]
 8001616:	681b      	ldr	r3, [r3, #0]
 8001618:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800161c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800161e:	2300      	movs	r3, #0
 8001620:	617b      	str	r3, [r7, #20]
 8001622:	68fb      	ldr	r3, [r7, #12]
 8001624:	681b      	ldr	r3, [r3, #0]
 8001626:	695b      	ldr	r3, [r3, #20]
 8001628:	617b      	str	r3, [r7, #20]
 800162a:	68fb      	ldr	r3, [r7, #12]
 800162c:	681b      	ldr	r3, [r3, #0]
 800162e:	699b      	ldr	r3, [r3, #24]
 8001630:	617b      	str	r3, [r7, #20]
 8001632:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8001634:	e144      	b.n	80018c0 <HAL_I2C_Master_Receive+0x430>
    {
      if (hi2c->XferSize <= 3U)
 8001636:	68fb      	ldr	r3, [r7, #12]
 8001638:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800163a:	2b03      	cmp	r3, #3
 800163c:	f200 80f1 	bhi.w	8001822 <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8001640:	68fb      	ldr	r3, [r7, #12]
 8001642:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001644:	2b01      	cmp	r3, #1
 8001646:	d123      	bne.n	8001690 <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001648:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800164a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800164c:	68f8      	ldr	r0, [r7, #12]
 800164e:	f000 fd59 	bl	8002104 <I2C_WaitOnRXNEFlagUntilTimeout>
 8001652:	4603      	mov	r3, r0
 8001654:	2b00      	cmp	r3, #0
 8001656:	d001      	beq.n	800165c <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 8001658:	2301      	movs	r3, #1
 800165a:	e145      	b.n	80018e8 <HAL_I2C_Master_Receive+0x458>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800165c:	68fb      	ldr	r3, [r7, #12]
 800165e:	681b      	ldr	r3, [r3, #0]
 8001660:	691a      	ldr	r2, [r3, #16]
 8001662:	68fb      	ldr	r3, [r7, #12]
 8001664:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001666:	b2d2      	uxtb	r2, r2
 8001668:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800166a:	68fb      	ldr	r3, [r7, #12]
 800166c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800166e:	1c5a      	adds	r2, r3, #1
 8001670:	68fb      	ldr	r3, [r7, #12]
 8001672:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001674:	68fb      	ldr	r3, [r7, #12]
 8001676:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001678:	3b01      	subs	r3, #1
 800167a:	b29a      	uxth	r2, r3
 800167c:	68fb      	ldr	r3, [r7, #12]
 800167e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001680:	68fb      	ldr	r3, [r7, #12]
 8001682:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001684:	b29b      	uxth	r3, r3
 8001686:	3b01      	subs	r3, #1
 8001688:	b29a      	uxth	r2, r3
 800168a:	68fb      	ldr	r3, [r7, #12]
 800168c:	855a      	strh	r2, [r3, #42]	; 0x2a
 800168e:	e117      	b.n	80018c0 <HAL_I2C_Master_Receive+0x430>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8001690:	68fb      	ldr	r3, [r7, #12]
 8001692:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001694:	2b02      	cmp	r3, #2
 8001696:	d14e      	bne.n	8001736 <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8001698:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800169a:	9300      	str	r3, [sp, #0]
 800169c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800169e:	2200      	movs	r2, #0
 80016a0:	4906      	ldr	r1, [pc, #24]	; (80016bc <HAL_I2C_Master_Receive+0x22c>)
 80016a2:	68f8      	ldr	r0, [r7, #12]
 80016a4:	f000 fb84 	bl	8001db0 <I2C_WaitOnFlagUntilTimeout>
 80016a8:	4603      	mov	r3, r0
 80016aa:	2b00      	cmp	r3, #0
 80016ac:	d008      	beq.n	80016c0 <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 80016ae:	2301      	movs	r3, #1
 80016b0:	e11a      	b.n	80018e8 <HAL_I2C_Master_Receive+0x458>
 80016b2:	bf00      	nop
 80016b4:	00100002 	.word	0x00100002
 80016b8:	ffff0000 	.word	0xffff0000
 80016bc:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80016c0:	68fb      	ldr	r3, [r7, #12]
 80016c2:	681b      	ldr	r3, [r3, #0]
 80016c4:	681a      	ldr	r2, [r3, #0]
 80016c6:	68fb      	ldr	r3, [r7, #12]
 80016c8:	681b      	ldr	r3, [r3, #0]
 80016ca:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80016ce:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80016d0:	68fb      	ldr	r3, [r7, #12]
 80016d2:	681b      	ldr	r3, [r3, #0]
 80016d4:	691a      	ldr	r2, [r3, #16]
 80016d6:	68fb      	ldr	r3, [r7, #12]
 80016d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016da:	b2d2      	uxtb	r2, r2
 80016dc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80016de:	68fb      	ldr	r3, [r7, #12]
 80016e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016e2:	1c5a      	adds	r2, r3, #1
 80016e4:	68fb      	ldr	r3, [r7, #12]
 80016e6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80016e8:	68fb      	ldr	r3, [r7, #12]
 80016ea:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80016ec:	3b01      	subs	r3, #1
 80016ee:	b29a      	uxth	r2, r3
 80016f0:	68fb      	ldr	r3, [r7, #12]
 80016f2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80016f4:	68fb      	ldr	r3, [r7, #12]
 80016f6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80016f8:	b29b      	uxth	r3, r3
 80016fa:	3b01      	subs	r3, #1
 80016fc:	b29a      	uxth	r2, r3
 80016fe:	68fb      	ldr	r3, [r7, #12]
 8001700:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001702:	68fb      	ldr	r3, [r7, #12]
 8001704:	681b      	ldr	r3, [r3, #0]
 8001706:	691a      	ldr	r2, [r3, #16]
 8001708:	68fb      	ldr	r3, [r7, #12]
 800170a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800170c:	b2d2      	uxtb	r2, r2
 800170e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001710:	68fb      	ldr	r3, [r7, #12]
 8001712:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001714:	1c5a      	adds	r2, r3, #1
 8001716:	68fb      	ldr	r3, [r7, #12]
 8001718:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800171a:	68fb      	ldr	r3, [r7, #12]
 800171c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800171e:	3b01      	subs	r3, #1
 8001720:	b29a      	uxth	r2, r3
 8001722:	68fb      	ldr	r3, [r7, #12]
 8001724:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001726:	68fb      	ldr	r3, [r7, #12]
 8001728:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800172a:	b29b      	uxth	r3, r3
 800172c:	3b01      	subs	r3, #1
 800172e:	b29a      	uxth	r2, r3
 8001730:	68fb      	ldr	r3, [r7, #12]
 8001732:	855a      	strh	r2, [r3, #42]	; 0x2a
 8001734:	e0c4      	b.n	80018c0 <HAL_I2C_Master_Receive+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8001736:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001738:	9300      	str	r3, [sp, #0]
 800173a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800173c:	2200      	movs	r2, #0
 800173e:	496c      	ldr	r1, [pc, #432]	; (80018f0 <HAL_I2C_Master_Receive+0x460>)
 8001740:	68f8      	ldr	r0, [r7, #12]
 8001742:	f000 fb35 	bl	8001db0 <I2C_WaitOnFlagUntilTimeout>
 8001746:	4603      	mov	r3, r0
 8001748:	2b00      	cmp	r3, #0
 800174a:	d001      	beq.n	8001750 <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 800174c:	2301      	movs	r3, #1
 800174e:	e0cb      	b.n	80018e8 <HAL_I2C_Master_Receive+0x458>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001750:	68fb      	ldr	r3, [r7, #12]
 8001752:	681b      	ldr	r3, [r3, #0]
 8001754:	681a      	ldr	r2, [r3, #0]
 8001756:	68fb      	ldr	r3, [r7, #12]
 8001758:	681b      	ldr	r3, [r3, #0]
 800175a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800175e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001760:	68fb      	ldr	r3, [r7, #12]
 8001762:	681b      	ldr	r3, [r3, #0]
 8001764:	691a      	ldr	r2, [r3, #16]
 8001766:	68fb      	ldr	r3, [r7, #12]
 8001768:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800176a:	b2d2      	uxtb	r2, r2
 800176c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800176e:	68fb      	ldr	r3, [r7, #12]
 8001770:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001772:	1c5a      	adds	r2, r3, #1
 8001774:	68fb      	ldr	r3, [r7, #12]
 8001776:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001778:	68fb      	ldr	r3, [r7, #12]
 800177a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800177c:	3b01      	subs	r3, #1
 800177e:	b29a      	uxth	r2, r3
 8001780:	68fb      	ldr	r3, [r7, #12]
 8001782:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001784:	68fb      	ldr	r3, [r7, #12]
 8001786:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001788:	b29b      	uxth	r3, r3
 800178a:	3b01      	subs	r3, #1
 800178c:	b29a      	uxth	r2, r3
 800178e:	68fb      	ldr	r3, [r7, #12]
 8001790:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8001792:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001794:	9300      	str	r3, [sp, #0]
 8001796:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001798:	2200      	movs	r2, #0
 800179a:	4955      	ldr	r1, [pc, #340]	; (80018f0 <HAL_I2C_Master_Receive+0x460>)
 800179c:	68f8      	ldr	r0, [r7, #12]
 800179e:	f000 fb07 	bl	8001db0 <I2C_WaitOnFlagUntilTimeout>
 80017a2:	4603      	mov	r3, r0
 80017a4:	2b00      	cmp	r3, #0
 80017a6:	d001      	beq.n	80017ac <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 80017a8:	2301      	movs	r3, #1
 80017aa:	e09d      	b.n	80018e8 <HAL_I2C_Master_Receive+0x458>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80017ac:	68fb      	ldr	r3, [r7, #12]
 80017ae:	681b      	ldr	r3, [r3, #0]
 80017b0:	681a      	ldr	r2, [r3, #0]
 80017b2:	68fb      	ldr	r3, [r7, #12]
 80017b4:	681b      	ldr	r3, [r3, #0]
 80017b6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80017ba:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80017bc:	68fb      	ldr	r3, [r7, #12]
 80017be:	681b      	ldr	r3, [r3, #0]
 80017c0:	691a      	ldr	r2, [r3, #16]
 80017c2:	68fb      	ldr	r3, [r7, #12]
 80017c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017c6:	b2d2      	uxtb	r2, r2
 80017c8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80017ca:	68fb      	ldr	r3, [r7, #12]
 80017cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017ce:	1c5a      	adds	r2, r3, #1
 80017d0:	68fb      	ldr	r3, [r7, #12]
 80017d2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80017d4:	68fb      	ldr	r3, [r7, #12]
 80017d6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80017d8:	3b01      	subs	r3, #1
 80017da:	b29a      	uxth	r2, r3
 80017dc:	68fb      	ldr	r3, [r7, #12]
 80017de:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80017e0:	68fb      	ldr	r3, [r7, #12]
 80017e2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80017e4:	b29b      	uxth	r3, r3
 80017e6:	3b01      	subs	r3, #1
 80017e8:	b29a      	uxth	r2, r3
 80017ea:	68fb      	ldr	r3, [r7, #12]
 80017ec:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80017ee:	68fb      	ldr	r3, [r7, #12]
 80017f0:	681b      	ldr	r3, [r3, #0]
 80017f2:	691a      	ldr	r2, [r3, #16]
 80017f4:	68fb      	ldr	r3, [r7, #12]
 80017f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017f8:	b2d2      	uxtb	r2, r2
 80017fa:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80017fc:	68fb      	ldr	r3, [r7, #12]
 80017fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001800:	1c5a      	adds	r2, r3, #1
 8001802:	68fb      	ldr	r3, [r7, #12]
 8001804:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001806:	68fb      	ldr	r3, [r7, #12]
 8001808:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800180a:	3b01      	subs	r3, #1
 800180c:	b29a      	uxth	r2, r3
 800180e:	68fb      	ldr	r3, [r7, #12]
 8001810:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001812:	68fb      	ldr	r3, [r7, #12]
 8001814:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001816:	b29b      	uxth	r3, r3
 8001818:	3b01      	subs	r3, #1
 800181a:	b29a      	uxth	r2, r3
 800181c:	68fb      	ldr	r3, [r7, #12]
 800181e:	855a      	strh	r2, [r3, #42]	; 0x2a
 8001820:	e04e      	b.n	80018c0 <HAL_I2C_Master_Receive+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001822:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001824:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8001826:	68f8      	ldr	r0, [r7, #12]
 8001828:	f000 fc6c 	bl	8002104 <I2C_WaitOnRXNEFlagUntilTimeout>
 800182c:	4603      	mov	r3, r0
 800182e:	2b00      	cmp	r3, #0
 8001830:	d001      	beq.n	8001836 <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 8001832:	2301      	movs	r3, #1
 8001834:	e058      	b.n	80018e8 <HAL_I2C_Master_Receive+0x458>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001836:	68fb      	ldr	r3, [r7, #12]
 8001838:	681b      	ldr	r3, [r3, #0]
 800183a:	691a      	ldr	r2, [r3, #16]
 800183c:	68fb      	ldr	r3, [r7, #12]
 800183e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001840:	b2d2      	uxtb	r2, r2
 8001842:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8001844:	68fb      	ldr	r3, [r7, #12]
 8001846:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001848:	1c5a      	adds	r2, r3, #1
 800184a:	68fb      	ldr	r3, [r7, #12]
 800184c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800184e:	68fb      	ldr	r3, [r7, #12]
 8001850:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001852:	3b01      	subs	r3, #1
 8001854:	b29a      	uxth	r2, r3
 8001856:	68fb      	ldr	r3, [r7, #12]
 8001858:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800185a:	68fb      	ldr	r3, [r7, #12]
 800185c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800185e:	b29b      	uxth	r3, r3
 8001860:	3b01      	subs	r3, #1
 8001862:	b29a      	uxth	r2, r3
 8001864:	68fb      	ldr	r3, [r7, #12]
 8001866:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8001868:	68fb      	ldr	r3, [r7, #12]
 800186a:	681b      	ldr	r3, [r3, #0]
 800186c:	695b      	ldr	r3, [r3, #20]
 800186e:	f003 0304 	and.w	r3, r3, #4
 8001872:	2b04      	cmp	r3, #4
 8001874:	d124      	bne.n	80018c0 <HAL_I2C_Master_Receive+0x430>
        {

          if (hi2c->XferSize == 3U)
 8001876:	68fb      	ldr	r3, [r7, #12]
 8001878:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800187a:	2b03      	cmp	r3, #3
 800187c:	d107      	bne.n	800188e <HAL_I2C_Master_Receive+0x3fe>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800187e:	68fb      	ldr	r3, [r7, #12]
 8001880:	681b      	ldr	r3, [r3, #0]
 8001882:	681a      	ldr	r2, [r3, #0]
 8001884:	68fb      	ldr	r3, [r7, #12]
 8001886:	681b      	ldr	r3, [r3, #0]
 8001888:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800188c:	601a      	str	r2, [r3, #0]
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800188e:	68fb      	ldr	r3, [r7, #12]
 8001890:	681b      	ldr	r3, [r3, #0]
 8001892:	691a      	ldr	r2, [r3, #16]
 8001894:	68fb      	ldr	r3, [r7, #12]
 8001896:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001898:	b2d2      	uxtb	r2, r2
 800189a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800189c:	68fb      	ldr	r3, [r7, #12]
 800189e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018a0:	1c5a      	adds	r2, r3, #1
 80018a2:	68fb      	ldr	r3, [r7, #12]
 80018a4:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80018a6:	68fb      	ldr	r3, [r7, #12]
 80018a8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80018aa:	3b01      	subs	r3, #1
 80018ac:	b29a      	uxth	r2, r3
 80018ae:	68fb      	ldr	r3, [r7, #12]
 80018b0:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80018b2:	68fb      	ldr	r3, [r7, #12]
 80018b4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80018b6:	b29b      	uxth	r3, r3
 80018b8:	3b01      	subs	r3, #1
 80018ba:	b29a      	uxth	r2, r3
 80018bc:	68fb      	ldr	r3, [r7, #12]
 80018be:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80018c0:	68fb      	ldr	r3, [r7, #12]
 80018c2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80018c4:	2b00      	cmp	r3, #0
 80018c6:	f47f aeb6 	bne.w	8001636 <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 80018ca:	68fb      	ldr	r3, [r7, #12]
 80018cc:	2220      	movs	r2, #32
 80018ce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80018d2:	68fb      	ldr	r3, [r7, #12]
 80018d4:	2200      	movs	r2, #0
 80018d6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80018da:	68fb      	ldr	r3, [r7, #12]
 80018dc:	2200      	movs	r2, #0
 80018de:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80018e2:	2300      	movs	r3, #0
 80018e4:	e000      	b.n	80018e8 <HAL_I2C_Master_Receive+0x458>
  }
  else
  {
    return HAL_BUSY;
 80018e6:	2302      	movs	r3, #2
  }
}
 80018e8:	4618      	mov	r0, r3
 80018ea:	3728      	adds	r7, #40	; 0x28
 80018ec:	46bd      	mov	sp, r7
 80018ee:	bd80      	pop	{r7, pc}
 80018f0:	00010004 	.word	0x00010004

080018f4 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80018f4:	b580      	push	{r7, lr}
 80018f6:	b088      	sub	sp, #32
 80018f8:	af02      	add	r7, sp, #8
 80018fa:	60f8      	str	r0, [r7, #12]
 80018fc:	4608      	mov	r0, r1
 80018fe:	4611      	mov	r1, r2
 8001900:	461a      	mov	r2, r3
 8001902:	4603      	mov	r3, r0
 8001904:	817b      	strh	r3, [r7, #10]
 8001906:	460b      	mov	r3, r1
 8001908:	813b      	strh	r3, [r7, #8]
 800190a:	4613      	mov	r3, r2
 800190c:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800190e:	f7ff f9af 	bl	8000c70 <HAL_GetTick>
 8001912:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001914:	68fb      	ldr	r3, [r7, #12]
 8001916:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800191a:	b2db      	uxtb	r3, r3
 800191c:	2b20      	cmp	r3, #32
 800191e:	f040 80d9 	bne.w	8001ad4 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001922:	697b      	ldr	r3, [r7, #20]
 8001924:	9300      	str	r3, [sp, #0]
 8001926:	2319      	movs	r3, #25
 8001928:	2201      	movs	r2, #1
 800192a:	496d      	ldr	r1, [pc, #436]	; (8001ae0 <HAL_I2C_Mem_Write+0x1ec>)
 800192c:	68f8      	ldr	r0, [r7, #12]
 800192e:	f000 fa3f 	bl	8001db0 <I2C_WaitOnFlagUntilTimeout>
 8001932:	4603      	mov	r3, r0
 8001934:	2b00      	cmp	r3, #0
 8001936:	d001      	beq.n	800193c <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8001938:	2302      	movs	r3, #2
 800193a:	e0cc      	b.n	8001ad6 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800193c:	68fb      	ldr	r3, [r7, #12]
 800193e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001942:	2b01      	cmp	r3, #1
 8001944:	d101      	bne.n	800194a <HAL_I2C_Mem_Write+0x56>
 8001946:	2302      	movs	r3, #2
 8001948:	e0c5      	b.n	8001ad6 <HAL_I2C_Mem_Write+0x1e2>
 800194a:	68fb      	ldr	r3, [r7, #12]
 800194c:	2201      	movs	r2, #1
 800194e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001952:	68fb      	ldr	r3, [r7, #12]
 8001954:	681b      	ldr	r3, [r3, #0]
 8001956:	681b      	ldr	r3, [r3, #0]
 8001958:	f003 0301 	and.w	r3, r3, #1
 800195c:	2b01      	cmp	r3, #1
 800195e:	d007      	beq.n	8001970 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8001960:	68fb      	ldr	r3, [r7, #12]
 8001962:	681b      	ldr	r3, [r3, #0]
 8001964:	681a      	ldr	r2, [r3, #0]
 8001966:	68fb      	ldr	r3, [r7, #12]
 8001968:	681b      	ldr	r3, [r3, #0]
 800196a:	f042 0201 	orr.w	r2, r2, #1
 800196e:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001970:	68fb      	ldr	r3, [r7, #12]
 8001972:	681b      	ldr	r3, [r3, #0]
 8001974:	681a      	ldr	r2, [r3, #0]
 8001976:	68fb      	ldr	r3, [r7, #12]
 8001978:	681b      	ldr	r3, [r3, #0]
 800197a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800197e:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8001980:	68fb      	ldr	r3, [r7, #12]
 8001982:	2221      	movs	r2, #33	; 0x21
 8001984:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8001988:	68fb      	ldr	r3, [r7, #12]
 800198a:	2240      	movs	r2, #64	; 0x40
 800198c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001990:	68fb      	ldr	r3, [r7, #12]
 8001992:	2200      	movs	r2, #0
 8001994:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8001996:	68fb      	ldr	r3, [r7, #12]
 8001998:	6a3a      	ldr	r2, [r7, #32]
 800199a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800199c:	68fb      	ldr	r3, [r7, #12]
 800199e:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80019a0:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80019a2:	68fb      	ldr	r3, [r7, #12]
 80019a4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80019a6:	b29a      	uxth	r2, r3
 80019a8:	68fb      	ldr	r3, [r7, #12]
 80019aa:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80019ac:	68fb      	ldr	r3, [r7, #12]
 80019ae:	4a4d      	ldr	r2, [pc, #308]	; (8001ae4 <HAL_I2C_Mem_Write+0x1f0>)
 80019b0:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80019b2:	88f8      	ldrh	r0, [r7, #6]
 80019b4:	893a      	ldrh	r2, [r7, #8]
 80019b6:	8979      	ldrh	r1, [r7, #10]
 80019b8:	697b      	ldr	r3, [r7, #20]
 80019ba:	9301      	str	r3, [sp, #4]
 80019bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80019be:	9300      	str	r3, [sp, #0]
 80019c0:	4603      	mov	r3, r0
 80019c2:	68f8      	ldr	r0, [r7, #12]
 80019c4:	f000 f95e 	bl	8001c84 <I2C_RequestMemoryWrite>
 80019c8:	4603      	mov	r3, r0
 80019ca:	2b00      	cmp	r3, #0
 80019cc:	d052      	beq.n	8001a74 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 80019ce:	2301      	movs	r3, #1
 80019d0:	e081      	b.n	8001ad6 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80019d2:	697a      	ldr	r2, [r7, #20]
 80019d4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80019d6:	68f8      	ldr	r0, [r7, #12]
 80019d8:	f000 fb04 	bl	8001fe4 <I2C_WaitOnTXEFlagUntilTimeout>
 80019dc:	4603      	mov	r3, r0
 80019de:	2b00      	cmp	r3, #0
 80019e0:	d00d      	beq.n	80019fe <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80019e2:	68fb      	ldr	r3, [r7, #12]
 80019e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019e6:	2b04      	cmp	r3, #4
 80019e8:	d107      	bne.n	80019fa <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80019ea:	68fb      	ldr	r3, [r7, #12]
 80019ec:	681b      	ldr	r3, [r3, #0]
 80019ee:	681a      	ldr	r2, [r3, #0]
 80019f0:	68fb      	ldr	r3, [r7, #12]
 80019f2:	681b      	ldr	r3, [r3, #0]
 80019f4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80019f8:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80019fa:	2301      	movs	r3, #1
 80019fc:	e06b      	b.n	8001ad6 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80019fe:	68fb      	ldr	r3, [r7, #12]
 8001a00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a02:	781a      	ldrb	r2, [r3, #0]
 8001a04:	68fb      	ldr	r3, [r7, #12]
 8001a06:	681b      	ldr	r3, [r3, #0]
 8001a08:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001a0a:	68fb      	ldr	r3, [r7, #12]
 8001a0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a0e:	1c5a      	adds	r2, r3, #1
 8001a10:	68fb      	ldr	r3, [r7, #12]
 8001a12:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8001a14:	68fb      	ldr	r3, [r7, #12]
 8001a16:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001a18:	3b01      	subs	r3, #1
 8001a1a:	b29a      	uxth	r2, r3
 8001a1c:	68fb      	ldr	r3, [r7, #12]
 8001a1e:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8001a20:	68fb      	ldr	r3, [r7, #12]
 8001a22:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001a24:	b29b      	uxth	r3, r3
 8001a26:	3b01      	subs	r3, #1
 8001a28:	b29a      	uxth	r2, r3
 8001a2a:	68fb      	ldr	r3, [r7, #12]
 8001a2c:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8001a2e:	68fb      	ldr	r3, [r7, #12]
 8001a30:	681b      	ldr	r3, [r3, #0]
 8001a32:	695b      	ldr	r3, [r3, #20]
 8001a34:	f003 0304 	and.w	r3, r3, #4
 8001a38:	2b04      	cmp	r3, #4
 8001a3a:	d11b      	bne.n	8001a74 <HAL_I2C_Mem_Write+0x180>
 8001a3c:	68fb      	ldr	r3, [r7, #12]
 8001a3e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001a40:	2b00      	cmp	r3, #0
 8001a42:	d017      	beq.n	8001a74 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001a44:	68fb      	ldr	r3, [r7, #12]
 8001a46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a48:	781a      	ldrb	r2, [r3, #0]
 8001a4a:	68fb      	ldr	r3, [r7, #12]
 8001a4c:	681b      	ldr	r3, [r3, #0]
 8001a4e:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8001a50:	68fb      	ldr	r3, [r7, #12]
 8001a52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a54:	1c5a      	adds	r2, r3, #1
 8001a56:	68fb      	ldr	r3, [r7, #12]
 8001a58:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8001a5a:	68fb      	ldr	r3, [r7, #12]
 8001a5c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001a5e:	3b01      	subs	r3, #1
 8001a60:	b29a      	uxth	r2, r3
 8001a62:	68fb      	ldr	r3, [r7, #12]
 8001a64:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8001a66:	68fb      	ldr	r3, [r7, #12]
 8001a68:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001a6a:	b29b      	uxth	r3, r3
 8001a6c:	3b01      	subs	r3, #1
 8001a6e:	b29a      	uxth	r2, r3
 8001a70:	68fb      	ldr	r3, [r7, #12]
 8001a72:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8001a74:	68fb      	ldr	r3, [r7, #12]
 8001a76:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001a78:	2b00      	cmp	r3, #0
 8001a7a:	d1aa      	bne.n	80019d2 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001a7c:	697a      	ldr	r2, [r7, #20]
 8001a7e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001a80:	68f8      	ldr	r0, [r7, #12]
 8001a82:	f000 faf7 	bl	8002074 <I2C_WaitOnBTFFlagUntilTimeout>
 8001a86:	4603      	mov	r3, r0
 8001a88:	2b00      	cmp	r3, #0
 8001a8a:	d00d      	beq.n	8001aa8 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001a8c:	68fb      	ldr	r3, [r7, #12]
 8001a8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a90:	2b04      	cmp	r3, #4
 8001a92:	d107      	bne.n	8001aa4 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001a94:	68fb      	ldr	r3, [r7, #12]
 8001a96:	681b      	ldr	r3, [r3, #0]
 8001a98:	681a      	ldr	r2, [r3, #0]
 8001a9a:	68fb      	ldr	r3, [r7, #12]
 8001a9c:	681b      	ldr	r3, [r3, #0]
 8001a9e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001aa2:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8001aa4:	2301      	movs	r3, #1
 8001aa6:	e016      	b.n	8001ad6 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001aa8:	68fb      	ldr	r3, [r7, #12]
 8001aaa:	681b      	ldr	r3, [r3, #0]
 8001aac:	681a      	ldr	r2, [r3, #0]
 8001aae:	68fb      	ldr	r3, [r7, #12]
 8001ab0:	681b      	ldr	r3, [r3, #0]
 8001ab2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001ab6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001ab8:	68fb      	ldr	r3, [r7, #12]
 8001aba:	2220      	movs	r2, #32
 8001abc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001ac0:	68fb      	ldr	r3, [r7, #12]
 8001ac2:	2200      	movs	r2, #0
 8001ac4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001ac8:	68fb      	ldr	r3, [r7, #12]
 8001aca:	2200      	movs	r2, #0
 8001acc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8001ad0:	2300      	movs	r3, #0
 8001ad2:	e000      	b.n	8001ad6 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8001ad4:	2302      	movs	r3, #2
  }
}
 8001ad6:	4618      	mov	r0, r3
 8001ad8:	3718      	adds	r7, #24
 8001ada:	46bd      	mov	sp, r7
 8001adc:	bd80      	pop	{r7, pc}
 8001ade:	bf00      	nop
 8001ae0:	00100002 	.word	0x00100002
 8001ae4:	ffff0000 	.word	0xffff0000

08001ae8 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8001ae8:	b580      	push	{r7, lr}
 8001aea:	b088      	sub	sp, #32
 8001aec:	af02      	add	r7, sp, #8
 8001aee:	60f8      	str	r0, [r7, #12]
 8001af0:	607a      	str	r2, [r7, #4]
 8001af2:	603b      	str	r3, [r7, #0]
 8001af4:	460b      	mov	r3, r1
 8001af6:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8001af8:	68fb      	ldr	r3, [r7, #12]
 8001afa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001afc:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001afe:	68fb      	ldr	r3, [r7, #12]
 8001b00:	681b      	ldr	r3, [r3, #0]
 8001b02:	681a      	ldr	r2, [r3, #0]
 8001b04:	68fb      	ldr	r3, [r7, #12]
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8001b0c:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8001b0e:	697b      	ldr	r3, [r7, #20]
 8001b10:	2b08      	cmp	r3, #8
 8001b12:	d006      	beq.n	8001b22 <I2C_MasterRequestRead+0x3a>
 8001b14:	697b      	ldr	r3, [r7, #20]
 8001b16:	2b01      	cmp	r3, #1
 8001b18:	d003      	beq.n	8001b22 <I2C_MasterRequestRead+0x3a>
 8001b1a:	697b      	ldr	r3, [r7, #20]
 8001b1c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8001b20:	d108      	bne.n	8001b34 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001b22:	68fb      	ldr	r3, [r7, #12]
 8001b24:	681b      	ldr	r3, [r3, #0]
 8001b26:	681a      	ldr	r2, [r3, #0]
 8001b28:	68fb      	ldr	r3, [r7, #12]
 8001b2a:	681b      	ldr	r3, [r3, #0]
 8001b2c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001b30:	601a      	str	r2, [r3, #0]
 8001b32:	e00b      	b.n	8001b4c <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8001b34:	68fb      	ldr	r3, [r7, #12]
 8001b36:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b38:	2b11      	cmp	r3, #17
 8001b3a:	d107      	bne.n	8001b4c <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001b3c:	68fb      	ldr	r3, [r7, #12]
 8001b3e:	681b      	ldr	r3, [r3, #0]
 8001b40:	681a      	ldr	r2, [r3, #0]
 8001b42:	68fb      	ldr	r3, [r7, #12]
 8001b44:	681b      	ldr	r3, [r3, #0]
 8001b46:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001b4a:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8001b4c:	683b      	ldr	r3, [r7, #0]
 8001b4e:	9300      	str	r3, [sp, #0]
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	2200      	movs	r2, #0
 8001b54:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8001b58:	68f8      	ldr	r0, [r7, #12]
 8001b5a:	f000 f929 	bl	8001db0 <I2C_WaitOnFlagUntilTimeout>
 8001b5e:	4603      	mov	r3, r0
 8001b60:	2b00      	cmp	r3, #0
 8001b62:	d00d      	beq.n	8001b80 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8001b64:	68fb      	ldr	r3, [r7, #12]
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	681b      	ldr	r3, [r3, #0]
 8001b6a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001b6e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001b72:	d103      	bne.n	8001b7c <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8001b74:	68fb      	ldr	r3, [r7, #12]
 8001b76:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001b7a:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8001b7c:	2303      	movs	r3, #3
 8001b7e:	e079      	b.n	8001c74 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001b80:	68fb      	ldr	r3, [r7, #12]
 8001b82:	691b      	ldr	r3, [r3, #16]
 8001b84:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8001b88:	d108      	bne.n	8001b9c <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8001b8a:	897b      	ldrh	r3, [r7, #10]
 8001b8c:	b2db      	uxtb	r3, r3
 8001b8e:	f043 0301 	orr.w	r3, r3, #1
 8001b92:	b2da      	uxtb	r2, r3
 8001b94:	68fb      	ldr	r3, [r7, #12]
 8001b96:	681b      	ldr	r3, [r3, #0]
 8001b98:	611a      	str	r2, [r3, #16]
 8001b9a:	e05f      	b.n	8001c5c <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8001b9c:	897b      	ldrh	r3, [r7, #10]
 8001b9e:	11db      	asrs	r3, r3, #7
 8001ba0:	b2db      	uxtb	r3, r3
 8001ba2:	f003 0306 	and.w	r3, r3, #6
 8001ba6:	b2db      	uxtb	r3, r3
 8001ba8:	f063 030f 	orn	r3, r3, #15
 8001bac:	b2da      	uxtb	r2, r3
 8001bae:	68fb      	ldr	r3, [r7, #12]
 8001bb0:	681b      	ldr	r3, [r3, #0]
 8001bb2:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8001bb4:	683b      	ldr	r3, [r7, #0]
 8001bb6:	687a      	ldr	r2, [r7, #4]
 8001bb8:	4930      	ldr	r1, [pc, #192]	; (8001c7c <I2C_MasterRequestRead+0x194>)
 8001bba:	68f8      	ldr	r0, [r7, #12]
 8001bbc:	f000 f972 	bl	8001ea4 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001bc0:	4603      	mov	r3, r0
 8001bc2:	2b00      	cmp	r3, #0
 8001bc4:	d001      	beq.n	8001bca <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 8001bc6:	2301      	movs	r3, #1
 8001bc8:	e054      	b.n	8001c74 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8001bca:	897b      	ldrh	r3, [r7, #10]
 8001bcc:	b2da      	uxtb	r2, r3
 8001bce:	68fb      	ldr	r3, [r7, #12]
 8001bd0:	681b      	ldr	r3, [r3, #0]
 8001bd2:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8001bd4:	683b      	ldr	r3, [r7, #0]
 8001bd6:	687a      	ldr	r2, [r7, #4]
 8001bd8:	4929      	ldr	r1, [pc, #164]	; (8001c80 <I2C_MasterRequestRead+0x198>)
 8001bda:	68f8      	ldr	r0, [r7, #12]
 8001bdc:	f000 f962 	bl	8001ea4 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001be0:	4603      	mov	r3, r0
 8001be2:	2b00      	cmp	r3, #0
 8001be4:	d001      	beq.n	8001bea <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 8001be6:	2301      	movs	r3, #1
 8001be8:	e044      	b.n	8001c74 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001bea:	2300      	movs	r3, #0
 8001bec:	613b      	str	r3, [r7, #16]
 8001bee:	68fb      	ldr	r3, [r7, #12]
 8001bf0:	681b      	ldr	r3, [r3, #0]
 8001bf2:	695b      	ldr	r3, [r3, #20]
 8001bf4:	613b      	str	r3, [r7, #16]
 8001bf6:	68fb      	ldr	r3, [r7, #12]
 8001bf8:	681b      	ldr	r3, [r3, #0]
 8001bfa:	699b      	ldr	r3, [r3, #24]
 8001bfc:	613b      	str	r3, [r7, #16]
 8001bfe:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001c00:	68fb      	ldr	r3, [r7, #12]
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	681a      	ldr	r2, [r3, #0]
 8001c06:	68fb      	ldr	r3, [r7, #12]
 8001c08:	681b      	ldr	r3, [r3, #0]
 8001c0a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001c0e:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8001c10:	683b      	ldr	r3, [r7, #0]
 8001c12:	9300      	str	r3, [sp, #0]
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	2200      	movs	r2, #0
 8001c18:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8001c1c:	68f8      	ldr	r0, [r7, #12]
 8001c1e:	f000 f8c7 	bl	8001db0 <I2C_WaitOnFlagUntilTimeout>
 8001c22:	4603      	mov	r3, r0
 8001c24:	2b00      	cmp	r3, #0
 8001c26:	d00d      	beq.n	8001c44 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8001c28:	68fb      	ldr	r3, [r7, #12]
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	681b      	ldr	r3, [r3, #0]
 8001c2e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001c32:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001c36:	d103      	bne.n	8001c40 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8001c38:	68fb      	ldr	r3, [r7, #12]
 8001c3a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001c3e:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 8001c40:	2303      	movs	r3, #3
 8001c42:	e017      	b.n	8001c74 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8001c44:	897b      	ldrh	r3, [r7, #10]
 8001c46:	11db      	asrs	r3, r3, #7
 8001c48:	b2db      	uxtb	r3, r3
 8001c4a:	f003 0306 	and.w	r3, r3, #6
 8001c4e:	b2db      	uxtb	r3, r3
 8001c50:	f063 030e 	orn	r3, r3, #14
 8001c54:	b2da      	uxtb	r2, r3
 8001c56:	68fb      	ldr	r3, [r7, #12]
 8001c58:	681b      	ldr	r3, [r3, #0]
 8001c5a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8001c5c:	683b      	ldr	r3, [r7, #0]
 8001c5e:	687a      	ldr	r2, [r7, #4]
 8001c60:	4907      	ldr	r1, [pc, #28]	; (8001c80 <I2C_MasterRequestRead+0x198>)
 8001c62:	68f8      	ldr	r0, [r7, #12]
 8001c64:	f000 f91e 	bl	8001ea4 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001c68:	4603      	mov	r3, r0
 8001c6a:	2b00      	cmp	r3, #0
 8001c6c:	d001      	beq.n	8001c72 <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 8001c6e:	2301      	movs	r3, #1
 8001c70:	e000      	b.n	8001c74 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 8001c72:	2300      	movs	r3, #0
}
 8001c74:	4618      	mov	r0, r3
 8001c76:	3718      	adds	r7, #24
 8001c78:	46bd      	mov	sp, r7
 8001c7a:	bd80      	pop	{r7, pc}
 8001c7c:	00010008 	.word	0x00010008
 8001c80:	00010002 	.word	0x00010002

08001c84 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8001c84:	b580      	push	{r7, lr}
 8001c86:	b088      	sub	sp, #32
 8001c88:	af02      	add	r7, sp, #8
 8001c8a:	60f8      	str	r0, [r7, #12]
 8001c8c:	4608      	mov	r0, r1
 8001c8e:	4611      	mov	r1, r2
 8001c90:	461a      	mov	r2, r3
 8001c92:	4603      	mov	r3, r0
 8001c94:	817b      	strh	r3, [r7, #10]
 8001c96:	460b      	mov	r3, r1
 8001c98:	813b      	strh	r3, [r7, #8]
 8001c9a:	4613      	mov	r3, r2
 8001c9c:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001c9e:	68fb      	ldr	r3, [r7, #12]
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	681a      	ldr	r2, [r3, #0]
 8001ca4:	68fb      	ldr	r3, [r7, #12]
 8001ca6:	681b      	ldr	r3, [r3, #0]
 8001ca8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001cac:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8001cae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cb0:	9300      	str	r3, [sp, #0]
 8001cb2:	6a3b      	ldr	r3, [r7, #32]
 8001cb4:	2200      	movs	r2, #0
 8001cb6:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8001cba:	68f8      	ldr	r0, [r7, #12]
 8001cbc:	f000 f878 	bl	8001db0 <I2C_WaitOnFlagUntilTimeout>
 8001cc0:	4603      	mov	r3, r0
 8001cc2:	2b00      	cmp	r3, #0
 8001cc4:	d00d      	beq.n	8001ce2 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8001cc6:	68fb      	ldr	r3, [r7, #12]
 8001cc8:	681b      	ldr	r3, [r3, #0]
 8001cca:	681b      	ldr	r3, [r3, #0]
 8001ccc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001cd0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001cd4:	d103      	bne.n	8001cde <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8001cd6:	68fb      	ldr	r3, [r7, #12]
 8001cd8:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001cdc:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8001cde:	2303      	movs	r3, #3
 8001ce0:	e05f      	b.n	8001da2 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8001ce2:	897b      	ldrh	r3, [r7, #10]
 8001ce4:	b2db      	uxtb	r3, r3
 8001ce6:	461a      	mov	r2, r3
 8001ce8:	68fb      	ldr	r3, [r7, #12]
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8001cf0:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8001cf2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cf4:	6a3a      	ldr	r2, [r7, #32]
 8001cf6:	492d      	ldr	r1, [pc, #180]	; (8001dac <I2C_RequestMemoryWrite+0x128>)
 8001cf8:	68f8      	ldr	r0, [r7, #12]
 8001cfa:	f000 f8d3 	bl	8001ea4 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001cfe:	4603      	mov	r3, r0
 8001d00:	2b00      	cmp	r3, #0
 8001d02:	d001      	beq.n	8001d08 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8001d04:	2301      	movs	r3, #1
 8001d06:	e04c      	b.n	8001da2 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001d08:	2300      	movs	r3, #0
 8001d0a:	617b      	str	r3, [r7, #20]
 8001d0c:	68fb      	ldr	r3, [r7, #12]
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	695b      	ldr	r3, [r3, #20]
 8001d12:	617b      	str	r3, [r7, #20]
 8001d14:	68fb      	ldr	r3, [r7, #12]
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	699b      	ldr	r3, [r3, #24]
 8001d1a:	617b      	str	r3, [r7, #20]
 8001d1c:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001d1e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001d20:	6a39      	ldr	r1, [r7, #32]
 8001d22:	68f8      	ldr	r0, [r7, #12]
 8001d24:	f000 f95e 	bl	8001fe4 <I2C_WaitOnTXEFlagUntilTimeout>
 8001d28:	4603      	mov	r3, r0
 8001d2a:	2b00      	cmp	r3, #0
 8001d2c:	d00d      	beq.n	8001d4a <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001d2e:	68fb      	ldr	r3, [r7, #12]
 8001d30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d32:	2b04      	cmp	r3, #4
 8001d34:	d107      	bne.n	8001d46 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001d36:	68fb      	ldr	r3, [r7, #12]
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	681a      	ldr	r2, [r3, #0]
 8001d3c:	68fb      	ldr	r3, [r7, #12]
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001d44:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8001d46:	2301      	movs	r3, #1
 8001d48:	e02b      	b.n	8001da2 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8001d4a:	88fb      	ldrh	r3, [r7, #6]
 8001d4c:	2b01      	cmp	r3, #1
 8001d4e:	d105      	bne.n	8001d5c <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8001d50:	893b      	ldrh	r3, [r7, #8]
 8001d52:	b2da      	uxtb	r2, r3
 8001d54:	68fb      	ldr	r3, [r7, #12]
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	611a      	str	r2, [r3, #16]
 8001d5a:	e021      	b.n	8001da0 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8001d5c:	893b      	ldrh	r3, [r7, #8]
 8001d5e:	0a1b      	lsrs	r3, r3, #8
 8001d60:	b29b      	uxth	r3, r3
 8001d62:	b2da      	uxtb	r2, r3
 8001d64:	68fb      	ldr	r3, [r7, #12]
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001d6a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001d6c:	6a39      	ldr	r1, [r7, #32]
 8001d6e:	68f8      	ldr	r0, [r7, #12]
 8001d70:	f000 f938 	bl	8001fe4 <I2C_WaitOnTXEFlagUntilTimeout>
 8001d74:	4603      	mov	r3, r0
 8001d76:	2b00      	cmp	r3, #0
 8001d78:	d00d      	beq.n	8001d96 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001d7a:	68fb      	ldr	r3, [r7, #12]
 8001d7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d7e:	2b04      	cmp	r3, #4
 8001d80:	d107      	bne.n	8001d92 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001d82:	68fb      	ldr	r3, [r7, #12]
 8001d84:	681b      	ldr	r3, [r3, #0]
 8001d86:	681a      	ldr	r2, [r3, #0]
 8001d88:	68fb      	ldr	r3, [r7, #12]
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001d90:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8001d92:	2301      	movs	r3, #1
 8001d94:	e005      	b.n	8001da2 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8001d96:	893b      	ldrh	r3, [r7, #8]
 8001d98:	b2da      	uxtb	r2, r3
 8001d9a:	68fb      	ldr	r3, [r7, #12]
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8001da0:	2300      	movs	r3, #0
}
 8001da2:	4618      	mov	r0, r3
 8001da4:	3718      	adds	r7, #24
 8001da6:	46bd      	mov	sp, r7
 8001da8:	bd80      	pop	{r7, pc}
 8001daa:	bf00      	nop
 8001dac:	00010002 	.word	0x00010002

08001db0 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8001db0:	b580      	push	{r7, lr}
 8001db2:	b084      	sub	sp, #16
 8001db4:	af00      	add	r7, sp, #0
 8001db6:	60f8      	str	r0, [r7, #12]
 8001db8:	60b9      	str	r1, [r7, #8]
 8001dba:	603b      	str	r3, [r7, #0]
 8001dbc:	4613      	mov	r3, r2
 8001dbe:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001dc0:	e048      	b.n	8001e54 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001dc2:	683b      	ldr	r3, [r7, #0]
 8001dc4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001dc8:	d044      	beq.n	8001e54 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001dca:	f7fe ff51 	bl	8000c70 <HAL_GetTick>
 8001dce:	4602      	mov	r2, r0
 8001dd0:	69bb      	ldr	r3, [r7, #24]
 8001dd2:	1ad3      	subs	r3, r2, r3
 8001dd4:	683a      	ldr	r2, [r7, #0]
 8001dd6:	429a      	cmp	r2, r3
 8001dd8:	d302      	bcc.n	8001de0 <I2C_WaitOnFlagUntilTimeout+0x30>
 8001dda:	683b      	ldr	r3, [r7, #0]
 8001ddc:	2b00      	cmp	r3, #0
 8001dde:	d139      	bne.n	8001e54 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8001de0:	68bb      	ldr	r3, [r7, #8]
 8001de2:	0c1b      	lsrs	r3, r3, #16
 8001de4:	b2db      	uxtb	r3, r3
 8001de6:	2b01      	cmp	r3, #1
 8001de8:	d10d      	bne.n	8001e06 <I2C_WaitOnFlagUntilTimeout+0x56>
 8001dea:	68fb      	ldr	r3, [r7, #12]
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	695b      	ldr	r3, [r3, #20]
 8001df0:	43da      	mvns	r2, r3
 8001df2:	68bb      	ldr	r3, [r7, #8]
 8001df4:	4013      	ands	r3, r2
 8001df6:	b29b      	uxth	r3, r3
 8001df8:	2b00      	cmp	r3, #0
 8001dfa:	bf0c      	ite	eq
 8001dfc:	2301      	moveq	r3, #1
 8001dfe:	2300      	movne	r3, #0
 8001e00:	b2db      	uxtb	r3, r3
 8001e02:	461a      	mov	r2, r3
 8001e04:	e00c      	b.n	8001e20 <I2C_WaitOnFlagUntilTimeout+0x70>
 8001e06:	68fb      	ldr	r3, [r7, #12]
 8001e08:	681b      	ldr	r3, [r3, #0]
 8001e0a:	699b      	ldr	r3, [r3, #24]
 8001e0c:	43da      	mvns	r2, r3
 8001e0e:	68bb      	ldr	r3, [r7, #8]
 8001e10:	4013      	ands	r3, r2
 8001e12:	b29b      	uxth	r3, r3
 8001e14:	2b00      	cmp	r3, #0
 8001e16:	bf0c      	ite	eq
 8001e18:	2301      	moveq	r3, #1
 8001e1a:	2300      	movne	r3, #0
 8001e1c:	b2db      	uxtb	r3, r3
 8001e1e:	461a      	mov	r2, r3
 8001e20:	79fb      	ldrb	r3, [r7, #7]
 8001e22:	429a      	cmp	r2, r3
 8001e24:	d116      	bne.n	8001e54 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8001e26:	68fb      	ldr	r3, [r7, #12]
 8001e28:	2200      	movs	r2, #0
 8001e2a:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8001e2c:	68fb      	ldr	r3, [r7, #12]
 8001e2e:	2220      	movs	r2, #32
 8001e30:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8001e34:	68fb      	ldr	r3, [r7, #12]
 8001e36:	2200      	movs	r2, #0
 8001e38:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8001e3c:	68fb      	ldr	r3, [r7, #12]
 8001e3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e40:	f043 0220 	orr.w	r2, r3, #32
 8001e44:	68fb      	ldr	r3, [r7, #12]
 8001e46:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8001e48:	68fb      	ldr	r3, [r7, #12]
 8001e4a:	2200      	movs	r2, #0
 8001e4c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8001e50:	2301      	movs	r3, #1
 8001e52:	e023      	b.n	8001e9c <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001e54:	68bb      	ldr	r3, [r7, #8]
 8001e56:	0c1b      	lsrs	r3, r3, #16
 8001e58:	b2db      	uxtb	r3, r3
 8001e5a:	2b01      	cmp	r3, #1
 8001e5c:	d10d      	bne.n	8001e7a <I2C_WaitOnFlagUntilTimeout+0xca>
 8001e5e:	68fb      	ldr	r3, [r7, #12]
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	695b      	ldr	r3, [r3, #20]
 8001e64:	43da      	mvns	r2, r3
 8001e66:	68bb      	ldr	r3, [r7, #8]
 8001e68:	4013      	ands	r3, r2
 8001e6a:	b29b      	uxth	r3, r3
 8001e6c:	2b00      	cmp	r3, #0
 8001e6e:	bf0c      	ite	eq
 8001e70:	2301      	moveq	r3, #1
 8001e72:	2300      	movne	r3, #0
 8001e74:	b2db      	uxtb	r3, r3
 8001e76:	461a      	mov	r2, r3
 8001e78:	e00c      	b.n	8001e94 <I2C_WaitOnFlagUntilTimeout+0xe4>
 8001e7a:	68fb      	ldr	r3, [r7, #12]
 8001e7c:	681b      	ldr	r3, [r3, #0]
 8001e7e:	699b      	ldr	r3, [r3, #24]
 8001e80:	43da      	mvns	r2, r3
 8001e82:	68bb      	ldr	r3, [r7, #8]
 8001e84:	4013      	ands	r3, r2
 8001e86:	b29b      	uxth	r3, r3
 8001e88:	2b00      	cmp	r3, #0
 8001e8a:	bf0c      	ite	eq
 8001e8c:	2301      	moveq	r3, #1
 8001e8e:	2300      	movne	r3, #0
 8001e90:	b2db      	uxtb	r3, r3
 8001e92:	461a      	mov	r2, r3
 8001e94:	79fb      	ldrb	r3, [r7, #7]
 8001e96:	429a      	cmp	r2, r3
 8001e98:	d093      	beq.n	8001dc2 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8001e9a:	2300      	movs	r3, #0
}
 8001e9c:	4618      	mov	r0, r3
 8001e9e:	3710      	adds	r7, #16
 8001ea0:	46bd      	mov	sp, r7
 8001ea2:	bd80      	pop	{r7, pc}

08001ea4 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8001ea4:	b580      	push	{r7, lr}
 8001ea6:	b084      	sub	sp, #16
 8001ea8:	af00      	add	r7, sp, #0
 8001eaa:	60f8      	str	r0, [r7, #12]
 8001eac:	60b9      	str	r1, [r7, #8]
 8001eae:	607a      	str	r2, [r7, #4]
 8001eb0:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8001eb2:	e071      	b.n	8001f98 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8001eb4:	68fb      	ldr	r3, [r7, #12]
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	695b      	ldr	r3, [r3, #20]
 8001eba:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001ebe:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001ec2:	d123      	bne.n	8001f0c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001ec4:	68fb      	ldr	r3, [r7, #12]
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	681a      	ldr	r2, [r3, #0]
 8001eca:	68fb      	ldr	r3, [r7, #12]
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001ed2:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001ed4:	68fb      	ldr	r3, [r7, #12]
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8001edc:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8001ede:	68fb      	ldr	r3, [r7, #12]
 8001ee0:	2200      	movs	r2, #0
 8001ee2:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8001ee4:	68fb      	ldr	r3, [r7, #12]
 8001ee6:	2220      	movs	r2, #32
 8001ee8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001eec:	68fb      	ldr	r3, [r7, #12]
 8001eee:	2200      	movs	r2, #0
 8001ef0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8001ef4:	68fb      	ldr	r3, [r7, #12]
 8001ef6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ef8:	f043 0204 	orr.w	r2, r3, #4
 8001efc:	68fb      	ldr	r3, [r7, #12]
 8001efe:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8001f00:	68fb      	ldr	r3, [r7, #12]
 8001f02:	2200      	movs	r2, #0
 8001f04:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8001f08:	2301      	movs	r3, #1
 8001f0a:	e067      	b.n	8001fdc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001f12:	d041      	beq.n	8001f98 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001f14:	f7fe feac 	bl	8000c70 <HAL_GetTick>
 8001f18:	4602      	mov	r2, r0
 8001f1a:	683b      	ldr	r3, [r7, #0]
 8001f1c:	1ad3      	subs	r3, r2, r3
 8001f1e:	687a      	ldr	r2, [r7, #4]
 8001f20:	429a      	cmp	r2, r3
 8001f22:	d302      	bcc.n	8001f2a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	2b00      	cmp	r3, #0
 8001f28:	d136      	bne.n	8001f98 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8001f2a:	68bb      	ldr	r3, [r7, #8]
 8001f2c:	0c1b      	lsrs	r3, r3, #16
 8001f2e:	b2db      	uxtb	r3, r3
 8001f30:	2b01      	cmp	r3, #1
 8001f32:	d10c      	bne.n	8001f4e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8001f34:	68fb      	ldr	r3, [r7, #12]
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	695b      	ldr	r3, [r3, #20]
 8001f3a:	43da      	mvns	r2, r3
 8001f3c:	68bb      	ldr	r3, [r7, #8]
 8001f3e:	4013      	ands	r3, r2
 8001f40:	b29b      	uxth	r3, r3
 8001f42:	2b00      	cmp	r3, #0
 8001f44:	bf14      	ite	ne
 8001f46:	2301      	movne	r3, #1
 8001f48:	2300      	moveq	r3, #0
 8001f4a:	b2db      	uxtb	r3, r3
 8001f4c:	e00b      	b.n	8001f66 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8001f4e:	68fb      	ldr	r3, [r7, #12]
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	699b      	ldr	r3, [r3, #24]
 8001f54:	43da      	mvns	r2, r3
 8001f56:	68bb      	ldr	r3, [r7, #8]
 8001f58:	4013      	ands	r3, r2
 8001f5a:	b29b      	uxth	r3, r3
 8001f5c:	2b00      	cmp	r3, #0
 8001f5e:	bf14      	ite	ne
 8001f60:	2301      	movne	r3, #1
 8001f62:	2300      	moveq	r3, #0
 8001f64:	b2db      	uxtb	r3, r3
 8001f66:	2b00      	cmp	r3, #0
 8001f68:	d016      	beq.n	8001f98 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8001f6a:	68fb      	ldr	r3, [r7, #12]
 8001f6c:	2200      	movs	r2, #0
 8001f6e:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8001f70:	68fb      	ldr	r3, [r7, #12]
 8001f72:	2220      	movs	r2, #32
 8001f74:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001f78:	68fb      	ldr	r3, [r7, #12]
 8001f7a:	2200      	movs	r2, #0
 8001f7c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8001f80:	68fb      	ldr	r3, [r7, #12]
 8001f82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f84:	f043 0220 	orr.w	r2, r3, #32
 8001f88:	68fb      	ldr	r3, [r7, #12]
 8001f8a:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8001f8c:	68fb      	ldr	r3, [r7, #12]
 8001f8e:	2200      	movs	r2, #0
 8001f90:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8001f94:	2301      	movs	r3, #1
 8001f96:	e021      	b.n	8001fdc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8001f98:	68bb      	ldr	r3, [r7, #8]
 8001f9a:	0c1b      	lsrs	r3, r3, #16
 8001f9c:	b2db      	uxtb	r3, r3
 8001f9e:	2b01      	cmp	r3, #1
 8001fa0:	d10c      	bne.n	8001fbc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8001fa2:	68fb      	ldr	r3, [r7, #12]
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	695b      	ldr	r3, [r3, #20]
 8001fa8:	43da      	mvns	r2, r3
 8001faa:	68bb      	ldr	r3, [r7, #8]
 8001fac:	4013      	ands	r3, r2
 8001fae:	b29b      	uxth	r3, r3
 8001fb0:	2b00      	cmp	r3, #0
 8001fb2:	bf14      	ite	ne
 8001fb4:	2301      	movne	r3, #1
 8001fb6:	2300      	moveq	r3, #0
 8001fb8:	b2db      	uxtb	r3, r3
 8001fba:	e00b      	b.n	8001fd4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8001fbc:	68fb      	ldr	r3, [r7, #12]
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	699b      	ldr	r3, [r3, #24]
 8001fc2:	43da      	mvns	r2, r3
 8001fc4:	68bb      	ldr	r3, [r7, #8]
 8001fc6:	4013      	ands	r3, r2
 8001fc8:	b29b      	uxth	r3, r3
 8001fca:	2b00      	cmp	r3, #0
 8001fcc:	bf14      	ite	ne
 8001fce:	2301      	movne	r3, #1
 8001fd0:	2300      	moveq	r3, #0
 8001fd2:	b2db      	uxtb	r3, r3
 8001fd4:	2b00      	cmp	r3, #0
 8001fd6:	f47f af6d 	bne.w	8001eb4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8001fda:	2300      	movs	r3, #0
}
 8001fdc:	4618      	mov	r0, r3
 8001fde:	3710      	adds	r7, #16
 8001fe0:	46bd      	mov	sp, r7
 8001fe2:	bd80      	pop	{r7, pc}

08001fe4 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001fe4:	b580      	push	{r7, lr}
 8001fe6:	b084      	sub	sp, #16
 8001fe8:	af00      	add	r7, sp, #0
 8001fea:	60f8      	str	r0, [r7, #12]
 8001fec:	60b9      	str	r1, [r7, #8]
 8001fee:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8001ff0:	e034      	b.n	800205c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8001ff2:	68f8      	ldr	r0, [r7, #12]
 8001ff4:	f000 f8e3 	bl	80021be <I2C_IsAcknowledgeFailed>
 8001ff8:	4603      	mov	r3, r0
 8001ffa:	2b00      	cmp	r3, #0
 8001ffc:	d001      	beq.n	8002002 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8001ffe:	2301      	movs	r3, #1
 8002000:	e034      	b.n	800206c <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002002:	68bb      	ldr	r3, [r7, #8]
 8002004:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002008:	d028      	beq.n	800205c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800200a:	f7fe fe31 	bl	8000c70 <HAL_GetTick>
 800200e:	4602      	mov	r2, r0
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	1ad3      	subs	r3, r2, r3
 8002014:	68ba      	ldr	r2, [r7, #8]
 8002016:	429a      	cmp	r2, r3
 8002018:	d302      	bcc.n	8002020 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800201a:	68bb      	ldr	r3, [r7, #8]
 800201c:	2b00      	cmp	r3, #0
 800201e:	d11d      	bne.n	800205c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8002020:	68fb      	ldr	r3, [r7, #12]
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	695b      	ldr	r3, [r3, #20]
 8002026:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800202a:	2b80      	cmp	r3, #128	; 0x80
 800202c:	d016      	beq.n	800205c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800202e:	68fb      	ldr	r3, [r7, #12]
 8002030:	2200      	movs	r2, #0
 8002032:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002034:	68fb      	ldr	r3, [r7, #12]
 8002036:	2220      	movs	r2, #32
 8002038:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800203c:	68fb      	ldr	r3, [r7, #12]
 800203e:	2200      	movs	r2, #0
 8002040:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002044:	68fb      	ldr	r3, [r7, #12]
 8002046:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002048:	f043 0220 	orr.w	r2, r3, #32
 800204c:	68fb      	ldr	r3, [r7, #12]
 800204e:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002050:	68fb      	ldr	r3, [r7, #12]
 8002052:	2200      	movs	r2, #0
 8002054:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8002058:	2301      	movs	r3, #1
 800205a:	e007      	b.n	800206c <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800205c:	68fb      	ldr	r3, [r7, #12]
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	695b      	ldr	r3, [r3, #20]
 8002062:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002066:	2b80      	cmp	r3, #128	; 0x80
 8002068:	d1c3      	bne.n	8001ff2 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800206a:	2300      	movs	r3, #0
}
 800206c:	4618      	mov	r0, r3
 800206e:	3710      	adds	r7, #16
 8002070:	46bd      	mov	sp, r7
 8002072:	bd80      	pop	{r7, pc}

08002074 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002074:	b580      	push	{r7, lr}
 8002076:	b084      	sub	sp, #16
 8002078:	af00      	add	r7, sp, #0
 800207a:	60f8      	str	r0, [r7, #12]
 800207c:	60b9      	str	r1, [r7, #8]
 800207e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002080:	e034      	b.n	80020ec <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002082:	68f8      	ldr	r0, [r7, #12]
 8002084:	f000 f89b 	bl	80021be <I2C_IsAcknowledgeFailed>
 8002088:	4603      	mov	r3, r0
 800208a:	2b00      	cmp	r3, #0
 800208c:	d001      	beq.n	8002092 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800208e:	2301      	movs	r3, #1
 8002090:	e034      	b.n	80020fc <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002092:	68bb      	ldr	r3, [r7, #8]
 8002094:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002098:	d028      	beq.n	80020ec <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800209a:	f7fe fde9 	bl	8000c70 <HAL_GetTick>
 800209e:	4602      	mov	r2, r0
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	1ad3      	subs	r3, r2, r3
 80020a4:	68ba      	ldr	r2, [r7, #8]
 80020a6:	429a      	cmp	r2, r3
 80020a8:	d302      	bcc.n	80020b0 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80020aa:	68bb      	ldr	r3, [r7, #8]
 80020ac:	2b00      	cmp	r3, #0
 80020ae:	d11d      	bne.n	80020ec <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 80020b0:	68fb      	ldr	r3, [r7, #12]
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	695b      	ldr	r3, [r3, #20]
 80020b6:	f003 0304 	and.w	r3, r3, #4
 80020ba:	2b04      	cmp	r3, #4
 80020bc:	d016      	beq.n	80020ec <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80020be:	68fb      	ldr	r3, [r7, #12]
 80020c0:	2200      	movs	r2, #0
 80020c2:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80020c4:	68fb      	ldr	r3, [r7, #12]
 80020c6:	2220      	movs	r2, #32
 80020c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80020cc:	68fb      	ldr	r3, [r7, #12]
 80020ce:	2200      	movs	r2, #0
 80020d0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80020d4:	68fb      	ldr	r3, [r7, #12]
 80020d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020d8:	f043 0220 	orr.w	r2, r3, #32
 80020dc:	68fb      	ldr	r3, [r7, #12]
 80020de:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80020e0:	68fb      	ldr	r3, [r7, #12]
 80020e2:	2200      	movs	r2, #0
 80020e4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 80020e8:	2301      	movs	r3, #1
 80020ea:	e007      	b.n	80020fc <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80020ec:	68fb      	ldr	r3, [r7, #12]
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	695b      	ldr	r3, [r3, #20]
 80020f2:	f003 0304 	and.w	r3, r3, #4
 80020f6:	2b04      	cmp	r3, #4
 80020f8:	d1c3      	bne.n	8002082 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80020fa:	2300      	movs	r3, #0
}
 80020fc:	4618      	mov	r0, r3
 80020fe:	3710      	adds	r7, #16
 8002100:	46bd      	mov	sp, r7
 8002102:	bd80      	pop	{r7, pc}

08002104 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002104:	b580      	push	{r7, lr}
 8002106:	b084      	sub	sp, #16
 8002108:	af00      	add	r7, sp, #0
 800210a:	60f8      	str	r0, [r7, #12]
 800210c:	60b9      	str	r1, [r7, #8]
 800210e:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8002110:	e049      	b.n	80021a6 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8002112:	68fb      	ldr	r3, [r7, #12]
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	695b      	ldr	r3, [r3, #20]
 8002118:	f003 0310 	and.w	r3, r3, #16
 800211c:	2b10      	cmp	r3, #16
 800211e:	d119      	bne.n	8002154 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002120:	68fb      	ldr	r3, [r7, #12]
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	f06f 0210 	mvn.w	r2, #16
 8002128:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800212a:	68fb      	ldr	r3, [r7, #12]
 800212c:	2200      	movs	r2, #0
 800212e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002130:	68fb      	ldr	r3, [r7, #12]
 8002132:	2220      	movs	r2, #32
 8002134:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002138:	68fb      	ldr	r3, [r7, #12]
 800213a:	2200      	movs	r2, #0
 800213c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8002140:	68fb      	ldr	r3, [r7, #12]
 8002142:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002144:	68fb      	ldr	r3, [r7, #12]
 8002146:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002148:	68fb      	ldr	r3, [r7, #12]
 800214a:	2200      	movs	r2, #0
 800214c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8002150:	2301      	movs	r3, #1
 8002152:	e030      	b.n	80021b6 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002154:	f7fe fd8c 	bl	8000c70 <HAL_GetTick>
 8002158:	4602      	mov	r2, r0
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	1ad3      	subs	r3, r2, r3
 800215e:	68ba      	ldr	r2, [r7, #8]
 8002160:	429a      	cmp	r2, r3
 8002162:	d302      	bcc.n	800216a <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8002164:	68bb      	ldr	r3, [r7, #8]
 8002166:	2b00      	cmp	r3, #0
 8002168:	d11d      	bne.n	80021a6 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 800216a:	68fb      	ldr	r3, [r7, #12]
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	695b      	ldr	r3, [r3, #20]
 8002170:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002174:	2b40      	cmp	r3, #64	; 0x40
 8002176:	d016      	beq.n	80021a6 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002178:	68fb      	ldr	r3, [r7, #12]
 800217a:	2200      	movs	r2, #0
 800217c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800217e:	68fb      	ldr	r3, [r7, #12]
 8002180:	2220      	movs	r2, #32
 8002182:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002186:	68fb      	ldr	r3, [r7, #12]
 8002188:	2200      	movs	r2, #0
 800218a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800218e:	68fb      	ldr	r3, [r7, #12]
 8002190:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002192:	f043 0220 	orr.w	r2, r3, #32
 8002196:	68fb      	ldr	r3, [r7, #12]
 8002198:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800219a:	68fb      	ldr	r3, [r7, #12]
 800219c:	2200      	movs	r2, #0
 800219e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80021a2:	2301      	movs	r3, #1
 80021a4:	e007      	b.n	80021b6 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80021a6:	68fb      	ldr	r3, [r7, #12]
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	695b      	ldr	r3, [r3, #20]
 80021ac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80021b0:	2b40      	cmp	r3, #64	; 0x40
 80021b2:	d1ae      	bne.n	8002112 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80021b4:	2300      	movs	r3, #0
}
 80021b6:	4618      	mov	r0, r3
 80021b8:	3710      	adds	r7, #16
 80021ba:	46bd      	mov	sp, r7
 80021bc:	bd80      	pop	{r7, pc}

080021be <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80021be:	b480      	push	{r7}
 80021c0:	b083      	sub	sp, #12
 80021c2:	af00      	add	r7, sp, #0
 80021c4:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	695b      	ldr	r3, [r3, #20]
 80021cc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80021d0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80021d4:	d11b      	bne.n	800220e <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80021de:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	2200      	movs	r2, #0
 80021e4:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	2220      	movs	r2, #32
 80021ea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	2200      	movs	r2, #0
 80021f2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021fa:	f043 0204 	orr.w	r2, r3, #4
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	2200      	movs	r2, #0
 8002206:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 800220a:	2301      	movs	r3, #1
 800220c:	e000      	b.n	8002210 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 800220e:	2300      	movs	r3, #0
}
 8002210:	4618      	mov	r0, r3
 8002212:	370c      	adds	r7, #12
 8002214:	46bd      	mov	sp, r7
 8002216:	f85d 7b04 	ldr.w	r7, [sp], #4
 800221a:	4770      	bx	lr

0800221c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800221c:	b580      	push	{r7, lr}
 800221e:	b086      	sub	sp, #24
 8002220:	af00      	add	r7, sp, #0
 8002222:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	2b00      	cmp	r3, #0
 8002228:	d101      	bne.n	800222e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800222a:	2301      	movs	r3, #1
 800222c:	e267      	b.n	80026fe <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	f003 0301 	and.w	r3, r3, #1
 8002236:	2b00      	cmp	r3, #0
 8002238:	d075      	beq.n	8002326 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800223a:	4b88      	ldr	r3, [pc, #544]	; (800245c <HAL_RCC_OscConfig+0x240>)
 800223c:	689b      	ldr	r3, [r3, #8]
 800223e:	f003 030c 	and.w	r3, r3, #12
 8002242:	2b04      	cmp	r3, #4
 8002244:	d00c      	beq.n	8002260 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002246:	4b85      	ldr	r3, [pc, #532]	; (800245c <HAL_RCC_OscConfig+0x240>)
 8002248:	689b      	ldr	r3, [r3, #8]
 800224a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800224e:	2b08      	cmp	r3, #8
 8002250:	d112      	bne.n	8002278 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002252:	4b82      	ldr	r3, [pc, #520]	; (800245c <HAL_RCC_OscConfig+0x240>)
 8002254:	685b      	ldr	r3, [r3, #4]
 8002256:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800225a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800225e:	d10b      	bne.n	8002278 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002260:	4b7e      	ldr	r3, [pc, #504]	; (800245c <HAL_RCC_OscConfig+0x240>)
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002268:	2b00      	cmp	r3, #0
 800226a:	d05b      	beq.n	8002324 <HAL_RCC_OscConfig+0x108>
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	685b      	ldr	r3, [r3, #4]
 8002270:	2b00      	cmp	r3, #0
 8002272:	d157      	bne.n	8002324 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002274:	2301      	movs	r3, #1
 8002276:	e242      	b.n	80026fe <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	685b      	ldr	r3, [r3, #4]
 800227c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002280:	d106      	bne.n	8002290 <HAL_RCC_OscConfig+0x74>
 8002282:	4b76      	ldr	r3, [pc, #472]	; (800245c <HAL_RCC_OscConfig+0x240>)
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	4a75      	ldr	r2, [pc, #468]	; (800245c <HAL_RCC_OscConfig+0x240>)
 8002288:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800228c:	6013      	str	r3, [r2, #0]
 800228e:	e01d      	b.n	80022cc <HAL_RCC_OscConfig+0xb0>
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	685b      	ldr	r3, [r3, #4]
 8002294:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002298:	d10c      	bne.n	80022b4 <HAL_RCC_OscConfig+0x98>
 800229a:	4b70      	ldr	r3, [pc, #448]	; (800245c <HAL_RCC_OscConfig+0x240>)
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	4a6f      	ldr	r2, [pc, #444]	; (800245c <HAL_RCC_OscConfig+0x240>)
 80022a0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80022a4:	6013      	str	r3, [r2, #0]
 80022a6:	4b6d      	ldr	r3, [pc, #436]	; (800245c <HAL_RCC_OscConfig+0x240>)
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	4a6c      	ldr	r2, [pc, #432]	; (800245c <HAL_RCC_OscConfig+0x240>)
 80022ac:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80022b0:	6013      	str	r3, [r2, #0]
 80022b2:	e00b      	b.n	80022cc <HAL_RCC_OscConfig+0xb0>
 80022b4:	4b69      	ldr	r3, [pc, #420]	; (800245c <HAL_RCC_OscConfig+0x240>)
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	4a68      	ldr	r2, [pc, #416]	; (800245c <HAL_RCC_OscConfig+0x240>)
 80022ba:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80022be:	6013      	str	r3, [r2, #0]
 80022c0:	4b66      	ldr	r3, [pc, #408]	; (800245c <HAL_RCC_OscConfig+0x240>)
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	4a65      	ldr	r2, [pc, #404]	; (800245c <HAL_RCC_OscConfig+0x240>)
 80022c6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80022ca:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	685b      	ldr	r3, [r3, #4]
 80022d0:	2b00      	cmp	r3, #0
 80022d2:	d013      	beq.n	80022fc <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80022d4:	f7fe fccc 	bl	8000c70 <HAL_GetTick>
 80022d8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80022da:	e008      	b.n	80022ee <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80022dc:	f7fe fcc8 	bl	8000c70 <HAL_GetTick>
 80022e0:	4602      	mov	r2, r0
 80022e2:	693b      	ldr	r3, [r7, #16]
 80022e4:	1ad3      	subs	r3, r2, r3
 80022e6:	2b64      	cmp	r3, #100	; 0x64
 80022e8:	d901      	bls.n	80022ee <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80022ea:	2303      	movs	r3, #3
 80022ec:	e207      	b.n	80026fe <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80022ee:	4b5b      	ldr	r3, [pc, #364]	; (800245c <HAL_RCC_OscConfig+0x240>)
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80022f6:	2b00      	cmp	r3, #0
 80022f8:	d0f0      	beq.n	80022dc <HAL_RCC_OscConfig+0xc0>
 80022fa:	e014      	b.n	8002326 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80022fc:	f7fe fcb8 	bl	8000c70 <HAL_GetTick>
 8002300:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002302:	e008      	b.n	8002316 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002304:	f7fe fcb4 	bl	8000c70 <HAL_GetTick>
 8002308:	4602      	mov	r2, r0
 800230a:	693b      	ldr	r3, [r7, #16]
 800230c:	1ad3      	subs	r3, r2, r3
 800230e:	2b64      	cmp	r3, #100	; 0x64
 8002310:	d901      	bls.n	8002316 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002312:	2303      	movs	r3, #3
 8002314:	e1f3      	b.n	80026fe <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002316:	4b51      	ldr	r3, [pc, #324]	; (800245c <HAL_RCC_OscConfig+0x240>)
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800231e:	2b00      	cmp	r3, #0
 8002320:	d1f0      	bne.n	8002304 <HAL_RCC_OscConfig+0xe8>
 8002322:	e000      	b.n	8002326 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002324:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	f003 0302 	and.w	r3, r3, #2
 800232e:	2b00      	cmp	r3, #0
 8002330:	d063      	beq.n	80023fa <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002332:	4b4a      	ldr	r3, [pc, #296]	; (800245c <HAL_RCC_OscConfig+0x240>)
 8002334:	689b      	ldr	r3, [r3, #8]
 8002336:	f003 030c 	and.w	r3, r3, #12
 800233a:	2b00      	cmp	r3, #0
 800233c:	d00b      	beq.n	8002356 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800233e:	4b47      	ldr	r3, [pc, #284]	; (800245c <HAL_RCC_OscConfig+0x240>)
 8002340:	689b      	ldr	r3, [r3, #8]
 8002342:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002346:	2b08      	cmp	r3, #8
 8002348:	d11c      	bne.n	8002384 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800234a:	4b44      	ldr	r3, [pc, #272]	; (800245c <HAL_RCC_OscConfig+0x240>)
 800234c:	685b      	ldr	r3, [r3, #4]
 800234e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002352:	2b00      	cmp	r3, #0
 8002354:	d116      	bne.n	8002384 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002356:	4b41      	ldr	r3, [pc, #260]	; (800245c <HAL_RCC_OscConfig+0x240>)
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	f003 0302 	and.w	r3, r3, #2
 800235e:	2b00      	cmp	r3, #0
 8002360:	d005      	beq.n	800236e <HAL_RCC_OscConfig+0x152>
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	68db      	ldr	r3, [r3, #12]
 8002366:	2b01      	cmp	r3, #1
 8002368:	d001      	beq.n	800236e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800236a:	2301      	movs	r3, #1
 800236c:	e1c7      	b.n	80026fe <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800236e:	4b3b      	ldr	r3, [pc, #236]	; (800245c <HAL_RCC_OscConfig+0x240>)
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	691b      	ldr	r3, [r3, #16]
 800237a:	00db      	lsls	r3, r3, #3
 800237c:	4937      	ldr	r1, [pc, #220]	; (800245c <HAL_RCC_OscConfig+0x240>)
 800237e:	4313      	orrs	r3, r2
 8002380:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002382:	e03a      	b.n	80023fa <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	68db      	ldr	r3, [r3, #12]
 8002388:	2b00      	cmp	r3, #0
 800238a:	d020      	beq.n	80023ce <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800238c:	4b34      	ldr	r3, [pc, #208]	; (8002460 <HAL_RCC_OscConfig+0x244>)
 800238e:	2201      	movs	r2, #1
 8002390:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002392:	f7fe fc6d 	bl	8000c70 <HAL_GetTick>
 8002396:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002398:	e008      	b.n	80023ac <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800239a:	f7fe fc69 	bl	8000c70 <HAL_GetTick>
 800239e:	4602      	mov	r2, r0
 80023a0:	693b      	ldr	r3, [r7, #16]
 80023a2:	1ad3      	subs	r3, r2, r3
 80023a4:	2b02      	cmp	r3, #2
 80023a6:	d901      	bls.n	80023ac <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80023a8:	2303      	movs	r3, #3
 80023aa:	e1a8      	b.n	80026fe <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80023ac:	4b2b      	ldr	r3, [pc, #172]	; (800245c <HAL_RCC_OscConfig+0x240>)
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	f003 0302 	and.w	r3, r3, #2
 80023b4:	2b00      	cmp	r3, #0
 80023b6:	d0f0      	beq.n	800239a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80023b8:	4b28      	ldr	r3, [pc, #160]	; (800245c <HAL_RCC_OscConfig+0x240>)
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	691b      	ldr	r3, [r3, #16]
 80023c4:	00db      	lsls	r3, r3, #3
 80023c6:	4925      	ldr	r1, [pc, #148]	; (800245c <HAL_RCC_OscConfig+0x240>)
 80023c8:	4313      	orrs	r3, r2
 80023ca:	600b      	str	r3, [r1, #0]
 80023cc:	e015      	b.n	80023fa <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80023ce:	4b24      	ldr	r3, [pc, #144]	; (8002460 <HAL_RCC_OscConfig+0x244>)
 80023d0:	2200      	movs	r2, #0
 80023d2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80023d4:	f7fe fc4c 	bl	8000c70 <HAL_GetTick>
 80023d8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80023da:	e008      	b.n	80023ee <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80023dc:	f7fe fc48 	bl	8000c70 <HAL_GetTick>
 80023e0:	4602      	mov	r2, r0
 80023e2:	693b      	ldr	r3, [r7, #16]
 80023e4:	1ad3      	subs	r3, r2, r3
 80023e6:	2b02      	cmp	r3, #2
 80023e8:	d901      	bls.n	80023ee <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80023ea:	2303      	movs	r3, #3
 80023ec:	e187      	b.n	80026fe <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80023ee:	4b1b      	ldr	r3, [pc, #108]	; (800245c <HAL_RCC_OscConfig+0x240>)
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	f003 0302 	and.w	r3, r3, #2
 80023f6:	2b00      	cmp	r3, #0
 80023f8:	d1f0      	bne.n	80023dc <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	f003 0308 	and.w	r3, r3, #8
 8002402:	2b00      	cmp	r3, #0
 8002404:	d036      	beq.n	8002474 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	695b      	ldr	r3, [r3, #20]
 800240a:	2b00      	cmp	r3, #0
 800240c:	d016      	beq.n	800243c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800240e:	4b15      	ldr	r3, [pc, #84]	; (8002464 <HAL_RCC_OscConfig+0x248>)
 8002410:	2201      	movs	r2, #1
 8002412:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002414:	f7fe fc2c 	bl	8000c70 <HAL_GetTick>
 8002418:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800241a:	e008      	b.n	800242e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800241c:	f7fe fc28 	bl	8000c70 <HAL_GetTick>
 8002420:	4602      	mov	r2, r0
 8002422:	693b      	ldr	r3, [r7, #16]
 8002424:	1ad3      	subs	r3, r2, r3
 8002426:	2b02      	cmp	r3, #2
 8002428:	d901      	bls.n	800242e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800242a:	2303      	movs	r3, #3
 800242c:	e167      	b.n	80026fe <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800242e:	4b0b      	ldr	r3, [pc, #44]	; (800245c <HAL_RCC_OscConfig+0x240>)
 8002430:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002432:	f003 0302 	and.w	r3, r3, #2
 8002436:	2b00      	cmp	r3, #0
 8002438:	d0f0      	beq.n	800241c <HAL_RCC_OscConfig+0x200>
 800243a:	e01b      	b.n	8002474 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800243c:	4b09      	ldr	r3, [pc, #36]	; (8002464 <HAL_RCC_OscConfig+0x248>)
 800243e:	2200      	movs	r2, #0
 8002440:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002442:	f7fe fc15 	bl	8000c70 <HAL_GetTick>
 8002446:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002448:	e00e      	b.n	8002468 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800244a:	f7fe fc11 	bl	8000c70 <HAL_GetTick>
 800244e:	4602      	mov	r2, r0
 8002450:	693b      	ldr	r3, [r7, #16]
 8002452:	1ad3      	subs	r3, r2, r3
 8002454:	2b02      	cmp	r3, #2
 8002456:	d907      	bls.n	8002468 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002458:	2303      	movs	r3, #3
 800245a:	e150      	b.n	80026fe <HAL_RCC_OscConfig+0x4e2>
 800245c:	40023800 	.word	0x40023800
 8002460:	42470000 	.word	0x42470000
 8002464:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002468:	4b88      	ldr	r3, [pc, #544]	; (800268c <HAL_RCC_OscConfig+0x470>)
 800246a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800246c:	f003 0302 	and.w	r3, r3, #2
 8002470:	2b00      	cmp	r3, #0
 8002472:	d1ea      	bne.n	800244a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	f003 0304 	and.w	r3, r3, #4
 800247c:	2b00      	cmp	r3, #0
 800247e:	f000 8097 	beq.w	80025b0 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002482:	2300      	movs	r3, #0
 8002484:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002486:	4b81      	ldr	r3, [pc, #516]	; (800268c <HAL_RCC_OscConfig+0x470>)
 8002488:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800248a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800248e:	2b00      	cmp	r3, #0
 8002490:	d10f      	bne.n	80024b2 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002492:	2300      	movs	r3, #0
 8002494:	60bb      	str	r3, [r7, #8]
 8002496:	4b7d      	ldr	r3, [pc, #500]	; (800268c <HAL_RCC_OscConfig+0x470>)
 8002498:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800249a:	4a7c      	ldr	r2, [pc, #496]	; (800268c <HAL_RCC_OscConfig+0x470>)
 800249c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80024a0:	6413      	str	r3, [r2, #64]	; 0x40
 80024a2:	4b7a      	ldr	r3, [pc, #488]	; (800268c <HAL_RCC_OscConfig+0x470>)
 80024a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024a6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80024aa:	60bb      	str	r3, [r7, #8]
 80024ac:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80024ae:	2301      	movs	r3, #1
 80024b0:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80024b2:	4b77      	ldr	r3, [pc, #476]	; (8002690 <HAL_RCC_OscConfig+0x474>)
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80024ba:	2b00      	cmp	r3, #0
 80024bc:	d118      	bne.n	80024f0 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80024be:	4b74      	ldr	r3, [pc, #464]	; (8002690 <HAL_RCC_OscConfig+0x474>)
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	4a73      	ldr	r2, [pc, #460]	; (8002690 <HAL_RCC_OscConfig+0x474>)
 80024c4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80024c8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80024ca:	f7fe fbd1 	bl	8000c70 <HAL_GetTick>
 80024ce:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80024d0:	e008      	b.n	80024e4 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80024d2:	f7fe fbcd 	bl	8000c70 <HAL_GetTick>
 80024d6:	4602      	mov	r2, r0
 80024d8:	693b      	ldr	r3, [r7, #16]
 80024da:	1ad3      	subs	r3, r2, r3
 80024dc:	2b02      	cmp	r3, #2
 80024de:	d901      	bls.n	80024e4 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80024e0:	2303      	movs	r3, #3
 80024e2:	e10c      	b.n	80026fe <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80024e4:	4b6a      	ldr	r3, [pc, #424]	; (8002690 <HAL_RCC_OscConfig+0x474>)
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80024ec:	2b00      	cmp	r3, #0
 80024ee:	d0f0      	beq.n	80024d2 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	689b      	ldr	r3, [r3, #8]
 80024f4:	2b01      	cmp	r3, #1
 80024f6:	d106      	bne.n	8002506 <HAL_RCC_OscConfig+0x2ea>
 80024f8:	4b64      	ldr	r3, [pc, #400]	; (800268c <HAL_RCC_OscConfig+0x470>)
 80024fa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80024fc:	4a63      	ldr	r2, [pc, #396]	; (800268c <HAL_RCC_OscConfig+0x470>)
 80024fe:	f043 0301 	orr.w	r3, r3, #1
 8002502:	6713      	str	r3, [r2, #112]	; 0x70
 8002504:	e01c      	b.n	8002540 <HAL_RCC_OscConfig+0x324>
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	689b      	ldr	r3, [r3, #8]
 800250a:	2b05      	cmp	r3, #5
 800250c:	d10c      	bne.n	8002528 <HAL_RCC_OscConfig+0x30c>
 800250e:	4b5f      	ldr	r3, [pc, #380]	; (800268c <HAL_RCC_OscConfig+0x470>)
 8002510:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002512:	4a5e      	ldr	r2, [pc, #376]	; (800268c <HAL_RCC_OscConfig+0x470>)
 8002514:	f043 0304 	orr.w	r3, r3, #4
 8002518:	6713      	str	r3, [r2, #112]	; 0x70
 800251a:	4b5c      	ldr	r3, [pc, #368]	; (800268c <HAL_RCC_OscConfig+0x470>)
 800251c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800251e:	4a5b      	ldr	r2, [pc, #364]	; (800268c <HAL_RCC_OscConfig+0x470>)
 8002520:	f043 0301 	orr.w	r3, r3, #1
 8002524:	6713      	str	r3, [r2, #112]	; 0x70
 8002526:	e00b      	b.n	8002540 <HAL_RCC_OscConfig+0x324>
 8002528:	4b58      	ldr	r3, [pc, #352]	; (800268c <HAL_RCC_OscConfig+0x470>)
 800252a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800252c:	4a57      	ldr	r2, [pc, #348]	; (800268c <HAL_RCC_OscConfig+0x470>)
 800252e:	f023 0301 	bic.w	r3, r3, #1
 8002532:	6713      	str	r3, [r2, #112]	; 0x70
 8002534:	4b55      	ldr	r3, [pc, #340]	; (800268c <HAL_RCC_OscConfig+0x470>)
 8002536:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002538:	4a54      	ldr	r2, [pc, #336]	; (800268c <HAL_RCC_OscConfig+0x470>)
 800253a:	f023 0304 	bic.w	r3, r3, #4
 800253e:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	689b      	ldr	r3, [r3, #8]
 8002544:	2b00      	cmp	r3, #0
 8002546:	d015      	beq.n	8002574 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002548:	f7fe fb92 	bl	8000c70 <HAL_GetTick>
 800254c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800254e:	e00a      	b.n	8002566 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002550:	f7fe fb8e 	bl	8000c70 <HAL_GetTick>
 8002554:	4602      	mov	r2, r0
 8002556:	693b      	ldr	r3, [r7, #16]
 8002558:	1ad3      	subs	r3, r2, r3
 800255a:	f241 3288 	movw	r2, #5000	; 0x1388
 800255e:	4293      	cmp	r3, r2
 8002560:	d901      	bls.n	8002566 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8002562:	2303      	movs	r3, #3
 8002564:	e0cb      	b.n	80026fe <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002566:	4b49      	ldr	r3, [pc, #292]	; (800268c <HAL_RCC_OscConfig+0x470>)
 8002568:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800256a:	f003 0302 	and.w	r3, r3, #2
 800256e:	2b00      	cmp	r3, #0
 8002570:	d0ee      	beq.n	8002550 <HAL_RCC_OscConfig+0x334>
 8002572:	e014      	b.n	800259e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002574:	f7fe fb7c 	bl	8000c70 <HAL_GetTick>
 8002578:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800257a:	e00a      	b.n	8002592 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800257c:	f7fe fb78 	bl	8000c70 <HAL_GetTick>
 8002580:	4602      	mov	r2, r0
 8002582:	693b      	ldr	r3, [r7, #16]
 8002584:	1ad3      	subs	r3, r2, r3
 8002586:	f241 3288 	movw	r2, #5000	; 0x1388
 800258a:	4293      	cmp	r3, r2
 800258c:	d901      	bls.n	8002592 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800258e:	2303      	movs	r3, #3
 8002590:	e0b5      	b.n	80026fe <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002592:	4b3e      	ldr	r3, [pc, #248]	; (800268c <HAL_RCC_OscConfig+0x470>)
 8002594:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002596:	f003 0302 	and.w	r3, r3, #2
 800259a:	2b00      	cmp	r3, #0
 800259c:	d1ee      	bne.n	800257c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800259e:	7dfb      	ldrb	r3, [r7, #23]
 80025a0:	2b01      	cmp	r3, #1
 80025a2:	d105      	bne.n	80025b0 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80025a4:	4b39      	ldr	r3, [pc, #228]	; (800268c <HAL_RCC_OscConfig+0x470>)
 80025a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025a8:	4a38      	ldr	r2, [pc, #224]	; (800268c <HAL_RCC_OscConfig+0x470>)
 80025aa:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80025ae:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	699b      	ldr	r3, [r3, #24]
 80025b4:	2b00      	cmp	r3, #0
 80025b6:	f000 80a1 	beq.w	80026fc <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80025ba:	4b34      	ldr	r3, [pc, #208]	; (800268c <HAL_RCC_OscConfig+0x470>)
 80025bc:	689b      	ldr	r3, [r3, #8]
 80025be:	f003 030c 	and.w	r3, r3, #12
 80025c2:	2b08      	cmp	r3, #8
 80025c4:	d05c      	beq.n	8002680 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	699b      	ldr	r3, [r3, #24]
 80025ca:	2b02      	cmp	r3, #2
 80025cc:	d141      	bne.n	8002652 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80025ce:	4b31      	ldr	r3, [pc, #196]	; (8002694 <HAL_RCC_OscConfig+0x478>)
 80025d0:	2200      	movs	r2, #0
 80025d2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80025d4:	f7fe fb4c 	bl	8000c70 <HAL_GetTick>
 80025d8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80025da:	e008      	b.n	80025ee <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80025dc:	f7fe fb48 	bl	8000c70 <HAL_GetTick>
 80025e0:	4602      	mov	r2, r0
 80025e2:	693b      	ldr	r3, [r7, #16]
 80025e4:	1ad3      	subs	r3, r2, r3
 80025e6:	2b02      	cmp	r3, #2
 80025e8:	d901      	bls.n	80025ee <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80025ea:	2303      	movs	r3, #3
 80025ec:	e087      	b.n	80026fe <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80025ee:	4b27      	ldr	r3, [pc, #156]	; (800268c <HAL_RCC_OscConfig+0x470>)
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80025f6:	2b00      	cmp	r3, #0
 80025f8:	d1f0      	bne.n	80025dc <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	69da      	ldr	r2, [r3, #28]
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	6a1b      	ldr	r3, [r3, #32]
 8002602:	431a      	orrs	r2, r3
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002608:	019b      	lsls	r3, r3, #6
 800260a:	431a      	orrs	r2, r3
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002610:	085b      	lsrs	r3, r3, #1
 8002612:	3b01      	subs	r3, #1
 8002614:	041b      	lsls	r3, r3, #16
 8002616:	431a      	orrs	r2, r3
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800261c:	061b      	lsls	r3, r3, #24
 800261e:	491b      	ldr	r1, [pc, #108]	; (800268c <HAL_RCC_OscConfig+0x470>)
 8002620:	4313      	orrs	r3, r2
 8002622:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002624:	4b1b      	ldr	r3, [pc, #108]	; (8002694 <HAL_RCC_OscConfig+0x478>)
 8002626:	2201      	movs	r2, #1
 8002628:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800262a:	f7fe fb21 	bl	8000c70 <HAL_GetTick>
 800262e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002630:	e008      	b.n	8002644 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002632:	f7fe fb1d 	bl	8000c70 <HAL_GetTick>
 8002636:	4602      	mov	r2, r0
 8002638:	693b      	ldr	r3, [r7, #16]
 800263a:	1ad3      	subs	r3, r2, r3
 800263c:	2b02      	cmp	r3, #2
 800263e:	d901      	bls.n	8002644 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002640:	2303      	movs	r3, #3
 8002642:	e05c      	b.n	80026fe <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002644:	4b11      	ldr	r3, [pc, #68]	; (800268c <HAL_RCC_OscConfig+0x470>)
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800264c:	2b00      	cmp	r3, #0
 800264e:	d0f0      	beq.n	8002632 <HAL_RCC_OscConfig+0x416>
 8002650:	e054      	b.n	80026fc <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002652:	4b10      	ldr	r3, [pc, #64]	; (8002694 <HAL_RCC_OscConfig+0x478>)
 8002654:	2200      	movs	r2, #0
 8002656:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002658:	f7fe fb0a 	bl	8000c70 <HAL_GetTick>
 800265c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800265e:	e008      	b.n	8002672 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002660:	f7fe fb06 	bl	8000c70 <HAL_GetTick>
 8002664:	4602      	mov	r2, r0
 8002666:	693b      	ldr	r3, [r7, #16]
 8002668:	1ad3      	subs	r3, r2, r3
 800266a:	2b02      	cmp	r3, #2
 800266c:	d901      	bls.n	8002672 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800266e:	2303      	movs	r3, #3
 8002670:	e045      	b.n	80026fe <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002672:	4b06      	ldr	r3, [pc, #24]	; (800268c <HAL_RCC_OscConfig+0x470>)
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800267a:	2b00      	cmp	r3, #0
 800267c:	d1f0      	bne.n	8002660 <HAL_RCC_OscConfig+0x444>
 800267e:	e03d      	b.n	80026fc <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	699b      	ldr	r3, [r3, #24]
 8002684:	2b01      	cmp	r3, #1
 8002686:	d107      	bne.n	8002698 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8002688:	2301      	movs	r3, #1
 800268a:	e038      	b.n	80026fe <HAL_RCC_OscConfig+0x4e2>
 800268c:	40023800 	.word	0x40023800
 8002690:	40007000 	.word	0x40007000
 8002694:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002698:	4b1b      	ldr	r3, [pc, #108]	; (8002708 <HAL_RCC_OscConfig+0x4ec>)
 800269a:	685b      	ldr	r3, [r3, #4]
 800269c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	699b      	ldr	r3, [r3, #24]
 80026a2:	2b01      	cmp	r3, #1
 80026a4:	d028      	beq.n	80026f8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80026a6:	68fb      	ldr	r3, [r7, #12]
 80026a8:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80026b0:	429a      	cmp	r2, r3
 80026b2:	d121      	bne.n	80026f8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80026b4:	68fb      	ldr	r3, [r7, #12]
 80026b6:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80026be:	429a      	cmp	r2, r3
 80026c0:	d11a      	bne.n	80026f8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80026c2:	68fa      	ldr	r2, [r7, #12]
 80026c4:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80026c8:	4013      	ands	r3, r2
 80026ca:	687a      	ldr	r2, [r7, #4]
 80026cc:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80026ce:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80026d0:	4293      	cmp	r3, r2
 80026d2:	d111      	bne.n	80026f8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80026d4:	68fb      	ldr	r3, [r7, #12]
 80026d6:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80026de:	085b      	lsrs	r3, r3, #1
 80026e0:	3b01      	subs	r3, #1
 80026e2:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80026e4:	429a      	cmp	r2, r3
 80026e6:	d107      	bne.n	80026f8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80026e8:	68fb      	ldr	r3, [r7, #12]
 80026ea:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80026f2:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80026f4:	429a      	cmp	r2, r3
 80026f6:	d001      	beq.n	80026fc <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80026f8:	2301      	movs	r3, #1
 80026fa:	e000      	b.n	80026fe <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80026fc:	2300      	movs	r3, #0
}
 80026fe:	4618      	mov	r0, r3
 8002700:	3718      	adds	r7, #24
 8002702:	46bd      	mov	sp, r7
 8002704:	bd80      	pop	{r7, pc}
 8002706:	bf00      	nop
 8002708:	40023800 	.word	0x40023800

0800270c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800270c:	b580      	push	{r7, lr}
 800270e:	b084      	sub	sp, #16
 8002710:	af00      	add	r7, sp, #0
 8002712:	6078      	str	r0, [r7, #4]
 8002714:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	2b00      	cmp	r3, #0
 800271a:	d101      	bne.n	8002720 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800271c:	2301      	movs	r3, #1
 800271e:	e0cc      	b.n	80028ba <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002720:	4b68      	ldr	r3, [pc, #416]	; (80028c4 <HAL_RCC_ClockConfig+0x1b8>)
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	f003 0307 	and.w	r3, r3, #7
 8002728:	683a      	ldr	r2, [r7, #0]
 800272a:	429a      	cmp	r2, r3
 800272c:	d90c      	bls.n	8002748 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800272e:	4b65      	ldr	r3, [pc, #404]	; (80028c4 <HAL_RCC_ClockConfig+0x1b8>)
 8002730:	683a      	ldr	r2, [r7, #0]
 8002732:	b2d2      	uxtb	r2, r2
 8002734:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002736:	4b63      	ldr	r3, [pc, #396]	; (80028c4 <HAL_RCC_ClockConfig+0x1b8>)
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	f003 0307 	and.w	r3, r3, #7
 800273e:	683a      	ldr	r2, [r7, #0]
 8002740:	429a      	cmp	r2, r3
 8002742:	d001      	beq.n	8002748 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002744:	2301      	movs	r3, #1
 8002746:	e0b8      	b.n	80028ba <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	f003 0302 	and.w	r3, r3, #2
 8002750:	2b00      	cmp	r3, #0
 8002752:	d020      	beq.n	8002796 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	f003 0304 	and.w	r3, r3, #4
 800275c:	2b00      	cmp	r3, #0
 800275e:	d005      	beq.n	800276c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002760:	4b59      	ldr	r3, [pc, #356]	; (80028c8 <HAL_RCC_ClockConfig+0x1bc>)
 8002762:	689b      	ldr	r3, [r3, #8]
 8002764:	4a58      	ldr	r2, [pc, #352]	; (80028c8 <HAL_RCC_ClockConfig+0x1bc>)
 8002766:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800276a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	f003 0308 	and.w	r3, r3, #8
 8002774:	2b00      	cmp	r3, #0
 8002776:	d005      	beq.n	8002784 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002778:	4b53      	ldr	r3, [pc, #332]	; (80028c8 <HAL_RCC_ClockConfig+0x1bc>)
 800277a:	689b      	ldr	r3, [r3, #8]
 800277c:	4a52      	ldr	r2, [pc, #328]	; (80028c8 <HAL_RCC_ClockConfig+0x1bc>)
 800277e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002782:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002784:	4b50      	ldr	r3, [pc, #320]	; (80028c8 <HAL_RCC_ClockConfig+0x1bc>)
 8002786:	689b      	ldr	r3, [r3, #8]
 8002788:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	689b      	ldr	r3, [r3, #8]
 8002790:	494d      	ldr	r1, [pc, #308]	; (80028c8 <HAL_RCC_ClockConfig+0x1bc>)
 8002792:	4313      	orrs	r3, r2
 8002794:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	f003 0301 	and.w	r3, r3, #1
 800279e:	2b00      	cmp	r3, #0
 80027a0:	d044      	beq.n	800282c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	685b      	ldr	r3, [r3, #4]
 80027a6:	2b01      	cmp	r3, #1
 80027a8:	d107      	bne.n	80027ba <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80027aa:	4b47      	ldr	r3, [pc, #284]	; (80028c8 <HAL_RCC_ClockConfig+0x1bc>)
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80027b2:	2b00      	cmp	r3, #0
 80027b4:	d119      	bne.n	80027ea <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80027b6:	2301      	movs	r3, #1
 80027b8:	e07f      	b.n	80028ba <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	685b      	ldr	r3, [r3, #4]
 80027be:	2b02      	cmp	r3, #2
 80027c0:	d003      	beq.n	80027ca <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80027c6:	2b03      	cmp	r3, #3
 80027c8:	d107      	bne.n	80027da <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80027ca:	4b3f      	ldr	r3, [pc, #252]	; (80028c8 <HAL_RCC_ClockConfig+0x1bc>)
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80027d2:	2b00      	cmp	r3, #0
 80027d4:	d109      	bne.n	80027ea <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80027d6:	2301      	movs	r3, #1
 80027d8:	e06f      	b.n	80028ba <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80027da:	4b3b      	ldr	r3, [pc, #236]	; (80028c8 <HAL_RCC_ClockConfig+0x1bc>)
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	f003 0302 	and.w	r3, r3, #2
 80027e2:	2b00      	cmp	r3, #0
 80027e4:	d101      	bne.n	80027ea <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80027e6:	2301      	movs	r3, #1
 80027e8:	e067      	b.n	80028ba <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80027ea:	4b37      	ldr	r3, [pc, #220]	; (80028c8 <HAL_RCC_ClockConfig+0x1bc>)
 80027ec:	689b      	ldr	r3, [r3, #8]
 80027ee:	f023 0203 	bic.w	r2, r3, #3
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	685b      	ldr	r3, [r3, #4]
 80027f6:	4934      	ldr	r1, [pc, #208]	; (80028c8 <HAL_RCC_ClockConfig+0x1bc>)
 80027f8:	4313      	orrs	r3, r2
 80027fa:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80027fc:	f7fe fa38 	bl	8000c70 <HAL_GetTick>
 8002800:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002802:	e00a      	b.n	800281a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002804:	f7fe fa34 	bl	8000c70 <HAL_GetTick>
 8002808:	4602      	mov	r2, r0
 800280a:	68fb      	ldr	r3, [r7, #12]
 800280c:	1ad3      	subs	r3, r2, r3
 800280e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002812:	4293      	cmp	r3, r2
 8002814:	d901      	bls.n	800281a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002816:	2303      	movs	r3, #3
 8002818:	e04f      	b.n	80028ba <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800281a:	4b2b      	ldr	r3, [pc, #172]	; (80028c8 <HAL_RCC_ClockConfig+0x1bc>)
 800281c:	689b      	ldr	r3, [r3, #8]
 800281e:	f003 020c 	and.w	r2, r3, #12
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	685b      	ldr	r3, [r3, #4]
 8002826:	009b      	lsls	r3, r3, #2
 8002828:	429a      	cmp	r2, r3
 800282a:	d1eb      	bne.n	8002804 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800282c:	4b25      	ldr	r3, [pc, #148]	; (80028c4 <HAL_RCC_ClockConfig+0x1b8>)
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	f003 0307 	and.w	r3, r3, #7
 8002834:	683a      	ldr	r2, [r7, #0]
 8002836:	429a      	cmp	r2, r3
 8002838:	d20c      	bcs.n	8002854 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800283a:	4b22      	ldr	r3, [pc, #136]	; (80028c4 <HAL_RCC_ClockConfig+0x1b8>)
 800283c:	683a      	ldr	r2, [r7, #0]
 800283e:	b2d2      	uxtb	r2, r2
 8002840:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002842:	4b20      	ldr	r3, [pc, #128]	; (80028c4 <HAL_RCC_ClockConfig+0x1b8>)
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	f003 0307 	and.w	r3, r3, #7
 800284a:	683a      	ldr	r2, [r7, #0]
 800284c:	429a      	cmp	r2, r3
 800284e:	d001      	beq.n	8002854 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002850:	2301      	movs	r3, #1
 8002852:	e032      	b.n	80028ba <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	f003 0304 	and.w	r3, r3, #4
 800285c:	2b00      	cmp	r3, #0
 800285e:	d008      	beq.n	8002872 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002860:	4b19      	ldr	r3, [pc, #100]	; (80028c8 <HAL_RCC_ClockConfig+0x1bc>)
 8002862:	689b      	ldr	r3, [r3, #8]
 8002864:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	68db      	ldr	r3, [r3, #12]
 800286c:	4916      	ldr	r1, [pc, #88]	; (80028c8 <HAL_RCC_ClockConfig+0x1bc>)
 800286e:	4313      	orrs	r3, r2
 8002870:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	f003 0308 	and.w	r3, r3, #8
 800287a:	2b00      	cmp	r3, #0
 800287c:	d009      	beq.n	8002892 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800287e:	4b12      	ldr	r3, [pc, #72]	; (80028c8 <HAL_RCC_ClockConfig+0x1bc>)
 8002880:	689b      	ldr	r3, [r3, #8]
 8002882:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	691b      	ldr	r3, [r3, #16]
 800288a:	00db      	lsls	r3, r3, #3
 800288c:	490e      	ldr	r1, [pc, #56]	; (80028c8 <HAL_RCC_ClockConfig+0x1bc>)
 800288e:	4313      	orrs	r3, r2
 8002890:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002892:	f000 f821 	bl	80028d8 <HAL_RCC_GetSysClockFreq>
 8002896:	4602      	mov	r2, r0
 8002898:	4b0b      	ldr	r3, [pc, #44]	; (80028c8 <HAL_RCC_ClockConfig+0x1bc>)
 800289a:	689b      	ldr	r3, [r3, #8]
 800289c:	091b      	lsrs	r3, r3, #4
 800289e:	f003 030f 	and.w	r3, r3, #15
 80028a2:	490a      	ldr	r1, [pc, #40]	; (80028cc <HAL_RCC_ClockConfig+0x1c0>)
 80028a4:	5ccb      	ldrb	r3, [r1, r3]
 80028a6:	fa22 f303 	lsr.w	r3, r2, r3
 80028aa:	4a09      	ldr	r2, [pc, #36]	; (80028d0 <HAL_RCC_ClockConfig+0x1c4>)
 80028ac:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80028ae:	4b09      	ldr	r3, [pc, #36]	; (80028d4 <HAL_RCC_ClockConfig+0x1c8>)
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	4618      	mov	r0, r3
 80028b4:	f7fe f998 	bl	8000be8 <HAL_InitTick>

  return HAL_OK;
 80028b8:	2300      	movs	r3, #0
}
 80028ba:	4618      	mov	r0, r3
 80028bc:	3710      	adds	r7, #16
 80028be:	46bd      	mov	sp, r7
 80028c0:	bd80      	pop	{r7, pc}
 80028c2:	bf00      	nop
 80028c4:	40023c00 	.word	0x40023c00
 80028c8:	40023800 	.word	0x40023800
 80028cc:	08006dfc 	.word	0x08006dfc
 80028d0:	20000000 	.word	0x20000000
 80028d4:	20000004 	.word	0x20000004

080028d8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80028d8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80028dc:	b090      	sub	sp, #64	; 0x40
 80028de:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80028e0:	2300      	movs	r3, #0
 80028e2:	637b      	str	r3, [r7, #52]	; 0x34
 80028e4:	2300      	movs	r3, #0
 80028e6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80028e8:	2300      	movs	r3, #0
 80028ea:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 80028ec:	2300      	movs	r3, #0
 80028ee:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80028f0:	4b59      	ldr	r3, [pc, #356]	; (8002a58 <HAL_RCC_GetSysClockFreq+0x180>)
 80028f2:	689b      	ldr	r3, [r3, #8]
 80028f4:	f003 030c 	and.w	r3, r3, #12
 80028f8:	2b08      	cmp	r3, #8
 80028fa:	d00d      	beq.n	8002918 <HAL_RCC_GetSysClockFreq+0x40>
 80028fc:	2b08      	cmp	r3, #8
 80028fe:	f200 80a1 	bhi.w	8002a44 <HAL_RCC_GetSysClockFreq+0x16c>
 8002902:	2b00      	cmp	r3, #0
 8002904:	d002      	beq.n	800290c <HAL_RCC_GetSysClockFreq+0x34>
 8002906:	2b04      	cmp	r3, #4
 8002908:	d003      	beq.n	8002912 <HAL_RCC_GetSysClockFreq+0x3a>
 800290a:	e09b      	b.n	8002a44 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800290c:	4b53      	ldr	r3, [pc, #332]	; (8002a5c <HAL_RCC_GetSysClockFreq+0x184>)
 800290e:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8002910:	e09b      	b.n	8002a4a <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002912:	4b53      	ldr	r3, [pc, #332]	; (8002a60 <HAL_RCC_GetSysClockFreq+0x188>)
 8002914:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8002916:	e098      	b.n	8002a4a <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002918:	4b4f      	ldr	r3, [pc, #316]	; (8002a58 <HAL_RCC_GetSysClockFreq+0x180>)
 800291a:	685b      	ldr	r3, [r3, #4]
 800291c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002920:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002922:	4b4d      	ldr	r3, [pc, #308]	; (8002a58 <HAL_RCC_GetSysClockFreq+0x180>)
 8002924:	685b      	ldr	r3, [r3, #4]
 8002926:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800292a:	2b00      	cmp	r3, #0
 800292c:	d028      	beq.n	8002980 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800292e:	4b4a      	ldr	r3, [pc, #296]	; (8002a58 <HAL_RCC_GetSysClockFreq+0x180>)
 8002930:	685b      	ldr	r3, [r3, #4]
 8002932:	099b      	lsrs	r3, r3, #6
 8002934:	2200      	movs	r2, #0
 8002936:	623b      	str	r3, [r7, #32]
 8002938:	627a      	str	r2, [r7, #36]	; 0x24
 800293a:	6a3b      	ldr	r3, [r7, #32]
 800293c:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8002940:	2100      	movs	r1, #0
 8002942:	4b47      	ldr	r3, [pc, #284]	; (8002a60 <HAL_RCC_GetSysClockFreq+0x188>)
 8002944:	fb03 f201 	mul.w	r2, r3, r1
 8002948:	2300      	movs	r3, #0
 800294a:	fb00 f303 	mul.w	r3, r0, r3
 800294e:	4413      	add	r3, r2
 8002950:	4a43      	ldr	r2, [pc, #268]	; (8002a60 <HAL_RCC_GetSysClockFreq+0x188>)
 8002952:	fba0 1202 	umull	r1, r2, r0, r2
 8002956:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002958:	460a      	mov	r2, r1
 800295a:	62ba      	str	r2, [r7, #40]	; 0x28
 800295c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800295e:	4413      	add	r3, r2
 8002960:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002962:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002964:	2200      	movs	r2, #0
 8002966:	61bb      	str	r3, [r7, #24]
 8002968:	61fa      	str	r2, [r7, #28]
 800296a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800296e:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8002972:	f7fd fc8d 	bl	8000290 <__aeabi_uldivmod>
 8002976:	4602      	mov	r2, r0
 8002978:	460b      	mov	r3, r1
 800297a:	4613      	mov	r3, r2
 800297c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800297e:	e053      	b.n	8002a28 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002980:	4b35      	ldr	r3, [pc, #212]	; (8002a58 <HAL_RCC_GetSysClockFreq+0x180>)
 8002982:	685b      	ldr	r3, [r3, #4]
 8002984:	099b      	lsrs	r3, r3, #6
 8002986:	2200      	movs	r2, #0
 8002988:	613b      	str	r3, [r7, #16]
 800298a:	617a      	str	r2, [r7, #20]
 800298c:	693b      	ldr	r3, [r7, #16]
 800298e:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8002992:	f04f 0b00 	mov.w	fp, #0
 8002996:	4652      	mov	r2, sl
 8002998:	465b      	mov	r3, fp
 800299a:	f04f 0000 	mov.w	r0, #0
 800299e:	f04f 0100 	mov.w	r1, #0
 80029a2:	0159      	lsls	r1, r3, #5
 80029a4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80029a8:	0150      	lsls	r0, r2, #5
 80029aa:	4602      	mov	r2, r0
 80029ac:	460b      	mov	r3, r1
 80029ae:	ebb2 080a 	subs.w	r8, r2, sl
 80029b2:	eb63 090b 	sbc.w	r9, r3, fp
 80029b6:	f04f 0200 	mov.w	r2, #0
 80029ba:	f04f 0300 	mov.w	r3, #0
 80029be:	ea4f 1389 	mov.w	r3, r9, lsl #6
 80029c2:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 80029c6:	ea4f 1288 	mov.w	r2, r8, lsl #6
 80029ca:	ebb2 0408 	subs.w	r4, r2, r8
 80029ce:	eb63 0509 	sbc.w	r5, r3, r9
 80029d2:	f04f 0200 	mov.w	r2, #0
 80029d6:	f04f 0300 	mov.w	r3, #0
 80029da:	00eb      	lsls	r3, r5, #3
 80029dc:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80029e0:	00e2      	lsls	r2, r4, #3
 80029e2:	4614      	mov	r4, r2
 80029e4:	461d      	mov	r5, r3
 80029e6:	eb14 030a 	adds.w	r3, r4, sl
 80029ea:	603b      	str	r3, [r7, #0]
 80029ec:	eb45 030b 	adc.w	r3, r5, fp
 80029f0:	607b      	str	r3, [r7, #4]
 80029f2:	f04f 0200 	mov.w	r2, #0
 80029f6:	f04f 0300 	mov.w	r3, #0
 80029fa:	e9d7 4500 	ldrd	r4, r5, [r7]
 80029fe:	4629      	mov	r1, r5
 8002a00:	028b      	lsls	r3, r1, #10
 8002a02:	4621      	mov	r1, r4
 8002a04:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002a08:	4621      	mov	r1, r4
 8002a0a:	028a      	lsls	r2, r1, #10
 8002a0c:	4610      	mov	r0, r2
 8002a0e:	4619      	mov	r1, r3
 8002a10:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002a12:	2200      	movs	r2, #0
 8002a14:	60bb      	str	r3, [r7, #8]
 8002a16:	60fa      	str	r2, [r7, #12]
 8002a18:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002a1c:	f7fd fc38 	bl	8000290 <__aeabi_uldivmod>
 8002a20:	4602      	mov	r2, r0
 8002a22:	460b      	mov	r3, r1
 8002a24:	4613      	mov	r3, r2
 8002a26:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002a28:	4b0b      	ldr	r3, [pc, #44]	; (8002a58 <HAL_RCC_GetSysClockFreq+0x180>)
 8002a2a:	685b      	ldr	r3, [r3, #4]
 8002a2c:	0c1b      	lsrs	r3, r3, #16
 8002a2e:	f003 0303 	and.w	r3, r3, #3
 8002a32:	3301      	adds	r3, #1
 8002a34:	005b      	lsls	r3, r3, #1
 8002a36:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 8002a38:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002a3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002a3c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002a40:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8002a42:	e002      	b.n	8002a4a <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002a44:	4b05      	ldr	r3, [pc, #20]	; (8002a5c <HAL_RCC_GetSysClockFreq+0x184>)
 8002a46:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8002a48:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002a4a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8002a4c:	4618      	mov	r0, r3
 8002a4e:	3740      	adds	r7, #64	; 0x40
 8002a50:	46bd      	mov	sp, r7
 8002a52:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002a56:	bf00      	nop
 8002a58:	40023800 	.word	0x40023800
 8002a5c:	00f42400 	.word	0x00f42400
 8002a60:	017d7840 	.word	0x017d7840

08002a64 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002a64:	b480      	push	{r7}
 8002a66:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002a68:	4b03      	ldr	r3, [pc, #12]	; (8002a78 <HAL_RCC_GetHCLKFreq+0x14>)
 8002a6a:	681b      	ldr	r3, [r3, #0]
}
 8002a6c:	4618      	mov	r0, r3
 8002a6e:	46bd      	mov	sp, r7
 8002a70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a74:	4770      	bx	lr
 8002a76:	bf00      	nop
 8002a78:	20000000 	.word	0x20000000

08002a7c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002a7c:	b580      	push	{r7, lr}
 8002a7e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002a80:	f7ff fff0 	bl	8002a64 <HAL_RCC_GetHCLKFreq>
 8002a84:	4602      	mov	r2, r0
 8002a86:	4b05      	ldr	r3, [pc, #20]	; (8002a9c <HAL_RCC_GetPCLK1Freq+0x20>)
 8002a88:	689b      	ldr	r3, [r3, #8]
 8002a8a:	0a9b      	lsrs	r3, r3, #10
 8002a8c:	f003 0307 	and.w	r3, r3, #7
 8002a90:	4903      	ldr	r1, [pc, #12]	; (8002aa0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002a92:	5ccb      	ldrb	r3, [r1, r3]
 8002a94:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002a98:	4618      	mov	r0, r3
 8002a9a:	bd80      	pop	{r7, pc}
 8002a9c:	40023800 	.word	0x40023800
 8002aa0:	08006e0c 	.word	0x08006e0c

08002aa4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002aa4:	b580      	push	{r7, lr}
 8002aa6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002aa8:	f7ff ffdc 	bl	8002a64 <HAL_RCC_GetHCLKFreq>
 8002aac:	4602      	mov	r2, r0
 8002aae:	4b05      	ldr	r3, [pc, #20]	; (8002ac4 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002ab0:	689b      	ldr	r3, [r3, #8]
 8002ab2:	0b5b      	lsrs	r3, r3, #13
 8002ab4:	f003 0307 	and.w	r3, r3, #7
 8002ab8:	4903      	ldr	r1, [pc, #12]	; (8002ac8 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002aba:	5ccb      	ldrb	r3, [r1, r3]
 8002abc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002ac0:	4618      	mov	r0, r3
 8002ac2:	bd80      	pop	{r7, pc}
 8002ac4:	40023800 	.word	0x40023800
 8002ac8:	08006e0c 	.word	0x08006e0c

08002acc <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002acc:	b580      	push	{r7, lr}
 8002ace:	b082      	sub	sp, #8
 8002ad0:	af00      	add	r7, sp, #0
 8002ad2:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	2b00      	cmp	r3, #0
 8002ad8:	d101      	bne.n	8002ade <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8002ada:	2301      	movs	r3, #1
 8002adc:	e07b      	b.n	8002bd6 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ae2:	2b00      	cmp	r3, #0
 8002ae4:	d108      	bne.n	8002af8 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	685b      	ldr	r3, [r3, #4]
 8002aea:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002aee:	d009      	beq.n	8002b04 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	2200      	movs	r2, #0
 8002af4:	61da      	str	r2, [r3, #28]
 8002af6:	e005      	b.n	8002b04 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	2200      	movs	r2, #0
 8002afc:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	2200      	movs	r2, #0
 8002b02:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	2200      	movs	r2, #0
 8002b08:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002b10:	b2db      	uxtb	r3, r3
 8002b12:	2b00      	cmp	r3, #0
 8002b14:	d106      	bne.n	8002b24 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	2200      	movs	r2, #0
 8002b1a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8002b1e:	6878      	ldr	r0, [r7, #4]
 8002b20:	f7fd ff14 	bl	800094c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	2202      	movs	r2, #2
 8002b28:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	681a      	ldr	r2, [r3, #0]
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002b3a:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	685b      	ldr	r3, [r3, #4]
 8002b40:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	689b      	ldr	r3, [r3, #8]
 8002b48:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8002b4c:	431a      	orrs	r2, r3
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	68db      	ldr	r3, [r3, #12]
 8002b52:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002b56:	431a      	orrs	r2, r3
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	691b      	ldr	r3, [r3, #16]
 8002b5c:	f003 0302 	and.w	r3, r3, #2
 8002b60:	431a      	orrs	r2, r3
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	695b      	ldr	r3, [r3, #20]
 8002b66:	f003 0301 	and.w	r3, r3, #1
 8002b6a:	431a      	orrs	r2, r3
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	699b      	ldr	r3, [r3, #24]
 8002b70:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002b74:	431a      	orrs	r2, r3
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	69db      	ldr	r3, [r3, #28]
 8002b7a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002b7e:	431a      	orrs	r2, r3
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	6a1b      	ldr	r3, [r3, #32]
 8002b84:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002b88:	ea42 0103 	orr.w	r1, r2, r3
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b90:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	430a      	orrs	r2, r1
 8002b9a:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	699b      	ldr	r3, [r3, #24]
 8002ba0:	0c1b      	lsrs	r3, r3, #16
 8002ba2:	f003 0104 	and.w	r1, r3, #4
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002baa:	f003 0210 	and.w	r2, r3, #16
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	430a      	orrs	r2, r1
 8002bb4:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	69da      	ldr	r2, [r3, #28]
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002bc4:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	2200      	movs	r2, #0
 8002bca:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	2201      	movs	r2, #1
 8002bd0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8002bd4:	2300      	movs	r3, #0
}
 8002bd6:	4618      	mov	r0, r3
 8002bd8:	3708      	adds	r7, #8
 8002bda:	46bd      	mov	sp, r7
 8002bdc:	bd80      	pop	{r7, pc}

08002bde <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002bde:	b580      	push	{r7, lr}
 8002be0:	b088      	sub	sp, #32
 8002be2:	af00      	add	r7, sp, #0
 8002be4:	60f8      	str	r0, [r7, #12]
 8002be6:	60b9      	str	r1, [r7, #8]
 8002be8:	603b      	str	r3, [r7, #0]
 8002bea:	4613      	mov	r3, r2
 8002bec:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8002bee:	2300      	movs	r3, #0
 8002bf0:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002bf2:	68fb      	ldr	r3, [r7, #12]
 8002bf4:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002bf8:	2b01      	cmp	r3, #1
 8002bfa:	d101      	bne.n	8002c00 <HAL_SPI_Transmit+0x22>
 8002bfc:	2302      	movs	r3, #2
 8002bfe:	e12d      	b.n	8002e5c <HAL_SPI_Transmit+0x27e>
 8002c00:	68fb      	ldr	r3, [r7, #12]
 8002c02:	2201      	movs	r2, #1
 8002c04:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002c08:	f7fe f832 	bl	8000c70 <HAL_GetTick>
 8002c0c:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8002c0e:	88fb      	ldrh	r3, [r7, #6]
 8002c10:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8002c12:	68fb      	ldr	r3, [r7, #12]
 8002c14:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002c18:	b2db      	uxtb	r3, r3
 8002c1a:	2b01      	cmp	r3, #1
 8002c1c:	d002      	beq.n	8002c24 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8002c1e:	2302      	movs	r3, #2
 8002c20:	77fb      	strb	r3, [r7, #31]
    goto error;
 8002c22:	e116      	b.n	8002e52 <HAL_SPI_Transmit+0x274>
  }

  if ((pData == NULL) || (Size == 0U))
 8002c24:	68bb      	ldr	r3, [r7, #8]
 8002c26:	2b00      	cmp	r3, #0
 8002c28:	d002      	beq.n	8002c30 <HAL_SPI_Transmit+0x52>
 8002c2a:	88fb      	ldrh	r3, [r7, #6]
 8002c2c:	2b00      	cmp	r3, #0
 8002c2e:	d102      	bne.n	8002c36 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8002c30:	2301      	movs	r3, #1
 8002c32:	77fb      	strb	r3, [r7, #31]
    goto error;
 8002c34:	e10d      	b.n	8002e52 <HAL_SPI_Transmit+0x274>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8002c36:	68fb      	ldr	r3, [r7, #12]
 8002c38:	2203      	movs	r2, #3
 8002c3a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002c3e:	68fb      	ldr	r3, [r7, #12]
 8002c40:	2200      	movs	r2, #0
 8002c42:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8002c44:	68fb      	ldr	r3, [r7, #12]
 8002c46:	68ba      	ldr	r2, [r7, #8]
 8002c48:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8002c4a:	68fb      	ldr	r3, [r7, #12]
 8002c4c:	88fa      	ldrh	r2, [r7, #6]
 8002c4e:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8002c50:	68fb      	ldr	r3, [r7, #12]
 8002c52:	88fa      	ldrh	r2, [r7, #6]
 8002c54:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8002c56:	68fb      	ldr	r3, [r7, #12]
 8002c58:	2200      	movs	r2, #0
 8002c5a:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8002c5c:	68fb      	ldr	r3, [r7, #12]
 8002c5e:	2200      	movs	r2, #0
 8002c60:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8002c62:	68fb      	ldr	r3, [r7, #12]
 8002c64:	2200      	movs	r2, #0
 8002c66:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8002c68:	68fb      	ldr	r3, [r7, #12]
 8002c6a:	2200      	movs	r2, #0
 8002c6c:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8002c6e:	68fb      	ldr	r3, [r7, #12]
 8002c70:	2200      	movs	r2, #0
 8002c72:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002c74:	68fb      	ldr	r3, [r7, #12]
 8002c76:	689b      	ldr	r3, [r3, #8]
 8002c78:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002c7c:	d10f      	bne.n	8002c9e <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8002c7e:	68fb      	ldr	r3, [r7, #12]
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	681a      	ldr	r2, [r3, #0]
 8002c84:	68fb      	ldr	r3, [r7, #12]
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002c8c:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8002c8e:	68fb      	ldr	r3, [r7, #12]
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	681a      	ldr	r2, [r3, #0]
 8002c94:	68fb      	ldr	r3, [r7, #12]
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002c9c:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002c9e:	68fb      	ldr	r3, [r7, #12]
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002ca8:	2b40      	cmp	r3, #64	; 0x40
 8002caa:	d007      	beq.n	8002cbc <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002cac:	68fb      	ldr	r3, [r7, #12]
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	681a      	ldr	r2, [r3, #0]
 8002cb2:	68fb      	ldr	r3, [r7, #12]
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002cba:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8002cbc:	68fb      	ldr	r3, [r7, #12]
 8002cbe:	68db      	ldr	r3, [r3, #12]
 8002cc0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002cc4:	d14f      	bne.n	8002d66 <HAL_SPI_Transmit+0x188>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002cc6:	68fb      	ldr	r3, [r7, #12]
 8002cc8:	685b      	ldr	r3, [r3, #4]
 8002cca:	2b00      	cmp	r3, #0
 8002ccc:	d002      	beq.n	8002cd4 <HAL_SPI_Transmit+0xf6>
 8002cce:	8afb      	ldrh	r3, [r7, #22]
 8002cd0:	2b01      	cmp	r3, #1
 8002cd2:	d142      	bne.n	8002d5a <HAL_SPI_Transmit+0x17c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002cd4:	68fb      	ldr	r3, [r7, #12]
 8002cd6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cd8:	881a      	ldrh	r2, [r3, #0]
 8002cda:	68fb      	ldr	r3, [r7, #12]
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8002ce0:	68fb      	ldr	r3, [r7, #12]
 8002ce2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ce4:	1c9a      	adds	r2, r3, #2
 8002ce6:	68fb      	ldr	r3, [r7, #12]
 8002ce8:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8002cea:	68fb      	ldr	r3, [r7, #12]
 8002cec:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002cee:	b29b      	uxth	r3, r3
 8002cf0:	3b01      	subs	r3, #1
 8002cf2:	b29a      	uxth	r2, r3
 8002cf4:	68fb      	ldr	r3, [r7, #12]
 8002cf6:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8002cf8:	e02f      	b.n	8002d5a <HAL_SPI_Transmit+0x17c>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002cfa:	68fb      	ldr	r3, [r7, #12]
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	689b      	ldr	r3, [r3, #8]
 8002d00:	f003 0302 	and.w	r3, r3, #2
 8002d04:	2b02      	cmp	r3, #2
 8002d06:	d112      	bne.n	8002d2e <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002d08:	68fb      	ldr	r3, [r7, #12]
 8002d0a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d0c:	881a      	ldrh	r2, [r3, #0]
 8002d0e:	68fb      	ldr	r3, [r7, #12]
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002d14:	68fb      	ldr	r3, [r7, #12]
 8002d16:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d18:	1c9a      	adds	r2, r3, #2
 8002d1a:	68fb      	ldr	r3, [r7, #12]
 8002d1c:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8002d1e:	68fb      	ldr	r3, [r7, #12]
 8002d20:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002d22:	b29b      	uxth	r3, r3
 8002d24:	3b01      	subs	r3, #1
 8002d26:	b29a      	uxth	r2, r3
 8002d28:	68fb      	ldr	r3, [r7, #12]
 8002d2a:	86da      	strh	r2, [r3, #54]	; 0x36
 8002d2c:	e015      	b.n	8002d5a <HAL_SPI_Transmit+0x17c>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002d2e:	f7fd ff9f 	bl	8000c70 <HAL_GetTick>
 8002d32:	4602      	mov	r2, r0
 8002d34:	69bb      	ldr	r3, [r7, #24]
 8002d36:	1ad3      	subs	r3, r2, r3
 8002d38:	683a      	ldr	r2, [r7, #0]
 8002d3a:	429a      	cmp	r2, r3
 8002d3c:	d803      	bhi.n	8002d46 <HAL_SPI_Transmit+0x168>
 8002d3e:	683b      	ldr	r3, [r7, #0]
 8002d40:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002d44:	d102      	bne.n	8002d4c <HAL_SPI_Transmit+0x16e>
 8002d46:	683b      	ldr	r3, [r7, #0]
 8002d48:	2b00      	cmp	r3, #0
 8002d4a:	d106      	bne.n	8002d5a <HAL_SPI_Transmit+0x17c>
        {
          errorcode = HAL_TIMEOUT;
 8002d4c:	2303      	movs	r3, #3
 8002d4e:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8002d50:	68fb      	ldr	r3, [r7, #12]
 8002d52:	2201      	movs	r2, #1
 8002d54:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          goto error;
 8002d58:	e07b      	b.n	8002e52 <HAL_SPI_Transmit+0x274>
    while (hspi->TxXferCount > 0U)
 8002d5a:	68fb      	ldr	r3, [r7, #12]
 8002d5c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002d5e:	b29b      	uxth	r3, r3
 8002d60:	2b00      	cmp	r3, #0
 8002d62:	d1ca      	bne.n	8002cfa <HAL_SPI_Transmit+0x11c>
 8002d64:	e050      	b.n	8002e08 <HAL_SPI_Transmit+0x22a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002d66:	68fb      	ldr	r3, [r7, #12]
 8002d68:	685b      	ldr	r3, [r3, #4]
 8002d6a:	2b00      	cmp	r3, #0
 8002d6c:	d002      	beq.n	8002d74 <HAL_SPI_Transmit+0x196>
 8002d6e:	8afb      	ldrh	r3, [r7, #22]
 8002d70:	2b01      	cmp	r3, #1
 8002d72:	d144      	bne.n	8002dfe <HAL_SPI_Transmit+0x220>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002d74:	68fb      	ldr	r3, [r7, #12]
 8002d76:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002d78:	68fb      	ldr	r3, [r7, #12]
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	330c      	adds	r3, #12
 8002d7e:	7812      	ldrb	r2, [r2, #0]
 8002d80:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8002d82:	68fb      	ldr	r3, [r7, #12]
 8002d84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d86:	1c5a      	adds	r2, r3, #1
 8002d88:	68fb      	ldr	r3, [r7, #12]
 8002d8a:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8002d8c:	68fb      	ldr	r3, [r7, #12]
 8002d8e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002d90:	b29b      	uxth	r3, r3
 8002d92:	3b01      	subs	r3, #1
 8002d94:	b29a      	uxth	r2, r3
 8002d96:	68fb      	ldr	r3, [r7, #12]
 8002d98:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8002d9a:	e030      	b.n	8002dfe <HAL_SPI_Transmit+0x220>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002d9c:	68fb      	ldr	r3, [r7, #12]
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	689b      	ldr	r3, [r3, #8]
 8002da2:	f003 0302 	and.w	r3, r3, #2
 8002da6:	2b02      	cmp	r3, #2
 8002da8:	d113      	bne.n	8002dd2 <HAL_SPI_Transmit+0x1f4>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002daa:	68fb      	ldr	r3, [r7, #12]
 8002dac:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002dae:	68fb      	ldr	r3, [r7, #12]
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	330c      	adds	r3, #12
 8002db4:	7812      	ldrb	r2, [r2, #0]
 8002db6:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8002db8:	68fb      	ldr	r3, [r7, #12]
 8002dba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002dbc:	1c5a      	adds	r2, r3, #1
 8002dbe:	68fb      	ldr	r3, [r7, #12]
 8002dc0:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8002dc2:	68fb      	ldr	r3, [r7, #12]
 8002dc4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002dc6:	b29b      	uxth	r3, r3
 8002dc8:	3b01      	subs	r3, #1
 8002dca:	b29a      	uxth	r2, r3
 8002dcc:	68fb      	ldr	r3, [r7, #12]
 8002dce:	86da      	strh	r2, [r3, #54]	; 0x36
 8002dd0:	e015      	b.n	8002dfe <HAL_SPI_Transmit+0x220>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002dd2:	f7fd ff4d 	bl	8000c70 <HAL_GetTick>
 8002dd6:	4602      	mov	r2, r0
 8002dd8:	69bb      	ldr	r3, [r7, #24]
 8002dda:	1ad3      	subs	r3, r2, r3
 8002ddc:	683a      	ldr	r2, [r7, #0]
 8002dde:	429a      	cmp	r2, r3
 8002de0:	d803      	bhi.n	8002dea <HAL_SPI_Transmit+0x20c>
 8002de2:	683b      	ldr	r3, [r7, #0]
 8002de4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002de8:	d102      	bne.n	8002df0 <HAL_SPI_Transmit+0x212>
 8002dea:	683b      	ldr	r3, [r7, #0]
 8002dec:	2b00      	cmp	r3, #0
 8002dee:	d106      	bne.n	8002dfe <HAL_SPI_Transmit+0x220>
        {
          errorcode = HAL_TIMEOUT;
 8002df0:	2303      	movs	r3, #3
 8002df2:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8002df4:	68fb      	ldr	r3, [r7, #12]
 8002df6:	2201      	movs	r2, #1
 8002df8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          goto error;
 8002dfc:	e029      	b.n	8002e52 <HAL_SPI_Transmit+0x274>
    while (hspi->TxXferCount > 0U)
 8002dfe:	68fb      	ldr	r3, [r7, #12]
 8002e00:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002e02:	b29b      	uxth	r3, r3
 8002e04:	2b00      	cmp	r3, #0
 8002e06:	d1c9      	bne.n	8002d9c <HAL_SPI_Transmit+0x1be>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002e08:	69ba      	ldr	r2, [r7, #24]
 8002e0a:	6839      	ldr	r1, [r7, #0]
 8002e0c:	68f8      	ldr	r0, [r7, #12]
 8002e0e:	f000 f8b1 	bl	8002f74 <SPI_EndRxTxTransaction>
 8002e12:	4603      	mov	r3, r0
 8002e14:	2b00      	cmp	r3, #0
 8002e16:	d002      	beq.n	8002e1e <HAL_SPI_Transmit+0x240>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002e18:	68fb      	ldr	r3, [r7, #12]
 8002e1a:	2220      	movs	r2, #32
 8002e1c:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8002e1e:	68fb      	ldr	r3, [r7, #12]
 8002e20:	689b      	ldr	r3, [r3, #8]
 8002e22:	2b00      	cmp	r3, #0
 8002e24:	d10a      	bne.n	8002e3c <HAL_SPI_Transmit+0x25e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002e26:	2300      	movs	r3, #0
 8002e28:	613b      	str	r3, [r7, #16]
 8002e2a:	68fb      	ldr	r3, [r7, #12]
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	68db      	ldr	r3, [r3, #12]
 8002e30:	613b      	str	r3, [r7, #16]
 8002e32:	68fb      	ldr	r3, [r7, #12]
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	689b      	ldr	r3, [r3, #8]
 8002e38:	613b      	str	r3, [r7, #16]
 8002e3a:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002e3c:	68fb      	ldr	r3, [r7, #12]
 8002e3e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002e40:	2b00      	cmp	r3, #0
 8002e42:	d002      	beq.n	8002e4a <HAL_SPI_Transmit+0x26c>
  {
    errorcode = HAL_ERROR;
 8002e44:	2301      	movs	r3, #1
 8002e46:	77fb      	strb	r3, [r7, #31]
 8002e48:	e003      	b.n	8002e52 <HAL_SPI_Transmit+0x274>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8002e4a:	68fb      	ldr	r3, [r7, #12]
 8002e4c:	2201      	movs	r2, #1
 8002e4e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8002e52:	68fb      	ldr	r3, [r7, #12]
 8002e54:	2200      	movs	r2, #0
 8002e56:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8002e5a:	7ffb      	ldrb	r3, [r7, #31]
}
 8002e5c:	4618      	mov	r0, r3
 8002e5e:	3720      	adds	r7, #32
 8002e60:	46bd      	mov	sp, r7
 8002e62:	bd80      	pop	{r7, pc}

08002e64 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8002e64:	b580      	push	{r7, lr}
 8002e66:	b088      	sub	sp, #32
 8002e68:	af00      	add	r7, sp, #0
 8002e6a:	60f8      	str	r0, [r7, #12]
 8002e6c:	60b9      	str	r1, [r7, #8]
 8002e6e:	603b      	str	r3, [r7, #0]
 8002e70:	4613      	mov	r3, r2
 8002e72:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8002e74:	f7fd fefc 	bl	8000c70 <HAL_GetTick>
 8002e78:	4602      	mov	r2, r0
 8002e7a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e7c:	1a9b      	subs	r3, r3, r2
 8002e7e:	683a      	ldr	r2, [r7, #0]
 8002e80:	4413      	add	r3, r2
 8002e82:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8002e84:	f7fd fef4 	bl	8000c70 <HAL_GetTick>
 8002e88:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8002e8a:	4b39      	ldr	r3, [pc, #228]	; (8002f70 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	015b      	lsls	r3, r3, #5
 8002e90:	0d1b      	lsrs	r3, r3, #20
 8002e92:	69fa      	ldr	r2, [r7, #28]
 8002e94:	fb02 f303 	mul.w	r3, r2, r3
 8002e98:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002e9a:	e054      	b.n	8002f46 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8002e9c:	683b      	ldr	r3, [r7, #0]
 8002e9e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002ea2:	d050      	beq.n	8002f46 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8002ea4:	f7fd fee4 	bl	8000c70 <HAL_GetTick>
 8002ea8:	4602      	mov	r2, r0
 8002eaa:	69bb      	ldr	r3, [r7, #24]
 8002eac:	1ad3      	subs	r3, r2, r3
 8002eae:	69fa      	ldr	r2, [r7, #28]
 8002eb0:	429a      	cmp	r2, r3
 8002eb2:	d902      	bls.n	8002eba <SPI_WaitFlagStateUntilTimeout+0x56>
 8002eb4:	69fb      	ldr	r3, [r7, #28]
 8002eb6:	2b00      	cmp	r3, #0
 8002eb8:	d13d      	bne.n	8002f36 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8002eba:	68fb      	ldr	r3, [r7, #12]
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	685a      	ldr	r2, [r3, #4]
 8002ec0:	68fb      	ldr	r3, [r7, #12]
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8002ec8:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002eca:	68fb      	ldr	r3, [r7, #12]
 8002ecc:	685b      	ldr	r3, [r3, #4]
 8002ece:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002ed2:	d111      	bne.n	8002ef8 <SPI_WaitFlagStateUntilTimeout+0x94>
 8002ed4:	68fb      	ldr	r3, [r7, #12]
 8002ed6:	689b      	ldr	r3, [r3, #8]
 8002ed8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002edc:	d004      	beq.n	8002ee8 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002ede:	68fb      	ldr	r3, [r7, #12]
 8002ee0:	689b      	ldr	r3, [r3, #8]
 8002ee2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002ee6:	d107      	bne.n	8002ef8 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8002ee8:	68fb      	ldr	r3, [r7, #12]
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	681a      	ldr	r2, [r3, #0]
 8002eee:	68fb      	ldr	r3, [r7, #12]
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002ef6:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8002ef8:	68fb      	ldr	r3, [r7, #12]
 8002efa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002efc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002f00:	d10f      	bne.n	8002f22 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8002f02:	68fb      	ldr	r3, [r7, #12]
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	681a      	ldr	r2, [r3, #0]
 8002f08:	68fb      	ldr	r3, [r7, #12]
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002f10:	601a      	str	r2, [r3, #0]
 8002f12:	68fb      	ldr	r3, [r7, #12]
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	681a      	ldr	r2, [r3, #0]
 8002f18:	68fb      	ldr	r3, [r7, #12]
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002f20:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8002f22:	68fb      	ldr	r3, [r7, #12]
 8002f24:	2201      	movs	r2, #1
 8002f26:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8002f2a:	68fb      	ldr	r3, [r7, #12]
 8002f2c:	2200      	movs	r2, #0
 8002f2e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8002f32:	2303      	movs	r3, #3
 8002f34:	e017      	b.n	8002f66 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8002f36:	697b      	ldr	r3, [r7, #20]
 8002f38:	2b00      	cmp	r3, #0
 8002f3a:	d101      	bne.n	8002f40 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8002f3c:	2300      	movs	r3, #0
 8002f3e:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8002f40:	697b      	ldr	r3, [r7, #20]
 8002f42:	3b01      	subs	r3, #1
 8002f44:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002f46:	68fb      	ldr	r3, [r7, #12]
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	689a      	ldr	r2, [r3, #8]
 8002f4c:	68bb      	ldr	r3, [r7, #8]
 8002f4e:	4013      	ands	r3, r2
 8002f50:	68ba      	ldr	r2, [r7, #8]
 8002f52:	429a      	cmp	r2, r3
 8002f54:	bf0c      	ite	eq
 8002f56:	2301      	moveq	r3, #1
 8002f58:	2300      	movne	r3, #0
 8002f5a:	b2db      	uxtb	r3, r3
 8002f5c:	461a      	mov	r2, r3
 8002f5e:	79fb      	ldrb	r3, [r7, #7]
 8002f60:	429a      	cmp	r2, r3
 8002f62:	d19b      	bne.n	8002e9c <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8002f64:	2300      	movs	r3, #0
}
 8002f66:	4618      	mov	r0, r3
 8002f68:	3720      	adds	r7, #32
 8002f6a:	46bd      	mov	sp, r7
 8002f6c:	bd80      	pop	{r7, pc}
 8002f6e:	bf00      	nop
 8002f70:	20000000 	.word	0x20000000

08002f74 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8002f74:	b580      	push	{r7, lr}
 8002f76:	b088      	sub	sp, #32
 8002f78:	af02      	add	r7, sp, #8
 8002f7a:	60f8      	str	r0, [r7, #12]
 8002f7c:	60b9      	str	r1, [r7, #8]
 8002f7e:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	9300      	str	r3, [sp, #0]
 8002f84:	68bb      	ldr	r3, [r7, #8]
 8002f86:	2201      	movs	r2, #1
 8002f88:	2102      	movs	r1, #2
 8002f8a:	68f8      	ldr	r0, [r7, #12]
 8002f8c:	f7ff ff6a 	bl	8002e64 <SPI_WaitFlagStateUntilTimeout>
 8002f90:	4603      	mov	r3, r0
 8002f92:	2b00      	cmp	r3, #0
 8002f94:	d007      	beq.n	8002fa6 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002f96:	68fb      	ldr	r3, [r7, #12]
 8002f98:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002f9a:	f043 0220 	orr.w	r2, r3, #32
 8002f9e:	68fb      	ldr	r3, [r7, #12]
 8002fa0:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 8002fa2:	2303      	movs	r3, #3
 8002fa4:	e032      	b.n	800300c <SPI_EndRxTxTransaction+0x98>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8002fa6:	4b1b      	ldr	r3, [pc, #108]	; (8003014 <SPI_EndRxTxTransaction+0xa0>)
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	4a1b      	ldr	r2, [pc, #108]	; (8003018 <SPI_EndRxTxTransaction+0xa4>)
 8002fac:	fba2 2303 	umull	r2, r3, r2, r3
 8002fb0:	0d5b      	lsrs	r3, r3, #21
 8002fb2:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8002fb6:	fb02 f303 	mul.w	r3, r2, r3
 8002fba:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002fbc:	68fb      	ldr	r3, [r7, #12]
 8002fbe:	685b      	ldr	r3, [r3, #4]
 8002fc0:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002fc4:	d112      	bne.n	8002fec <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	9300      	str	r3, [sp, #0]
 8002fca:	68bb      	ldr	r3, [r7, #8]
 8002fcc:	2200      	movs	r2, #0
 8002fce:	2180      	movs	r1, #128	; 0x80
 8002fd0:	68f8      	ldr	r0, [r7, #12]
 8002fd2:	f7ff ff47 	bl	8002e64 <SPI_WaitFlagStateUntilTimeout>
 8002fd6:	4603      	mov	r3, r0
 8002fd8:	2b00      	cmp	r3, #0
 8002fda:	d016      	beq.n	800300a <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002fdc:	68fb      	ldr	r3, [r7, #12]
 8002fde:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002fe0:	f043 0220 	orr.w	r2, r3, #32
 8002fe4:	68fb      	ldr	r3, [r7, #12]
 8002fe6:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8002fe8:	2303      	movs	r3, #3
 8002fea:	e00f      	b.n	800300c <SPI_EndRxTxTransaction+0x98>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8002fec:	697b      	ldr	r3, [r7, #20]
 8002fee:	2b00      	cmp	r3, #0
 8002ff0:	d00a      	beq.n	8003008 <SPI_EndRxTxTransaction+0x94>
      {
        break;
      }
      count--;
 8002ff2:	697b      	ldr	r3, [r7, #20]
 8002ff4:	3b01      	subs	r3, #1
 8002ff6:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8002ff8:	68fb      	ldr	r3, [r7, #12]
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	689b      	ldr	r3, [r3, #8]
 8002ffe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003002:	2b80      	cmp	r3, #128	; 0x80
 8003004:	d0f2      	beq.n	8002fec <SPI_EndRxTxTransaction+0x78>
 8003006:	e000      	b.n	800300a <SPI_EndRxTxTransaction+0x96>
        break;
 8003008:	bf00      	nop
  }

  return HAL_OK;
 800300a:	2300      	movs	r3, #0
}
 800300c:	4618      	mov	r0, r3
 800300e:	3718      	adds	r7, #24
 8003010:	46bd      	mov	sp, r7
 8003012:	bd80      	pop	{r7, pc}
 8003014:	20000000 	.word	0x20000000
 8003018:	165e9f81 	.word	0x165e9f81

0800301c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800301c:	b580      	push	{r7, lr}
 800301e:	b082      	sub	sp, #8
 8003020:	af00      	add	r7, sp, #0
 8003022:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	2b00      	cmp	r3, #0
 8003028:	d101      	bne.n	800302e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800302a:	2301      	movs	r3, #1
 800302c:	e042      	b.n	80030b4 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003034:	b2db      	uxtb	r3, r3
 8003036:	2b00      	cmp	r3, #0
 8003038:	d106      	bne.n	8003048 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	2200      	movs	r2, #0
 800303e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003042:	6878      	ldr	r0, [r7, #4]
 8003044:	f7fd fcca 	bl	80009dc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	2224      	movs	r2, #36	; 0x24
 800304c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	68da      	ldr	r2, [r3, #12]
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800305e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003060:	6878      	ldr	r0, [r7, #4]
 8003062:	f000 f82b 	bl	80030bc <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	691a      	ldr	r2, [r3, #16]
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003074:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	695a      	ldr	r2, [r3, #20]
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003084:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	68da      	ldr	r2, [r3, #12]
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003094:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	2200      	movs	r2, #0
 800309a:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	2220      	movs	r2, #32
 80030a0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	2220      	movs	r2, #32
 80030a8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	2200      	movs	r2, #0
 80030b0:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 80030b2:	2300      	movs	r3, #0
}
 80030b4:	4618      	mov	r0, r3
 80030b6:	3708      	adds	r7, #8
 80030b8:	46bd      	mov	sp, r7
 80030ba:	bd80      	pop	{r7, pc}

080030bc <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80030bc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80030c0:	b0c0      	sub	sp, #256	; 0x100
 80030c2:	af00      	add	r7, sp, #0
 80030c4:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80030c8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	691b      	ldr	r3, [r3, #16]
 80030d0:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80030d4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80030d8:	68d9      	ldr	r1, [r3, #12]
 80030da:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80030de:	681a      	ldr	r2, [r3, #0]
 80030e0:	ea40 0301 	orr.w	r3, r0, r1
 80030e4:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80030e6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80030ea:	689a      	ldr	r2, [r3, #8]
 80030ec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80030f0:	691b      	ldr	r3, [r3, #16]
 80030f2:	431a      	orrs	r2, r3
 80030f4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80030f8:	695b      	ldr	r3, [r3, #20]
 80030fa:	431a      	orrs	r2, r3
 80030fc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003100:	69db      	ldr	r3, [r3, #28]
 8003102:	4313      	orrs	r3, r2
 8003104:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8003108:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	68db      	ldr	r3, [r3, #12]
 8003110:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8003114:	f021 010c 	bic.w	r1, r1, #12
 8003118:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800311c:	681a      	ldr	r2, [r3, #0]
 800311e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8003122:	430b      	orrs	r3, r1
 8003124:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003126:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	695b      	ldr	r3, [r3, #20]
 800312e:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8003132:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003136:	6999      	ldr	r1, [r3, #24]
 8003138:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800313c:	681a      	ldr	r2, [r3, #0]
 800313e:	ea40 0301 	orr.w	r3, r0, r1
 8003142:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003144:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003148:	681a      	ldr	r2, [r3, #0]
 800314a:	4b8f      	ldr	r3, [pc, #572]	; (8003388 <UART_SetConfig+0x2cc>)
 800314c:	429a      	cmp	r2, r3
 800314e:	d005      	beq.n	800315c <UART_SetConfig+0xa0>
 8003150:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003154:	681a      	ldr	r2, [r3, #0]
 8003156:	4b8d      	ldr	r3, [pc, #564]	; (800338c <UART_SetConfig+0x2d0>)
 8003158:	429a      	cmp	r2, r3
 800315a:	d104      	bne.n	8003166 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800315c:	f7ff fca2 	bl	8002aa4 <HAL_RCC_GetPCLK2Freq>
 8003160:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8003164:	e003      	b.n	800316e <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8003166:	f7ff fc89 	bl	8002a7c <HAL_RCC_GetPCLK1Freq>
 800316a:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800316e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003172:	69db      	ldr	r3, [r3, #28]
 8003174:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003178:	f040 810c 	bne.w	8003394 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800317c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003180:	2200      	movs	r2, #0
 8003182:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8003186:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 800318a:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 800318e:	4622      	mov	r2, r4
 8003190:	462b      	mov	r3, r5
 8003192:	1891      	adds	r1, r2, r2
 8003194:	65b9      	str	r1, [r7, #88]	; 0x58
 8003196:	415b      	adcs	r3, r3
 8003198:	65fb      	str	r3, [r7, #92]	; 0x5c
 800319a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800319e:	4621      	mov	r1, r4
 80031a0:	eb12 0801 	adds.w	r8, r2, r1
 80031a4:	4629      	mov	r1, r5
 80031a6:	eb43 0901 	adc.w	r9, r3, r1
 80031aa:	f04f 0200 	mov.w	r2, #0
 80031ae:	f04f 0300 	mov.w	r3, #0
 80031b2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80031b6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80031ba:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80031be:	4690      	mov	r8, r2
 80031c0:	4699      	mov	r9, r3
 80031c2:	4623      	mov	r3, r4
 80031c4:	eb18 0303 	adds.w	r3, r8, r3
 80031c8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80031cc:	462b      	mov	r3, r5
 80031ce:	eb49 0303 	adc.w	r3, r9, r3
 80031d2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80031d6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80031da:	685b      	ldr	r3, [r3, #4]
 80031dc:	2200      	movs	r2, #0
 80031de:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80031e2:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 80031e6:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 80031ea:	460b      	mov	r3, r1
 80031ec:	18db      	adds	r3, r3, r3
 80031ee:	653b      	str	r3, [r7, #80]	; 0x50
 80031f0:	4613      	mov	r3, r2
 80031f2:	eb42 0303 	adc.w	r3, r2, r3
 80031f6:	657b      	str	r3, [r7, #84]	; 0x54
 80031f8:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80031fc:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8003200:	f7fd f846 	bl	8000290 <__aeabi_uldivmod>
 8003204:	4602      	mov	r2, r0
 8003206:	460b      	mov	r3, r1
 8003208:	4b61      	ldr	r3, [pc, #388]	; (8003390 <UART_SetConfig+0x2d4>)
 800320a:	fba3 2302 	umull	r2, r3, r3, r2
 800320e:	095b      	lsrs	r3, r3, #5
 8003210:	011c      	lsls	r4, r3, #4
 8003212:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003216:	2200      	movs	r2, #0
 8003218:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800321c:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8003220:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8003224:	4642      	mov	r2, r8
 8003226:	464b      	mov	r3, r9
 8003228:	1891      	adds	r1, r2, r2
 800322a:	64b9      	str	r1, [r7, #72]	; 0x48
 800322c:	415b      	adcs	r3, r3
 800322e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003230:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8003234:	4641      	mov	r1, r8
 8003236:	eb12 0a01 	adds.w	sl, r2, r1
 800323a:	4649      	mov	r1, r9
 800323c:	eb43 0b01 	adc.w	fp, r3, r1
 8003240:	f04f 0200 	mov.w	r2, #0
 8003244:	f04f 0300 	mov.w	r3, #0
 8003248:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800324c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8003250:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003254:	4692      	mov	sl, r2
 8003256:	469b      	mov	fp, r3
 8003258:	4643      	mov	r3, r8
 800325a:	eb1a 0303 	adds.w	r3, sl, r3
 800325e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8003262:	464b      	mov	r3, r9
 8003264:	eb4b 0303 	adc.w	r3, fp, r3
 8003268:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800326c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003270:	685b      	ldr	r3, [r3, #4]
 8003272:	2200      	movs	r2, #0
 8003274:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8003278:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 800327c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8003280:	460b      	mov	r3, r1
 8003282:	18db      	adds	r3, r3, r3
 8003284:	643b      	str	r3, [r7, #64]	; 0x40
 8003286:	4613      	mov	r3, r2
 8003288:	eb42 0303 	adc.w	r3, r2, r3
 800328c:	647b      	str	r3, [r7, #68]	; 0x44
 800328e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8003292:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8003296:	f7fc fffb 	bl	8000290 <__aeabi_uldivmod>
 800329a:	4602      	mov	r2, r0
 800329c:	460b      	mov	r3, r1
 800329e:	4611      	mov	r1, r2
 80032a0:	4b3b      	ldr	r3, [pc, #236]	; (8003390 <UART_SetConfig+0x2d4>)
 80032a2:	fba3 2301 	umull	r2, r3, r3, r1
 80032a6:	095b      	lsrs	r3, r3, #5
 80032a8:	2264      	movs	r2, #100	; 0x64
 80032aa:	fb02 f303 	mul.w	r3, r2, r3
 80032ae:	1acb      	subs	r3, r1, r3
 80032b0:	00db      	lsls	r3, r3, #3
 80032b2:	f103 0232 	add.w	r2, r3, #50	; 0x32
 80032b6:	4b36      	ldr	r3, [pc, #216]	; (8003390 <UART_SetConfig+0x2d4>)
 80032b8:	fba3 2302 	umull	r2, r3, r3, r2
 80032bc:	095b      	lsrs	r3, r3, #5
 80032be:	005b      	lsls	r3, r3, #1
 80032c0:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80032c4:	441c      	add	r4, r3
 80032c6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80032ca:	2200      	movs	r2, #0
 80032cc:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80032d0:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 80032d4:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 80032d8:	4642      	mov	r2, r8
 80032da:	464b      	mov	r3, r9
 80032dc:	1891      	adds	r1, r2, r2
 80032de:	63b9      	str	r1, [r7, #56]	; 0x38
 80032e0:	415b      	adcs	r3, r3
 80032e2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80032e4:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80032e8:	4641      	mov	r1, r8
 80032ea:	1851      	adds	r1, r2, r1
 80032ec:	6339      	str	r1, [r7, #48]	; 0x30
 80032ee:	4649      	mov	r1, r9
 80032f0:	414b      	adcs	r3, r1
 80032f2:	637b      	str	r3, [r7, #52]	; 0x34
 80032f4:	f04f 0200 	mov.w	r2, #0
 80032f8:	f04f 0300 	mov.w	r3, #0
 80032fc:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8003300:	4659      	mov	r1, fp
 8003302:	00cb      	lsls	r3, r1, #3
 8003304:	4651      	mov	r1, sl
 8003306:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800330a:	4651      	mov	r1, sl
 800330c:	00ca      	lsls	r2, r1, #3
 800330e:	4610      	mov	r0, r2
 8003310:	4619      	mov	r1, r3
 8003312:	4603      	mov	r3, r0
 8003314:	4642      	mov	r2, r8
 8003316:	189b      	adds	r3, r3, r2
 8003318:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800331c:	464b      	mov	r3, r9
 800331e:	460a      	mov	r2, r1
 8003320:	eb42 0303 	adc.w	r3, r2, r3
 8003324:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003328:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800332c:	685b      	ldr	r3, [r3, #4]
 800332e:	2200      	movs	r2, #0
 8003330:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8003334:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8003338:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 800333c:	460b      	mov	r3, r1
 800333e:	18db      	adds	r3, r3, r3
 8003340:	62bb      	str	r3, [r7, #40]	; 0x28
 8003342:	4613      	mov	r3, r2
 8003344:	eb42 0303 	adc.w	r3, r2, r3
 8003348:	62fb      	str	r3, [r7, #44]	; 0x2c
 800334a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800334e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8003352:	f7fc ff9d 	bl	8000290 <__aeabi_uldivmod>
 8003356:	4602      	mov	r2, r0
 8003358:	460b      	mov	r3, r1
 800335a:	4b0d      	ldr	r3, [pc, #52]	; (8003390 <UART_SetConfig+0x2d4>)
 800335c:	fba3 1302 	umull	r1, r3, r3, r2
 8003360:	095b      	lsrs	r3, r3, #5
 8003362:	2164      	movs	r1, #100	; 0x64
 8003364:	fb01 f303 	mul.w	r3, r1, r3
 8003368:	1ad3      	subs	r3, r2, r3
 800336a:	00db      	lsls	r3, r3, #3
 800336c:	3332      	adds	r3, #50	; 0x32
 800336e:	4a08      	ldr	r2, [pc, #32]	; (8003390 <UART_SetConfig+0x2d4>)
 8003370:	fba2 2303 	umull	r2, r3, r2, r3
 8003374:	095b      	lsrs	r3, r3, #5
 8003376:	f003 0207 	and.w	r2, r3, #7
 800337a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	4422      	add	r2, r4
 8003382:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8003384:	e106      	b.n	8003594 <UART_SetConfig+0x4d8>
 8003386:	bf00      	nop
 8003388:	40011000 	.word	0x40011000
 800338c:	40011400 	.word	0x40011400
 8003390:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003394:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003398:	2200      	movs	r2, #0
 800339a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800339e:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 80033a2:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 80033a6:	4642      	mov	r2, r8
 80033a8:	464b      	mov	r3, r9
 80033aa:	1891      	adds	r1, r2, r2
 80033ac:	6239      	str	r1, [r7, #32]
 80033ae:	415b      	adcs	r3, r3
 80033b0:	627b      	str	r3, [r7, #36]	; 0x24
 80033b2:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80033b6:	4641      	mov	r1, r8
 80033b8:	1854      	adds	r4, r2, r1
 80033ba:	4649      	mov	r1, r9
 80033bc:	eb43 0501 	adc.w	r5, r3, r1
 80033c0:	f04f 0200 	mov.w	r2, #0
 80033c4:	f04f 0300 	mov.w	r3, #0
 80033c8:	00eb      	lsls	r3, r5, #3
 80033ca:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80033ce:	00e2      	lsls	r2, r4, #3
 80033d0:	4614      	mov	r4, r2
 80033d2:	461d      	mov	r5, r3
 80033d4:	4643      	mov	r3, r8
 80033d6:	18e3      	adds	r3, r4, r3
 80033d8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80033dc:	464b      	mov	r3, r9
 80033de:	eb45 0303 	adc.w	r3, r5, r3
 80033e2:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80033e6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80033ea:	685b      	ldr	r3, [r3, #4]
 80033ec:	2200      	movs	r2, #0
 80033ee:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80033f2:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80033f6:	f04f 0200 	mov.w	r2, #0
 80033fa:	f04f 0300 	mov.w	r3, #0
 80033fe:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8003402:	4629      	mov	r1, r5
 8003404:	008b      	lsls	r3, r1, #2
 8003406:	4621      	mov	r1, r4
 8003408:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800340c:	4621      	mov	r1, r4
 800340e:	008a      	lsls	r2, r1, #2
 8003410:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8003414:	f7fc ff3c 	bl	8000290 <__aeabi_uldivmod>
 8003418:	4602      	mov	r2, r0
 800341a:	460b      	mov	r3, r1
 800341c:	4b60      	ldr	r3, [pc, #384]	; (80035a0 <UART_SetConfig+0x4e4>)
 800341e:	fba3 2302 	umull	r2, r3, r3, r2
 8003422:	095b      	lsrs	r3, r3, #5
 8003424:	011c      	lsls	r4, r3, #4
 8003426:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800342a:	2200      	movs	r2, #0
 800342c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8003430:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8003434:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8003438:	4642      	mov	r2, r8
 800343a:	464b      	mov	r3, r9
 800343c:	1891      	adds	r1, r2, r2
 800343e:	61b9      	str	r1, [r7, #24]
 8003440:	415b      	adcs	r3, r3
 8003442:	61fb      	str	r3, [r7, #28]
 8003444:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003448:	4641      	mov	r1, r8
 800344a:	1851      	adds	r1, r2, r1
 800344c:	6139      	str	r1, [r7, #16]
 800344e:	4649      	mov	r1, r9
 8003450:	414b      	adcs	r3, r1
 8003452:	617b      	str	r3, [r7, #20]
 8003454:	f04f 0200 	mov.w	r2, #0
 8003458:	f04f 0300 	mov.w	r3, #0
 800345c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003460:	4659      	mov	r1, fp
 8003462:	00cb      	lsls	r3, r1, #3
 8003464:	4651      	mov	r1, sl
 8003466:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800346a:	4651      	mov	r1, sl
 800346c:	00ca      	lsls	r2, r1, #3
 800346e:	4610      	mov	r0, r2
 8003470:	4619      	mov	r1, r3
 8003472:	4603      	mov	r3, r0
 8003474:	4642      	mov	r2, r8
 8003476:	189b      	adds	r3, r3, r2
 8003478:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800347c:	464b      	mov	r3, r9
 800347e:	460a      	mov	r2, r1
 8003480:	eb42 0303 	adc.w	r3, r2, r3
 8003484:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8003488:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800348c:	685b      	ldr	r3, [r3, #4]
 800348e:	2200      	movs	r2, #0
 8003490:	67bb      	str	r3, [r7, #120]	; 0x78
 8003492:	67fa      	str	r2, [r7, #124]	; 0x7c
 8003494:	f04f 0200 	mov.w	r2, #0
 8003498:	f04f 0300 	mov.w	r3, #0
 800349c:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 80034a0:	4649      	mov	r1, r9
 80034a2:	008b      	lsls	r3, r1, #2
 80034a4:	4641      	mov	r1, r8
 80034a6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80034aa:	4641      	mov	r1, r8
 80034ac:	008a      	lsls	r2, r1, #2
 80034ae:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 80034b2:	f7fc feed 	bl	8000290 <__aeabi_uldivmod>
 80034b6:	4602      	mov	r2, r0
 80034b8:	460b      	mov	r3, r1
 80034ba:	4611      	mov	r1, r2
 80034bc:	4b38      	ldr	r3, [pc, #224]	; (80035a0 <UART_SetConfig+0x4e4>)
 80034be:	fba3 2301 	umull	r2, r3, r3, r1
 80034c2:	095b      	lsrs	r3, r3, #5
 80034c4:	2264      	movs	r2, #100	; 0x64
 80034c6:	fb02 f303 	mul.w	r3, r2, r3
 80034ca:	1acb      	subs	r3, r1, r3
 80034cc:	011b      	lsls	r3, r3, #4
 80034ce:	3332      	adds	r3, #50	; 0x32
 80034d0:	4a33      	ldr	r2, [pc, #204]	; (80035a0 <UART_SetConfig+0x4e4>)
 80034d2:	fba2 2303 	umull	r2, r3, r2, r3
 80034d6:	095b      	lsrs	r3, r3, #5
 80034d8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80034dc:	441c      	add	r4, r3
 80034de:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80034e2:	2200      	movs	r2, #0
 80034e4:	673b      	str	r3, [r7, #112]	; 0x70
 80034e6:	677a      	str	r2, [r7, #116]	; 0x74
 80034e8:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 80034ec:	4642      	mov	r2, r8
 80034ee:	464b      	mov	r3, r9
 80034f0:	1891      	adds	r1, r2, r2
 80034f2:	60b9      	str	r1, [r7, #8]
 80034f4:	415b      	adcs	r3, r3
 80034f6:	60fb      	str	r3, [r7, #12]
 80034f8:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80034fc:	4641      	mov	r1, r8
 80034fe:	1851      	adds	r1, r2, r1
 8003500:	6039      	str	r1, [r7, #0]
 8003502:	4649      	mov	r1, r9
 8003504:	414b      	adcs	r3, r1
 8003506:	607b      	str	r3, [r7, #4]
 8003508:	f04f 0200 	mov.w	r2, #0
 800350c:	f04f 0300 	mov.w	r3, #0
 8003510:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8003514:	4659      	mov	r1, fp
 8003516:	00cb      	lsls	r3, r1, #3
 8003518:	4651      	mov	r1, sl
 800351a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800351e:	4651      	mov	r1, sl
 8003520:	00ca      	lsls	r2, r1, #3
 8003522:	4610      	mov	r0, r2
 8003524:	4619      	mov	r1, r3
 8003526:	4603      	mov	r3, r0
 8003528:	4642      	mov	r2, r8
 800352a:	189b      	adds	r3, r3, r2
 800352c:	66bb      	str	r3, [r7, #104]	; 0x68
 800352e:	464b      	mov	r3, r9
 8003530:	460a      	mov	r2, r1
 8003532:	eb42 0303 	adc.w	r3, r2, r3
 8003536:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003538:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800353c:	685b      	ldr	r3, [r3, #4]
 800353e:	2200      	movs	r2, #0
 8003540:	663b      	str	r3, [r7, #96]	; 0x60
 8003542:	667a      	str	r2, [r7, #100]	; 0x64
 8003544:	f04f 0200 	mov.w	r2, #0
 8003548:	f04f 0300 	mov.w	r3, #0
 800354c:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8003550:	4649      	mov	r1, r9
 8003552:	008b      	lsls	r3, r1, #2
 8003554:	4641      	mov	r1, r8
 8003556:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800355a:	4641      	mov	r1, r8
 800355c:	008a      	lsls	r2, r1, #2
 800355e:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8003562:	f7fc fe95 	bl	8000290 <__aeabi_uldivmod>
 8003566:	4602      	mov	r2, r0
 8003568:	460b      	mov	r3, r1
 800356a:	4b0d      	ldr	r3, [pc, #52]	; (80035a0 <UART_SetConfig+0x4e4>)
 800356c:	fba3 1302 	umull	r1, r3, r3, r2
 8003570:	095b      	lsrs	r3, r3, #5
 8003572:	2164      	movs	r1, #100	; 0x64
 8003574:	fb01 f303 	mul.w	r3, r1, r3
 8003578:	1ad3      	subs	r3, r2, r3
 800357a:	011b      	lsls	r3, r3, #4
 800357c:	3332      	adds	r3, #50	; 0x32
 800357e:	4a08      	ldr	r2, [pc, #32]	; (80035a0 <UART_SetConfig+0x4e4>)
 8003580:	fba2 2303 	umull	r2, r3, r2, r3
 8003584:	095b      	lsrs	r3, r3, #5
 8003586:	f003 020f 	and.w	r2, r3, #15
 800358a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	4422      	add	r2, r4
 8003592:	609a      	str	r2, [r3, #8]
}
 8003594:	bf00      	nop
 8003596:	f507 7780 	add.w	r7, r7, #256	; 0x100
 800359a:	46bd      	mov	sp, r7
 800359c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80035a0:	51eb851f 	.word	0x51eb851f

080035a4 <MATRIX_Display_Temperature>:
#define MATRIX_DISPLAY 1					//Pour afficher sur Matrice

#if MATRIX_DISPLAY
//Fonction pour afficher température
void MATRIX_Display_Temperature(AHT20* device, Matrix* Matrice,int choix)
{
 80035a4:	b580      	push	{r7, lr}
 80035a6:	b088      	sub	sp, #32
 80035a8:	af00      	add	r7, sp, #0
 80035aa:	60f8      	str	r0, [r7, #12]
 80035ac:	60b9      	str	r1, [r7, #8]
 80035ae:	607a      	str	r2, [r7, #4]
	char Buf_2[6];
	char tmpchar;
	/*Bloc pour afficher température sur Matrice à LED*/
	int tmp = device->temperature*powf(10,4);
 80035b0:	68fb      	ldr	r3, [r7, #12]
 80035b2:	edd3 7a05 	vldr	s15, [r3, #20]
 80035b6:	ed9f 7a13 	vldr	s14, [pc, #76]	; 8003604 <MATRIX_Display_Temperature+0x60>
 80035ba:	ee67 7a87 	vmul.f32	s15, s15, s14
 80035be:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80035c2:	ee17 3a90 	vmov	r3, s15
 80035c6:	61fb      	str	r3, [r7, #28]
	sprintf(Buf_2,"%d",tmp);
 80035c8:	f107 0314 	add.w	r3, r7, #20
 80035cc:	69fa      	ldr	r2, [r7, #28]
 80035ce:	490e      	ldr	r1, [pc, #56]	; (8003608 <MATRIX_Display_Temperature+0x64>)
 80035d0:	4618      	mov	r0, r3
 80035d2:	f002 ff61 	bl	8006498 <siprintf>
	tmpchar = Buf_2[2];
 80035d6:	7dbb      	ldrb	r3, [r7, #22]
 80035d8:	76fb      	strb	r3, [r7, #27]
	Buf_2[2] = '.';
 80035da:	232e      	movs	r3, #46	; 0x2e
 80035dc:	75bb      	strb	r3, [r7, #22]
	Buf_2[3] = tmpchar ;
 80035de:	7efb      	ldrb	r3, [r7, #27]
 80035e0:	75fb      	strb	r3, [r7, #23]
	Buf_2[4]= 'd';
 80035e2:	2364      	movs	r3, #100	; 0x64
 80035e4:	763b      	strb	r3, [r7, #24]
	Buf_2[5] = '\0';
 80035e6:	2300      	movs	r3, #0
 80035e8:	767b      	strb	r3, [r7, #25]
	Display_Print_Matrice(Matrice, Buf_2, choix);
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	b2da      	uxtb	r2, r3
 80035ee:	f107 0314 	add.w	r3, r7, #20
 80035f2:	4619      	mov	r1, r3
 80035f4:	68b8      	ldr	r0, [r7, #8]
 80035f6:	f000 f9f3 	bl	80039e0 <Display_Print_Matrice>
}
 80035fa:	bf00      	nop
 80035fc:	3720      	adds	r7, #32
 80035fe:	46bd      	mov	sp, r7
 8003600:	bd80      	pop	{r7, pc}
 8003602:	bf00      	nop
 8003604:	461c4000 	.word	0x461c4000
 8003608:	08006df8 	.word	0x08006df8

0800360c <MATRIX_Display_Humidity>:
//Fonction pour afficher humidité
void MATRIX_Display_Humidity(AHT20* device, Matrix* Matrice,int choix)
{
 800360c:	b580      	push	{r7, lr}
 800360e:	b088      	sub	sp, #32
 8003610:	af00      	add	r7, sp, #0
 8003612:	60f8      	str	r0, [r7, #12]
 8003614:	60b9      	str	r1, [r7, #8]
 8003616:	607a      	str	r2, [r7, #4]
	char Buf_2[6];
	char tmpchar;
	/*Bloc pour afficher température sur Matrice à LED*/
	int tmp = device->humidite*powf(10,4);
 8003618:	68fb      	ldr	r3, [r7, #12]
 800361a:	edd3 7a04 	vldr	s15, [r3, #16]
 800361e:	ed9f 7a13 	vldr	s14, [pc, #76]	; 800366c <MATRIX_Display_Humidity+0x60>
 8003622:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003626:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800362a:	ee17 3a90 	vmov	r3, s15
 800362e:	61fb      	str	r3, [r7, #28]
	sprintf(Buf_2,"%d",tmp);
 8003630:	f107 0314 	add.w	r3, r7, #20
 8003634:	69fa      	ldr	r2, [r7, #28]
 8003636:	490e      	ldr	r1, [pc, #56]	; (8003670 <MATRIX_Display_Humidity+0x64>)
 8003638:	4618      	mov	r0, r3
 800363a:	f002 ff2d 	bl	8006498 <siprintf>
	tmpchar = Buf_2[2];
 800363e:	7dbb      	ldrb	r3, [r7, #22]
 8003640:	76fb      	strb	r3, [r7, #27]
	Buf_2[2] = '.';
 8003642:	232e      	movs	r3, #46	; 0x2e
 8003644:	75bb      	strb	r3, [r7, #22]
	Buf_2[3] = tmpchar ;
 8003646:	7efb      	ldrb	r3, [r7, #27]
 8003648:	75fb      	strb	r3, [r7, #23]
	Buf_2[4]= '%';
 800364a:	2325      	movs	r3, #37	; 0x25
 800364c:	763b      	strb	r3, [r7, #24]
	Buf_2[5] = '\0';
 800364e:	2300      	movs	r3, #0
 8003650:	767b      	strb	r3, [r7, #25]
	Display_Print_Matrice(Matrice, Buf_2, choix);
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	b2da      	uxtb	r2, r3
 8003656:	f107 0314 	add.w	r3, r7, #20
 800365a:	4619      	mov	r1, r3
 800365c:	68b8      	ldr	r0, [r7, #8]
 800365e:	f000 f9bf 	bl	80039e0 <Display_Print_Matrice>
}
 8003662:	bf00      	nop
 8003664:	3720      	adds	r7, #32
 8003666:	46bd      	mov	sp, r7
 8003668:	bd80      	pop	{r7, pc}
 800366a:	bf00      	nop
 800366c:	461c4000 	.word	0x461c4000
 8003670:	08006df8 	.word	0x08006df8

08003674 <AHT_Init>:
	UART_Message("\r\n", huart2);
}
#endif
//Fonction pour init aht20
void AHT_Init(I2C_HandleTypeDef *hi2c, UART_HandleTypeDef* huart,AHT20* device)
{
 8003674:	b580      	push	{r7, lr}
 8003676:	b08a      	sub	sp, #40	; 0x28
 8003678:	af04      	add	r7, sp, #16
 800367a:	60f8      	str	r0, [r7, #12]
 800367c:	60b9      	str	r1, [r7, #8]
 800367e:	607a      	str	r2, [r7, #4]
	HAL_Delay(40);	//Delai avant utilisation du capteur
 8003680:	2028      	movs	r0, #40	; 0x28
 8003682:	f7fd fb01 	bl	8000c88 <HAL_Delay>

	device->hi2c = hi2c;
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	68fa      	ldr	r2, [r7, #12]
 800368a:	601a      	str	r2, [r3, #0]
	device->huart = huart;
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	68ba      	ldr	r2, [r7, #8]
 8003690:	605a      	str	r2, [r3, #4]

	uint8_t status=0;
 8003692:	2300      	movs	r3, #0
 8003694:	75bb      	strb	r3, [r7, #22]
	uint8_t Commande[2]= {0x08,0x00};
 8003696:	2308      	movs	r3, #8
 8003698:	82bb      	strh	r3, [r7, #20]
	HAL_StatusTypeDef ret=0;
 800369a:	2300      	movs	r3, #0
 800369c:	75fb      	strb	r3, [r7, #23]

	/*Commande d'initialisation*/
	ret = HAL_I2C_Mem_Write(device->hi2c, ADDRESS, INITIALISATION_CMD, 1, Commande,sizeof(Commande), 100);
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	6818      	ldr	r0, [r3, #0]
 80036a2:	2364      	movs	r3, #100	; 0x64
 80036a4:	9302      	str	r3, [sp, #8]
 80036a6:	2302      	movs	r3, #2
 80036a8:	9301      	str	r3, [sp, #4]
 80036aa:	f107 0314 	add.w	r3, r7, #20
 80036ae:	9300      	str	r3, [sp, #0]
 80036b0:	2301      	movs	r3, #1
 80036b2:	22be      	movs	r2, #190	; 0xbe
 80036b4:	2170      	movs	r1, #112	; 0x70
 80036b6:	f7fe f91d 	bl	80018f4 <HAL_I2C_Mem_Write>
 80036ba:	4603      	mov	r3, r0
 80036bc:	75fb      	strb	r3, [r7, #23]
#if TEST_UART
	if(ret!=HAL_OK)
		UART_Message("Error Init cmd not send \n\r", device->huart);
#endif
	/*Vérifier que aht20 est bien prêt pour convertir soit 0x18 = 0001.1000 avec Bit[7] = 0 -> Status signifie est Free et Bit[3] =  1 -> siginfie Calibré */
	ret = HAL_I2C_Master_Receive(device->hi2c, ADDRESS|0X01, &status, 1, 100);
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	6818      	ldr	r0, [r3, #0]
 80036c2:	f107 0216 	add.w	r2, r7, #22
 80036c6:	2364      	movs	r3, #100	; 0x64
 80036c8:	9300      	str	r3, [sp, #0]
 80036ca:	2301      	movs	r3, #1
 80036cc:	2171      	movs	r1, #113	; 0x71
 80036ce:	f7fd fedf 	bl	8001490 <HAL_I2C_Master_Receive>
 80036d2:	4603      	mov	r3, r0
 80036d4:	75fb      	strb	r3, [r7, #23]
	else
	{
		UART_Message("Error init fail \n\r", device->huart);
	}
#endif
}
 80036d6:	bf00      	nop
 80036d8:	3718      	adds	r7, #24
 80036da:	46bd      	mov	sp, r7
 80036dc:	bd80      	pop	{r7, pc}

080036de <AHT_TrigMeasure>:

//Fonction pour lancer une conversion
void AHT_TrigMeasure(AHT20* device)
{
 80036de:	b580      	push	{r7, lr}
 80036e0:	b088      	sub	sp, #32
 80036e2:	af04      	add	r7, sp, #16
 80036e4:	6078      	str	r0, [r7, #4]

	uint8_t Commande[2] = {0x33,0x00};
 80036e6:	2333      	movs	r3, #51	; 0x33
 80036e8:	81bb      	strh	r3, [r7, #12]
	HAL_StatusTypeDef ret = HAL_I2C_Mem_Write(device->hi2c, ADDRESS, TRIG_MEASURE, I2C_MEMADD_SIZE_8BIT, Commande, 2, HAL_MAX_DELAY);				// Ecrit dans esclave à adresse de trigger measure avec les lignes de codes associées (voir datasheet)
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	6818      	ldr	r0, [r3, #0]
 80036ee:	f04f 33ff 	mov.w	r3, #4294967295
 80036f2:	9302      	str	r3, [sp, #8]
 80036f4:	2302      	movs	r3, #2
 80036f6:	9301      	str	r3, [sp, #4]
 80036f8:	f107 030c 	add.w	r3, r7, #12
 80036fc:	9300      	str	r3, [sp, #0]
 80036fe:	2301      	movs	r3, #1
 8003700:	22ac      	movs	r2, #172	; 0xac
 8003702:	2170      	movs	r1, #112	; 0x70
 8003704:	f7fe f8f6 	bl	80018f4 <HAL_I2C_Mem_Write>
 8003708:	4603      	mov	r3, r0
 800370a:	73fb      	strb	r3, [r7, #15]
	else
	{
		UART_Message("Trigger KO \n\r", device->huart);
	}
#endif
}
 800370c:	bf00      	nop
 800370e:	3710      	adds	r7, #16
 8003710:	46bd      	mov	sp, r7
 8003712:	bd80      	pop	{r7, pc}

08003714 <AHT_Readdata>:

//Fonction pour lire donnée, convertir et afficher
void AHT_Readdata(AHT20* device)
{
 8003714:	b580      	push	{r7, lr}
 8003716:	b088      	sub	sp, #32
 8003718:	af02      	add	r7, sp, #8
 800371a:	6078      	str	r0, [r7, #4]
	int tmp = 0;
 800371c:	2300      	movs	r3, #0
 800371e:	617b      	str	r3, [r7, #20]

	HAL_StatusTypeDef ret = HAL_I2C_Master_Receive(device->hi2c, ADDRESS|0x01, device->rawData, sizeof(device->rawData), 100);
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	6818      	ldr	r0, [r3, #0]
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	f103 0208 	add.w	r2, r3, #8
 800372a:	2364      	movs	r3, #100	; 0x64
 800372c:	9300      	str	r3, [sp, #0]
 800372e:	2306      	movs	r3, #6
 8003730:	2171      	movs	r1, #113	; 0x71
 8003732:	f7fd fead 	bl	8001490 <HAL_I2C_Master_Receive>
 8003736:	4603      	mov	r3, r0
 8003738:	74fb      	strb	r3, [r7, #19]
#if TEST_UART
	if(ret!=HAL_OK)
		UART_Message("Read KO \n\r", device->huart);
#endif
	uint32_t hum =  ((uint32_t)device->rawData[1]<<16)									//	Prend les octets de donnée de humidité on les mets dans un gros uint32 pour les ranger
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	7a5b      	ldrb	r3, [r3, #9]
 800373e:	041a      	lsls	r2, r3, #16
							   |((uint32_t)device->rawData[2]<<8)
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	7a9b      	ldrb	r3, [r3, #10]
 8003744:	021b      	lsls	r3, r3, #8
 8003746:	4313      	orrs	r3, r2
							   |((uint32_t)device->rawData[3]);
 8003748:	687a      	ldr	r2, [r7, #4]
 800374a:	7ad2      	ldrb	r2, [r2, #11]
	uint32_t hum =  ((uint32_t)device->rawData[1]<<16)									//	Prend les octets de donnée de humidité on les mets dans un gros uint32 pour les ranger
 800374c:	4313      	orrs	r3, r2
 800374e:	60fb      	str	r3, [r7, #12]

			hum = hum >> 4;
 8003750:	68fb      	ldr	r3, [r7, #12]
 8003752:	091b      	lsrs	r3, r3, #4
 8003754:	60fb      	str	r3, [r7, #12]

	uint32_t temp =  ((uint32_t)device->rawData[3]<<16)
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	7adb      	ldrb	r3, [r3, #11]
 800375a:	041a      	lsls	r2, r3, #16
									   |((uint32_t)device->rawData[4]<<8)
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	7b1b      	ldrb	r3, [r3, #12]
 8003760:	021b      	lsls	r3, r3, #8
 8003762:	4313      	orrs	r3, r2
									   |((uint32_t)device->rawData[5]);
 8003764:	687a      	ldr	r2, [r7, #4]
 8003766:	7b52      	ldrb	r2, [r2, #13]
	uint32_t temp =  ((uint32_t)device->rawData[3]<<16)
 8003768:	4313      	orrs	r3, r2
 800376a:	60bb      	str	r3, [r7, #8]
			temp = temp & 0x07FFFF;
 800376c:	68bb      	ldr	r3, [r7, #8]
 800376e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003772:	60bb      	str	r3, [r7, #8]

			device->humidite = ((float) hum / (float) (1<<20))*100;				// Formule datasheet avec 2^20 <=> 1<<20
 8003774:	68fb      	ldr	r3, [r7, #12]
 8003776:	ee07 3a90 	vmov	s15, r3
 800377a:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800377e:	eddf 6a11 	vldr	s13, [pc, #68]	; 80037c4 <AHT_Readdata+0xb0>
 8003782:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003786:	ed9f 7a10 	vldr	s14, [pc, #64]	; 80037c8 <AHT_Readdata+0xb4>
 800378a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	edc3 7a04 	vstr	s15, [r3, #16]
			device->temperature = ((float)temp/(float)(1<<20))*200-50;
 8003794:	68bb      	ldr	r3, [r7, #8]
 8003796:	ee07 3a90 	vmov	s15, r3
 800379a:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800379e:	eddf 6a09 	vldr	s13, [pc, #36]	; 80037c4 <AHT_Readdata+0xb0>
 80037a2:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80037a6:	ed9f 7a09 	vldr	s14, [pc, #36]	; 80037cc <AHT_Readdata+0xb8>
 80037aa:	ee67 7a87 	vmul.f32	s15, s15, s14
 80037ae:	ed9f 7a08 	vldr	s14, [pc, #32]	; 80037d0 <AHT_Readdata+0xbc>
 80037b2:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	edc3 7a05 	vstr	s15, [r3, #20]
			UART_Message("**********Value H*****************\r\n", device->huart);
			UART_FloatToDisplay(device->humidite ,4, device->huart);							// Précision de 4 chiffres après la virgule
			UART_Message("**********Value T*****************\r\n", device->huart);
			UART_FloatToDisplay(device->temperature,4, device->huart);
#endif
			return;
 80037bc:	bf00      	nop

}
 80037be:	3718      	adds	r7, #24
 80037c0:	46bd      	mov	sp, r7
 80037c2:	bd80      	pop	{r7, pc}
 80037c4:	49800000 	.word	0x49800000
 80037c8:	42c80000 	.word	0x42c80000
 80037cc:	43480000 	.word	0x43480000
 80037d0:	42480000 	.word	0x42480000

080037d4 <AHT_IsBusy>:
}
#endif

//Fonction pour attendre que aht20 est finis de mesurer
void AHT_IsBusy(AHT20* device)
{
 80037d4:	b580      	push	{r7, lr}
 80037d6:	b086      	sub	sp, #24
 80037d8:	af02      	add	r7, sp, #8
 80037da:	6078      	str	r0, [r7, #4]
	HAL_StatusTypeDef ret = 0;
 80037dc:	2300      	movs	r3, #0
 80037de:	73fb      	strb	r3, [r7, #15]
	uint8_t status = 0x98;		// 0X18 and 0X80 = Bit de status à 1 Busy => 1001.1000
 80037e0:	2398      	movs	r3, #152	; 0x98
 80037e2:	73bb      	strb	r3, [r7, #14]
#if TEST_UART
	UART_Message("Wait for measure \n\r", device->huart);
#endif

	while(status==0x98)
 80037e4:	e00b      	b.n	80037fe <AHT_IsBusy+0x2a>
	{
		ret = HAL_I2C_Master_Receive(device->hi2c, ADDRESS|0X01, &status, 1, 100);				// Si revient à normal on à status = 0x18 donc fin
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	6818      	ldr	r0, [r3, #0]
 80037ea:	f107 020e 	add.w	r2, r7, #14
 80037ee:	2364      	movs	r3, #100	; 0x64
 80037f0:	9300      	str	r3, [sp, #0]
 80037f2:	2301      	movs	r3, #1
 80037f4:	2171      	movs	r1, #113	; 0x71
 80037f6:	f7fd fe4b 	bl	8001490 <HAL_I2C_Master_Receive>
 80037fa:	4603      	mov	r3, r0
 80037fc:	73fb      	strb	r3, [r7, #15]
	while(status==0x98)
 80037fe:	7bbb      	ldrb	r3, [r7, #14]
 8003800:	2b98      	cmp	r3, #152	; 0x98
 8003802:	d0f0      	beq.n	80037e6 <AHT_IsBusy+0x12>
#endif
	}
#if TEST_UART
	UART_Message("End of measure \n\r", device->huart);
#endif
}
 8003804:	bf00      	nop
 8003806:	bf00      	nop
 8003808:	3710      	adds	r7, #16
 800380a:	46bd      	mov	sp, r7
 800380c:	bd80      	pop	{r7, pc}
	...

08003810 <Task_Display_Temperature>:

}

//Fonction qui affiche température toute les 5 secondes en tâche non blocante
void Task_Display_Temperature(AHT20* aht, Matrix *device)
{
 8003810:	b580      	push	{r7, lr}
 8003812:	b084      	sub	sp, #16
 8003814:	af00      	add	r7, sp, #0
 8003816:	6078      	str	r0, [r7, #4]
 8003818:	6039      	str	r1, [r7, #0]

	uint32_t localTick = HAL_GetTick();
 800381a:	f7fd fa29 	bl	8000c70 <HAL_GetTick>
 800381e:	60f8      	str	r0, [r7, #12]
	static uint32_t tempo = 0;

	if(tempo>1431655)// nb max de remplissage de 3000 sur 32 bits
 8003820:	4b14      	ldr	r3, [pc, #80]	; (8003874 <Task_Display_Temperature+0x64>)
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	4a14      	ldr	r2, [pc, #80]	; (8003878 <Task_Display_Temperature+0x68>)
 8003826:	4293      	cmp	r3, r2
 8003828:	d902      	bls.n	8003830 <Task_Display_Temperature+0x20>
		tempo = 0;
 800382a:	4b12      	ldr	r3, [pc, #72]	; (8003874 <Task_Display_Temperature+0x64>)
 800382c:	2200      	movs	r2, #0
 800382e:	601a      	str	r2, [r3, #0]

	if(localTick < tempo)
 8003830:	4b10      	ldr	r3, [pc, #64]	; (8003874 <Task_Display_Temperature+0x64>)
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	68fa      	ldr	r2, [r7, #12]
 8003836:	429a      	cmp	r2, r3
 8003838:	d318      	bcc.n	800386c <Task_Display_Temperature+0x5c>
		return;
	}

	else
	{
		AHT_TrigMeasure(aht);
 800383a:	6878      	ldr	r0, [r7, #4]
 800383c:	f7ff ff4f 	bl	80036de <AHT_TrigMeasure>
		AHT_IsBusy(aht);
 8003840:	6878      	ldr	r0, [r7, #4]
 8003842:	f7ff ffc7 	bl	80037d4 <AHT_IsBusy>
		AHT_Readdata(aht);
 8003846:	6878      	ldr	r0, [r7, #4]
 8003848:	f7ff ff64 	bl	8003714 <AHT_Readdata>
		MATRIX_Display_Temperature(aht, device,1);
 800384c:	2201      	movs	r2, #1
 800384e:	6839      	ldr	r1, [r7, #0]
 8003850:	6878      	ldr	r0, [r7, #4]
 8003852:	f7ff fea7 	bl	80035a4 <MATRIX_Display_Temperature>
		Display_Show_Matrice(device, DEFAULT);
 8003856:	2100      	movs	r1, #0
 8003858:	6838      	ldr	r0, [r7, #0]
 800385a:	f002 fb85 	bl	8005f68 <Display_Show_Matrice>
		tempo+=TEMPO;
 800385e:	4b05      	ldr	r3, [pc, #20]	; (8003874 <Task_Display_Temperature+0x64>)
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	f603 33b8 	addw	r3, r3, #3000	; 0xbb8
 8003866:	4a03      	ldr	r2, [pc, #12]	; (8003874 <Task_Display_Temperature+0x64>)
 8003868:	6013      	str	r3, [r2, #0]
 800386a:	e000      	b.n	800386e <Task_Display_Temperature+0x5e>
		return;
 800386c:	bf00      	nop
	}
}
 800386e:	3710      	adds	r7, #16
 8003870:	46bd      	mov	sp, r7
 8003872:	bd80      	pop	{r7, pc}
 8003874:	200002dc 	.word	0x200002dc
 8003878:	0015d867 	.word	0x0015d867

0800387c <Task_Display_Humidity>:

void Task_Display_Humidity(AHT20* aht, Matrix *device)
{
 800387c:	b580      	push	{r7, lr}
 800387e:	b084      	sub	sp, #16
 8003880:	af00      	add	r7, sp, #0
 8003882:	6078      	str	r0, [r7, #4]
 8003884:	6039      	str	r1, [r7, #0]

	uint32_t localTick = HAL_GetTick();
 8003886:	f7fd f9f3 	bl	8000c70 <HAL_GetTick>
 800388a:	60f8      	str	r0, [r7, #12]
	static uint32_t tempo = 0;

	if(tempo>1431655)// nb max de remplissage de 3000 sur 32 bits
 800388c:	4b14      	ldr	r3, [pc, #80]	; (80038e0 <Task_Display_Humidity+0x64>)
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	4a14      	ldr	r2, [pc, #80]	; (80038e4 <Task_Display_Humidity+0x68>)
 8003892:	4293      	cmp	r3, r2
 8003894:	d902      	bls.n	800389c <Task_Display_Humidity+0x20>
		tempo = 0;
 8003896:	4b12      	ldr	r3, [pc, #72]	; (80038e0 <Task_Display_Humidity+0x64>)
 8003898:	2200      	movs	r2, #0
 800389a:	601a      	str	r2, [r3, #0]

	if(localTick < tempo)
 800389c:	4b10      	ldr	r3, [pc, #64]	; (80038e0 <Task_Display_Humidity+0x64>)
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	68fa      	ldr	r2, [r7, #12]
 80038a2:	429a      	cmp	r2, r3
 80038a4:	d318      	bcc.n	80038d8 <Task_Display_Humidity+0x5c>
		return;
	}

	else
	{
		AHT_TrigMeasure(aht);
 80038a6:	6878      	ldr	r0, [r7, #4]
 80038a8:	f7ff ff19 	bl	80036de <AHT_TrigMeasure>
		AHT_IsBusy(aht);
 80038ac:	6878      	ldr	r0, [r7, #4]
 80038ae:	f7ff ff91 	bl	80037d4 <AHT_IsBusy>
		AHT_Readdata(aht);
 80038b2:	6878      	ldr	r0, [r7, #4]
 80038b4:	f7ff ff2e 	bl	8003714 <AHT_Readdata>
		MATRIX_Display_Humidity(aht, device,1);
 80038b8:	2201      	movs	r2, #1
 80038ba:	6839      	ldr	r1, [r7, #0]
 80038bc:	6878      	ldr	r0, [r7, #4]
 80038be:	f7ff fea5 	bl	800360c <MATRIX_Display_Humidity>
		Display_Show_Matrice(device, DEFAULT);
 80038c2:	2100      	movs	r1, #0
 80038c4:	6838      	ldr	r0, [r7, #0]
 80038c6:	f002 fb4f 	bl	8005f68 <Display_Show_Matrice>
		tempo+=TEMPO;
 80038ca:	4b05      	ldr	r3, [pc, #20]	; (80038e0 <Task_Display_Humidity+0x64>)
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	f603 33b8 	addw	r3, r3, #3000	; 0xbb8
 80038d2:	4a03      	ldr	r2, [pc, #12]	; (80038e0 <Task_Display_Humidity+0x64>)
 80038d4:	6013      	str	r3, [r2, #0]
 80038d6:	e000      	b.n	80038da <Task_Display_Humidity+0x5e>
		return;
 80038d8:	bf00      	nop
	}

}
 80038da:	3710      	adds	r7, #16
 80038dc:	46bd      	mov	sp, r7
 80038de:	bd80      	pop	{r7, pc}
 80038e0:	200002e0 	.word	0x200002e0
 80038e4:	0015d867 	.word	0x0015d867

080038e8 <Task_Display_3>:

//Fonction qui affiche température ou humidité selon appui sur bouton poussoir
void Task_Display_3(AHT20* aht, Matrix *device)
{
 80038e8:	b580      	push	{r7, lr}
 80038ea:	b084      	sub	sp, #16
 80038ec:	af00      	add	r7, sp, #0
 80038ee:	6078      	str	r0, [r7, #4]
 80038f0:	6039      	str	r1, [r7, #0]

	HAL_Delay(20);
 80038f2:	2014      	movs	r0, #20
 80038f4:	f7fd f9c8 	bl	8000c88 <HAL_Delay>
	uint32_t pbvalue = HAL_GPIO_ReadPin(BP0_GPIO_Port,BP0_Pin);
 80038f8:	2101      	movs	r1, #1
 80038fa:	4836      	ldr	r0, [pc, #216]	; (80039d4 <Task_Display_3+0xec>)
 80038fc:	f7fd fc52 	bl	80011a4 <HAL_GPIO_ReadPin>
 8003900:	4603      	mov	r3, r0
 8003902:	60fb      	str	r3, [r7, #12]
	static uint8_t choix = 0;

	AHT_TrigMeasure(aht);		// Déclencher mesure et avoir nouvelle data
 8003904:	6878      	ldr	r0, [r7, #4]
 8003906:	f7ff feea 	bl	80036de <AHT_TrigMeasure>
	AHT_IsBusy(aht);
 800390a:	6878      	ldr	r0, [r7, #4]
 800390c:	f7ff ff62 	bl	80037d4 <AHT_IsBusy>
	AHT_Readdata(aht);
 8003910:	6878      	ldr	r0, [r7, #4]
 8003912:	f7ff feff 	bl	8003714 <AHT_Readdata>

	switch (flag_pb) {						// flag_bp = mémoire position du bouton, false = position haut, true = position bas
 8003916:	4b30      	ldr	r3, [pc, #192]	; (80039d8 <Task_Display_3+0xf0>)
 8003918:	781b      	ldrb	r3, [r3, #0]
 800391a:	2b00      	cmp	r3, #0
 800391c:	d002      	beq.n	8003924 <Task_Display_3+0x3c>
 800391e:	2b01      	cmp	r3, #1
 8003920:	d035      	beq.n	800398e <Task_Display_3+0xa6>
 8003922:	e04b      	b.n	80039bc <Task_Display_3+0xd4>
		case false:
				if(!pbvalue)				// pbvalue = 1 appui, pbvalue = 0 pas appui
 8003924:	68fb      	ldr	r3, [r7, #12]
 8003926:	2b00      	cmp	r3, #0
 8003928:	d14c      	bne.n	80039c4 <Task_Display_3+0xdc>
				{
					switch (choix) {
 800392a:	4b2c      	ldr	r3, [pc, #176]	; (80039dc <Task_Display_3+0xf4>)
 800392c:	781b      	ldrb	r3, [r3, #0]
 800392e:	2b00      	cmp	r3, #0
 8003930:	d002      	beq.n	8003938 <Task_Display_3+0x50>
 8003932:	2b01      	cmp	r3, #1
 8003934:	d015      	beq.n	8003962 <Task_Display_3+0x7a>

							flag_pb = true;
							choix = 0;
							break;
						default:
							break;
 8003936:	e029      	b.n	800398c <Task_Display_3+0xa4>
							MATRIX_Display_Temperature(aht, device,1);			// mettre ordre d'affichage temp = choix 0 et hum = choix 1
 8003938:	2201      	movs	r2, #1
 800393a:	6839      	ldr	r1, [r7, #0]
 800393c:	6878      	ldr	r0, [r7, #4]
 800393e:	f7ff fe31 	bl	80035a4 <MATRIX_Display_Temperature>
							MATRIX_Display_Humidity(aht, device,2);
 8003942:	2202      	movs	r2, #2
 8003944:	6839      	ldr	r1, [r7, #0]
 8003946:	6878      	ldr	r0, [r7, #4]
 8003948:	f7ff fe60 	bl	800360c <MATRIX_Display_Humidity>
							Display_Change_Data_Matrice_Up(device, DEFAULT);	// Animation data up
 800394c:	2100      	movs	r1, #0
 800394e:	6838      	ldr	r0, [r7, #0]
 8003950:	f002 fbc6 	bl	80060e0 <Display_Change_Data_Matrice_Up>
							flag_pb = true;
 8003954:	4b20      	ldr	r3, [pc, #128]	; (80039d8 <Task_Display_3+0xf0>)
 8003956:	2201      	movs	r2, #1
 8003958:	701a      	strb	r2, [r3, #0]
							choix = 1;
 800395a:	4b20      	ldr	r3, [pc, #128]	; (80039dc <Task_Display_3+0xf4>)
 800395c:	2201      	movs	r2, #1
 800395e:	701a      	strb	r2, [r3, #0]
							break;
 8003960:	e014      	b.n	800398c <Task_Display_3+0xa4>
							MATRIX_Display_Temperature(aht, device,2);
 8003962:	2202      	movs	r2, #2
 8003964:	6839      	ldr	r1, [r7, #0]
 8003966:	6878      	ldr	r0, [r7, #4]
 8003968:	f7ff fe1c 	bl	80035a4 <MATRIX_Display_Temperature>
							MATRIX_Display_Humidity(aht, device,1);
 800396c:	2201      	movs	r2, #1
 800396e:	6839      	ldr	r1, [r7, #0]
 8003970:	6878      	ldr	r0, [r7, #4]
 8003972:	f7ff fe4b 	bl	800360c <MATRIX_Display_Humidity>
							Display_Change_Data_Matrice_Up(device, DEFAULT);
 8003976:	2100      	movs	r1, #0
 8003978:	6838      	ldr	r0, [r7, #0]
 800397a:	f002 fbb1 	bl	80060e0 <Display_Change_Data_Matrice_Up>
							flag_pb = true;
 800397e:	4b16      	ldr	r3, [pc, #88]	; (80039d8 <Task_Display_3+0xf0>)
 8003980:	2201      	movs	r2, #1
 8003982:	701a      	strb	r2, [r3, #0]
							choix = 0;
 8003984:	4b15      	ldr	r3, [pc, #84]	; (80039dc <Task_Display_3+0xf4>)
 8003986:	2200      	movs	r2, #0
 8003988:	701a      	strb	r2, [r3, #0]
							break;
 800398a:	bf00      	nop
					}
				}

			break;
 800398c:	e01a      	b.n	80039c4 <Task_Display_3+0xdc>
		case true :
				if(pbvalue)					// Programme boucle tant que pas d'appui bp
 800398e:	68fb      	ldr	r3, [r7, #12]
 8003990:	2b00      	cmp	r3, #0
 8003992:	d002      	beq.n	800399a <Task_Display_3+0xb2>
				{
					flag_pb = false;
 8003994:	4b10      	ldr	r3, [pc, #64]	; (80039d8 <Task_Display_3+0xf0>)
 8003996:	2200      	movs	r2, #0
 8003998:	701a      	strb	r2, [r3, #0]
				}
				if(choix == 0)
 800399a:	4b10      	ldr	r3, [pc, #64]	; (80039dc <Task_Display_3+0xf4>)
 800399c:	781b      	ldrb	r3, [r3, #0]
 800399e:	2b00      	cmp	r3, #0
 80039a0:	d103      	bne.n	80039aa <Task_Display_3+0xc2>
				{
					Task_Display_Temperature(aht, device);
 80039a2:	6839      	ldr	r1, [r7, #0]
 80039a4:	6878      	ldr	r0, [r7, #4]
 80039a6:	f7ff ff33 	bl	8003810 <Task_Display_Temperature>
				}
				if(choix == 1)
 80039aa:	4b0c      	ldr	r3, [pc, #48]	; (80039dc <Task_Display_3+0xf4>)
 80039ac:	781b      	ldrb	r3, [r3, #0]
 80039ae:	2b01      	cmp	r3, #1
 80039b0:	d10a      	bne.n	80039c8 <Task_Display_3+0xe0>
				{
					Task_Display_Humidity(aht, device);
 80039b2:	6839      	ldr	r1, [r7, #0]
 80039b4:	6878      	ldr	r0, [r7, #4]
 80039b6:	f7ff ff61 	bl	800387c <Task_Display_Humidity>
				}
			break;
 80039ba:	e005      	b.n	80039c8 <Task_Display_3+0xe0>
		default:
			flag_pb = false;
 80039bc:	4b06      	ldr	r3, [pc, #24]	; (80039d8 <Task_Display_3+0xf0>)
 80039be:	2200      	movs	r2, #0
 80039c0:	701a      	strb	r2, [r3, #0]
			break;
 80039c2:	e002      	b.n	80039ca <Task_Display_3+0xe2>
			break;
 80039c4:	bf00      	nop
 80039c6:	e000      	b.n	80039ca <Task_Display_3+0xe2>
			break;
 80039c8:	bf00      	nop
	}

}
 80039ca:	bf00      	nop
 80039cc:	3710      	adds	r7, #16
 80039ce:	46bd      	mov	sp, r7
 80039d0:	bd80      	pop	{r7, pc}
 80039d2:	bf00      	nop
 80039d4:	40020400 	.word	0x40020400
 80039d8:	200002d8 	.word	0x200002d8
 80039dc:	200002e4 	.word	0x200002e4

080039e0 <Display_Print_Matrice>:

/*-------------------------------------------------------------------------------------------------------- Fonction bilbiothéque -------------------------------------------------------------------------------------------*/

//Fonction pour écrire des char sur matrice
void Display_Print_Matrice(Matrix * device, char* print_data, uint8_t choose_raw)
{
 80039e0:	b580      	push	{r7, lr}
 80039e2:	b0da      	sub	sp, #360	; 0x168
 80039e4:	af00      	add	r7, sp, #0
 80039e6:	f507 73b4 	add.w	r3, r7, #360	; 0x168
 80039ea:	f5a3 73ae 	sub.w	r3, r3, #348	; 0x15c
 80039ee:	6018      	str	r0, [r3, #0]
 80039f0:	f507 73b4 	add.w	r3, r7, #360	; 0x168
 80039f4:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 80039f8:	6019      	str	r1, [r3, #0]
 80039fa:	f507 73b4 	add.w	r3, r7, #360	; 0x168
 80039fe:	f2a3 1361 	subw	r3, r3, #353	; 0x161
 8003a02:	701a      	strb	r2, [r3, #0]
	char tmp;

	switch (choose_raw)
 8003a04:	f507 73b4 	add.w	r3, r7, #360	; 0x168
 8003a08:	f2a3 1361 	subw	r3, r3, #353	; 0x161
 8003a0c:	781b      	ldrb	r3, [r3, #0]
 8003a0e:	2b01      	cmp	r3, #1
 8003a10:	d004      	beq.n	8003a1c <Display_Print_Matrice+0x3c>
 8003a12:	2b02      	cmp	r3, #2
 8003a14:	f001 8097 	beq.w	8004b46 <Display_Print_Matrice+0x1166>
					default:
						break;
					}
					break;
					default:
						break;
 8003a18:	f002 ba8b 	b.w	8005f32 <Display_Print_Matrice+0x2552>
		device->Size = strlen(print_data);
 8003a1c:	f507 73b4 	add.w	r3, r7, #360	; 0x168
 8003a20:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 8003a24:	6818      	ldr	r0, [r3, #0]
 8003a26:	f7fc fbdb 	bl	80001e0 <strlen>
 8003a2a:	4603      	mov	r3, r0
 8003a2c:	b2da      	uxtb	r2, r3
 8003a2e:	f507 73b4 	add.w	r3, r7, #360	; 0x168
 8003a32:	f5a3 73ae 	sub.w	r3, r3, #348	; 0x15c
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
		for(int i = 0; i<device->Size; i++)
 8003a3c:	2300      	movs	r3, #0
 8003a3e:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
 8003a42:	f002 ba7b 	b.w	8005f3c <Display_Print_Matrice+0x255c>
			tmp = *(print_data+i);
 8003a46:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 8003a4a:	f507 72b4 	add.w	r2, r7, #360	; 0x168
 8003a4e:	f5a2 72b0 	sub.w	r2, r2, #352	; 0x160
 8003a52:	6812      	ldr	r2, [r2, #0]
 8003a54:	441a      	add	r2, r3
 8003a56:	f507 73b4 	add.w	r3, r7, #360	; 0x168
 8003a5a:	f2a3 1351 	subw	r3, r3, #337	; 0x151
 8003a5e:	7812      	ldrb	r2, [r2, #0]
 8003a60:	701a      	strb	r2, [r3, #0]
			switch (tmp) {
 8003a62:	f507 73b4 	add.w	r3, r7, #360	; 0x168
 8003a66:	f2a3 1351 	subw	r3, r3, #337	; 0x151
 8003a6a:	781b      	ldrb	r3, [r3, #0]
 8003a6c:	2b64      	cmp	r3, #100	; 0x64
 8003a6e:	f201 8067 	bhi.w	8004b40 <Display_Print_Matrice+0x1160>
 8003a72:	a201      	add	r2, pc, #4	; (adr r2, 8003a78 <Display_Print_Matrice+0x98>)
 8003a74:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003a78:	08004b41 	.word	0x08004b41
 8003a7c:	08004b41 	.word	0x08004b41
 8003a80:	08004b41 	.word	0x08004b41
 8003a84:	08004b41 	.word	0x08004b41
 8003a88:	08004b41 	.word	0x08004b41
 8003a8c:	08004b41 	.word	0x08004b41
 8003a90:	08004b41 	.word	0x08004b41
 8003a94:	08004b41 	.word	0x08004b41
 8003a98:	08004b41 	.word	0x08004b41
 8003a9c:	08004b41 	.word	0x08004b41
 8003aa0:	08004b41 	.word	0x08004b41
 8003aa4:	08004b41 	.word	0x08004b41
 8003aa8:	08004b41 	.word	0x08004b41
 8003aac:	08004b41 	.word	0x08004b41
 8003ab0:	08004b41 	.word	0x08004b41
 8003ab4:	08004b41 	.word	0x08004b41
 8003ab8:	08004b41 	.word	0x08004b41
 8003abc:	08004b41 	.word	0x08004b41
 8003ac0:	08004b41 	.word	0x08004b41
 8003ac4:	08004b41 	.word	0x08004b41
 8003ac8:	08004b41 	.word	0x08004b41
 8003acc:	08004b41 	.word	0x08004b41
 8003ad0:	08004b41 	.word	0x08004b41
 8003ad4:	08004b41 	.word	0x08004b41
 8003ad8:	08004b41 	.word	0x08004b41
 8003adc:	08004b41 	.word	0x08004b41
 8003ae0:	08004b41 	.word	0x08004b41
 8003ae4:	08004b41 	.word	0x08004b41
 8003ae8:	08004b41 	.word	0x08004b41
 8003aec:	08004b41 	.word	0x08004b41
 8003af0:	08004b41 	.word	0x08004b41
 8003af4:	08004b41 	.word	0x08004b41
 8003af8:	08004a21 	.word	0x08004a21
 8003afc:	08004b41 	.word	0x08004b41
 8003b00:	08004b41 	.word	0x08004b41
 8003b04:	08004b41 	.word	0x08004b41
 8003b08:	08004b41 	.word	0x08004b41
 8003b0c:	08004ae1 	.word	0x08004ae1
 8003b10:	08004b41 	.word	0x08004b41
 8003b14:	08004b41 	.word	0x08004b41
 8003b18:	08004b41 	.word	0x08004b41
 8003b1c:	08004b41 	.word	0x08004b41
 8003b20:	08004b41 	.word	0x08004b41
 8003b24:	08004b41 	.word	0x08004b41
 8003b28:	08004b41 	.word	0x08004b41
 8003b2c:	08004b41 	.word	0x08004b41
 8003b30:	0800495b 	.word	0x0800495b
 8003b34:	08004b41 	.word	0x08004b41
 8003b38:	08003c0d 	.word	0x08003c0d
 8003b3c:	08003c69 	.word	0x08003c69
 8003b40:	08003cc7 	.word	0x08003cc7
 8003b44:	08003d25 	.word	0x08003d25
 8003b48:	08003d83 	.word	0x08003d83
 8003b4c:	08003de1 	.word	0x08003de1
 8003b50:	08003e3f 	.word	0x08003e3f
 8003b54:	08003e9d 	.word	0x08003e9d
 8003b58:	08003efb 	.word	0x08003efb
 8003b5c:	08003f59 	.word	0x08003f59
 8003b60:	080049c1 	.word	0x080049c1
 8003b64:	08004b41 	.word	0x08004b41
 8003b68:	08004b41 	.word	0x08004b41
 8003b6c:	08004b41 	.word	0x08004b41
 8003b70:	08004b41 	.word	0x08004b41
 8003b74:	08004b41 	.word	0x08004b41
 8003b78:	08004b41 	.word	0x08004b41
 8003b7c:	08003fbb 	.word	0x08003fbb
 8003b80:	08004019 	.word	0x08004019
 8003b84:	08004077 	.word	0x08004077
 8003b88:	080040d5 	.word	0x080040d5
 8003b8c:	08004133 	.word	0x08004133
 8003b90:	08004191 	.word	0x08004191
 8003b94:	080041ef 	.word	0x080041ef
 8003b98:	0800424d 	.word	0x0800424d
 8003b9c:	080042ab 	.word	0x080042ab
 8003ba0:	0800430f 	.word	0x0800430f
 8003ba4:	0800436d 	.word	0x0800436d
 8003ba8:	080043cb 	.word	0x080043cb
 8003bac:	08004429 	.word	0x08004429
 8003bb0:	08004487 	.word	0x08004487
 8003bb4:	080044e5 	.word	0x080044e5
 8003bb8:	08004543 	.word	0x08004543
 8003bbc:	080045a1 	.word	0x080045a1
 8003bc0:	080045ff 	.word	0x080045ff
 8003bc4:	08004663 	.word	0x08004663
 8003bc8:	080046c1 	.word	0x080046c1
 8003bcc:	0800471f 	.word	0x0800471f
 8003bd0:	0800477d 	.word	0x0800477d
 8003bd4:	080047db 	.word	0x080047db
 8003bd8:	0800483b 	.word	0x0800483b
 8003bdc:	0800489b 	.word	0x0800489b
 8003be0:	080048fb 	.word	0x080048fb
 8003be4:	08004b41 	.word	0x08004b41
 8003be8:	08004b41 	.word	0x08004b41
 8003bec:	08004b41 	.word	0x08004b41
 8003bf0:	08004b41 	.word	0x08004b41
 8003bf4:	08004b41 	.word	0x08004b41
 8003bf8:	08004b41 	.word	0x08004b41
 8003bfc:	08004b41 	.word	0x08004b41
 8003c00:	08004b41 	.word	0x08004b41
 8003c04:	08004b41 	.word	0x08004b41
 8003c08:	08004a81 	.word	0x08004a81
				for(int j =0;j<8;j++)
 8003c0c:	2300      	movs	r3, #0
 8003c0e:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
 8003c12:	e018      	b.n	8003c46 <Display_Print_Matrice+0x266>
					device->Raw[i][j] = LETTERS[0][j];
 8003c14:	4ad2      	ldr	r2, [pc, #840]	; (8003f60 <Display_Print_Matrice+0x580>)
 8003c16:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 8003c1a:	4413      	add	r3, r2
 8003c1c:	7819      	ldrb	r1, [r3, #0]
 8003c1e:	f507 73b4 	add.w	r3, r7, #360	; 0x168
 8003c22:	f5a3 73ae 	sub.w	r3, r3, #348	; 0x15c
 8003c26:	681a      	ldr	r2, [r3, #0]
 8003c28:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 8003c2c:	00db      	lsls	r3, r3, #3
 8003c2e:	441a      	add	r2, r3
 8003c30:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 8003c34:	4413      	add	r3, r2
 8003c36:	3304      	adds	r3, #4
 8003c38:	460a      	mov	r2, r1
 8003c3a:	701a      	strb	r2, [r3, #0]
				for(int j =0;j<8;j++)
 8003c3c:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 8003c40:	3301      	adds	r3, #1
 8003c42:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
 8003c46:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 8003c4a:	2b07      	cmp	r3, #7
 8003c4c:	dde2      	ble.n	8003c14 <Display_Print_Matrice+0x234>
				device->Shift[i] = 4;
 8003c4e:	f507 73b4 	add.w	r3, r7, #360	; 0x168
 8003c52:	f5a3 73ae 	sub.w	r3, r3, #348	; 0x15c
 8003c56:	681a      	ldr	r2, [r3, #0]
 8003c58:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 8003c5c:	4413      	add	r3, r2
 8003c5e:	3355      	adds	r3, #85	; 0x55
 8003c60:	2204      	movs	r2, #4
 8003c62:	701a      	strb	r2, [r3, #0]
				continue;
 8003c64:	f002 b965 	b.w	8005f32 <Display_Print_Matrice+0x2552>
				for(int j =0;j<8;j++)
 8003c68:	2300      	movs	r3, #0
 8003c6a:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
 8003c6e:	e019      	b.n	8003ca4 <Display_Print_Matrice+0x2c4>
					device->Raw[i][j] = LETTERS[1][j];
 8003c70:	4abb      	ldr	r2, [pc, #748]	; (8003f60 <Display_Print_Matrice+0x580>)
 8003c72:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 8003c76:	4413      	add	r3, r2
 8003c78:	3308      	adds	r3, #8
 8003c7a:	7819      	ldrb	r1, [r3, #0]
 8003c7c:	f507 73b4 	add.w	r3, r7, #360	; 0x168
 8003c80:	f5a3 73ae 	sub.w	r3, r3, #348	; 0x15c
 8003c84:	681a      	ldr	r2, [r3, #0]
 8003c86:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 8003c8a:	00db      	lsls	r3, r3, #3
 8003c8c:	441a      	add	r2, r3
 8003c8e:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 8003c92:	4413      	add	r3, r2
 8003c94:	3304      	adds	r3, #4
 8003c96:	460a      	mov	r2, r1
 8003c98:	701a      	strb	r2, [r3, #0]
				for(int j =0;j<8;j++)
 8003c9a:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 8003c9e:	3301      	adds	r3, #1
 8003ca0:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
 8003ca4:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 8003ca8:	2b07      	cmp	r3, #7
 8003caa:	dde1      	ble.n	8003c70 <Display_Print_Matrice+0x290>
				device->Shift[i] = 4;
 8003cac:	f507 73b4 	add.w	r3, r7, #360	; 0x168
 8003cb0:	f5a3 73ae 	sub.w	r3, r3, #348	; 0x15c
 8003cb4:	681a      	ldr	r2, [r3, #0]
 8003cb6:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 8003cba:	4413      	add	r3, r2
 8003cbc:	3355      	adds	r3, #85	; 0x55
 8003cbe:	2204      	movs	r2, #4
 8003cc0:	701a      	strb	r2, [r3, #0]
				continue;
 8003cc2:	f002 b936 	b.w	8005f32 <Display_Print_Matrice+0x2552>
				for(int j =0;j<8;j++)
 8003cc6:	2300      	movs	r3, #0
 8003cc8:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
 8003ccc:	e019      	b.n	8003d02 <Display_Print_Matrice+0x322>
					device->Raw[i][j] = LETTERS[2][j];
 8003cce:	4aa4      	ldr	r2, [pc, #656]	; (8003f60 <Display_Print_Matrice+0x580>)
 8003cd0:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 8003cd4:	4413      	add	r3, r2
 8003cd6:	3310      	adds	r3, #16
 8003cd8:	7819      	ldrb	r1, [r3, #0]
 8003cda:	f507 73b4 	add.w	r3, r7, #360	; 0x168
 8003cde:	f5a3 73ae 	sub.w	r3, r3, #348	; 0x15c
 8003ce2:	681a      	ldr	r2, [r3, #0]
 8003ce4:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 8003ce8:	00db      	lsls	r3, r3, #3
 8003cea:	441a      	add	r2, r3
 8003cec:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 8003cf0:	4413      	add	r3, r2
 8003cf2:	3304      	adds	r3, #4
 8003cf4:	460a      	mov	r2, r1
 8003cf6:	701a      	strb	r2, [r3, #0]
				for(int j =0;j<8;j++)
 8003cf8:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 8003cfc:	3301      	adds	r3, #1
 8003cfe:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
 8003d02:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 8003d06:	2b07      	cmp	r3, #7
 8003d08:	dde1      	ble.n	8003cce <Display_Print_Matrice+0x2ee>
				device->Shift[i] = 5;
 8003d0a:	f507 73b4 	add.w	r3, r7, #360	; 0x168
 8003d0e:	f5a3 73ae 	sub.w	r3, r3, #348	; 0x15c
 8003d12:	681a      	ldr	r2, [r3, #0]
 8003d14:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 8003d18:	4413      	add	r3, r2
 8003d1a:	3355      	adds	r3, #85	; 0x55
 8003d1c:	2205      	movs	r2, #5
 8003d1e:	701a      	strb	r2, [r3, #0]
				continue;
 8003d20:	f002 b907 	b.w	8005f32 <Display_Print_Matrice+0x2552>
				for(int j =0;j<8;j++)
 8003d24:	2300      	movs	r3, #0
 8003d26:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 8003d2a:	e019      	b.n	8003d60 <Display_Print_Matrice+0x380>
					device->Raw[i][j] = LETTERS[3][j];
 8003d2c:	4a8c      	ldr	r2, [pc, #560]	; (8003f60 <Display_Print_Matrice+0x580>)
 8003d2e:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 8003d32:	4413      	add	r3, r2
 8003d34:	3318      	adds	r3, #24
 8003d36:	7819      	ldrb	r1, [r3, #0]
 8003d38:	f507 73b4 	add.w	r3, r7, #360	; 0x168
 8003d3c:	f5a3 73ae 	sub.w	r3, r3, #348	; 0x15c
 8003d40:	681a      	ldr	r2, [r3, #0]
 8003d42:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 8003d46:	00db      	lsls	r3, r3, #3
 8003d48:	441a      	add	r2, r3
 8003d4a:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 8003d4e:	4413      	add	r3, r2
 8003d50:	3304      	adds	r3, #4
 8003d52:	460a      	mov	r2, r1
 8003d54:	701a      	strb	r2, [r3, #0]
				for(int j =0;j<8;j++)
 8003d56:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 8003d5a:	3301      	adds	r3, #1
 8003d5c:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 8003d60:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 8003d64:	2b07      	cmp	r3, #7
 8003d66:	dde1      	ble.n	8003d2c <Display_Print_Matrice+0x34c>
				device->Shift[i] = 5;
 8003d68:	f507 73b4 	add.w	r3, r7, #360	; 0x168
 8003d6c:	f5a3 73ae 	sub.w	r3, r3, #348	; 0x15c
 8003d70:	681a      	ldr	r2, [r3, #0]
 8003d72:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 8003d76:	4413      	add	r3, r2
 8003d78:	3355      	adds	r3, #85	; 0x55
 8003d7a:	2205      	movs	r2, #5
 8003d7c:	701a      	strb	r2, [r3, #0]
				continue;
 8003d7e:	f002 b8d8 	b.w	8005f32 <Display_Print_Matrice+0x2552>
				for(int j =0;j<8;j++)
 8003d82:	2300      	movs	r3, #0
 8003d84:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8003d88:	e019      	b.n	8003dbe <Display_Print_Matrice+0x3de>
					device->Raw[i][j] = LETTERS[4][j];
 8003d8a:	4a75      	ldr	r2, [pc, #468]	; (8003f60 <Display_Print_Matrice+0x580>)
 8003d8c:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 8003d90:	4413      	add	r3, r2
 8003d92:	3320      	adds	r3, #32
 8003d94:	7819      	ldrb	r1, [r3, #0]
 8003d96:	f507 73b4 	add.w	r3, r7, #360	; 0x168
 8003d9a:	f5a3 73ae 	sub.w	r3, r3, #348	; 0x15c
 8003d9e:	681a      	ldr	r2, [r3, #0]
 8003da0:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 8003da4:	00db      	lsls	r3, r3, #3
 8003da6:	441a      	add	r2, r3
 8003da8:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 8003dac:	4413      	add	r3, r2
 8003dae:	3304      	adds	r3, #4
 8003db0:	460a      	mov	r2, r1
 8003db2:	701a      	strb	r2, [r3, #0]
				for(int j =0;j<8;j++)
 8003db4:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 8003db8:	3301      	adds	r3, #1
 8003dba:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8003dbe:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 8003dc2:	2b07      	cmp	r3, #7
 8003dc4:	dde1      	ble.n	8003d8a <Display_Print_Matrice+0x3aa>
				device->Shift[i] = 5;
 8003dc6:	f507 73b4 	add.w	r3, r7, #360	; 0x168
 8003dca:	f5a3 73ae 	sub.w	r3, r3, #348	; 0x15c
 8003dce:	681a      	ldr	r2, [r3, #0]
 8003dd0:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 8003dd4:	4413      	add	r3, r2
 8003dd6:	3355      	adds	r3, #85	; 0x55
 8003dd8:	2205      	movs	r2, #5
 8003dda:	701a      	strb	r2, [r3, #0]
				continue;
 8003ddc:	f002 b8a9 	b.w	8005f32 <Display_Print_Matrice+0x2552>
				for(int j =0;j<8;j++)
 8003de0:	2300      	movs	r3, #0
 8003de2:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 8003de6:	e019      	b.n	8003e1c <Display_Print_Matrice+0x43c>
					device->Raw[i][j] = LETTERS[5][j];
 8003de8:	4a5d      	ldr	r2, [pc, #372]	; (8003f60 <Display_Print_Matrice+0x580>)
 8003dea:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8003dee:	4413      	add	r3, r2
 8003df0:	3328      	adds	r3, #40	; 0x28
 8003df2:	7819      	ldrb	r1, [r3, #0]
 8003df4:	f507 73b4 	add.w	r3, r7, #360	; 0x168
 8003df8:	f5a3 73ae 	sub.w	r3, r3, #348	; 0x15c
 8003dfc:	681a      	ldr	r2, [r3, #0]
 8003dfe:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 8003e02:	00db      	lsls	r3, r3, #3
 8003e04:	441a      	add	r2, r3
 8003e06:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8003e0a:	4413      	add	r3, r2
 8003e0c:	3304      	adds	r3, #4
 8003e0e:	460a      	mov	r2, r1
 8003e10:	701a      	strb	r2, [r3, #0]
				for(int j =0;j<8;j++)
 8003e12:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8003e16:	3301      	adds	r3, #1
 8003e18:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 8003e1c:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8003e20:	2b07      	cmp	r3, #7
 8003e22:	dde1      	ble.n	8003de8 <Display_Print_Matrice+0x408>
				device->Shift[i] = 5;
 8003e24:	f507 73b4 	add.w	r3, r7, #360	; 0x168
 8003e28:	f5a3 73ae 	sub.w	r3, r3, #348	; 0x15c
 8003e2c:	681a      	ldr	r2, [r3, #0]
 8003e2e:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 8003e32:	4413      	add	r3, r2
 8003e34:	3355      	adds	r3, #85	; 0x55
 8003e36:	2205      	movs	r2, #5
 8003e38:	701a      	strb	r2, [r3, #0]
				continue;
 8003e3a:	f002 b87a 	b.w	8005f32 <Display_Print_Matrice+0x2552>
				for(int j =0;j<8;j++)
 8003e3e:	2300      	movs	r3, #0
 8003e40:	f8c7 3148 	str.w	r3, [r7, #328]	; 0x148
 8003e44:	e019      	b.n	8003e7a <Display_Print_Matrice+0x49a>
					device->Raw[i][j] = LETTERS[6][j];
 8003e46:	4a46      	ldr	r2, [pc, #280]	; (8003f60 <Display_Print_Matrice+0x580>)
 8003e48:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 8003e4c:	4413      	add	r3, r2
 8003e4e:	3330      	adds	r3, #48	; 0x30
 8003e50:	7819      	ldrb	r1, [r3, #0]
 8003e52:	f507 73b4 	add.w	r3, r7, #360	; 0x168
 8003e56:	f5a3 73ae 	sub.w	r3, r3, #348	; 0x15c
 8003e5a:	681a      	ldr	r2, [r3, #0]
 8003e5c:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 8003e60:	00db      	lsls	r3, r3, #3
 8003e62:	441a      	add	r2, r3
 8003e64:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 8003e68:	4413      	add	r3, r2
 8003e6a:	3304      	adds	r3, #4
 8003e6c:	460a      	mov	r2, r1
 8003e6e:	701a      	strb	r2, [r3, #0]
				for(int j =0;j<8;j++)
 8003e70:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 8003e74:	3301      	adds	r3, #1
 8003e76:	f8c7 3148 	str.w	r3, [r7, #328]	; 0x148
 8003e7a:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 8003e7e:	2b07      	cmp	r3, #7
 8003e80:	dde1      	ble.n	8003e46 <Display_Print_Matrice+0x466>
				device->Shift[i] = 5;
 8003e82:	f507 73b4 	add.w	r3, r7, #360	; 0x168
 8003e86:	f5a3 73ae 	sub.w	r3, r3, #348	; 0x15c
 8003e8a:	681a      	ldr	r2, [r3, #0]
 8003e8c:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 8003e90:	4413      	add	r3, r2
 8003e92:	3355      	adds	r3, #85	; 0x55
 8003e94:	2205      	movs	r2, #5
 8003e96:	701a      	strb	r2, [r3, #0]
				continue;
 8003e98:	f002 b84b 	b.w	8005f32 <Display_Print_Matrice+0x2552>
				for(int j =0;j<8;j++)
 8003e9c:	2300      	movs	r3, #0
 8003e9e:	f8c7 3144 	str.w	r3, [r7, #324]	; 0x144
 8003ea2:	e019      	b.n	8003ed8 <Display_Print_Matrice+0x4f8>
					device->Raw[i][j] = LETTERS[7][j];
 8003ea4:	4a2e      	ldr	r2, [pc, #184]	; (8003f60 <Display_Print_Matrice+0x580>)
 8003ea6:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 8003eaa:	4413      	add	r3, r2
 8003eac:	3338      	adds	r3, #56	; 0x38
 8003eae:	7819      	ldrb	r1, [r3, #0]
 8003eb0:	f507 73b4 	add.w	r3, r7, #360	; 0x168
 8003eb4:	f5a3 73ae 	sub.w	r3, r3, #348	; 0x15c
 8003eb8:	681a      	ldr	r2, [r3, #0]
 8003eba:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 8003ebe:	00db      	lsls	r3, r3, #3
 8003ec0:	441a      	add	r2, r3
 8003ec2:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 8003ec6:	4413      	add	r3, r2
 8003ec8:	3304      	adds	r3, #4
 8003eca:	460a      	mov	r2, r1
 8003ecc:	701a      	strb	r2, [r3, #0]
				for(int j =0;j<8;j++)
 8003ece:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 8003ed2:	3301      	adds	r3, #1
 8003ed4:	f8c7 3144 	str.w	r3, [r7, #324]	; 0x144
 8003ed8:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 8003edc:	2b07      	cmp	r3, #7
 8003ede:	dde1      	ble.n	8003ea4 <Display_Print_Matrice+0x4c4>
				device->Shift[i] = 5;
 8003ee0:	f507 73b4 	add.w	r3, r7, #360	; 0x168
 8003ee4:	f5a3 73ae 	sub.w	r3, r3, #348	; 0x15c
 8003ee8:	681a      	ldr	r2, [r3, #0]
 8003eea:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 8003eee:	4413      	add	r3, r2
 8003ef0:	3355      	adds	r3, #85	; 0x55
 8003ef2:	2205      	movs	r2, #5
 8003ef4:	701a      	strb	r2, [r3, #0]
				continue;
 8003ef6:	f002 b81c 	b.w	8005f32 <Display_Print_Matrice+0x2552>
				for(int j =0;j<8;j++)
 8003efa:	2300      	movs	r3, #0
 8003efc:	f8c7 3140 	str.w	r3, [r7, #320]	; 0x140
 8003f00:	e019      	b.n	8003f36 <Display_Print_Matrice+0x556>
					device->Raw[i][j] = LETTERS[8][j];
 8003f02:	4a17      	ldr	r2, [pc, #92]	; (8003f60 <Display_Print_Matrice+0x580>)
 8003f04:	f8d7 3140 	ldr.w	r3, [r7, #320]	; 0x140
 8003f08:	4413      	add	r3, r2
 8003f0a:	3340      	adds	r3, #64	; 0x40
 8003f0c:	7819      	ldrb	r1, [r3, #0]
 8003f0e:	f507 73b4 	add.w	r3, r7, #360	; 0x168
 8003f12:	f5a3 73ae 	sub.w	r3, r3, #348	; 0x15c
 8003f16:	681a      	ldr	r2, [r3, #0]
 8003f18:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 8003f1c:	00db      	lsls	r3, r3, #3
 8003f1e:	441a      	add	r2, r3
 8003f20:	f8d7 3140 	ldr.w	r3, [r7, #320]	; 0x140
 8003f24:	4413      	add	r3, r2
 8003f26:	3304      	adds	r3, #4
 8003f28:	460a      	mov	r2, r1
 8003f2a:	701a      	strb	r2, [r3, #0]
				for(int j =0;j<8;j++)
 8003f2c:	f8d7 3140 	ldr.w	r3, [r7, #320]	; 0x140
 8003f30:	3301      	adds	r3, #1
 8003f32:	f8c7 3140 	str.w	r3, [r7, #320]	; 0x140
 8003f36:	f8d7 3140 	ldr.w	r3, [r7, #320]	; 0x140
 8003f3a:	2b07      	cmp	r3, #7
 8003f3c:	dde1      	ble.n	8003f02 <Display_Print_Matrice+0x522>
				device->Shift[i] = 5;
 8003f3e:	f507 73b4 	add.w	r3, r7, #360	; 0x168
 8003f42:	f5a3 73ae 	sub.w	r3, r3, #348	; 0x15c
 8003f46:	681a      	ldr	r2, [r3, #0]
 8003f48:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 8003f4c:	4413      	add	r3, r2
 8003f4e:	3355      	adds	r3, #85	; 0x55
 8003f50:	2205      	movs	r2, #5
 8003f52:	701a      	strb	r2, [r3, #0]
				continue;
 8003f54:	f001 bfed 	b.w	8005f32 <Display_Print_Matrice+0x2552>
				for(int j =0;j<8;j++)
 8003f58:	2300      	movs	r3, #0
 8003f5a:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
 8003f5e:	e01b      	b.n	8003f98 <Display_Print_Matrice+0x5b8>
 8003f60:	2000000c 	.word	0x2000000c
					device->Raw[i][j] = LETTERS[9][j];
 8003f64:	4ad3      	ldr	r2, [pc, #844]	; (80042b4 <Display_Print_Matrice+0x8d4>)
 8003f66:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 8003f6a:	4413      	add	r3, r2
 8003f6c:	3348      	adds	r3, #72	; 0x48
 8003f6e:	7819      	ldrb	r1, [r3, #0]
 8003f70:	f507 73b4 	add.w	r3, r7, #360	; 0x168
 8003f74:	f5a3 73ae 	sub.w	r3, r3, #348	; 0x15c
 8003f78:	681a      	ldr	r2, [r3, #0]
 8003f7a:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 8003f7e:	00db      	lsls	r3, r3, #3
 8003f80:	441a      	add	r2, r3
 8003f82:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 8003f86:	4413      	add	r3, r2
 8003f88:	3304      	adds	r3, #4
 8003f8a:	460a      	mov	r2, r1
 8003f8c:	701a      	strb	r2, [r3, #0]
				for(int j =0;j<8;j++)
 8003f8e:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 8003f92:	3301      	adds	r3, #1
 8003f94:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
 8003f98:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 8003f9c:	2b07      	cmp	r3, #7
 8003f9e:	dde1      	ble.n	8003f64 <Display_Print_Matrice+0x584>
				device->Shift[i] = 5;
 8003fa0:	f507 73b4 	add.w	r3, r7, #360	; 0x168
 8003fa4:	f5a3 73ae 	sub.w	r3, r3, #348	; 0x15c
 8003fa8:	681a      	ldr	r2, [r3, #0]
 8003faa:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 8003fae:	4413      	add	r3, r2
 8003fb0:	3355      	adds	r3, #85	; 0x55
 8003fb2:	2205      	movs	r2, #5
 8003fb4:	701a      	strb	r2, [r3, #0]
				continue;
 8003fb6:	f001 bfbc 	b.w	8005f32 <Display_Print_Matrice+0x2552>
				for(int j =0;j<8;j++)
 8003fba:	2300      	movs	r3, #0
 8003fbc:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
 8003fc0:	e019      	b.n	8003ff6 <Display_Print_Matrice+0x616>
					device->Raw[i][j] = LETTERS[10][j];
 8003fc2:	4abc      	ldr	r2, [pc, #752]	; (80042b4 <Display_Print_Matrice+0x8d4>)
 8003fc4:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8003fc8:	4413      	add	r3, r2
 8003fca:	3350      	adds	r3, #80	; 0x50
 8003fcc:	7819      	ldrb	r1, [r3, #0]
 8003fce:	f507 73b4 	add.w	r3, r7, #360	; 0x168
 8003fd2:	f5a3 73ae 	sub.w	r3, r3, #348	; 0x15c
 8003fd6:	681a      	ldr	r2, [r3, #0]
 8003fd8:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 8003fdc:	00db      	lsls	r3, r3, #3
 8003fde:	441a      	add	r2, r3
 8003fe0:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8003fe4:	4413      	add	r3, r2
 8003fe6:	3304      	adds	r3, #4
 8003fe8:	460a      	mov	r2, r1
 8003fea:	701a      	strb	r2, [r3, #0]
				for(int j =0;j<8;j++)
 8003fec:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8003ff0:	3301      	adds	r3, #1
 8003ff2:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
 8003ff6:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8003ffa:	2b07      	cmp	r3, #7
 8003ffc:	dde1      	ble.n	8003fc2 <Display_Print_Matrice+0x5e2>
				device->Shift[i] = 5;
 8003ffe:	f507 73b4 	add.w	r3, r7, #360	; 0x168
 8004002:	f5a3 73ae 	sub.w	r3, r3, #348	; 0x15c
 8004006:	681a      	ldr	r2, [r3, #0]
 8004008:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 800400c:	4413      	add	r3, r2
 800400e:	3355      	adds	r3, #85	; 0x55
 8004010:	2205      	movs	r2, #5
 8004012:	701a      	strb	r2, [r3, #0]
				continue;
 8004014:	f001 bf8d 	b.w	8005f32 <Display_Print_Matrice+0x2552>
				for(int j =0;j<8;j++)
 8004018:	2300      	movs	r3, #0
 800401a:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
 800401e:	e019      	b.n	8004054 <Display_Print_Matrice+0x674>
					device->Raw[i][j] = LETTERS[11][j];
 8004020:	4aa4      	ldr	r2, [pc, #656]	; (80042b4 <Display_Print_Matrice+0x8d4>)
 8004022:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8004026:	4413      	add	r3, r2
 8004028:	3358      	adds	r3, #88	; 0x58
 800402a:	7819      	ldrb	r1, [r3, #0]
 800402c:	f507 73b4 	add.w	r3, r7, #360	; 0x168
 8004030:	f5a3 73ae 	sub.w	r3, r3, #348	; 0x15c
 8004034:	681a      	ldr	r2, [r3, #0]
 8004036:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 800403a:	00db      	lsls	r3, r3, #3
 800403c:	441a      	add	r2, r3
 800403e:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8004042:	4413      	add	r3, r2
 8004044:	3304      	adds	r3, #4
 8004046:	460a      	mov	r2, r1
 8004048:	701a      	strb	r2, [r3, #0]
				for(int j =0;j<8;j++)
 800404a:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800404e:	3301      	adds	r3, #1
 8004050:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
 8004054:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8004058:	2b07      	cmp	r3, #7
 800405a:	dde1      	ble.n	8004020 <Display_Print_Matrice+0x640>
				device->Shift[i] = 5;
 800405c:	f507 73b4 	add.w	r3, r7, #360	; 0x168
 8004060:	f5a3 73ae 	sub.w	r3, r3, #348	; 0x15c
 8004064:	681a      	ldr	r2, [r3, #0]
 8004066:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 800406a:	4413      	add	r3, r2
 800406c:	3355      	adds	r3, #85	; 0x55
 800406e:	2205      	movs	r2, #5
 8004070:	701a      	strb	r2, [r3, #0]
				continue;
 8004072:	f001 bf5e 	b.w	8005f32 <Display_Print_Matrice+0x2552>
				for(int j =0;j<8;j++)
 8004076:	2300      	movs	r3, #0
 8004078:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
 800407c:	e019      	b.n	80040b2 <Display_Print_Matrice+0x6d2>
					device->Raw[i][j] = LETTERS[12][j];
 800407e:	4a8d      	ldr	r2, [pc, #564]	; (80042b4 <Display_Print_Matrice+0x8d4>)
 8004080:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8004084:	4413      	add	r3, r2
 8004086:	3360      	adds	r3, #96	; 0x60
 8004088:	7819      	ldrb	r1, [r3, #0]
 800408a:	f507 73b4 	add.w	r3, r7, #360	; 0x168
 800408e:	f5a3 73ae 	sub.w	r3, r3, #348	; 0x15c
 8004092:	681a      	ldr	r2, [r3, #0]
 8004094:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 8004098:	00db      	lsls	r3, r3, #3
 800409a:	441a      	add	r2, r3
 800409c:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 80040a0:	4413      	add	r3, r2
 80040a2:	3304      	adds	r3, #4
 80040a4:	460a      	mov	r2, r1
 80040a6:	701a      	strb	r2, [r3, #0]
				for(int j =0;j<8;j++)
 80040a8:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 80040ac:	3301      	adds	r3, #1
 80040ae:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
 80040b2:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 80040b6:	2b07      	cmp	r3, #7
 80040b8:	dde1      	ble.n	800407e <Display_Print_Matrice+0x69e>
				device->Shift[i] = 5;
 80040ba:	f507 73b4 	add.w	r3, r7, #360	; 0x168
 80040be:	f5a3 73ae 	sub.w	r3, r3, #348	; 0x15c
 80040c2:	681a      	ldr	r2, [r3, #0]
 80040c4:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 80040c8:	4413      	add	r3, r2
 80040ca:	3355      	adds	r3, #85	; 0x55
 80040cc:	2205      	movs	r2, #5
 80040ce:	701a      	strb	r2, [r3, #0]
				continue;
 80040d0:	f001 bf2f 	b.w	8005f32 <Display_Print_Matrice+0x2552>
				for(int j =0;j<8;j++)
 80040d4:	2300      	movs	r3, #0
 80040d6:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 80040da:	e019      	b.n	8004110 <Display_Print_Matrice+0x730>
					device->Raw[i][j] = LETTERS[13][j];
 80040dc:	4a75      	ldr	r2, [pc, #468]	; (80042b4 <Display_Print_Matrice+0x8d4>)
 80040de:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80040e2:	4413      	add	r3, r2
 80040e4:	3368      	adds	r3, #104	; 0x68
 80040e6:	7819      	ldrb	r1, [r3, #0]
 80040e8:	f507 73b4 	add.w	r3, r7, #360	; 0x168
 80040ec:	f5a3 73ae 	sub.w	r3, r3, #348	; 0x15c
 80040f0:	681a      	ldr	r2, [r3, #0]
 80040f2:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 80040f6:	00db      	lsls	r3, r3, #3
 80040f8:	441a      	add	r2, r3
 80040fa:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80040fe:	4413      	add	r3, r2
 8004100:	3304      	adds	r3, #4
 8004102:	460a      	mov	r2, r1
 8004104:	701a      	strb	r2, [r3, #0]
				for(int j =0;j<8;j++)
 8004106:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800410a:	3301      	adds	r3, #1
 800410c:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 8004110:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004114:	2b07      	cmp	r3, #7
 8004116:	dde1      	ble.n	80040dc <Display_Print_Matrice+0x6fc>
				device->Shift[i] = 5;
 8004118:	f507 73b4 	add.w	r3, r7, #360	; 0x168
 800411c:	f5a3 73ae 	sub.w	r3, r3, #348	; 0x15c
 8004120:	681a      	ldr	r2, [r3, #0]
 8004122:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 8004126:	4413      	add	r3, r2
 8004128:	3355      	adds	r3, #85	; 0x55
 800412a:	2205      	movs	r2, #5
 800412c:	701a      	strb	r2, [r3, #0]
				continue;
 800412e:	f001 bf00 	b.w	8005f32 <Display_Print_Matrice+0x2552>
				for(int j =0;j<8;j++)
 8004132:	2300      	movs	r3, #0
 8004134:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8004138:	e019      	b.n	800416e <Display_Print_Matrice+0x78e>
					device->Raw[i][j] = LETTERS[14][j];
 800413a:	4a5e      	ldr	r2, [pc, #376]	; (80042b4 <Display_Print_Matrice+0x8d4>)
 800413c:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8004140:	4413      	add	r3, r2
 8004142:	3370      	adds	r3, #112	; 0x70
 8004144:	7819      	ldrb	r1, [r3, #0]
 8004146:	f507 73b4 	add.w	r3, r7, #360	; 0x168
 800414a:	f5a3 73ae 	sub.w	r3, r3, #348	; 0x15c
 800414e:	681a      	ldr	r2, [r3, #0]
 8004150:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 8004154:	00db      	lsls	r3, r3, #3
 8004156:	441a      	add	r2, r3
 8004158:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800415c:	4413      	add	r3, r2
 800415e:	3304      	adds	r3, #4
 8004160:	460a      	mov	r2, r1
 8004162:	701a      	strb	r2, [r3, #0]
				for(int j =0;j<8;j++)
 8004164:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8004168:	3301      	adds	r3, #1
 800416a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 800416e:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8004172:	2b07      	cmp	r3, #7
 8004174:	dde1      	ble.n	800413a <Display_Print_Matrice+0x75a>
				device->Shift[i] = 5;
 8004176:	f507 73b4 	add.w	r3, r7, #360	; 0x168
 800417a:	f5a3 73ae 	sub.w	r3, r3, #348	; 0x15c
 800417e:	681a      	ldr	r2, [r3, #0]
 8004180:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 8004184:	4413      	add	r3, r2
 8004186:	3355      	adds	r3, #85	; 0x55
 8004188:	2205      	movs	r2, #5
 800418a:	701a      	strb	r2, [r3, #0]
				continue;
 800418c:	f001 bed1 	b.w	8005f32 <Display_Print_Matrice+0x2552>
				for(int j =0;j<8;j++)
 8004190:	2300      	movs	r3, #0
 8004192:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8004196:	e019      	b.n	80041cc <Display_Print_Matrice+0x7ec>
					device->Raw[i][j] = LETTERS[15][j];
 8004198:	4a46      	ldr	r2, [pc, #280]	; (80042b4 <Display_Print_Matrice+0x8d4>)
 800419a:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 800419e:	4413      	add	r3, r2
 80041a0:	3378      	adds	r3, #120	; 0x78
 80041a2:	7819      	ldrb	r1, [r3, #0]
 80041a4:	f507 73b4 	add.w	r3, r7, #360	; 0x168
 80041a8:	f5a3 73ae 	sub.w	r3, r3, #348	; 0x15c
 80041ac:	681a      	ldr	r2, [r3, #0]
 80041ae:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 80041b2:	00db      	lsls	r3, r3, #3
 80041b4:	441a      	add	r2, r3
 80041b6:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 80041ba:	4413      	add	r3, r2
 80041bc:	3304      	adds	r3, #4
 80041be:	460a      	mov	r2, r1
 80041c0:	701a      	strb	r2, [r3, #0]
				for(int j =0;j<8;j++)
 80041c2:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 80041c6:	3301      	adds	r3, #1
 80041c8:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 80041cc:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 80041d0:	2b07      	cmp	r3, #7
 80041d2:	dde1      	ble.n	8004198 <Display_Print_Matrice+0x7b8>
				device->Shift[i] = 5;
 80041d4:	f507 73b4 	add.w	r3, r7, #360	; 0x168
 80041d8:	f5a3 73ae 	sub.w	r3, r3, #348	; 0x15c
 80041dc:	681a      	ldr	r2, [r3, #0]
 80041de:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 80041e2:	4413      	add	r3, r2
 80041e4:	3355      	adds	r3, #85	; 0x55
 80041e6:	2205      	movs	r2, #5
 80041e8:	701a      	strb	r2, [r3, #0]
				continue;
 80041ea:	f001 bea2 	b.w	8005f32 <Display_Print_Matrice+0x2552>
				for(int j =0;j<8;j++)
 80041ee:	2300      	movs	r3, #0
 80041f0:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 80041f4:	e019      	b.n	800422a <Display_Print_Matrice+0x84a>
					device->Raw[i][j] = LETTERS[16][j];
 80041f6:	4a2f      	ldr	r2, [pc, #188]	; (80042b4 <Display_Print_Matrice+0x8d4>)
 80041f8:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 80041fc:	4413      	add	r3, r2
 80041fe:	3380      	adds	r3, #128	; 0x80
 8004200:	7819      	ldrb	r1, [r3, #0]
 8004202:	f507 73b4 	add.w	r3, r7, #360	; 0x168
 8004206:	f5a3 73ae 	sub.w	r3, r3, #348	; 0x15c
 800420a:	681a      	ldr	r2, [r3, #0]
 800420c:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 8004210:	00db      	lsls	r3, r3, #3
 8004212:	441a      	add	r2, r3
 8004214:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8004218:	4413      	add	r3, r2
 800421a:	3304      	adds	r3, #4
 800421c:	460a      	mov	r2, r1
 800421e:	701a      	strb	r2, [r3, #0]
				for(int j =0;j<8;j++)
 8004220:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8004224:	3301      	adds	r3, #1
 8004226:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 800422a:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 800422e:	2b07      	cmp	r3, #7
 8004230:	dde1      	ble.n	80041f6 <Display_Print_Matrice+0x816>
				device->Shift[i] = 5;
 8004232:	f507 73b4 	add.w	r3, r7, #360	; 0x168
 8004236:	f5a3 73ae 	sub.w	r3, r3, #348	; 0x15c
 800423a:	681a      	ldr	r2, [r3, #0]
 800423c:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 8004240:	4413      	add	r3, r2
 8004242:	3355      	adds	r3, #85	; 0x55
 8004244:	2205      	movs	r2, #5
 8004246:	701a      	strb	r2, [r3, #0]
				continue;
 8004248:	f001 be73 	b.w	8005f32 <Display_Print_Matrice+0x2552>
				for(int j =0;j<8;j++)
 800424c:	2300      	movs	r3, #0
 800424e:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8004252:	e019      	b.n	8004288 <Display_Print_Matrice+0x8a8>
					device->Raw[i][j] = LETTERS[17][j];
 8004254:	4a17      	ldr	r2, [pc, #92]	; (80042b4 <Display_Print_Matrice+0x8d4>)
 8004256:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800425a:	4413      	add	r3, r2
 800425c:	3388      	adds	r3, #136	; 0x88
 800425e:	7819      	ldrb	r1, [r3, #0]
 8004260:	f507 73b4 	add.w	r3, r7, #360	; 0x168
 8004264:	f5a3 73ae 	sub.w	r3, r3, #348	; 0x15c
 8004268:	681a      	ldr	r2, [r3, #0]
 800426a:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 800426e:	00db      	lsls	r3, r3, #3
 8004270:	441a      	add	r2, r3
 8004272:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8004276:	4413      	add	r3, r2
 8004278:	3304      	adds	r3, #4
 800427a:	460a      	mov	r2, r1
 800427c:	701a      	strb	r2, [r3, #0]
				for(int j =0;j<8;j++)
 800427e:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8004282:	3301      	adds	r3, #1
 8004284:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8004288:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800428c:	2b07      	cmp	r3, #7
 800428e:	dde1      	ble.n	8004254 <Display_Print_Matrice+0x874>
				device->Shift[i] = 5;
 8004290:	f507 73b4 	add.w	r3, r7, #360	; 0x168
 8004294:	f5a3 73ae 	sub.w	r3, r3, #348	; 0x15c
 8004298:	681a      	ldr	r2, [r3, #0]
 800429a:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 800429e:	4413      	add	r3, r2
 80042a0:	3355      	adds	r3, #85	; 0x55
 80042a2:	2205      	movs	r2, #5
 80042a4:	701a      	strb	r2, [r3, #0]
				continue;
 80042a6:	f001 be44 	b.w	8005f32 <Display_Print_Matrice+0x2552>
				for(int j =0;j<8;j++)
 80042aa:	2300      	movs	r3, #0
 80042ac:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 80042b0:	e01c      	b.n	80042ec <Display_Print_Matrice+0x90c>
 80042b2:	bf00      	nop
 80042b4:	2000000c 	.word	0x2000000c
					device->Raw[i][j] = LETTERS[18][j];
 80042b8:	4ad3      	ldr	r2, [pc, #844]	; (8004608 <Display_Print_Matrice+0xc28>)
 80042ba:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 80042be:	4413      	add	r3, r2
 80042c0:	3390      	adds	r3, #144	; 0x90
 80042c2:	7819      	ldrb	r1, [r3, #0]
 80042c4:	f507 73b4 	add.w	r3, r7, #360	; 0x168
 80042c8:	f5a3 73ae 	sub.w	r3, r3, #348	; 0x15c
 80042cc:	681a      	ldr	r2, [r3, #0]
 80042ce:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 80042d2:	00db      	lsls	r3, r3, #3
 80042d4:	441a      	add	r2, r3
 80042d6:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 80042da:	4413      	add	r3, r2
 80042dc:	3304      	adds	r3, #4
 80042de:	460a      	mov	r2, r1
 80042e0:	701a      	strb	r2, [r3, #0]
				for(int j =0;j<8;j++)
 80042e2:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 80042e6:	3301      	adds	r3, #1
 80042e8:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 80042ec:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 80042f0:	2b07      	cmp	r3, #7
 80042f2:	dde1      	ble.n	80042b8 <Display_Print_Matrice+0x8d8>
				device->Shift[i] = 4;
 80042f4:	f507 73b4 	add.w	r3, r7, #360	; 0x168
 80042f8:	f5a3 73ae 	sub.w	r3, r3, #348	; 0x15c
 80042fc:	681a      	ldr	r2, [r3, #0]
 80042fe:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 8004302:	4413      	add	r3, r2
 8004304:	3355      	adds	r3, #85	; 0x55
 8004306:	2204      	movs	r2, #4
 8004308:	701a      	strb	r2, [r3, #0]
				continue;
 800430a:	f001 be12 	b.w	8005f32 <Display_Print_Matrice+0x2552>
				for(int j =0;j<8;j++)
 800430e:	2300      	movs	r3, #0
 8004310:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8004314:	e019      	b.n	800434a <Display_Print_Matrice+0x96a>
					device->Raw[i][j] = LETTERS[19][j];
 8004316:	4abc      	ldr	r2, [pc, #752]	; (8004608 <Display_Print_Matrice+0xc28>)
 8004318:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800431c:	4413      	add	r3, r2
 800431e:	3398      	adds	r3, #152	; 0x98
 8004320:	7819      	ldrb	r1, [r3, #0]
 8004322:	f507 73b4 	add.w	r3, r7, #360	; 0x168
 8004326:	f5a3 73ae 	sub.w	r3, r3, #348	; 0x15c
 800432a:	681a      	ldr	r2, [r3, #0]
 800432c:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 8004330:	00db      	lsls	r3, r3, #3
 8004332:	441a      	add	r2, r3
 8004334:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004338:	4413      	add	r3, r2
 800433a:	3304      	adds	r3, #4
 800433c:	460a      	mov	r2, r1
 800433e:	701a      	strb	r2, [r3, #0]
				for(int j =0;j<8;j++)
 8004340:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004344:	3301      	adds	r3, #1
 8004346:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 800434a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800434e:	2b07      	cmp	r3, #7
 8004350:	dde1      	ble.n	8004316 <Display_Print_Matrice+0x936>
				device->Shift[i] = 5;
 8004352:	f507 73b4 	add.w	r3, r7, #360	; 0x168
 8004356:	f5a3 73ae 	sub.w	r3, r3, #348	; 0x15c
 800435a:	681a      	ldr	r2, [r3, #0]
 800435c:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 8004360:	4413      	add	r3, r2
 8004362:	3355      	adds	r3, #85	; 0x55
 8004364:	2205      	movs	r2, #5
 8004366:	701a      	strb	r2, [r3, #0]
				continue;
 8004368:	f001 bde3 	b.w	8005f32 <Display_Print_Matrice+0x2552>
				for(int j =0;j<8;j++)
 800436c:	2300      	movs	r3, #0
 800436e:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 8004372:	e019      	b.n	80043a8 <Display_Print_Matrice+0x9c8>
					device->Raw[i][j] = LETTERS[20][j];
 8004374:	4aa4      	ldr	r2, [pc, #656]	; (8004608 <Display_Print_Matrice+0xc28>)
 8004376:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 800437a:	4413      	add	r3, r2
 800437c:	33a0      	adds	r3, #160	; 0xa0
 800437e:	7819      	ldrb	r1, [r3, #0]
 8004380:	f507 73b4 	add.w	r3, r7, #360	; 0x168
 8004384:	f5a3 73ae 	sub.w	r3, r3, #348	; 0x15c
 8004388:	681a      	ldr	r2, [r3, #0]
 800438a:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 800438e:	00db      	lsls	r3, r3, #3
 8004390:	441a      	add	r2, r3
 8004392:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8004396:	4413      	add	r3, r2
 8004398:	3304      	adds	r3, #4
 800439a:	460a      	mov	r2, r1
 800439c:	701a      	strb	r2, [r3, #0]
				for(int j =0;j<8;j++)
 800439e:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 80043a2:	3301      	adds	r3, #1
 80043a4:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 80043a8:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 80043ac:	2b07      	cmp	r3, #7
 80043ae:	dde1      	ble.n	8004374 <Display_Print_Matrice+0x994>
				device->Shift[i] = 5;
 80043b0:	f507 73b4 	add.w	r3, r7, #360	; 0x168
 80043b4:	f5a3 73ae 	sub.w	r3, r3, #348	; 0x15c
 80043b8:	681a      	ldr	r2, [r3, #0]
 80043ba:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 80043be:	4413      	add	r3, r2
 80043c0:	3355      	adds	r3, #85	; 0x55
 80043c2:	2205      	movs	r2, #5
 80043c4:	701a      	strb	r2, [r3, #0]
				continue;
 80043c6:	f001 bdb4 	b.w	8005f32 <Display_Print_Matrice+0x2552>
				for(int j =0;j<8;j++)
 80043ca:	2300      	movs	r3, #0
 80043cc:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 80043d0:	e019      	b.n	8004406 <Display_Print_Matrice+0xa26>
					device->Raw[i][j] = LETTERS[21][j];
 80043d2:	4a8d      	ldr	r2, [pc, #564]	; (8004608 <Display_Print_Matrice+0xc28>)
 80043d4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80043d8:	4413      	add	r3, r2
 80043da:	33a8      	adds	r3, #168	; 0xa8
 80043dc:	7819      	ldrb	r1, [r3, #0]
 80043de:	f507 73b4 	add.w	r3, r7, #360	; 0x168
 80043e2:	f5a3 73ae 	sub.w	r3, r3, #348	; 0x15c
 80043e6:	681a      	ldr	r2, [r3, #0]
 80043e8:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 80043ec:	00db      	lsls	r3, r3, #3
 80043ee:	441a      	add	r2, r3
 80043f0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80043f4:	4413      	add	r3, r2
 80043f6:	3304      	adds	r3, #4
 80043f8:	460a      	mov	r2, r1
 80043fa:	701a      	strb	r2, [r3, #0]
				for(int j =0;j<8;j++)
 80043fc:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004400:	3301      	adds	r3, #1
 8004402:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8004406:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800440a:	2b07      	cmp	r3, #7
 800440c:	dde1      	ble.n	80043d2 <Display_Print_Matrice+0x9f2>
				device->Shift[i] = 6;
 800440e:	f507 73b4 	add.w	r3, r7, #360	; 0x168
 8004412:	f5a3 73ae 	sub.w	r3, r3, #348	; 0x15c
 8004416:	681a      	ldr	r2, [r3, #0]
 8004418:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 800441c:	4413      	add	r3, r2
 800441e:	3355      	adds	r3, #85	; 0x55
 8004420:	2206      	movs	r2, #6
 8004422:	701a      	strb	r2, [r3, #0]
				continue;
 8004424:	f001 bd85 	b.w	8005f32 <Display_Print_Matrice+0x2552>
				for(int j =0;j<8;j++)
 8004428:	2300      	movs	r3, #0
 800442a:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 800442e:	e019      	b.n	8004464 <Display_Print_Matrice+0xa84>
					device->Raw[i][j] = LETTERS[22][j];
 8004430:	4a75      	ldr	r2, [pc, #468]	; (8004608 <Display_Print_Matrice+0xc28>)
 8004432:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8004436:	4413      	add	r3, r2
 8004438:	33b0      	adds	r3, #176	; 0xb0
 800443a:	7819      	ldrb	r1, [r3, #0]
 800443c:	f507 73b4 	add.w	r3, r7, #360	; 0x168
 8004440:	f5a3 73ae 	sub.w	r3, r3, #348	; 0x15c
 8004444:	681a      	ldr	r2, [r3, #0]
 8004446:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 800444a:	00db      	lsls	r3, r3, #3
 800444c:	441a      	add	r2, r3
 800444e:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8004452:	4413      	add	r3, r2
 8004454:	3304      	adds	r3, #4
 8004456:	460a      	mov	r2, r1
 8004458:	701a      	strb	r2, [r3, #0]
				for(int j =0;j<8;j++)
 800445a:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800445e:	3301      	adds	r3, #1
 8004460:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8004464:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8004468:	2b07      	cmp	r3, #7
 800446a:	dde1      	ble.n	8004430 <Display_Print_Matrice+0xa50>
				device->Shift[i] = 5;
 800446c:	f507 73b4 	add.w	r3, r7, #360	; 0x168
 8004470:	f5a3 73ae 	sub.w	r3, r3, #348	; 0x15c
 8004474:	681a      	ldr	r2, [r3, #0]
 8004476:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 800447a:	4413      	add	r3, r2
 800447c:	3355      	adds	r3, #85	; 0x55
 800447e:	2205      	movs	r2, #5
 8004480:	701a      	strb	r2, [r3, #0]
				continue;
 8004482:	f001 bd56 	b.w	8005f32 <Display_Print_Matrice+0x2552>
				for(int j =0;j<8;j++)
 8004486:	2300      	movs	r3, #0
 8004488:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 800448c:	e019      	b.n	80044c2 <Display_Print_Matrice+0xae2>
					device->Raw[i][j] = LETTERS[23][j];
 800448e:	4a5e      	ldr	r2, [pc, #376]	; (8004608 <Display_Print_Matrice+0xc28>)
 8004490:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004494:	4413      	add	r3, r2
 8004496:	33b8      	adds	r3, #184	; 0xb8
 8004498:	7819      	ldrb	r1, [r3, #0]
 800449a:	f507 73b4 	add.w	r3, r7, #360	; 0x168
 800449e:	f5a3 73ae 	sub.w	r3, r3, #348	; 0x15c
 80044a2:	681a      	ldr	r2, [r3, #0]
 80044a4:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 80044a8:	00db      	lsls	r3, r3, #3
 80044aa:	441a      	add	r2, r3
 80044ac:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80044b0:	4413      	add	r3, r2
 80044b2:	3304      	adds	r3, #4
 80044b4:	460a      	mov	r2, r1
 80044b6:	701a      	strb	r2, [r3, #0]
				for(int j =0;j<8;j++)
 80044b8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80044bc:	3301      	adds	r3, #1
 80044be:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 80044c2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80044c6:	2b07      	cmp	r3, #7
 80044c8:	dde1      	ble.n	800448e <Display_Print_Matrice+0xaae>
				device->Shift[i] = 5;
 80044ca:	f507 73b4 	add.w	r3, r7, #360	; 0x168
 80044ce:	f5a3 73ae 	sub.w	r3, r3, #348	; 0x15c
 80044d2:	681a      	ldr	r2, [r3, #0]
 80044d4:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 80044d8:	4413      	add	r3, r2
 80044da:	3355      	adds	r3, #85	; 0x55
 80044dc:	2205      	movs	r2, #5
 80044de:	701a      	strb	r2, [r3, #0]
				continue;
 80044e0:	f001 bd27 	b.w	8005f32 <Display_Print_Matrice+0x2552>
				for(int j =0;j<8;j++)
 80044e4:	2300      	movs	r3, #0
 80044e6:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 80044ea:	e019      	b.n	8004520 <Display_Print_Matrice+0xb40>
					device->Raw[i][j] = LETTERS[24][j];
 80044ec:	4a46      	ldr	r2, [pc, #280]	; (8004608 <Display_Print_Matrice+0xc28>)
 80044ee:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 80044f2:	4413      	add	r3, r2
 80044f4:	33c0      	adds	r3, #192	; 0xc0
 80044f6:	7819      	ldrb	r1, [r3, #0]
 80044f8:	f507 73b4 	add.w	r3, r7, #360	; 0x168
 80044fc:	f5a3 73ae 	sub.w	r3, r3, #348	; 0x15c
 8004500:	681a      	ldr	r2, [r3, #0]
 8004502:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 8004506:	00db      	lsls	r3, r3, #3
 8004508:	441a      	add	r2, r3
 800450a:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800450e:	4413      	add	r3, r2
 8004510:	3304      	adds	r3, #4
 8004512:	460a      	mov	r2, r1
 8004514:	701a      	strb	r2, [r3, #0]
				for(int j =0;j<8;j++)
 8004516:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800451a:	3301      	adds	r3, #1
 800451c:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8004520:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8004524:	2b07      	cmp	r3, #7
 8004526:	dde1      	ble.n	80044ec <Display_Print_Matrice+0xb0c>
				device->Shift[i] = 5;
 8004528:	f507 73b4 	add.w	r3, r7, #360	; 0x168
 800452c:	f5a3 73ae 	sub.w	r3, r3, #348	; 0x15c
 8004530:	681a      	ldr	r2, [r3, #0]
 8004532:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 8004536:	4413      	add	r3, r2
 8004538:	3355      	adds	r3, #85	; 0x55
 800453a:	2205      	movs	r2, #5
 800453c:	701a      	strb	r2, [r3, #0]
				continue;
 800453e:	f001 bcf8 	b.w	8005f32 <Display_Print_Matrice+0x2552>
				for(int j =0;j<8;j++)
 8004542:	2300      	movs	r3, #0
 8004544:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8004548:	e019      	b.n	800457e <Display_Print_Matrice+0xb9e>
					device->Raw[i][j] = LETTERS[25][j];
 800454a:	4a2f      	ldr	r2, [pc, #188]	; (8004608 <Display_Print_Matrice+0xc28>)
 800454c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004550:	4413      	add	r3, r2
 8004552:	33c8      	adds	r3, #200	; 0xc8
 8004554:	7819      	ldrb	r1, [r3, #0]
 8004556:	f507 73b4 	add.w	r3, r7, #360	; 0x168
 800455a:	f5a3 73ae 	sub.w	r3, r3, #348	; 0x15c
 800455e:	681a      	ldr	r2, [r3, #0]
 8004560:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 8004564:	00db      	lsls	r3, r3, #3
 8004566:	441a      	add	r2, r3
 8004568:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800456c:	4413      	add	r3, r2
 800456e:	3304      	adds	r3, #4
 8004570:	460a      	mov	r2, r1
 8004572:	701a      	strb	r2, [r3, #0]
				for(int j =0;j<8;j++)
 8004574:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004578:	3301      	adds	r3, #1
 800457a:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800457e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004582:	2b07      	cmp	r3, #7
 8004584:	dde1      	ble.n	800454a <Display_Print_Matrice+0xb6a>
				device->Shift[i] = 5;
 8004586:	f507 73b4 	add.w	r3, r7, #360	; 0x168
 800458a:	f5a3 73ae 	sub.w	r3, r3, #348	; 0x15c
 800458e:	681a      	ldr	r2, [r3, #0]
 8004590:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 8004594:	4413      	add	r3, r2
 8004596:	3355      	adds	r3, #85	; 0x55
 8004598:	2205      	movs	r2, #5
 800459a:	701a      	strb	r2, [r3, #0]
				continue;
 800459c:	f001 bcc9 	b.w	8005f32 <Display_Print_Matrice+0x2552>
				for(int j =0;j<8;j++)
 80045a0:	2300      	movs	r3, #0
 80045a2:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 80045a6:	e019      	b.n	80045dc <Display_Print_Matrice+0xbfc>
					device->Raw[i][j] = LETTERS[26][j];
 80045a8:	4a17      	ldr	r2, [pc, #92]	; (8004608 <Display_Print_Matrice+0xc28>)
 80045aa:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80045ae:	4413      	add	r3, r2
 80045b0:	33d0      	adds	r3, #208	; 0xd0
 80045b2:	7819      	ldrb	r1, [r3, #0]
 80045b4:	f507 73b4 	add.w	r3, r7, #360	; 0x168
 80045b8:	f5a3 73ae 	sub.w	r3, r3, #348	; 0x15c
 80045bc:	681a      	ldr	r2, [r3, #0]
 80045be:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 80045c2:	00db      	lsls	r3, r3, #3
 80045c4:	441a      	add	r2, r3
 80045c6:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80045ca:	4413      	add	r3, r2
 80045cc:	3304      	adds	r3, #4
 80045ce:	460a      	mov	r2, r1
 80045d0:	701a      	strb	r2, [r3, #0]
				for(int j =0;j<8;j++)
 80045d2:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80045d6:	3301      	adds	r3, #1
 80045d8:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 80045dc:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80045e0:	2b07      	cmp	r3, #7
 80045e2:	dde1      	ble.n	80045a8 <Display_Print_Matrice+0xbc8>
				device->Shift[i] = 5;
 80045e4:	f507 73b4 	add.w	r3, r7, #360	; 0x168
 80045e8:	f5a3 73ae 	sub.w	r3, r3, #348	; 0x15c
 80045ec:	681a      	ldr	r2, [r3, #0]
 80045ee:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 80045f2:	4413      	add	r3, r2
 80045f4:	3355      	adds	r3, #85	; 0x55
 80045f6:	2205      	movs	r2, #5
 80045f8:	701a      	strb	r2, [r3, #0]
				continue;
 80045fa:	f001 bc9a 	b.w	8005f32 <Display_Print_Matrice+0x2552>
				for(int j =0;j<8;j++)
 80045fe:	2300      	movs	r3, #0
 8004600:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8004604:	e01c      	b.n	8004640 <Display_Print_Matrice+0xc60>
 8004606:	bf00      	nop
 8004608:	2000000c 	.word	0x2000000c
					device->Raw[i][j] = LETTERS[27][j];
 800460c:	4ad5      	ldr	r2, [pc, #852]	; (8004964 <Display_Print_Matrice+0xf84>)
 800460e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004612:	4413      	add	r3, r2
 8004614:	33d8      	adds	r3, #216	; 0xd8
 8004616:	7819      	ldrb	r1, [r3, #0]
 8004618:	f507 73b4 	add.w	r3, r7, #360	; 0x168
 800461c:	f5a3 73ae 	sub.w	r3, r3, #348	; 0x15c
 8004620:	681a      	ldr	r2, [r3, #0]
 8004622:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 8004626:	00db      	lsls	r3, r3, #3
 8004628:	441a      	add	r2, r3
 800462a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800462e:	4413      	add	r3, r2
 8004630:	3304      	adds	r3, #4
 8004632:	460a      	mov	r2, r1
 8004634:	701a      	strb	r2, [r3, #0]
				for(int j =0;j<8;j++)
 8004636:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800463a:	3301      	adds	r3, #1
 800463c:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8004640:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004644:	2b07      	cmp	r3, #7
 8004646:	dde1      	ble.n	800460c <Display_Print_Matrice+0xc2c>
				device->Shift[i] = 5;
 8004648:	f507 73b4 	add.w	r3, r7, #360	; 0x168
 800464c:	f5a3 73ae 	sub.w	r3, r3, #348	; 0x15c
 8004650:	681a      	ldr	r2, [r3, #0]
 8004652:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 8004656:	4413      	add	r3, r2
 8004658:	3355      	adds	r3, #85	; 0x55
 800465a:	2205      	movs	r2, #5
 800465c:	701a      	strb	r2, [r3, #0]
				continue;
 800465e:	f001 bc68 	b.w	8005f32 <Display_Print_Matrice+0x2552>
				for(int j =0;j<8;j++)
 8004662:	2300      	movs	r3, #0
 8004664:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8004668:	e019      	b.n	800469e <Display_Print_Matrice+0xcbe>
					device->Raw[i][j] = LETTERS[28][j];
 800466a:	4abe      	ldr	r2, [pc, #760]	; (8004964 <Display_Print_Matrice+0xf84>)
 800466c:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8004670:	4413      	add	r3, r2
 8004672:	33e0      	adds	r3, #224	; 0xe0
 8004674:	7819      	ldrb	r1, [r3, #0]
 8004676:	f507 73b4 	add.w	r3, r7, #360	; 0x168
 800467a:	f5a3 73ae 	sub.w	r3, r3, #348	; 0x15c
 800467e:	681a      	ldr	r2, [r3, #0]
 8004680:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 8004684:	00db      	lsls	r3, r3, #3
 8004686:	441a      	add	r2, r3
 8004688:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800468c:	4413      	add	r3, r2
 800468e:	3304      	adds	r3, #4
 8004690:	460a      	mov	r2, r1
 8004692:	701a      	strb	r2, [r3, #0]
				for(int j =0;j<8;j++)
 8004694:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8004698:	3301      	adds	r3, #1
 800469a:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 800469e:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 80046a2:	2b07      	cmp	r3, #7
 80046a4:	dde1      	ble.n	800466a <Display_Print_Matrice+0xc8a>
				device->Shift[i] = 5;
 80046a6:	f507 73b4 	add.w	r3, r7, #360	; 0x168
 80046aa:	f5a3 73ae 	sub.w	r3, r3, #348	; 0x15c
 80046ae:	681a      	ldr	r2, [r3, #0]
 80046b0:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 80046b4:	4413      	add	r3, r2
 80046b6:	3355      	adds	r3, #85	; 0x55
 80046b8:	2205      	movs	r2, #5
 80046ba:	701a      	strb	r2, [r3, #0]
				continue;
 80046bc:	f001 bc39 	b.w	8005f32 <Display_Print_Matrice+0x2552>
				for(int j =0;j<8;j++)
 80046c0:	2300      	movs	r3, #0
 80046c2:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 80046c6:	e019      	b.n	80046fc <Display_Print_Matrice+0xd1c>
					device->Raw[i][j] = LETTERS[29][j];
 80046c8:	4aa6      	ldr	r2, [pc, #664]	; (8004964 <Display_Print_Matrice+0xf84>)
 80046ca:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 80046ce:	4413      	add	r3, r2
 80046d0:	33e8      	adds	r3, #232	; 0xe8
 80046d2:	7819      	ldrb	r1, [r3, #0]
 80046d4:	f507 73b4 	add.w	r3, r7, #360	; 0x168
 80046d8:	f5a3 73ae 	sub.w	r3, r3, #348	; 0x15c
 80046dc:	681a      	ldr	r2, [r3, #0]
 80046de:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 80046e2:	00db      	lsls	r3, r3, #3
 80046e4:	441a      	add	r2, r3
 80046e6:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 80046ea:	4413      	add	r3, r2
 80046ec:	3304      	adds	r3, #4
 80046ee:	460a      	mov	r2, r1
 80046f0:	701a      	strb	r2, [r3, #0]
				for(int j =0;j<8;j++)
 80046f2:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 80046f6:	3301      	adds	r3, #1
 80046f8:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 80046fc:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8004700:	2b07      	cmp	r3, #7
 8004702:	dde1      	ble.n	80046c8 <Display_Print_Matrice+0xce8>
				device->Shift[i] = 5;
 8004704:	f507 73b4 	add.w	r3, r7, #360	; 0x168
 8004708:	f5a3 73ae 	sub.w	r3, r3, #348	; 0x15c
 800470c:	681a      	ldr	r2, [r3, #0]
 800470e:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 8004712:	4413      	add	r3, r2
 8004714:	3355      	adds	r3, #85	; 0x55
 8004716:	2205      	movs	r2, #5
 8004718:	701a      	strb	r2, [r3, #0]
				continue;
 800471a:	f001 bc0a 	b.w	8005f32 <Display_Print_Matrice+0x2552>
				for(int j =0;j<8;j++)
 800471e:	2300      	movs	r3, #0
 8004720:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8004724:	e019      	b.n	800475a <Display_Print_Matrice+0xd7a>
					device->Raw[i][j] = LETTERS[30][j];
 8004726:	4a8f      	ldr	r2, [pc, #572]	; (8004964 <Display_Print_Matrice+0xf84>)
 8004728:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800472c:	4413      	add	r3, r2
 800472e:	33f0      	adds	r3, #240	; 0xf0
 8004730:	7819      	ldrb	r1, [r3, #0]
 8004732:	f507 73b4 	add.w	r3, r7, #360	; 0x168
 8004736:	f5a3 73ae 	sub.w	r3, r3, #348	; 0x15c
 800473a:	681a      	ldr	r2, [r3, #0]
 800473c:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 8004740:	00db      	lsls	r3, r3, #3
 8004742:	441a      	add	r2, r3
 8004744:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8004748:	4413      	add	r3, r2
 800474a:	3304      	adds	r3, #4
 800474c:	460a      	mov	r2, r1
 800474e:	701a      	strb	r2, [r3, #0]
				for(int j =0;j<8;j++)
 8004750:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8004754:	3301      	adds	r3, #1
 8004756:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800475a:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800475e:	2b07      	cmp	r3, #7
 8004760:	dde1      	ble.n	8004726 <Display_Print_Matrice+0xd46>
				device->Shift[i] = 5;
 8004762:	f507 73b4 	add.w	r3, r7, #360	; 0x168
 8004766:	f5a3 73ae 	sub.w	r3, r3, #348	; 0x15c
 800476a:	681a      	ldr	r2, [r3, #0]
 800476c:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 8004770:	4413      	add	r3, r2
 8004772:	3355      	adds	r3, #85	; 0x55
 8004774:	2205      	movs	r2, #5
 8004776:	701a      	strb	r2, [r3, #0]
				continue;
 8004778:	f001 bbdb 	b.w	8005f32 <Display_Print_Matrice+0x2552>
				for(int j =0;j<8;j++)
 800477c:	2300      	movs	r3, #0
 800477e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8004782:	e019      	b.n	80047b8 <Display_Print_Matrice+0xdd8>
					device->Raw[i][j] = LETTERS[31][j];
 8004784:	4a77      	ldr	r2, [pc, #476]	; (8004964 <Display_Print_Matrice+0xf84>)
 8004786:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800478a:	4413      	add	r3, r2
 800478c:	33f8      	adds	r3, #248	; 0xf8
 800478e:	7819      	ldrb	r1, [r3, #0]
 8004790:	f507 73b4 	add.w	r3, r7, #360	; 0x168
 8004794:	f5a3 73ae 	sub.w	r3, r3, #348	; 0x15c
 8004798:	681a      	ldr	r2, [r3, #0]
 800479a:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 800479e:	00db      	lsls	r3, r3, #3
 80047a0:	441a      	add	r2, r3
 80047a2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80047a6:	4413      	add	r3, r2
 80047a8:	3304      	adds	r3, #4
 80047aa:	460a      	mov	r2, r1
 80047ac:	701a      	strb	r2, [r3, #0]
				for(int j =0;j<8;j++)
 80047ae:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80047b2:	3301      	adds	r3, #1
 80047b4:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80047b8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80047bc:	2b07      	cmp	r3, #7
 80047be:	dde1      	ble.n	8004784 <Display_Print_Matrice+0xda4>
				device->Shift[i] = 5;
 80047c0:	f507 73b4 	add.w	r3, r7, #360	; 0x168
 80047c4:	f5a3 73ae 	sub.w	r3, r3, #348	; 0x15c
 80047c8:	681a      	ldr	r2, [r3, #0]
 80047ca:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 80047ce:	4413      	add	r3, r2
 80047d0:	3355      	adds	r3, #85	; 0x55
 80047d2:	2205      	movs	r2, #5
 80047d4:	701a      	strb	r2, [r3, #0]
				continue;
 80047d6:	f001 bbac 	b.w	8005f32 <Display_Print_Matrice+0x2552>
				for(int j =0;j<8;j++)
 80047da:	2300      	movs	r3, #0
 80047dc:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80047e0:	e01a      	b.n	8004818 <Display_Print_Matrice+0xe38>
					device->Raw[i][j] = LETTERS[32][j];
 80047e2:	4a60      	ldr	r2, [pc, #384]	; (8004964 <Display_Print_Matrice+0xf84>)
 80047e4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80047e8:	4413      	add	r3, r2
 80047ea:	f503 7380 	add.w	r3, r3, #256	; 0x100
 80047ee:	7819      	ldrb	r1, [r3, #0]
 80047f0:	f507 73b4 	add.w	r3, r7, #360	; 0x168
 80047f4:	f5a3 73ae 	sub.w	r3, r3, #348	; 0x15c
 80047f8:	681a      	ldr	r2, [r3, #0]
 80047fa:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 80047fe:	00db      	lsls	r3, r3, #3
 8004800:	441a      	add	r2, r3
 8004802:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004806:	4413      	add	r3, r2
 8004808:	3304      	adds	r3, #4
 800480a:	460a      	mov	r2, r1
 800480c:	701a      	strb	r2, [r3, #0]
				for(int j =0;j<8;j++)
 800480e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004812:	3301      	adds	r3, #1
 8004814:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8004818:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800481c:	2b07      	cmp	r3, #7
 800481e:	dde0      	ble.n	80047e2 <Display_Print_Matrice+0xe02>
				device->Shift[i] = 5;
 8004820:	f507 73b4 	add.w	r3, r7, #360	; 0x168
 8004824:	f5a3 73ae 	sub.w	r3, r3, #348	; 0x15c
 8004828:	681a      	ldr	r2, [r3, #0]
 800482a:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 800482e:	4413      	add	r3, r2
 8004830:	3355      	adds	r3, #85	; 0x55
 8004832:	2205      	movs	r2, #5
 8004834:	701a      	strb	r2, [r3, #0]
				continue;
 8004836:	f001 bb7c 	b.w	8005f32 <Display_Print_Matrice+0x2552>
				for(int j =0;j<8;j++)
 800483a:	2300      	movs	r3, #0
 800483c:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8004840:	e01a      	b.n	8004878 <Display_Print_Matrice+0xe98>
					device->Raw[i][j] = LETTERS[33][j];
 8004842:	4a48      	ldr	r2, [pc, #288]	; (8004964 <Display_Print_Matrice+0xf84>)
 8004844:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004848:	4413      	add	r3, r2
 800484a:	f503 7384 	add.w	r3, r3, #264	; 0x108
 800484e:	7819      	ldrb	r1, [r3, #0]
 8004850:	f507 73b4 	add.w	r3, r7, #360	; 0x168
 8004854:	f5a3 73ae 	sub.w	r3, r3, #348	; 0x15c
 8004858:	681a      	ldr	r2, [r3, #0]
 800485a:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 800485e:	00db      	lsls	r3, r3, #3
 8004860:	441a      	add	r2, r3
 8004862:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004866:	4413      	add	r3, r2
 8004868:	3304      	adds	r3, #4
 800486a:	460a      	mov	r2, r1
 800486c:	701a      	strb	r2, [r3, #0]
				for(int j =0;j<8;j++)
 800486e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004872:	3301      	adds	r3, #1
 8004874:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8004878:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800487c:	2b07      	cmp	r3, #7
 800487e:	dde0      	ble.n	8004842 <Display_Print_Matrice+0xe62>
				device->Shift[i] = 5;
 8004880:	f507 73b4 	add.w	r3, r7, #360	; 0x168
 8004884:	f5a3 73ae 	sub.w	r3, r3, #348	; 0x15c
 8004888:	681a      	ldr	r2, [r3, #0]
 800488a:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 800488e:	4413      	add	r3, r2
 8004890:	3355      	adds	r3, #85	; 0x55
 8004892:	2205      	movs	r2, #5
 8004894:	701a      	strb	r2, [r3, #0]
				continue;
 8004896:	f001 bb4c 	b.w	8005f32 <Display_Print_Matrice+0x2552>
				for(int j =0;j<8;j++)
 800489a:	2300      	movs	r3, #0
 800489c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80048a0:	e01a      	b.n	80048d8 <Display_Print_Matrice+0xef8>
					device->Raw[i][j] = LETTERS[34][j];
 80048a2:	4a30      	ldr	r2, [pc, #192]	; (8004964 <Display_Print_Matrice+0xf84>)
 80048a4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80048a8:	4413      	add	r3, r2
 80048aa:	f503 7388 	add.w	r3, r3, #272	; 0x110
 80048ae:	7819      	ldrb	r1, [r3, #0]
 80048b0:	f507 73b4 	add.w	r3, r7, #360	; 0x168
 80048b4:	f5a3 73ae 	sub.w	r3, r3, #348	; 0x15c
 80048b8:	681a      	ldr	r2, [r3, #0]
 80048ba:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 80048be:	00db      	lsls	r3, r3, #3
 80048c0:	441a      	add	r2, r3
 80048c2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80048c6:	4413      	add	r3, r2
 80048c8:	3304      	adds	r3, #4
 80048ca:	460a      	mov	r2, r1
 80048cc:	701a      	strb	r2, [r3, #0]
				for(int j =0;j<8;j++)
 80048ce:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80048d2:	3301      	adds	r3, #1
 80048d4:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80048d8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80048dc:	2b07      	cmp	r3, #7
 80048de:	dde0      	ble.n	80048a2 <Display_Print_Matrice+0xec2>
				device->Shift[i] = 5;
 80048e0:	f507 73b4 	add.w	r3, r7, #360	; 0x168
 80048e4:	f5a3 73ae 	sub.w	r3, r3, #348	; 0x15c
 80048e8:	681a      	ldr	r2, [r3, #0]
 80048ea:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 80048ee:	4413      	add	r3, r2
 80048f0:	3355      	adds	r3, #85	; 0x55
 80048f2:	2205      	movs	r2, #5
 80048f4:	701a      	strb	r2, [r3, #0]
				continue;
 80048f6:	f001 bb1c 	b.w	8005f32 <Display_Print_Matrice+0x2552>
				for(int j =0;j<8;j++)
 80048fa:	2300      	movs	r3, #0
 80048fc:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8004900:	e01a      	b.n	8004938 <Display_Print_Matrice+0xf58>
					device->Raw[i][j] = LETTERS[35][j];
 8004902:	4a18      	ldr	r2, [pc, #96]	; (8004964 <Display_Print_Matrice+0xf84>)
 8004904:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8004908:	4413      	add	r3, r2
 800490a:	f503 738c 	add.w	r3, r3, #280	; 0x118
 800490e:	7819      	ldrb	r1, [r3, #0]
 8004910:	f507 73b4 	add.w	r3, r7, #360	; 0x168
 8004914:	f5a3 73ae 	sub.w	r3, r3, #348	; 0x15c
 8004918:	681a      	ldr	r2, [r3, #0]
 800491a:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 800491e:	00db      	lsls	r3, r3, #3
 8004920:	441a      	add	r2, r3
 8004922:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8004926:	4413      	add	r3, r2
 8004928:	3304      	adds	r3, #4
 800492a:	460a      	mov	r2, r1
 800492c:	701a      	strb	r2, [r3, #0]
				for(int j =0;j<8;j++)
 800492e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8004932:	3301      	adds	r3, #1
 8004934:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8004938:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800493c:	2b07      	cmp	r3, #7
 800493e:	dde0      	ble.n	8004902 <Display_Print_Matrice+0xf22>
				device->Shift[i] = 5;
 8004940:	f507 73b4 	add.w	r3, r7, #360	; 0x168
 8004944:	f5a3 73ae 	sub.w	r3, r3, #348	; 0x15c
 8004948:	681a      	ldr	r2, [r3, #0]
 800494a:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 800494e:	4413      	add	r3, r2
 8004950:	3355      	adds	r3, #85	; 0x55
 8004952:	2205      	movs	r2, #5
 8004954:	701a      	strb	r2, [r3, #0]
				continue;
 8004956:	f001 baec 	b.w	8005f32 <Display_Print_Matrice+0x2552>
				for(int j =0;j<8;j++)
 800495a:	2300      	movs	r3, #0
 800495c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004960:	e01d      	b.n	800499e <Display_Print_Matrice+0xfbe>
 8004962:	bf00      	nop
 8004964:	2000000c 	.word	0x2000000c
					device->Raw[i][j] = LETTERS[36][j];
 8004968:	4a81      	ldr	r2, [pc, #516]	; (8004b70 <Display_Print_Matrice+0x1190>)
 800496a:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 800496e:	4413      	add	r3, r2
 8004970:	f503 7390 	add.w	r3, r3, #288	; 0x120
 8004974:	7819      	ldrb	r1, [r3, #0]
 8004976:	f507 73b4 	add.w	r3, r7, #360	; 0x168
 800497a:	f5a3 73ae 	sub.w	r3, r3, #348	; 0x15c
 800497e:	681a      	ldr	r2, [r3, #0]
 8004980:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 8004984:	00db      	lsls	r3, r3, #3
 8004986:	441a      	add	r2, r3
 8004988:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 800498c:	4413      	add	r3, r2
 800498e:	3304      	adds	r3, #4
 8004990:	460a      	mov	r2, r1
 8004992:	701a      	strb	r2, [r3, #0]
				for(int j =0;j<8;j++)
 8004994:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8004998:	3301      	adds	r3, #1
 800499a:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800499e:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 80049a2:	2b07      	cmp	r3, #7
 80049a4:	dde0      	ble.n	8004968 <Display_Print_Matrice+0xf88>
				device->Shift[i] = 2;
 80049a6:	f507 73b4 	add.w	r3, r7, #360	; 0x168
 80049aa:	f5a3 73ae 	sub.w	r3, r3, #348	; 0x15c
 80049ae:	681a      	ldr	r2, [r3, #0]
 80049b0:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 80049b4:	4413      	add	r3, r2
 80049b6:	3355      	adds	r3, #85	; 0x55
 80049b8:	2202      	movs	r2, #2
 80049ba:	701a      	strb	r2, [r3, #0]
				continue;
 80049bc:	f001 bab9 	b.w	8005f32 <Display_Print_Matrice+0x2552>
				for(int j =0;j<8;j++)
 80049c0:	2300      	movs	r3, #0
 80049c2:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80049c6:	e01a      	b.n	80049fe <Display_Print_Matrice+0x101e>
					device->Raw[i][j] = LETTERS[37][j];
 80049c8:	4a69      	ldr	r2, [pc, #420]	; (8004b70 <Display_Print_Matrice+0x1190>)
 80049ca:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80049ce:	4413      	add	r3, r2
 80049d0:	f503 7394 	add.w	r3, r3, #296	; 0x128
 80049d4:	7819      	ldrb	r1, [r3, #0]
 80049d6:	f507 73b4 	add.w	r3, r7, #360	; 0x168
 80049da:	f5a3 73ae 	sub.w	r3, r3, #348	; 0x15c
 80049de:	681a      	ldr	r2, [r3, #0]
 80049e0:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 80049e4:	00db      	lsls	r3, r3, #3
 80049e6:	441a      	add	r2, r3
 80049e8:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80049ec:	4413      	add	r3, r2
 80049ee:	3304      	adds	r3, #4
 80049f0:	460a      	mov	r2, r1
 80049f2:	701a      	strb	r2, [r3, #0]
				for(int j =0;j<8;j++)
 80049f4:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80049f8:	3301      	adds	r3, #1
 80049fa:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80049fe:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8004a02:	2b07      	cmp	r3, #7
 8004a04:	dde0      	ble.n	80049c8 <Display_Print_Matrice+0xfe8>
				device->Shift[i] = 2;
 8004a06:	f507 73b4 	add.w	r3, r7, #360	; 0x168
 8004a0a:	f5a3 73ae 	sub.w	r3, r3, #348	; 0x15c
 8004a0e:	681a      	ldr	r2, [r3, #0]
 8004a10:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 8004a14:	4413      	add	r3, r2
 8004a16:	3355      	adds	r3, #85	; 0x55
 8004a18:	2202      	movs	r2, #2
 8004a1a:	701a      	strb	r2, [r3, #0]
				continue;
 8004a1c:	f001 ba89 	b.w	8005f32 <Display_Print_Matrice+0x2552>
				for(int j =0;j<8;j++)
 8004a20:	2300      	movs	r3, #0
 8004a22:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8004a26:	e01a      	b.n	8004a5e <Display_Print_Matrice+0x107e>
					device->Raw[i][j] = LETTERS[38][j];
 8004a28:	4a51      	ldr	r2, [pc, #324]	; (8004b70 <Display_Print_Matrice+0x1190>)
 8004a2a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8004a2e:	4413      	add	r3, r2
 8004a30:	f503 7398 	add.w	r3, r3, #304	; 0x130
 8004a34:	7819      	ldrb	r1, [r3, #0]
 8004a36:	f507 73b4 	add.w	r3, r7, #360	; 0x168
 8004a3a:	f5a3 73ae 	sub.w	r3, r3, #348	; 0x15c
 8004a3e:	681a      	ldr	r2, [r3, #0]
 8004a40:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 8004a44:	00db      	lsls	r3, r3, #3
 8004a46:	441a      	add	r2, r3
 8004a48:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8004a4c:	4413      	add	r3, r2
 8004a4e:	3304      	adds	r3, #4
 8004a50:	460a      	mov	r2, r1
 8004a52:	701a      	strb	r2, [r3, #0]
				for(int j =0;j<8;j++)
 8004a54:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8004a58:	3301      	adds	r3, #1
 8004a5a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8004a5e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8004a62:	2b07      	cmp	r3, #7
 8004a64:	dde0      	ble.n	8004a28 <Display_Print_Matrice+0x1048>
				device->Shift[i] = 2;
 8004a66:	f507 73b4 	add.w	r3, r7, #360	; 0x168
 8004a6a:	f5a3 73ae 	sub.w	r3, r3, #348	; 0x15c
 8004a6e:	681a      	ldr	r2, [r3, #0]
 8004a70:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 8004a74:	4413      	add	r3, r2
 8004a76:	3355      	adds	r3, #85	; 0x55
 8004a78:	2202      	movs	r2, #2
 8004a7a:	701a      	strb	r2, [r3, #0]
				continue;
 8004a7c:	f001 ba59 	b.w	8005f32 <Display_Print_Matrice+0x2552>
				for(int j =0;j<8;j++)
 8004a80:	2300      	movs	r3, #0
 8004a82:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8004a86:	e01a      	b.n	8004abe <Display_Print_Matrice+0x10de>
					device->Raw[i][j] = LETTERS[39][j];
 8004a88:	4a39      	ldr	r2, [pc, #228]	; (8004b70 <Display_Print_Matrice+0x1190>)
 8004a8a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8004a8e:	4413      	add	r3, r2
 8004a90:	f503 739c 	add.w	r3, r3, #312	; 0x138
 8004a94:	7819      	ldrb	r1, [r3, #0]
 8004a96:	f507 73b4 	add.w	r3, r7, #360	; 0x168
 8004a9a:	f5a3 73ae 	sub.w	r3, r3, #348	; 0x15c
 8004a9e:	681a      	ldr	r2, [r3, #0]
 8004aa0:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 8004aa4:	00db      	lsls	r3, r3, #3
 8004aa6:	441a      	add	r2, r3
 8004aa8:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8004aac:	4413      	add	r3, r2
 8004aae:	3304      	adds	r3, #4
 8004ab0:	460a      	mov	r2, r1
 8004ab2:	701a      	strb	r2, [r3, #0]
				for(int j =0;j<8;j++)
 8004ab4:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8004ab8:	3301      	adds	r3, #1
 8004aba:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8004abe:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8004ac2:	2b07      	cmp	r3, #7
 8004ac4:	dde0      	ble.n	8004a88 <Display_Print_Matrice+0x10a8>
				device->Shift[i] = 4;
 8004ac6:	f507 73b4 	add.w	r3, r7, #360	; 0x168
 8004aca:	f5a3 73ae 	sub.w	r3, r3, #348	; 0x15c
 8004ace:	681a      	ldr	r2, [r3, #0]
 8004ad0:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 8004ad4:	4413      	add	r3, r2
 8004ad6:	3355      	adds	r3, #85	; 0x55
 8004ad8:	2204      	movs	r2, #4
 8004ada:	701a      	strb	r2, [r3, #0]
				continue;
 8004adc:	f001 ba29 	b.w	8005f32 <Display_Print_Matrice+0x2552>
				for(int j =0;j<8;j++)
 8004ae0:	2300      	movs	r3, #0
 8004ae2:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8004ae6:	e01a      	b.n	8004b1e <Display_Print_Matrice+0x113e>
					device->Raw[i][j] = LETTERS[40][j];
 8004ae8:	4a21      	ldr	r2, [pc, #132]	; (8004b70 <Display_Print_Matrice+0x1190>)
 8004aea:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8004aee:	4413      	add	r3, r2
 8004af0:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 8004af4:	7819      	ldrb	r1, [r3, #0]
 8004af6:	f507 73b4 	add.w	r3, r7, #360	; 0x168
 8004afa:	f5a3 73ae 	sub.w	r3, r3, #348	; 0x15c
 8004afe:	681a      	ldr	r2, [r3, #0]
 8004b00:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 8004b04:	00db      	lsls	r3, r3, #3
 8004b06:	441a      	add	r2, r3
 8004b08:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8004b0c:	4413      	add	r3, r2
 8004b0e:	3304      	adds	r3, #4
 8004b10:	460a      	mov	r2, r1
 8004b12:	701a      	strb	r2, [r3, #0]
				for(int j =0;j<8;j++)
 8004b14:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8004b18:	3301      	adds	r3, #1
 8004b1a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8004b1e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8004b22:	2b07      	cmp	r3, #7
 8004b24:	dde0      	ble.n	8004ae8 <Display_Print_Matrice+0x1108>
				device->Shift[i] = 5;
 8004b26:	f507 73b4 	add.w	r3, r7, #360	; 0x168
 8004b2a:	f5a3 73ae 	sub.w	r3, r3, #348	; 0x15c
 8004b2e:	681a      	ldr	r2, [r3, #0]
 8004b30:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 8004b34:	4413      	add	r3, r2
 8004b36:	3355      	adds	r3, #85	; 0x55
 8004b38:	2205      	movs	r2, #5
 8004b3a:	701a      	strb	r2, [r3, #0]
				continue;
 8004b3c:	f001 b9f9 	b.w	8005f32 <Display_Print_Matrice+0x2552>
				break;
 8004b40:	bf00      	nop
			break;
 8004b42:	f001 ba09 	b.w	8005f58 <Display_Print_Matrice+0x2578>
				device->Size_2 = strlen(print_data);
 8004b46:	f507 73b4 	add.w	r3, r7, #360	; 0x168
 8004b4a:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 8004b4e:	6818      	ldr	r0, [r3, #0]
 8004b50:	f7fb fb46 	bl	80001e0 <strlen>
 8004b54:	4603      	mov	r3, r0
 8004b56:	b2da      	uxtb	r2, r3
 8004b58:	f507 73b4 	add.w	r3, r7, #360	; 0x168
 8004b5c:	f5a3 73ae 	sub.w	r3, r3, #348	; 0x15c
 8004b60:	681b      	ldr	r3, [r3, #0]
 8004b62:	f883 20af 	strb.w	r2, [r3, #175]	; 0xaf
				for(int i = 0; i<device->Size_2; i++)
 8004b66:	2300      	movs	r3, #0
 8004b68:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8004b6c:	f001 b9d4 	b.w	8005f18 <Display_Print_Matrice+0x2538>
 8004b70:	2000000c 	.word	0x2000000c
					tmp = *(print_data+i);
 8004b74:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8004b78:	f507 72b4 	add.w	r2, r7, #360	; 0x168
 8004b7c:	f5a2 72b0 	sub.w	r2, r2, #352	; 0x160
 8004b80:	6812      	ldr	r2, [r2, #0]
 8004b82:	441a      	add	r2, r3
 8004b84:	f507 73b4 	add.w	r3, r7, #360	; 0x168
 8004b88:	f2a3 1351 	subw	r3, r3, #337	; 0x151
 8004b8c:	7812      	ldrb	r2, [r2, #0]
 8004b8e:	701a      	strb	r2, [r3, #0]
					switch (tmp) {
 8004b90:	f507 73b4 	add.w	r3, r7, #360	; 0x168
 8004b94:	f2a3 1351 	subw	r3, r3, #337	; 0x151
 8004b98:	781b      	ldrb	r3, [r3, #0]
 8004b9a:	2b64      	cmp	r3, #100	; 0x64
 8004b9c:	f201 81b5 	bhi.w	8005f0a <Display_Print_Matrice+0x252a>
 8004ba0:	a201      	add	r2, pc, #4	; (adr r2, 8004ba8 <Display_Print_Matrice+0x11c8>)
 8004ba2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004ba6:	bf00      	nop
 8004ba8:	08005f0b 	.word	0x08005f0b
 8004bac:	08005f0b 	.word	0x08005f0b
 8004bb0:	08005f0b 	.word	0x08005f0b
 8004bb4:	08005f0b 	.word	0x08005f0b
 8004bb8:	08005f0b 	.word	0x08005f0b
 8004bbc:	08005f0b 	.word	0x08005f0b
 8004bc0:	08005f0b 	.word	0x08005f0b
 8004bc4:	08005f0b 	.word	0x08005f0b
 8004bc8:	08005f0b 	.word	0x08005f0b
 8004bcc:	08005f0b 	.word	0x08005f0b
 8004bd0:	08005f0b 	.word	0x08005f0b
 8004bd4:	08005f0b 	.word	0x08005f0b
 8004bd8:	08005f0b 	.word	0x08005f0b
 8004bdc:	08005f0b 	.word	0x08005f0b
 8004be0:	08005f0b 	.word	0x08005f0b
 8004be4:	08005f0b 	.word	0x08005f0b
 8004be8:	08005f0b 	.word	0x08005f0b
 8004bec:	08005f0b 	.word	0x08005f0b
 8004bf0:	08005f0b 	.word	0x08005f0b
 8004bf4:	08005f0b 	.word	0x08005f0b
 8004bf8:	08005f0b 	.word	0x08005f0b
 8004bfc:	08005f0b 	.word	0x08005f0b
 8004c00:	08005f0b 	.word	0x08005f0b
 8004c04:	08005f0b 	.word	0x08005f0b
 8004c08:	08005f0b 	.word	0x08005f0b
 8004c0c:	08005f0b 	.word	0x08005f0b
 8004c10:	08005f0b 	.word	0x08005f0b
 8004c14:	08005f0b 	.word	0x08005f0b
 8004c18:	08005f0b 	.word	0x08005f0b
 8004c1c:	08005f0b 	.word	0x08005f0b
 8004c20:	08005f0b 	.word	0x08005f0b
 8004c24:	08005f0b 	.word	0x08005f0b
 8004c28:	08005d85 	.word	0x08005d85
 8004c2c:	08005f0b 	.word	0x08005f0b
 8004c30:	08005f0b 	.word	0x08005f0b
 8004c34:	08005f0b 	.word	0x08005f0b
 8004c38:	08005f0b 	.word	0x08005f0b
 8004c3c:	08005e89 	.word	0x08005e89
 8004c40:	08005f0b 	.word	0x08005f0b
 8004c44:	08005f0b 	.word	0x08005f0b
 8004c48:	08005f0b 	.word	0x08005f0b
 8004c4c:	08005f0b 	.word	0x08005f0b
 8004c50:	08005f0b 	.word	0x08005f0b
 8004c54:	08005f0b 	.word	0x08005f0b
 8004c58:	08005f0b 	.word	0x08005f0b
 8004c5c:	08005f0b 	.word	0x08005f0b
 8004c60:	08005c7b 	.word	0x08005c7b
 8004c64:	08005f0b 	.word	0x08005f0b
 8004c68:	08004d3d 	.word	0x08004d3d
 8004c6c:	08004d99 	.word	0x08004d99
 8004c70:	08004df7 	.word	0x08004df7
 8004c74:	08004e55 	.word	0x08004e55
 8004c78:	08004eb3 	.word	0x08004eb3
 8004c7c:	08004f11 	.word	0x08004f11
 8004c80:	08004f6f 	.word	0x08004f6f
 8004c84:	08004fcd 	.word	0x08004fcd
 8004c88:	0800502b 	.word	0x0800502b
 8004c8c:	08005089 	.word	0x08005089
 8004c90:	08005cfd 	.word	0x08005cfd
 8004c94:	08005f0b 	.word	0x08005f0b
 8004c98:	08005f0b 	.word	0x08005f0b
 8004c9c:	08005f0b 	.word	0x08005f0b
 8004ca0:	08005f0b 	.word	0x08005f0b
 8004ca4:	08005f0b 	.word	0x08005f0b
 8004ca8:	08005f0b 	.word	0x08005f0b
 8004cac:	080050eb 	.word	0x080050eb
 8004cb0:	08005149 	.word	0x08005149
 8004cb4:	080051a7 	.word	0x080051a7
 8004cb8:	08005205 	.word	0x08005205
 8004cbc:	08005263 	.word	0x08005263
 8004cc0:	080052c1 	.word	0x080052c1
 8004cc4:	08005313 	.word	0x08005313
 8004cc8:	08005365 	.word	0x08005365
 8004ccc:	080053b7 	.word	0x080053b7
 8004cd0:	0800540d 	.word	0x0800540d
 8004cd4:	0800545f 	.word	0x0800545f
 8004cd8:	080054e1 	.word	0x080054e1
 8004cdc:	08005563 	.word	0x08005563
 8004ce0:	080055e5 	.word	0x080055e5
 8004ce4:	08005667 	.word	0x08005667
 8004ce8:	080056e9 	.word	0x080056e9
 8004cec:	0800576f 	.word	0x0800576f
 8004cf0:	080057ef 	.word	0x080057ef
 8004cf4:	0800586f 	.word	0x0800586f
 8004cf8:	080058ef 	.word	0x080058ef
 8004cfc:	0800596f 	.word	0x0800596f
 8004d00:	080059ef 	.word	0x080059ef
 8004d04:	08005a73 	.word	0x08005a73
 8004d08:	08005af5 	.word	0x08005af5
 8004d0c:	08005b77 	.word	0x08005b77
 8004d10:	08005bf9 	.word	0x08005bf9
 8004d14:	08005f0b 	.word	0x08005f0b
 8004d18:	08005f0b 	.word	0x08005f0b
 8004d1c:	08005f0b 	.word	0x08005f0b
 8004d20:	08005f0b 	.word	0x08005f0b
 8004d24:	08005f0b 	.word	0x08005f0b
 8004d28:	08005f0b 	.word	0x08005f0b
 8004d2c:	08005f0b 	.word	0x08005f0b
 8004d30:	08005f0b 	.word	0x08005f0b
 8004d34:	08005f0b 	.word	0x08005f0b
 8004d38:	08005e07 	.word	0x08005e07
						for(int j =0;j<8;j++)
 8004d3c:	2300      	movs	r3, #0
 8004d3e:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8004d42:	e018      	b.n	8004d76 <Display_Print_Matrice+0x1396>
							device->Raw_2[i][j] = LETTERS[0][j];
 8004d44:	4ad2      	ldr	r2, [pc, #840]	; (8005090 <Display_Print_Matrice+0x16b0>)
 8004d46:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8004d4a:	4413      	add	r3, r2
 8004d4c:	7819      	ldrb	r1, [r3, #0]
 8004d4e:	f507 73b4 	add.w	r3, r7, #360	; 0x168
 8004d52:	f5a3 73ae 	sub.w	r3, r3, #348	; 0x15c
 8004d56:	681a      	ldr	r2, [r3, #0]
 8004d58:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8004d5c:	00db      	lsls	r3, r3, #3
 8004d5e:	441a      	add	r2, r3
 8004d60:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8004d64:	4413      	add	r3, r2
 8004d66:	335f      	adds	r3, #95	; 0x5f
 8004d68:	460a      	mov	r2, r1
 8004d6a:	701a      	strb	r2, [r3, #0]
						for(int j =0;j<8;j++)
 8004d6c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8004d70:	3301      	adds	r3, #1
 8004d72:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8004d76:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8004d7a:	2b07      	cmp	r3, #7
 8004d7c:	dde2      	ble.n	8004d44 <Display_Print_Matrice+0x1364>
						device->Shift_2[i] = 4;
 8004d7e:	f507 73b4 	add.w	r3, r7, #360	; 0x168
 8004d82:	f5a3 73ae 	sub.w	r3, r3, #348	; 0x15c
 8004d86:	681a      	ldr	r2, [r3, #0]
 8004d88:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8004d8c:	4413      	add	r3, r2
 8004d8e:	33b0      	adds	r3, #176	; 0xb0
 8004d90:	2204      	movs	r2, #4
 8004d92:	701a      	strb	r2, [r3, #0]
						continue;
 8004d94:	f001 b8bb 	b.w	8005f0e <Display_Print_Matrice+0x252e>
						for(int j =0;j<8;j++)
 8004d98:	2300      	movs	r3, #0
 8004d9a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004d9e:	e019      	b.n	8004dd4 <Display_Print_Matrice+0x13f4>
							device->Raw_2[i][j] = LETTERS[1][j];
 8004da0:	4abb      	ldr	r2, [pc, #748]	; (8005090 <Display_Print_Matrice+0x16b0>)
 8004da2:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8004da6:	4413      	add	r3, r2
 8004da8:	3308      	adds	r3, #8
 8004daa:	7819      	ldrb	r1, [r3, #0]
 8004dac:	f507 73b4 	add.w	r3, r7, #360	; 0x168
 8004db0:	f5a3 73ae 	sub.w	r3, r3, #348	; 0x15c
 8004db4:	681a      	ldr	r2, [r3, #0]
 8004db6:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8004dba:	00db      	lsls	r3, r3, #3
 8004dbc:	441a      	add	r2, r3
 8004dbe:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8004dc2:	4413      	add	r3, r2
 8004dc4:	335f      	adds	r3, #95	; 0x5f
 8004dc6:	460a      	mov	r2, r1
 8004dc8:	701a      	strb	r2, [r3, #0]
						for(int j =0;j<8;j++)
 8004dca:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8004dce:	3301      	adds	r3, #1
 8004dd0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004dd4:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8004dd8:	2b07      	cmp	r3, #7
 8004dda:	dde1      	ble.n	8004da0 <Display_Print_Matrice+0x13c0>
						device->Shift_2[i] = 4;
 8004ddc:	f507 73b4 	add.w	r3, r7, #360	; 0x168
 8004de0:	f5a3 73ae 	sub.w	r3, r3, #348	; 0x15c
 8004de4:	681a      	ldr	r2, [r3, #0]
 8004de6:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8004dea:	4413      	add	r3, r2
 8004dec:	33b0      	adds	r3, #176	; 0xb0
 8004dee:	2204      	movs	r2, #4
 8004df0:	701a      	strb	r2, [r3, #0]
						continue;
 8004df2:	f001 b88c 	b.w	8005f0e <Display_Print_Matrice+0x252e>
						for(int j =0;j<8;j++)
 8004df6:	2300      	movs	r3, #0
 8004df8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004dfc:	e019      	b.n	8004e32 <Display_Print_Matrice+0x1452>
							device->Raw_2[i][j] = LETTERS[2][j];
 8004dfe:	4aa4      	ldr	r2, [pc, #656]	; (8005090 <Display_Print_Matrice+0x16b0>)
 8004e00:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8004e04:	4413      	add	r3, r2
 8004e06:	3310      	adds	r3, #16
 8004e08:	7819      	ldrb	r1, [r3, #0]
 8004e0a:	f507 73b4 	add.w	r3, r7, #360	; 0x168
 8004e0e:	f5a3 73ae 	sub.w	r3, r3, #348	; 0x15c
 8004e12:	681a      	ldr	r2, [r3, #0]
 8004e14:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8004e18:	00db      	lsls	r3, r3, #3
 8004e1a:	441a      	add	r2, r3
 8004e1c:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8004e20:	4413      	add	r3, r2
 8004e22:	335f      	adds	r3, #95	; 0x5f
 8004e24:	460a      	mov	r2, r1
 8004e26:	701a      	strb	r2, [r3, #0]
						for(int j =0;j<8;j++)
 8004e28:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8004e2c:	3301      	adds	r3, #1
 8004e2e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004e32:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8004e36:	2b07      	cmp	r3, #7
 8004e38:	dde1      	ble.n	8004dfe <Display_Print_Matrice+0x141e>
						device->Shift_2[i] = 5;
 8004e3a:	f507 73b4 	add.w	r3, r7, #360	; 0x168
 8004e3e:	f5a3 73ae 	sub.w	r3, r3, #348	; 0x15c
 8004e42:	681a      	ldr	r2, [r3, #0]
 8004e44:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8004e48:	4413      	add	r3, r2
 8004e4a:	33b0      	adds	r3, #176	; 0xb0
 8004e4c:	2205      	movs	r2, #5
 8004e4e:	701a      	strb	r2, [r3, #0]
						continue;
 8004e50:	f001 b85d 	b.w	8005f0e <Display_Print_Matrice+0x252e>
						for(int j =0;j<8;j++)
 8004e54:	2300      	movs	r3, #0
 8004e56:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8004e5a:	e019      	b.n	8004e90 <Display_Print_Matrice+0x14b0>
							device->Raw_2[i][j] = LETTERS[3][j];
 8004e5c:	4a8c      	ldr	r2, [pc, #560]	; (8005090 <Display_Print_Matrice+0x16b0>)
 8004e5e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8004e62:	4413      	add	r3, r2
 8004e64:	3318      	adds	r3, #24
 8004e66:	7819      	ldrb	r1, [r3, #0]
 8004e68:	f507 73b4 	add.w	r3, r7, #360	; 0x168
 8004e6c:	f5a3 73ae 	sub.w	r3, r3, #348	; 0x15c
 8004e70:	681a      	ldr	r2, [r3, #0]
 8004e72:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8004e76:	00db      	lsls	r3, r3, #3
 8004e78:	441a      	add	r2, r3
 8004e7a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8004e7e:	4413      	add	r3, r2
 8004e80:	335f      	adds	r3, #95	; 0x5f
 8004e82:	460a      	mov	r2, r1
 8004e84:	701a      	strb	r2, [r3, #0]
						for(int j =0;j<8;j++)
 8004e86:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8004e8a:	3301      	adds	r3, #1
 8004e8c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8004e90:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8004e94:	2b07      	cmp	r3, #7
 8004e96:	dde1      	ble.n	8004e5c <Display_Print_Matrice+0x147c>
						device->Shift_2[i] = 5;
 8004e98:	f507 73b4 	add.w	r3, r7, #360	; 0x168
 8004e9c:	f5a3 73ae 	sub.w	r3, r3, #348	; 0x15c
 8004ea0:	681a      	ldr	r2, [r3, #0]
 8004ea2:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8004ea6:	4413      	add	r3, r2
 8004ea8:	33b0      	adds	r3, #176	; 0xb0
 8004eaa:	2205      	movs	r2, #5
 8004eac:	701a      	strb	r2, [r3, #0]
						continue;
 8004eae:	f001 b82e 	b.w	8005f0e <Display_Print_Matrice+0x252e>
						for(int j =0;j<8;j++)
 8004eb2:	2300      	movs	r3, #0
 8004eb4:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8004eb8:	e019      	b.n	8004eee <Display_Print_Matrice+0x150e>
							device->Raw_2[i][j] = LETTERS[4][j];
 8004eba:	4a75      	ldr	r2, [pc, #468]	; (8005090 <Display_Print_Matrice+0x16b0>)
 8004ebc:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8004ec0:	4413      	add	r3, r2
 8004ec2:	3320      	adds	r3, #32
 8004ec4:	7819      	ldrb	r1, [r3, #0]
 8004ec6:	f507 73b4 	add.w	r3, r7, #360	; 0x168
 8004eca:	f5a3 73ae 	sub.w	r3, r3, #348	; 0x15c
 8004ece:	681a      	ldr	r2, [r3, #0]
 8004ed0:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8004ed4:	00db      	lsls	r3, r3, #3
 8004ed6:	441a      	add	r2, r3
 8004ed8:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8004edc:	4413      	add	r3, r2
 8004ede:	335f      	adds	r3, #95	; 0x5f
 8004ee0:	460a      	mov	r2, r1
 8004ee2:	701a      	strb	r2, [r3, #0]
						for(int j =0;j<8;j++)
 8004ee4:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8004ee8:	3301      	adds	r3, #1
 8004eea:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8004eee:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8004ef2:	2b07      	cmp	r3, #7
 8004ef4:	dde1      	ble.n	8004eba <Display_Print_Matrice+0x14da>
						device->Shift_2[i] = 5;
 8004ef6:	f507 73b4 	add.w	r3, r7, #360	; 0x168
 8004efa:	f5a3 73ae 	sub.w	r3, r3, #348	; 0x15c
 8004efe:	681a      	ldr	r2, [r3, #0]
 8004f00:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8004f04:	4413      	add	r3, r2
 8004f06:	33b0      	adds	r3, #176	; 0xb0
 8004f08:	2205      	movs	r2, #5
 8004f0a:	701a      	strb	r2, [r3, #0]
						continue;
 8004f0c:	f000 bfff 	b.w	8005f0e <Display_Print_Matrice+0x252e>
						for(int j =0;j<8;j++)
 8004f10:	2300      	movs	r3, #0
 8004f12:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8004f16:	e019      	b.n	8004f4c <Display_Print_Matrice+0x156c>
							device->Raw_2[i][j] = LETTERS[5][j];
 8004f18:	4a5d      	ldr	r2, [pc, #372]	; (8005090 <Display_Print_Matrice+0x16b0>)
 8004f1a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8004f1e:	4413      	add	r3, r2
 8004f20:	3328      	adds	r3, #40	; 0x28
 8004f22:	7819      	ldrb	r1, [r3, #0]
 8004f24:	f507 73b4 	add.w	r3, r7, #360	; 0x168
 8004f28:	f5a3 73ae 	sub.w	r3, r3, #348	; 0x15c
 8004f2c:	681a      	ldr	r2, [r3, #0]
 8004f2e:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8004f32:	00db      	lsls	r3, r3, #3
 8004f34:	441a      	add	r2, r3
 8004f36:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8004f3a:	4413      	add	r3, r2
 8004f3c:	335f      	adds	r3, #95	; 0x5f
 8004f3e:	460a      	mov	r2, r1
 8004f40:	701a      	strb	r2, [r3, #0]
						for(int j =0;j<8;j++)
 8004f42:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8004f46:	3301      	adds	r3, #1
 8004f48:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8004f4c:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8004f50:	2b07      	cmp	r3, #7
 8004f52:	dde1      	ble.n	8004f18 <Display_Print_Matrice+0x1538>
						device->Shift_2[i] = 5;
 8004f54:	f507 73b4 	add.w	r3, r7, #360	; 0x168
 8004f58:	f5a3 73ae 	sub.w	r3, r3, #348	; 0x15c
 8004f5c:	681a      	ldr	r2, [r3, #0]
 8004f5e:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8004f62:	4413      	add	r3, r2
 8004f64:	33b0      	adds	r3, #176	; 0xb0
 8004f66:	2205      	movs	r2, #5
 8004f68:	701a      	strb	r2, [r3, #0]
						continue;
 8004f6a:	f000 bfd0 	b.w	8005f0e <Display_Print_Matrice+0x252e>
						for(int j =0;j<8;j++)
 8004f6e:	2300      	movs	r3, #0
 8004f70:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8004f74:	e019      	b.n	8004faa <Display_Print_Matrice+0x15ca>
							device->Raw_2[i][j] = LETTERS[6][j];
 8004f76:	4a46      	ldr	r2, [pc, #280]	; (8005090 <Display_Print_Matrice+0x16b0>)
 8004f78:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8004f7c:	4413      	add	r3, r2
 8004f7e:	3330      	adds	r3, #48	; 0x30
 8004f80:	7819      	ldrb	r1, [r3, #0]
 8004f82:	f507 73b4 	add.w	r3, r7, #360	; 0x168
 8004f86:	f5a3 73ae 	sub.w	r3, r3, #348	; 0x15c
 8004f8a:	681a      	ldr	r2, [r3, #0]
 8004f8c:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8004f90:	00db      	lsls	r3, r3, #3
 8004f92:	441a      	add	r2, r3
 8004f94:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8004f98:	4413      	add	r3, r2
 8004f9a:	335f      	adds	r3, #95	; 0x5f
 8004f9c:	460a      	mov	r2, r1
 8004f9e:	701a      	strb	r2, [r3, #0]
						for(int j =0;j<8;j++)
 8004fa0:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8004fa4:	3301      	adds	r3, #1
 8004fa6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8004faa:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8004fae:	2b07      	cmp	r3, #7
 8004fb0:	dde1      	ble.n	8004f76 <Display_Print_Matrice+0x1596>
						device->Shift_2[i] = 5;
 8004fb2:	f507 73b4 	add.w	r3, r7, #360	; 0x168
 8004fb6:	f5a3 73ae 	sub.w	r3, r3, #348	; 0x15c
 8004fba:	681a      	ldr	r2, [r3, #0]
 8004fbc:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8004fc0:	4413      	add	r3, r2
 8004fc2:	33b0      	adds	r3, #176	; 0xb0
 8004fc4:	2205      	movs	r2, #5
 8004fc6:	701a      	strb	r2, [r3, #0]
						continue;
 8004fc8:	f000 bfa1 	b.w	8005f0e <Display_Print_Matrice+0x252e>
						for(int j =0;j<8;j++)
 8004fcc:	2300      	movs	r3, #0
 8004fce:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8004fd2:	e019      	b.n	8005008 <Display_Print_Matrice+0x1628>
							device->Raw_2[i][j] = LETTERS[7][j];
 8004fd4:	4a2e      	ldr	r2, [pc, #184]	; (8005090 <Display_Print_Matrice+0x16b0>)
 8004fd6:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8004fda:	4413      	add	r3, r2
 8004fdc:	3338      	adds	r3, #56	; 0x38
 8004fde:	7819      	ldrb	r1, [r3, #0]
 8004fe0:	f507 73b4 	add.w	r3, r7, #360	; 0x168
 8004fe4:	f5a3 73ae 	sub.w	r3, r3, #348	; 0x15c
 8004fe8:	681a      	ldr	r2, [r3, #0]
 8004fea:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8004fee:	00db      	lsls	r3, r3, #3
 8004ff0:	441a      	add	r2, r3
 8004ff2:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8004ff6:	4413      	add	r3, r2
 8004ff8:	335f      	adds	r3, #95	; 0x5f
 8004ffa:	460a      	mov	r2, r1
 8004ffc:	701a      	strb	r2, [r3, #0]
						for(int j =0;j<8;j++)
 8004ffe:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8005002:	3301      	adds	r3, #1
 8005004:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8005008:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800500c:	2b07      	cmp	r3, #7
 800500e:	dde1      	ble.n	8004fd4 <Display_Print_Matrice+0x15f4>
						device->Shift_2[i] = 5;
 8005010:	f507 73b4 	add.w	r3, r7, #360	; 0x168
 8005014:	f5a3 73ae 	sub.w	r3, r3, #348	; 0x15c
 8005018:	681a      	ldr	r2, [r3, #0]
 800501a:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800501e:	4413      	add	r3, r2
 8005020:	33b0      	adds	r3, #176	; 0xb0
 8005022:	2205      	movs	r2, #5
 8005024:	701a      	strb	r2, [r3, #0]
						continue;
 8005026:	f000 bf72 	b.w	8005f0e <Display_Print_Matrice+0x252e>
						for(int j =0;j<8;j++)
 800502a:	2300      	movs	r3, #0
 800502c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8005030:	e019      	b.n	8005066 <Display_Print_Matrice+0x1686>
							device->Raw_2[i][j] = LETTERS[8][j];
 8005032:	4a17      	ldr	r2, [pc, #92]	; (8005090 <Display_Print_Matrice+0x16b0>)
 8005034:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8005038:	4413      	add	r3, r2
 800503a:	3340      	adds	r3, #64	; 0x40
 800503c:	7819      	ldrb	r1, [r3, #0]
 800503e:	f507 73b4 	add.w	r3, r7, #360	; 0x168
 8005042:	f5a3 73ae 	sub.w	r3, r3, #348	; 0x15c
 8005046:	681a      	ldr	r2, [r3, #0]
 8005048:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800504c:	00db      	lsls	r3, r3, #3
 800504e:	441a      	add	r2, r3
 8005050:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8005054:	4413      	add	r3, r2
 8005056:	335f      	adds	r3, #95	; 0x5f
 8005058:	460a      	mov	r2, r1
 800505a:	701a      	strb	r2, [r3, #0]
						for(int j =0;j<8;j++)
 800505c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8005060:	3301      	adds	r3, #1
 8005062:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8005066:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800506a:	2b07      	cmp	r3, #7
 800506c:	dde1      	ble.n	8005032 <Display_Print_Matrice+0x1652>
						device->Shift_2[i] = 5;
 800506e:	f507 73b4 	add.w	r3, r7, #360	; 0x168
 8005072:	f5a3 73ae 	sub.w	r3, r3, #348	; 0x15c
 8005076:	681a      	ldr	r2, [r3, #0]
 8005078:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800507c:	4413      	add	r3, r2
 800507e:	33b0      	adds	r3, #176	; 0xb0
 8005080:	2205      	movs	r2, #5
 8005082:	701a      	strb	r2, [r3, #0]
						continue;
 8005084:	f000 bf43 	b.w	8005f0e <Display_Print_Matrice+0x252e>
						for(int j =0;j<8;j++)
 8005088:	2300      	movs	r3, #0
 800508a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800508e:	e01b      	b.n	80050c8 <Display_Print_Matrice+0x16e8>
 8005090:	2000000c 	.word	0x2000000c
							device->Raw_2[i][j] = LETTERS[9][j];
 8005094:	4ac9      	ldr	r2, [pc, #804]	; (80053bc <Display_Print_Matrice+0x19dc>)
 8005096:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800509a:	4413      	add	r3, r2
 800509c:	3348      	adds	r3, #72	; 0x48
 800509e:	7819      	ldrb	r1, [r3, #0]
 80050a0:	f507 73b4 	add.w	r3, r7, #360	; 0x168
 80050a4:	f5a3 73ae 	sub.w	r3, r3, #348	; 0x15c
 80050a8:	681a      	ldr	r2, [r3, #0]
 80050aa:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80050ae:	00db      	lsls	r3, r3, #3
 80050b0:	441a      	add	r2, r3
 80050b2:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80050b6:	4413      	add	r3, r2
 80050b8:	335f      	adds	r3, #95	; 0x5f
 80050ba:	460a      	mov	r2, r1
 80050bc:	701a      	strb	r2, [r3, #0]
						for(int j =0;j<8;j++)
 80050be:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80050c2:	3301      	adds	r3, #1
 80050c4:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80050c8:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80050cc:	2b07      	cmp	r3, #7
 80050ce:	dde1      	ble.n	8005094 <Display_Print_Matrice+0x16b4>
						device->Shift_2[i] = 5;
 80050d0:	f507 73b4 	add.w	r3, r7, #360	; 0x168
 80050d4:	f5a3 73ae 	sub.w	r3, r3, #348	; 0x15c
 80050d8:	681a      	ldr	r2, [r3, #0]
 80050da:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80050de:	4413      	add	r3, r2
 80050e0:	33b0      	adds	r3, #176	; 0xb0
 80050e2:	2205      	movs	r2, #5
 80050e4:	701a      	strb	r2, [r3, #0]
						continue;
 80050e6:	f000 bf12 	b.w	8005f0e <Display_Print_Matrice+0x252e>
						for(int j =0;j<8;j++)
 80050ea:	2300      	movs	r3, #0
 80050ec:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80050f0:	e019      	b.n	8005126 <Display_Print_Matrice+0x1746>
							device->Raw_2[i][j] = LETTERS[10][j];
 80050f2:	4ab2      	ldr	r2, [pc, #712]	; (80053bc <Display_Print_Matrice+0x19dc>)
 80050f4:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80050f8:	4413      	add	r3, r2
 80050fa:	3350      	adds	r3, #80	; 0x50
 80050fc:	7819      	ldrb	r1, [r3, #0]
 80050fe:	f507 73b4 	add.w	r3, r7, #360	; 0x168
 8005102:	f5a3 73ae 	sub.w	r3, r3, #348	; 0x15c
 8005106:	681a      	ldr	r2, [r3, #0]
 8005108:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800510c:	00db      	lsls	r3, r3, #3
 800510e:	441a      	add	r2, r3
 8005110:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8005114:	4413      	add	r3, r2
 8005116:	335f      	adds	r3, #95	; 0x5f
 8005118:	460a      	mov	r2, r1
 800511a:	701a      	strb	r2, [r3, #0]
						for(int j =0;j<8;j++)
 800511c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8005120:	3301      	adds	r3, #1
 8005122:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8005126:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800512a:	2b07      	cmp	r3, #7
 800512c:	dde1      	ble.n	80050f2 <Display_Print_Matrice+0x1712>
						device->Shift_2[i] = 5;
 800512e:	f507 73b4 	add.w	r3, r7, #360	; 0x168
 8005132:	f5a3 73ae 	sub.w	r3, r3, #348	; 0x15c
 8005136:	681a      	ldr	r2, [r3, #0]
 8005138:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800513c:	4413      	add	r3, r2
 800513e:	33b0      	adds	r3, #176	; 0xb0
 8005140:	2205      	movs	r2, #5
 8005142:	701a      	strb	r2, [r3, #0]
						continue;
 8005144:	f000 bee3 	b.w	8005f0e <Display_Print_Matrice+0x252e>
						for(int j =0;j<8;j++)
 8005148:	2300      	movs	r3, #0
 800514a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800514e:	e019      	b.n	8005184 <Display_Print_Matrice+0x17a4>
							device->Raw_2[i][j] = LETTERS[11][j];
 8005150:	4a9a      	ldr	r2, [pc, #616]	; (80053bc <Display_Print_Matrice+0x19dc>)
 8005152:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005156:	4413      	add	r3, r2
 8005158:	3358      	adds	r3, #88	; 0x58
 800515a:	7819      	ldrb	r1, [r3, #0]
 800515c:	f507 73b4 	add.w	r3, r7, #360	; 0x168
 8005160:	f5a3 73ae 	sub.w	r3, r3, #348	; 0x15c
 8005164:	681a      	ldr	r2, [r3, #0]
 8005166:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800516a:	00db      	lsls	r3, r3, #3
 800516c:	441a      	add	r2, r3
 800516e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005172:	4413      	add	r3, r2
 8005174:	335f      	adds	r3, #95	; 0x5f
 8005176:	460a      	mov	r2, r1
 8005178:	701a      	strb	r2, [r3, #0]
						for(int j =0;j<8;j++)
 800517a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800517e:	3301      	adds	r3, #1
 8005180:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8005184:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005188:	2b07      	cmp	r3, #7
 800518a:	dde1      	ble.n	8005150 <Display_Print_Matrice+0x1770>
						device->Shift_2[i] = 5;
 800518c:	f507 73b4 	add.w	r3, r7, #360	; 0x168
 8005190:	f5a3 73ae 	sub.w	r3, r3, #348	; 0x15c
 8005194:	681a      	ldr	r2, [r3, #0]
 8005196:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800519a:	4413      	add	r3, r2
 800519c:	33b0      	adds	r3, #176	; 0xb0
 800519e:	2205      	movs	r2, #5
 80051a0:	701a      	strb	r2, [r3, #0]
						continue;
 80051a2:	f000 beb4 	b.w	8005f0e <Display_Print_Matrice+0x252e>
						for(int j =0;j<8;j++)
 80051a6:	2300      	movs	r3, #0
 80051a8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80051ac:	e019      	b.n	80051e2 <Display_Print_Matrice+0x1802>
							device->Raw_2[i][j] = LETTERS[12][j];
 80051ae:	4a83      	ldr	r2, [pc, #524]	; (80053bc <Display_Print_Matrice+0x19dc>)
 80051b0:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80051b4:	4413      	add	r3, r2
 80051b6:	3360      	adds	r3, #96	; 0x60
 80051b8:	7819      	ldrb	r1, [r3, #0]
 80051ba:	f507 73b4 	add.w	r3, r7, #360	; 0x168
 80051be:	f5a3 73ae 	sub.w	r3, r3, #348	; 0x15c
 80051c2:	681a      	ldr	r2, [r3, #0]
 80051c4:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80051c8:	00db      	lsls	r3, r3, #3
 80051ca:	441a      	add	r2, r3
 80051cc:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80051d0:	4413      	add	r3, r2
 80051d2:	335f      	adds	r3, #95	; 0x5f
 80051d4:	460a      	mov	r2, r1
 80051d6:	701a      	strb	r2, [r3, #0]
						for(int j =0;j<8;j++)
 80051d8:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80051dc:	3301      	adds	r3, #1
 80051de:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80051e2:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80051e6:	2b07      	cmp	r3, #7
 80051e8:	dde1      	ble.n	80051ae <Display_Print_Matrice+0x17ce>
						device->Shift_2[i] = 5;
 80051ea:	f507 73b4 	add.w	r3, r7, #360	; 0x168
 80051ee:	f5a3 73ae 	sub.w	r3, r3, #348	; 0x15c
 80051f2:	681a      	ldr	r2, [r3, #0]
 80051f4:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80051f8:	4413      	add	r3, r2
 80051fa:	33b0      	adds	r3, #176	; 0xb0
 80051fc:	2205      	movs	r2, #5
 80051fe:	701a      	strb	r2, [r3, #0]
						continue;
 8005200:	f000 be85 	b.w	8005f0e <Display_Print_Matrice+0x252e>
						for(int j =0;j<8;j++)
 8005204:	2300      	movs	r3, #0
 8005206:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800520a:	e019      	b.n	8005240 <Display_Print_Matrice+0x1860>
							device->Raw_2[i][j] = LETTERS[13][j];
 800520c:	4a6b      	ldr	r2, [pc, #428]	; (80053bc <Display_Print_Matrice+0x19dc>)
 800520e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005212:	4413      	add	r3, r2
 8005214:	3368      	adds	r3, #104	; 0x68
 8005216:	7819      	ldrb	r1, [r3, #0]
 8005218:	f507 73b4 	add.w	r3, r7, #360	; 0x168
 800521c:	f5a3 73ae 	sub.w	r3, r3, #348	; 0x15c
 8005220:	681a      	ldr	r2, [r3, #0]
 8005222:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8005226:	00db      	lsls	r3, r3, #3
 8005228:	441a      	add	r2, r3
 800522a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800522e:	4413      	add	r3, r2
 8005230:	335f      	adds	r3, #95	; 0x5f
 8005232:	460a      	mov	r2, r1
 8005234:	701a      	strb	r2, [r3, #0]
						for(int j =0;j<8;j++)
 8005236:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800523a:	3301      	adds	r3, #1
 800523c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8005240:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005244:	2b07      	cmp	r3, #7
 8005246:	dde1      	ble.n	800520c <Display_Print_Matrice+0x182c>
						device->Shift_2[i] = 5;
 8005248:	f507 73b4 	add.w	r3, r7, #360	; 0x168
 800524c:	f5a3 73ae 	sub.w	r3, r3, #348	; 0x15c
 8005250:	681a      	ldr	r2, [r3, #0]
 8005252:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8005256:	4413      	add	r3, r2
 8005258:	33b0      	adds	r3, #176	; 0xb0
 800525a:	2205      	movs	r2, #5
 800525c:	701a      	strb	r2, [r3, #0]
						continue;
 800525e:	f000 be56 	b.w	8005f0e <Display_Print_Matrice+0x252e>
						for(int j =0;j<8;j++)
 8005262:	2300      	movs	r3, #0
 8005264:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8005268:	e019      	b.n	800529e <Display_Print_Matrice+0x18be>
							device->Raw_2[i][j] = LETTERS[14][j];
 800526a:	4a54      	ldr	r2, [pc, #336]	; (80053bc <Display_Print_Matrice+0x19dc>)
 800526c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8005270:	4413      	add	r3, r2
 8005272:	3370      	adds	r3, #112	; 0x70
 8005274:	7819      	ldrb	r1, [r3, #0]
 8005276:	f507 73b4 	add.w	r3, r7, #360	; 0x168
 800527a:	f5a3 73ae 	sub.w	r3, r3, #348	; 0x15c
 800527e:	681a      	ldr	r2, [r3, #0]
 8005280:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8005284:	00db      	lsls	r3, r3, #3
 8005286:	441a      	add	r2, r3
 8005288:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800528c:	4413      	add	r3, r2
 800528e:	335f      	adds	r3, #95	; 0x5f
 8005290:	460a      	mov	r2, r1
 8005292:	701a      	strb	r2, [r3, #0]
						for(int j =0;j<8;j++)
 8005294:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8005298:	3301      	adds	r3, #1
 800529a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800529e:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80052a2:	2b07      	cmp	r3, #7
 80052a4:	dde1      	ble.n	800526a <Display_Print_Matrice+0x188a>
						device->Shift_2[i] = 5;
 80052a6:	f507 73b4 	add.w	r3, r7, #360	; 0x168
 80052aa:	f5a3 73ae 	sub.w	r3, r3, #348	; 0x15c
 80052ae:	681a      	ldr	r2, [r3, #0]
 80052b0:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80052b4:	4413      	add	r3, r2
 80052b6:	33b0      	adds	r3, #176	; 0xb0
 80052b8:	2205      	movs	r2, #5
 80052ba:	701a      	strb	r2, [r3, #0]
						continue;
 80052bc:	f000 be27 	b.w	8005f0e <Display_Print_Matrice+0x252e>
						for(int j =0;j<8;j++)
 80052c0:	2300      	movs	r3, #0
 80052c2:	67fb      	str	r3, [r7, #124]	; 0x7c
 80052c4:	e015      	b.n	80052f2 <Display_Print_Matrice+0x1912>
							device->Raw_2[i][j] = LETTERS[15][j];
 80052c6:	4a3d      	ldr	r2, [pc, #244]	; (80053bc <Display_Print_Matrice+0x19dc>)
 80052c8:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80052ca:	4413      	add	r3, r2
 80052cc:	3378      	adds	r3, #120	; 0x78
 80052ce:	7819      	ldrb	r1, [r3, #0]
 80052d0:	f507 73b4 	add.w	r3, r7, #360	; 0x168
 80052d4:	f5a3 73ae 	sub.w	r3, r3, #348	; 0x15c
 80052d8:	681a      	ldr	r2, [r3, #0]
 80052da:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80052de:	00db      	lsls	r3, r3, #3
 80052e0:	441a      	add	r2, r3
 80052e2:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80052e4:	4413      	add	r3, r2
 80052e6:	335f      	adds	r3, #95	; 0x5f
 80052e8:	460a      	mov	r2, r1
 80052ea:	701a      	strb	r2, [r3, #0]
						for(int j =0;j<8;j++)
 80052ec:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80052ee:	3301      	adds	r3, #1
 80052f0:	67fb      	str	r3, [r7, #124]	; 0x7c
 80052f2:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80052f4:	2b07      	cmp	r3, #7
 80052f6:	dde6      	ble.n	80052c6 <Display_Print_Matrice+0x18e6>
						device->Shift_2[i] = 5;
 80052f8:	f507 73b4 	add.w	r3, r7, #360	; 0x168
 80052fc:	f5a3 73ae 	sub.w	r3, r3, #348	; 0x15c
 8005300:	681a      	ldr	r2, [r3, #0]
 8005302:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8005306:	4413      	add	r3, r2
 8005308:	33b0      	adds	r3, #176	; 0xb0
 800530a:	2205      	movs	r2, #5
 800530c:	701a      	strb	r2, [r3, #0]
						continue;
 800530e:	f000 bdfe 	b.w	8005f0e <Display_Print_Matrice+0x252e>
						for(int j =0;j<8;j++)
 8005312:	2300      	movs	r3, #0
 8005314:	67bb      	str	r3, [r7, #120]	; 0x78
 8005316:	e015      	b.n	8005344 <Display_Print_Matrice+0x1964>
							device->Raw_2[i][j] = LETTERS[16][j];
 8005318:	4a28      	ldr	r2, [pc, #160]	; (80053bc <Display_Print_Matrice+0x19dc>)
 800531a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800531c:	4413      	add	r3, r2
 800531e:	3380      	adds	r3, #128	; 0x80
 8005320:	7819      	ldrb	r1, [r3, #0]
 8005322:	f507 73b4 	add.w	r3, r7, #360	; 0x168
 8005326:	f5a3 73ae 	sub.w	r3, r3, #348	; 0x15c
 800532a:	681a      	ldr	r2, [r3, #0]
 800532c:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8005330:	00db      	lsls	r3, r3, #3
 8005332:	441a      	add	r2, r3
 8005334:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005336:	4413      	add	r3, r2
 8005338:	335f      	adds	r3, #95	; 0x5f
 800533a:	460a      	mov	r2, r1
 800533c:	701a      	strb	r2, [r3, #0]
						for(int j =0;j<8;j++)
 800533e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005340:	3301      	adds	r3, #1
 8005342:	67bb      	str	r3, [r7, #120]	; 0x78
 8005344:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005346:	2b07      	cmp	r3, #7
 8005348:	dde6      	ble.n	8005318 <Display_Print_Matrice+0x1938>
						device->Shift_2[i] = 5;
 800534a:	f507 73b4 	add.w	r3, r7, #360	; 0x168
 800534e:	f5a3 73ae 	sub.w	r3, r3, #348	; 0x15c
 8005352:	681a      	ldr	r2, [r3, #0]
 8005354:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8005358:	4413      	add	r3, r2
 800535a:	33b0      	adds	r3, #176	; 0xb0
 800535c:	2205      	movs	r2, #5
 800535e:	701a      	strb	r2, [r3, #0]
						continue;
 8005360:	f000 bdd5 	b.w	8005f0e <Display_Print_Matrice+0x252e>
						for(int j =0;j<8;j++)
 8005364:	2300      	movs	r3, #0
 8005366:	677b      	str	r3, [r7, #116]	; 0x74
 8005368:	e015      	b.n	8005396 <Display_Print_Matrice+0x19b6>
							device->Raw_2[i][j] = LETTERS[17][j];
 800536a:	4a14      	ldr	r2, [pc, #80]	; (80053bc <Display_Print_Matrice+0x19dc>)
 800536c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800536e:	4413      	add	r3, r2
 8005370:	3388      	adds	r3, #136	; 0x88
 8005372:	7819      	ldrb	r1, [r3, #0]
 8005374:	f507 73b4 	add.w	r3, r7, #360	; 0x168
 8005378:	f5a3 73ae 	sub.w	r3, r3, #348	; 0x15c
 800537c:	681a      	ldr	r2, [r3, #0]
 800537e:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8005382:	00db      	lsls	r3, r3, #3
 8005384:	441a      	add	r2, r3
 8005386:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005388:	4413      	add	r3, r2
 800538a:	335f      	adds	r3, #95	; 0x5f
 800538c:	460a      	mov	r2, r1
 800538e:	701a      	strb	r2, [r3, #0]
						for(int j =0;j<8;j++)
 8005390:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005392:	3301      	adds	r3, #1
 8005394:	677b      	str	r3, [r7, #116]	; 0x74
 8005396:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005398:	2b07      	cmp	r3, #7
 800539a:	dde6      	ble.n	800536a <Display_Print_Matrice+0x198a>
						device->Shift_2[i] = 5;
 800539c:	f507 73b4 	add.w	r3, r7, #360	; 0x168
 80053a0:	f5a3 73ae 	sub.w	r3, r3, #348	; 0x15c
 80053a4:	681a      	ldr	r2, [r3, #0]
 80053a6:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80053aa:	4413      	add	r3, r2
 80053ac:	33b0      	adds	r3, #176	; 0xb0
 80053ae:	2205      	movs	r2, #5
 80053b0:	701a      	strb	r2, [r3, #0]
						continue;
 80053b2:	f000 bdac 	b.w	8005f0e <Display_Print_Matrice+0x252e>
						for(int j =0;j<8;j++)
 80053b6:	2300      	movs	r3, #0
 80053b8:	673b      	str	r3, [r7, #112]	; 0x70
 80053ba:	e017      	b.n	80053ec <Display_Print_Matrice+0x1a0c>
 80053bc:	2000000c 	.word	0x2000000c
							device->Raw_2[i][j] = LETTERS[18][j];
 80053c0:	4acd      	ldr	r2, [pc, #820]	; (80056f8 <Display_Print_Matrice+0x1d18>)
 80053c2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80053c4:	4413      	add	r3, r2
 80053c6:	3390      	adds	r3, #144	; 0x90
 80053c8:	7819      	ldrb	r1, [r3, #0]
 80053ca:	f507 73b4 	add.w	r3, r7, #360	; 0x168
 80053ce:	f5a3 73ae 	sub.w	r3, r3, #348	; 0x15c
 80053d2:	681a      	ldr	r2, [r3, #0]
 80053d4:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80053d8:	00db      	lsls	r3, r3, #3
 80053da:	441a      	add	r2, r3
 80053dc:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80053de:	4413      	add	r3, r2
 80053e0:	335f      	adds	r3, #95	; 0x5f
 80053e2:	460a      	mov	r2, r1
 80053e4:	701a      	strb	r2, [r3, #0]
						for(int j =0;j<8;j++)
 80053e6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80053e8:	3301      	adds	r3, #1
 80053ea:	673b      	str	r3, [r7, #112]	; 0x70
 80053ec:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80053ee:	2b07      	cmp	r3, #7
 80053f0:	dde6      	ble.n	80053c0 <Display_Print_Matrice+0x19e0>
						device->Shift_2[i] = 4;
 80053f2:	f507 73b4 	add.w	r3, r7, #360	; 0x168
 80053f6:	f5a3 73ae 	sub.w	r3, r3, #348	; 0x15c
 80053fa:	681a      	ldr	r2, [r3, #0]
 80053fc:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8005400:	4413      	add	r3, r2
 8005402:	33b0      	adds	r3, #176	; 0xb0
 8005404:	2204      	movs	r2, #4
 8005406:	701a      	strb	r2, [r3, #0]
						continue;
 8005408:	f000 bd81 	b.w	8005f0e <Display_Print_Matrice+0x252e>
						for(int j =0;j<8;j++)
 800540c:	2300      	movs	r3, #0
 800540e:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005410:	e015      	b.n	800543e <Display_Print_Matrice+0x1a5e>
							device->Raw_2[i][j] = LETTERS[19][j];
 8005412:	4ab9      	ldr	r2, [pc, #740]	; (80056f8 <Display_Print_Matrice+0x1d18>)
 8005414:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005416:	4413      	add	r3, r2
 8005418:	3398      	adds	r3, #152	; 0x98
 800541a:	7819      	ldrb	r1, [r3, #0]
 800541c:	f507 73b4 	add.w	r3, r7, #360	; 0x168
 8005420:	f5a3 73ae 	sub.w	r3, r3, #348	; 0x15c
 8005424:	681a      	ldr	r2, [r3, #0]
 8005426:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800542a:	00db      	lsls	r3, r3, #3
 800542c:	441a      	add	r2, r3
 800542e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005430:	4413      	add	r3, r2
 8005432:	335f      	adds	r3, #95	; 0x5f
 8005434:	460a      	mov	r2, r1
 8005436:	701a      	strb	r2, [r3, #0]
						for(int j =0;j<8;j++)
 8005438:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800543a:	3301      	adds	r3, #1
 800543c:	66fb      	str	r3, [r7, #108]	; 0x6c
 800543e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005440:	2b07      	cmp	r3, #7
 8005442:	dde6      	ble.n	8005412 <Display_Print_Matrice+0x1a32>
						device->Shift_2[i] = 5;
 8005444:	f507 73b4 	add.w	r3, r7, #360	; 0x168
 8005448:	f5a3 73ae 	sub.w	r3, r3, #348	; 0x15c
 800544c:	681a      	ldr	r2, [r3, #0]
 800544e:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8005452:	4413      	add	r3, r2
 8005454:	33b0      	adds	r3, #176	; 0xb0
 8005456:	2205      	movs	r2, #5
 8005458:	701a      	strb	r2, [r3, #0]
						continue;
 800545a:	f000 bd58 	b.w	8005f0e <Display_Print_Matrice+0x252e>
						for(int j =0;j<8;j++)
 800545e:	f507 73b4 	add.w	r3, r7, #360	; 0x168
 8005462:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8005466:	2200      	movs	r2, #0
 8005468:	601a      	str	r2, [r3, #0]
 800546a:	e025      	b.n	80054b8 <Display_Print_Matrice+0x1ad8>
							device->Raw_2[i][j] = LETTERS[20][j];
 800546c:	4aa2      	ldr	r2, [pc, #648]	; (80056f8 <Display_Print_Matrice+0x1d18>)
 800546e:	f507 73b4 	add.w	r3, r7, #360	; 0x168
 8005472:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8005476:	681b      	ldr	r3, [r3, #0]
 8005478:	4413      	add	r3, r2
 800547a:	33a0      	adds	r3, #160	; 0xa0
 800547c:	7819      	ldrb	r1, [r3, #0]
 800547e:	f507 73b4 	add.w	r3, r7, #360	; 0x168
 8005482:	f5a3 73ae 	sub.w	r3, r3, #348	; 0x15c
 8005486:	681a      	ldr	r2, [r3, #0]
 8005488:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800548c:	00db      	lsls	r3, r3, #3
 800548e:	441a      	add	r2, r3
 8005490:	f507 73b4 	add.w	r3, r7, #360	; 0x168
 8005494:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8005498:	681b      	ldr	r3, [r3, #0]
 800549a:	4413      	add	r3, r2
 800549c:	335f      	adds	r3, #95	; 0x5f
 800549e:	460a      	mov	r2, r1
 80054a0:	701a      	strb	r2, [r3, #0]
						for(int j =0;j<8;j++)
 80054a2:	f507 73b4 	add.w	r3, r7, #360	; 0x168
 80054a6:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 80054aa:	f507 72b4 	add.w	r2, r7, #360	; 0x168
 80054ae:	f5a2 7280 	sub.w	r2, r2, #256	; 0x100
 80054b2:	6812      	ldr	r2, [r2, #0]
 80054b4:	3201      	adds	r2, #1
 80054b6:	601a      	str	r2, [r3, #0]
 80054b8:	f507 73b4 	add.w	r3, r7, #360	; 0x168
 80054bc:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 80054c0:	681b      	ldr	r3, [r3, #0]
 80054c2:	2b07      	cmp	r3, #7
 80054c4:	ddd2      	ble.n	800546c <Display_Print_Matrice+0x1a8c>
						device->Shift_2[i] = 5;
 80054c6:	f507 73b4 	add.w	r3, r7, #360	; 0x168
 80054ca:	f5a3 73ae 	sub.w	r3, r3, #348	; 0x15c
 80054ce:	681a      	ldr	r2, [r3, #0]
 80054d0:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80054d4:	4413      	add	r3, r2
 80054d6:	33b0      	adds	r3, #176	; 0xb0
 80054d8:	2205      	movs	r2, #5
 80054da:	701a      	strb	r2, [r3, #0]
						continue;
 80054dc:	f000 bd17 	b.w	8005f0e <Display_Print_Matrice+0x252e>
						for(int j =0;j<8;j++)
 80054e0:	f507 73b4 	add.w	r3, r7, #360	; 0x168
 80054e4:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80054e8:	2200      	movs	r2, #0
 80054ea:	601a      	str	r2, [r3, #0]
 80054ec:	e025      	b.n	800553a <Display_Print_Matrice+0x1b5a>
							device->Raw_2[i][j] = LETTERS[21][j];
 80054ee:	4a82      	ldr	r2, [pc, #520]	; (80056f8 <Display_Print_Matrice+0x1d18>)
 80054f0:	f507 73b4 	add.w	r3, r7, #360	; 0x168
 80054f4:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80054f8:	681b      	ldr	r3, [r3, #0]
 80054fa:	4413      	add	r3, r2
 80054fc:	33a8      	adds	r3, #168	; 0xa8
 80054fe:	7819      	ldrb	r1, [r3, #0]
 8005500:	f507 73b4 	add.w	r3, r7, #360	; 0x168
 8005504:	f5a3 73ae 	sub.w	r3, r3, #348	; 0x15c
 8005508:	681a      	ldr	r2, [r3, #0]
 800550a:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800550e:	00db      	lsls	r3, r3, #3
 8005510:	441a      	add	r2, r3
 8005512:	f507 73b4 	add.w	r3, r7, #360	; 0x168
 8005516:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800551a:	681b      	ldr	r3, [r3, #0]
 800551c:	4413      	add	r3, r2
 800551e:	335f      	adds	r3, #95	; 0x5f
 8005520:	460a      	mov	r2, r1
 8005522:	701a      	strb	r2, [r3, #0]
						for(int j =0;j<8;j++)
 8005524:	f507 73b4 	add.w	r3, r7, #360	; 0x168
 8005528:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800552c:	f507 72b4 	add.w	r2, r7, #360	; 0x168
 8005530:	f5a2 7282 	sub.w	r2, r2, #260	; 0x104
 8005534:	6812      	ldr	r2, [r2, #0]
 8005536:	3201      	adds	r2, #1
 8005538:	601a      	str	r2, [r3, #0]
 800553a:	f507 73b4 	add.w	r3, r7, #360	; 0x168
 800553e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005542:	681b      	ldr	r3, [r3, #0]
 8005544:	2b07      	cmp	r3, #7
 8005546:	ddd2      	ble.n	80054ee <Display_Print_Matrice+0x1b0e>
						device->Shift_2[i] = 6;
 8005548:	f507 73b4 	add.w	r3, r7, #360	; 0x168
 800554c:	f5a3 73ae 	sub.w	r3, r3, #348	; 0x15c
 8005550:	681a      	ldr	r2, [r3, #0]
 8005552:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8005556:	4413      	add	r3, r2
 8005558:	33b0      	adds	r3, #176	; 0xb0
 800555a:	2206      	movs	r2, #6
 800555c:	701a      	strb	r2, [r3, #0]
						continue;
 800555e:	f000 bcd6 	b.w	8005f0e <Display_Print_Matrice+0x252e>
						for(int j =0;j<8;j++)
 8005562:	f507 73b4 	add.w	r3, r7, #360	; 0x168
 8005566:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800556a:	2200      	movs	r2, #0
 800556c:	601a      	str	r2, [r3, #0]
 800556e:	e025      	b.n	80055bc <Display_Print_Matrice+0x1bdc>
							device->Raw_2[i][j] = LETTERS[22][j];
 8005570:	4a61      	ldr	r2, [pc, #388]	; (80056f8 <Display_Print_Matrice+0x1d18>)
 8005572:	f507 73b4 	add.w	r3, r7, #360	; 0x168
 8005576:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800557a:	681b      	ldr	r3, [r3, #0]
 800557c:	4413      	add	r3, r2
 800557e:	33b0      	adds	r3, #176	; 0xb0
 8005580:	7819      	ldrb	r1, [r3, #0]
 8005582:	f507 73b4 	add.w	r3, r7, #360	; 0x168
 8005586:	f5a3 73ae 	sub.w	r3, r3, #348	; 0x15c
 800558a:	681a      	ldr	r2, [r3, #0]
 800558c:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8005590:	00db      	lsls	r3, r3, #3
 8005592:	441a      	add	r2, r3
 8005594:	f507 73b4 	add.w	r3, r7, #360	; 0x168
 8005598:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800559c:	681b      	ldr	r3, [r3, #0]
 800559e:	4413      	add	r3, r2
 80055a0:	335f      	adds	r3, #95	; 0x5f
 80055a2:	460a      	mov	r2, r1
 80055a4:	701a      	strb	r2, [r3, #0]
						for(int j =0;j<8;j++)
 80055a6:	f507 73b4 	add.w	r3, r7, #360	; 0x168
 80055aa:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80055ae:	f507 72b4 	add.w	r2, r7, #360	; 0x168
 80055b2:	f5a2 7284 	sub.w	r2, r2, #264	; 0x108
 80055b6:	6812      	ldr	r2, [r2, #0]
 80055b8:	3201      	adds	r2, #1
 80055ba:	601a      	str	r2, [r3, #0]
 80055bc:	f507 73b4 	add.w	r3, r7, #360	; 0x168
 80055c0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80055c4:	681b      	ldr	r3, [r3, #0]
 80055c6:	2b07      	cmp	r3, #7
 80055c8:	ddd2      	ble.n	8005570 <Display_Print_Matrice+0x1b90>
						device->Shift_2[i] = 5;
 80055ca:	f507 73b4 	add.w	r3, r7, #360	; 0x168
 80055ce:	f5a3 73ae 	sub.w	r3, r3, #348	; 0x15c
 80055d2:	681a      	ldr	r2, [r3, #0]
 80055d4:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80055d8:	4413      	add	r3, r2
 80055da:	33b0      	adds	r3, #176	; 0xb0
 80055dc:	2205      	movs	r2, #5
 80055de:	701a      	strb	r2, [r3, #0]
						continue;
 80055e0:	f000 bc95 	b.w	8005f0e <Display_Print_Matrice+0x252e>
						for(int j =0;j<8;j++)
 80055e4:	f507 73b4 	add.w	r3, r7, #360	; 0x168
 80055e8:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80055ec:	2200      	movs	r2, #0
 80055ee:	601a      	str	r2, [r3, #0]
 80055f0:	e025      	b.n	800563e <Display_Print_Matrice+0x1c5e>
							device->Raw_2[i][j] = LETTERS[23][j];
 80055f2:	4a41      	ldr	r2, [pc, #260]	; (80056f8 <Display_Print_Matrice+0x1d18>)
 80055f4:	f507 73b4 	add.w	r3, r7, #360	; 0x168
 80055f8:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80055fc:	681b      	ldr	r3, [r3, #0]
 80055fe:	4413      	add	r3, r2
 8005600:	33b8      	adds	r3, #184	; 0xb8
 8005602:	7819      	ldrb	r1, [r3, #0]
 8005604:	f507 73b4 	add.w	r3, r7, #360	; 0x168
 8005608:	f5a3 73ae 	sub.w	r3, r3, #348	; 0x15c
 800560c:	681a      	ldr	r2, [r3, #0]
 800560e:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8005612:	00db      	lsls	r3, r3, #3
 8005614:	441a      	add	r2, r3
 8005616:	f507 73b4 	add.w	r3, r7, #360	; 0x168
 800561a:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 800561e:	681b      	ldr	r3, [r3, #0]
 8005620:	4413      	add	r3, r2
 8005622:	335f      	adds	r3, #95	; 0x5f
 8005624:	460a      	mov	r2, r1
 8005626:	701a      	strb	r2, [r3, #0]
						for(int j =0;j<8;j++)
 8005628:	f507 73b4 	add.w	r3, r7, #360	; 0x168
 800562c:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8005630:	f507 72b4 	add.w	r2, r7, #360	; 0x168
 8005634:	f5a2 7286 	sub.w	r2, r2, #268	; 0x10c
 8005638:	6812      	ldr	r2, [r2, #0]
 800563a:	3201      	adds	r2, #1
 800563c:	601a      	str	r2, [r3, #0]
 800563e:	f507 73b4 	add.w	r3, r7, #360	; 0x168
 8005642:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8005646:	681b      	ldr	r3, [r3, #0]
 8005648:	2b07      	cmp	r3, #7
 800564a:	ddd2      	ble.n	80055f2 <Display_Print_Matrice+0x1c12>
						device->Shift_2[i] = 5;
 800564c:	f507 73b4 	add.w	r3, r7, #360	; 0x168
 8005650:	f5a3 73ae 	sub.w	r3, r3, #348	; 0x15c
 8005654:	681a      	ldr	r2, [r3, #0]
 8005656:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800565a:	4413      	add	r3, r2
 800565c:	33b0      	adds	r3, #176	; 0xb0
 800565e:	2205      	movs	r2, #5
 8005660:	701a      	strb	r2, [r3, #0]
						continue;
 8005662:	f000 bc54 	b.w	8005f0e <Display_Print_Matrice+0x252e>
						for(int j =0;j<8;j++)
 8005666:	f507 73b4 	add.w	r3, r7, #360	; 0x168
 800566a:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 800566e:	2200      	movs	r2, #0
 8005670:	601a      	str	r2, [r3, #0]
 8005672:	e025      	b.n	80056c0 <Display_Print_Matrice+0x1ce0>
							device->Raw_2[i][j] = LETTERS[24][j];
 8005674:	4a20      	ldr	r2, [pc, #128]	; (80056f8 <Display_Print_Matrice+0x1d18>)
 8005676:	f507 73b4 	add.w	r3, r7, #360	; 0x168
 800567a:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 800567e:	681b      	ldr	r3, [r3, #0]
 8005680:	4413      	add	r3, r2
 8005682:	33c0      	adds	r3, #192	; 0xc0
 8005684:	7819      	ldrb	r1, [r3, #0]
 8005686:	f507 73b4 	add.w	r3, r7, #360	; 0x168
 800568a:	f5a3 73ae 	sub.w	r3, r3, #348	; 0x15c
 800568e:	681a      	ldr	r2, [r3, #0]
 8005690:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8005694:	00db      	lsls	r3, r3, #3
 8005696:	441a      	add	r2, r3
 8005698:	f507 73b4 	add.w	r3, r7, #360	; 0x168
 800569c:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 80056a0:	681b      	ldr	r3, [r3, #0]
 80056a2:	4413      	add	r3, r2
 80056a4:	335f      	adds	r3, #95	; 0x5f
 80056a6:	460a      	mov	r2, r1
 80056a8:	701a      	strb	r2, [r3, #0]
						for(int j =0;j<8;j++)
 80056aa:	f507 73b4 	add.w	r3, r7, #360	; 0x168
 80056ae:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 80056b2:	f507 72b4 	add.w	r2, r7, #360	; 0x168
 80056b6:	f5a2 7288 	sub.w	r2, r2, #272	; 0x110
 80056ba:	6812      	ldr	r2, [r2, #0]
 80056bc:	3201      	adds	r2, #1
 80056be:	601a      	str	r2, [r3, #0]
 80056c0:	f507 73b4 	add.w	r3, r7, #360	; 0x168
 80056c4:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 80056c8:	681b      	ldr	r3, [r3, #0]
 80056ca:	2b07      	cmp	r3, #7
 80056cc:	ddd2      	ble.n	8005674 <Display_Print_Matrice+0x1c94>
						device->Shift_2[i] = 5;
 80056ce:	f507 73b4 	add.w	r3, r7, #360	; 0x168
 80056d2:	f5a3 73ae 	sub.w	r3, r3, #348	; 0x15c
 80056d6:	681a      	ldr	r2, [r3, #0]
 80056d8:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80056dc:	4413      	add	r3, r2
 80056de:	33b0      	adds	r3, #176	; 0xb0
 80056e0:	2205      	movs	r2, #5
 80056e2:	701a      	strb	r2, [r3, #0]
						continue;
 80056e4:	f000 bc13 	b.w	8005f0e <Display_Print_Matrice+0x252e>
						for(int j =0;j<8;j++)
 80056e8:	f507 73b4 	add.w	r3, r7, #360	; 0x168
 80056ec:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 80056f0:	2200      	movs	r2, #0
 80056f2:	601a      	str	r2, [r3, #0]
 80056f4:	e028      	b.n	8005748 <Display_Print_Matrice+0x1d68>
 80056f6:	bf00      	nop
 80056f8:	2000000c 	.word	0x2000000c
							device->Raw_2[i][j] = LETTERS[25][j];
 80056fc:	4abf      	ldr	r2, [pc, #764]	; (80059fc <Display_Print_Matrice+0x201c>)
 80056fe:	f507 73b4 	add.w	r3, r7, #360	; 0x168
 8005702:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8005706:	681b      	ldr	r3, [r3, #0]
 8005708:	4413      	add	r3, r2
 800570a:	33c8      	adds	r3, #200	; 0xc8
 800570c:	7819      	ldrb	r1, [r3, #0]
 800570e:	f507 73b4 	add.w	r3, r7, #360	; 0x168
 8005712:	f5a3 73ae 	sub.w	r3, r3, #348	; 0x15c
 8005716:	681a      	ldr	r2, [r3, #0]
 8005718:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800571c:	00db      	lsls	r3, r3, #3
 800571e:	441a      	add	r2, r3
 8005720:	f507 73b4 	add.w	r3, r7, #360	; 0x168
 8005724:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8005728:	681b      	ldr	r3, [r3, #0]
 800572a:	4413      	add	r3, r2
 800572c:	335f      	adds	r3, #95	; 0x5f
 800572e:	460a      	mov	r2, r1
 8005730:	701a      	strb	r2, [r3, #0]
						for(int j =0;j<8;j++)
 8005732:	f507 73b4 	add.w	r3, r7, #360	; 0x168
 8005736:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 800573a:	f507 72b4 	add.w	r2, r7, #360	; 0x168
 800573e:	f5a2 728a 	sub.w	r2, r2, #276	; 0x114
 8005742:	6812      	ldr	r2, [r2, #0]
 8005744:	3201      	adds	r2, #1
 8005746:	601a      	str	r2, [r3, #0]
 8005748:	f507 73b4 	add.w	r3, r7, #360	; 0x168
 800574c:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8005750:	681b      	ldr	r3, [r3, #0]
 8005752:	2b07      	cmp	r3, #7
 8005754:	ddd2      	ble.n	80056fc <Display_Print_Matrice+0x1d1c>
						device->Shift_2[i] = 5;
 8005756:	f507 73b4 	add.w	r3, r7, #360	; 0x168
 800575a:	f5a3 73ae 	sub.w	r3, r3, #348	; 0x15c
 800575e:	681a      	ldr	r2, [r3, #0]
 8005760:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8005764:	4413      	add	r3, r2
 8005766:	33b0      	adds	r3, #176	; 0xb0
 8005768:	2205      	movs	r2, #5
 800576a:	701a      	strb	r2, [r3, #0]
						continue;
 800576c:	e3cf      	b.n	8005f0e <Display_Print_Matrice+0x252e>
						for(int j =0;j<8;j++)
 800576e:	f507 73b4 	add.w	r3, r7, #360	; 0x168
 8005772:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8005776:	2200      	movs	r2, #0
 8005778:	601a      	str	r2, [r3, #0]
 800577a:	e025      	b.n	80057c8 <Display_Print_Matrice+0x1de8>
							device->Raw_2[i][j] = LETTERS[26][j];
 800577c:	4a9f      	ldr	r2, [pc, #636]	; (80059fc <Display_Print_Matrice+0x201c>)
 800577e:	f507 73b4 	add.w	r3, r7, #360	; 0x168
 8005782:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8005786:	681b      	ldr	r3, [r3, #0]
 8005788:	4413      	add	r3, r2
 800578a:	33d0      	adds	r3, #208	; 0xd0
 800578c:	7819      	ldrb	r1, [r3, #0]
 800578e:	f507 73b4 	add.w	r3, r7, #360	; 0x168
 8005792:	f5a3 73ae 	sub.w	r3, r3, #348	; 0x15c
 8005796:	681a      	ldr	r2, [r3, #0]
 8005798:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800579c:	00db      	lsls	r3, r3, #3
 800579e:	441a      	add	r2, r3
 80057a0:	f507 73b4 	add.w	r3, r7, #360	; 0x168
 80057a4:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 80057a8:	681b      	ldr	r3, [r3, #0]
 80057aa:	4413      	add	r3, r2
 80057ac:	335f      	adds	r3, #95	; 0x5f
 80057ae:	460a      	mov	r2, r1
 80057b0:	701a      	strb	r2, [r3, #0]
						for(int j =0;j<8;j++)
 80057b2:	f507 73b4 	add.w	r3, r7, #360	; 0x168
 80057b6:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 80057ba:	f507 72b4 	add.w	r2, r7, #360	; 0x168
 80057be:	f5a2 728c 	sub.w	r2, r2, #280	; 0x118
 80057c2:	6812      	ldr	r2, [r2, #0]
 80057c4:	3201      	adds	r2, #1
 80057c6:	601a      	str	r2, [r3, #0]
 80057c8:	f507 73b4 	add.w	r3, r7, #360	; 0x168
 80057cc:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 80057d0:	681b      	ldr	r3, [r3, #0]
 80057d2:	2b07      	cmp	r3, #7
 80057d4:	ddd2      	ble.n	800577c <Display_Print_Matrice+0x1d9c>
						device->Shift_2[i] = 5;
 80057d6:	f507 73b4 	add.w	r3, r7, #360	; 0x168
 80057da:	f5a3 73ae 	sub.w	r3, r3, #348	; 0x15c
 80057de:	681a      	ldr	r2, [r3, #0]
 80057e0:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80057e4:	4413      	add	r3, r2
 80057e6:	33b0      	adds	r3, #176	; 0xb0
 80057e8:	2205      	movs	r2, #5
 80057ea:	701a      	strb	r2, [r3, #0]
						continue;
 80057ec:	e38f      	b.n	8005f0e <Display_Print_Matrice+0x252e>
						for(int j =0;j<8;j++)
 80057ee:	f507 73b4 	add.w	r3, r7, #360	; 0x168
 80057f2:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 80057f6:	2200      	movs	r2, #0
 80057f8:	601a      	str	r2, [r3, #0]
 80057fa:	e025      	b.n	8005848 <Display_Print_Matrice+0x1e68>
							device->Raw_2[i][j] = LETTERS[27][j];
 80057fc:	4a7f      	ldr	r2, [pc, #508]	; (80059fc <Display_Print_Matrice+0x201c>)
 80057fe:	f507 73b4 	add.w	r3, r7, #360	; 0x168
 8005802:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8005806:	681b      	ldr	r3, [r3, #0]
 8005808:	4413      	add	r3, r2
 800580a:	33d8      	adds	r3, #216	; 0xd8
 800580c:	7819      	ldrb	r1, [r3, #0]
 800580e:	f507 73b4 	add.w	r3, r7, #360	; 0x168
 8005812:	f5a3 73ae 	sub.w	r3, r3, #348	; 0x15c
 8005816:	681a      	ldr	r2, [r3, #0]
 8005818:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800581c:	00db      	lsls	r3, r3, #3
 800581e:	441a      	add	r2, r3
 8005820:	f507 73b4 	add.w	r3, r7, #360	; 0x168
 8005824:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8005828:	681b      	ldr	r3, [r3, #0]
 800582a:	4413      	add	r3, r2
 800582c:	335f      	adds	r3, #95	; 0x5f
 800582e:	460a      	mov	r2, r1
 8005830:	701a      	strb	r2, [r3, #0]
						for(int j =0;j<8;j++)
 8005832:	f507 73b4 	add.w	r3, r7, #360	; 0x168
 8005836:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 800583a:	f507 72b4 	add.w	r2, r7, #360	; 0x168
 800583e:	f5a2 728e 	sub.w	r2, r2, #284	; 0x11c
 8005842:	6812      	ldr	r2, [r2, #0]
 8005844:	3201      	adds	r2, #1
 8005846:	601a      	str	r2, [r3, #0]
 8005848:	f507 73b4 	add.w	r3, r7, #360	; 0x168
 800584c:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8005850:	681b      	ldr	r3, [r3, #0]
 8005852:	2b07      	cmp	r3, #7
 8005854:	ddd2      	ble.n	80057fc <Display_Print_Matrice+0x1e1c>
						device->Shift_2[i] = 5;
 8005856:	f507 73b4 	add.w	r3, r7, #360	; 0x168
 800585a:	f5a3 73ae 	sub.w	r3, r3, #348	; 0x15c
 800585e:	681a      	ldr	r2, [r3, #0]
 8005860:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8005864:	4413      	add	r3, r2
 8005866:	33b0      	adds	r3, #176	; 0xb0
 8005868:	2205      	movs	r2, #5
 800586a:	701a      	strb	r2, [r3, #0]
						continue;
 800586c:	e34f      	b.n	8005f0e <Display_Print_Matrice+0x252e>
						for(int j =0;j<8;j++)
 800586e:	f507 73b4 	add.w	r3, r7, #360	; 0x168
 8005872:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8005876:	2200      	movs	r2, #0
 8005878:	601a      	str	r2, [r3, #0]
 800587a:	e025      	b.n	80058c8 <Display_Print_Matrice+0x1ee8>
							device->Raw_2[i][j] = LETTERS[28][j];
 800587c:	4a5f      	ldr	r2, [pc, #380]	; (80059fc <Display_Print_Matrice+0x201c>)
 800587e:	f507 73b4 	add.w	r3, r7, #360	; 0x168
 8005882:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8005886:	681b      	ldr	r3, [r3, #0]
 8005888:	4413      	add	r3, r2
 800588a:	33e0      	adds	r3, #224	; 0xe0
 800588c:	7819      	ldrb	r1, [r3, #0]
 800588e:	f507 73b4 	add.w	r3, r7, #360	; 0x168
 8005892:	f5a3 73ae 	sub.w	r3, r3, #348	; 0x15c
 8005896:	681a      	ldr	r2, [r3, #0]
 8005898:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800589c:	00db      	lsls	r3, r3, #3
 800589e:	441a      	add	r2, r3
 80058a0:	f507 73b4 	add.w	r3, r7, #360	; 0x168
 80058a4:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 80058a8:	681b      	ldr	r3, [r3, #0]
 80058aa:	4413      	add	r3, r2
 80058ac:	335f      	adds	r3, #95	; 0x5f
 80058ae:	460a      	mov	r2, r1
 80058b0:	701a      	strb	r2, [r3, #0]
						for(int j =0;j<8;j++)
 80058b2:	f507 73b4 	add.w	r3, r7, #360	; 0x168
 80058b6:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 80058ba:	f507 72b4 	add.w	r2, r7, #360	; 0x168
 80058be:	f5a2 7290 	sub.w	r2, r2, #288	; 0x120
 80058c2:	6812      	ldr	r2, [r2, #0]
 80058c4:	3201      	adds	r2, #1
 80058c6:	601a      	str	r2, [r3, #0]
 80058c8:	f507 73b4 	add.w	r3, r7, #360	; 0x168
 80058cc:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 80058d0:	681b      	ldr	r3, [r3, #0]
 80058d2:	2b07      	cmp	r3, #7
 80058d4:	ddd2      	ble.n	800587c <Display_Print_Matrice+0x1e9c>
						device->Shift_2[i] = 5;
 80058d6:	f507 73b4 	add.w	r3, r7, #360	; 0x168
 80058da:	f5a3 73ae 	sub.w	r3, r3, #348	; 0x15c
 80058de:	681a      	ldr	r2, [r3, #0]
 80058e0:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80058e4:	4413      	add	r3, r2
 80058e6:	33b0      	adds	r3, #176	; 0xb0
 80058e8:	2205      	movs	r2, #5
 80058ea:	701a      	strb	r2, [r3, #0]
						continue;
 80058ec:	e30f      	b.n	8005f0e <Display_Print_Matrice+0x252e>
						for(int j =0;j<8;j++)
 80058ee:	f507 73b4 	add.w	r3, r7, #360	; 0x168
 80058f2:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 80058f6:	2200      	movs	r2, #0
 80058f8:	601a      	str	r2, [r3, #0]
 80058fa:	e025      	b.n	8005948 <Display_Print_Matrice+0x1f68>
							device->Raw_2[i][j] = LETTERS[29][j];
 80058fc:	4a3f      	ldr	r2, [pc, #252]	; (80059fc <Display_Print_Matrice+0x201c>)
 80058fe:	f507 73b4 	add.w	r3, r7, #360	; 0x168
 8005902:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8005906:	681b      	ldr	r3, [r3, #0]
 8005908:	4413      	add	r3, r2
 800590a:	33e8      	adds	r3, #232	; 0xe8
 800590c:	7819      	ldrb	r1, [r3, #0]
 800590e:	f507 73b4 	add.w	r3, r7, #360	; 0x168
 8005912:	f5a3 73ae 	sub.w	r3, r3, #348	; 0x15c
 8005916:	681a      	ldr	r2, [r3, #0]
 8005918:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800591c:	00db      	lsls	r3, r3, #3
 800591e:	441a      	add	r2, r3
 8005920:	f507 73b4 	add.w	r3, r7, #360	; 0x168
 8005924:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8005928:	681b      	ldr	r3, [r3, #0]
 800592a:	4413      	add	r3, r2
 800592c:	335f      	adds	r3, #95	; 0x5f
 800592e:	460a      	mov	r2, r1
 8005930:	701a      	strb	r2, [r3, #0]
						for(int j =0;j<8;j++)
 8005932:	f507 73b4 	add.w	r3, r7, #360	; 0x168
 8005936:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 800593a:	f507 72b4 	add.w	r2, r7, #360	; 0x168
 800593e:	f5a2 7292 	sub.w	r2, r2, #292	; 0x124
 8005942:	6812      	ldr	r2, [r2, #0]
 8005944:	3201      	adds	r2, #1
 8005946:	601a      	str	r2, [r3, #0]
 8005948:	f507 73b4 	add.w	r3, r7, #360	; 0x168
 800594c:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8005950:	681b      	ldr	r3, [r3, #0]
 8005952:	2b07      	cmp	r3, #7
 8005954:	ddd2      	ble.n	80058fc <Display_Print_Matrice+0x1f1c>
						device->Shift_2[i] = 5;
 8005956:	f507 73b4 	add.w	r3, r7, #360	; 0x168
 800595a:	f5a3 73ae 	sub.w	r3, r3, #348	; 0x15c
 800595e:	681a      	ldr	r2, [r3, #0]
 8005960:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8005964:	4413      	add	r3, r2
 8005966:	33b0      	adds	r3, #176	; 0xb0
 8005968:	2205      	movs	r2, #5
 800596a:	701a      	strb	r2, [r3, #0]
						continue;
 800596c:	e2cf      	b.n	8005f0e <Display_Print_Matrice+0x252e>
						for(int j =0;j<8;j++)
 800596e:	f507 73b4 	add.w	r3, r7, #360	; 0x168
 8005972:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8005976:	2200      	movs	r2, #0
 8005978:	601a      	str	r2, [r3, #0]
 800597a:	e025      	b.n	80059c8 <Display_Print_Matrice+0x1fe8>
							device->Raw_2[i][j] = LETTERS[30][j];
 800597c:	4a1f      	ldr	r2, [pc, #124]	; (80059fc <Display_Print_Matrice+0x201c>)
 800597e:	f507 73b4 	add.w	r3, r7, #360	; 0x168
 8005982:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8005986:	681b      	ldr	r3, [r3, #0]
 8005988:	4413      	add	r3, r2
 800598a:	33f0      	adds	r3, #240	; 0xf0
 800598c:	7819      	ldrb	r1, [r3, #0]
 800598e:	f507 73b4 	add.w	r3, r7, #360	; 0x168
 8005992:	f5a3 73ae 	sub.w	r3, r3, #348	; 0x15c
 8005996:	681a      	ldr	r2, [r3, #0]
 8005998:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800599c:	00db      	lsls	r3, r3, #3
 800599e:	441a      	add	r2, r3
 80059a0:	f507 73b4 	add.w	r3, r7, #360	; 0x168
 80059a4:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 80059a8:	681b      	ldr	r3, [r3, #0]
 80059aa:	4413      	add	r3, r2
 80059ac:	335f      	adds	r3, #95	; 0x5f
 80059ae:	460a      	mov	r2, r1
 80059b0:	701a      	strb	r2, [r3, #0]
						for(int j =0;j<8;j++)
 80059b2:	f507 73b4 	add.w	r3, r7, #360	; 0x168
 80059b6:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 80059ba:	f507 72b4 	add.w	r2, r7, #360	; 0x168
 80059be:	f5a2 7294 	sub.w	r2, r2, #296	; 0x128
 80059c2:	6812      	ldr	r2, [r2, #0]
 80059c4:	3201      	adds	r2, #1
 80059c6:	601a      	str	r2, [r3, #0]
 80059c8:	f507 73b4 	add.w	r3, r7, #360	; 0x168
 80059cc:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 80059d0:	681b      	ldr	r3, [r3, #0]
 80059d2:	2b07      	cmp	r3, #7
 80059d4:	ddd2      	ble.n	800597c <Display_Print_Matrice+0x1f9c>
						device->Shift_2[i] = 5;
 80059d6:	f507 73b4 	add.w	r3, r7, #360	; 0x168
 80059da:	f5a3 73ae 	sub.w	r3, r3, #348	; 0x15c
 80059de:	681a      	ldr	r2, [r3, #0]
 80059e0:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80059e4:	4413      	add	r3, r2
 80059e6:	33b0      	adds	r3, #176	; 0xb0
 80059e8:	2205      	movs	r2, #5
 80059ea:	701a      	strb	r2, [r3, #0]
						continue;
 80059ec:	e28f      	b.n	8005f0e <Display_Print_Matrice+0x252e>
						for(int j =0;j<8;j++)
 80059ee:	f507 73b4 	add.w	r3, r7, #360	; 0x168
 80059f2:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80059f6:	2200      	movs	r2, #0
 80059f8:	601a      	str	r2, [r3, #0]
 80059fa:	e027      	b.n	8005a4c <Display_Print_Matrice+0x206c>
 80059fc:	2000000c 	.word	0x2000000c
							device->Raw_2[i][j] = LETTERS[31][j];
 8005a00:	4ac2      	ldr	r2, [pc, #776]	; (8005d0c <Display_Print_Matrice+0x232c>)
 8005a02:	f507 73b4 	add.w	r3, r7, #360	; 0x168
 8005a06:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005a0a:	681b      	ldr	r3, [r3, #0]
 8005a0c:	4413      	add	r3, r2
 8005a0e:	33f8      	adds	r3, #248	; 0xf8
 8005a10:	7819      	ldrb	r1, [r3, #0]
 8005a12:	f507 73b4 	add.w	r3, r7, #360	; 0x168
 8005a16:	f5a3 73ae 	sub.w	r3, r3, #348	; 0x15c
 8005a1a:	681a      	ldr	r2, [r3, #0]
 8005a1c:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8005a20:	00db      	lsls	r3, r3, #3
 8005a22:	441a      	add	r2, r3
 8005a24:	f507 73b4 	add.w	r3, r7, #360	; 0x168
 8005a28:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005a2c:	681b      	ldr	r3, [r3, #0]
 8005a2e:	4413      	add	r3, r2
 8005a30:	335f      	adds	r3, #95	; 0x5f
 8005a32:	460a      	mov	r2, r1
 8005a34:	701a      	strb	r2, [r3, #0]
						for(int j =0;j<8;j++)
 8005a36:	f507 73b4 	add.w	r3, r7, #360	; 0x168
 8005a3a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005a3e:	f507 72b4 	add.w	r2, r7, #360	; 0x168
 8005a42:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 8005a46:	6812      	ldr	r2, [r2, #0]
 8005a48:	3201      	adds	r2, #1
 8005a4a:	601a      	str	r2, [r3, #0]
 8005a4c:	f507 73b4 	add.w	r3, r7, #360	; 0x168
 8005a50:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005a54:	681b      	ldr	r3, [r3, #0]
 8005a56:	2b07      	cmp	r3, #7
 8005a58:	ddd2      	ble.n	8005a00 <Display_Print_Matrice+0x2020>
						device->Shift_2[i] = 5;
 8005a5a:	f507 73b4 	add.w	r3, r7, #360	; 0x168
 8005a5e:	f5a3 73ae 	sub.w	r3, r3, #348	; 0x15c
 8005a62:	681a      	ldr	r2, [r3, #0]
 8005a64:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8005a68:	4413      	add	r3, r2
 8005a6a:	33b0      	adds	r3, #176	; 0xb0
 8005a6c:	2205      	movs	r2, #5
 8005a6e:	701a      	strb	r2, [r3, #0]
						continue;
 8005a70:	e24d      	b.n	8005f0e <Display_Print_Matrice+0x252e>
						for(int j =0;j<8;j++)
 8005a72:	f507 73b4 	add.w	r3, r7, #360	; 0x168
 8005a76:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005a7a:	2200      	movs	r2, #0
 8005a7c:	601a      	str	r2, [r3, #0]
 8005a7e:	e026      	b.n	8005ace <Display_Print_Matrice+0x20ee>
							device->Raw_2[i][j] = LETTERS[32][j];
 8005a80:	4aa2      	ldr	r2, [pc, #648]	; (8005d0c <Display_Print_Matrice+0x232c>)
 8005a82:	f507 73b4 	add.w	r3, r7, #360	; 0x168
 8005a86:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005a8a:	681b      	ldr	r3, [r3, #0]
 8005a8c:	4413      	add	r3, r2
 8005a8e:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8005a92:	7819      	ldrb	r1, [r3, #0]
 8005a94:	f507 73b4 	add.w	r3, r7, #360	; 0x168
 8005a98:	f5a3 73ae 	sub.w	r3, r3, #348	; 0x15c
 8005a9c:	681a      	ldr	r2, [r3, #0]
 8005a9e:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8005aa2:	00db      	lsls	r3, r3, #3
 8005aa4:	441a      	add	r2, r3
 8005aa6:	f507 73b4 	add.w	r3, r7, #360	; 0x168
 8005aaa:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005aae:	681b      	ldr	r3, [r3, #0]
 8005ab0:	4413      	add	r3, r2
 8005ab2:	335f      	adds	r3, #95	; 0x5f
 8005ab4:	460a      	mov	r2, r1
 8005ab6:	701a      	strb	r2, [r3, #0]
						for(int j =0;j<8;j++)
 8005ab8:	f507 73b4 	add.w	r3, r7, #360	; 0x168
 8005abc:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005ac0:	f507 72b4 	add.w	r2, r7, #360	; 0x168
 8005ac4:	f5a2 7298 	sub.w	r2, r2, #304	; 0x130
 8005ac8:	6812      	ldr	r2, [r2, #0]
 8005aca:	3201      	adds	r2, #1
 8005acc:	601a      	str	r2, [r3, #0]
 8005ace:	f507 73b4 	add.w	r3, r7, #360	; 0x168
 8005ad2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005ad6:	681b      	ldr	r3, [r3, #0]
 8005ad8:	2b07      	cmp	r3, #7
 8005ada:	ddd1      	ble.n	8005a80 <Display_Print_Matrice+0x20a0>
						device->Shift_2[i] = 5;
 8005adc:	f507 73b4 	add.w	r3, r7, #360	; 0x168
 8005ae0:	f5a3 73ae 	sub.w	r3, r3, #348	; 0x15c
 8005ae4:	681a      	ldr	r2, [r3, #0]
 8005ae6:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8005aea:	4413      	add	r3, r2
 8005aec:	33b0      	adds	r3, #176	; 0xb0
 8005aee:	2205      	movs	r2, #5
 8005af0:	701a      	strb	r2, [r3, #0]
						continue;
 8005af2:	e20c      	b.n	8005f0e <Display_Print_Matrice+0x252e>
						for(int j =0;j<8;j++)
 8005af4:	f507 73b4 	add.w	r3, r7, #360	; 0x168
 8005af8:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8005afc:	2200      	movs	r2, #0
 8005afe:	601a      	str	r2, [r3, #0]
 8005b00:	e026      	b.n	8005b50 <Display_Print_Matrice+0x2170>
							device->Raw_2[i][j] = LETTERS[33][j];
 8005b02:	4a82      	ldr	r2, [pc, #520]	; (8005d0c <Display_Print_Matrice+0x232c>)
 8005b04:	f507 73b4 	add.w	r3, r7, #360	; 0x168
 8005b08:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8005b0c:	681b      	ldr	r3, [r3, #0]
 8005b0e:	4413      	add	r3, r2
 8005b10:	f503 7384 	add.w	r3, r3, #264	; 0x108
 8005b14:	7819      	ldrb	r1, [r3, #0]
 8005b16:	f507 73b4 	add.w	r3, r7, #360	; 0x168
 8005b1a:	f5a3 73ae 	sub.w	r3, r3, #348	; 0x15c
 8005b1e:	681a      	ldr	r2, [r3, #0]
 8005b20:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8005b24:	00db      	lsls	r3, r3, #3
 8005b26:	441a      	add	r2, r3
 8005b28:	f507 73b4 	add.w	r3, r7, #360	; 0x168
 8005b2c:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8005b30:	681b      	ldr	r3, [r3, #0]
 8005b32:	4413      	add	r3, r2
 8005b34:	335f      	adds	r3, #95	; 0x5f
 8005b36:	460a      	mov	r2, r1
 8005b38:	701a      	strb	r2, [r3, #0]
						for(int j =0;j<8;j++)
 8005b3a:	f507 73b4 	add.w	r3, r7, #360	; 0x168
 8005b3e:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8005b42:	f507 72b4 	add.w	r2, r7, #360	; 0x168
 8005b46:	f5a2 729a 	sub.w	r2, r2, #308	; 0x134
 8005b4a:	6812      	ldr	r2, [r2, #0]
 8005b4c:	3201      	adds	r2, #1
 8005b4e:	601a      	str	r2, [r3, #0]
 8005b50:	f507 73b4 	add.w	r3, r7, #360	; 0x168
 8005b54:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8005b58:	681b      	ldr	r3, [r3, #0]
 8005b5a:	2b07      	cmp	r3, #7
 8005b5c:	ddd1      	ble.n	8005b02 <Display_Print_Matrice+0x2122>
						device->Shift_2[i] = 5;
 8005b5e:	f507 73b4 	add.w	r3, r7, #360	; 0x168
 8005b62:	f5a3 73ae 	sub.w	r3, r3, #348	; 0x15c
 8005b66:	681a      	ldr	r2, [r3, #0]
 8005b68:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8005b6c:	4413      	add	r3, r2
 8005b6e:	33b0      	adds	r3, #176	; 0xb0
 8005b70:	2205      	movs	r2, #5
 8005b72:	701a      	strb	r2, [r3, #0]
						continue;
 8005b74:	e1cb      	b.n	8005f0e <Display_Print_Matrice+0x252e>
						for(int j =0;j<8;j++)
 8005b76:	f507 73b4 	add.w	r3, r7, #360	; 0x168
 8005b7a:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8005b7e:	2200      	movs	r2, #0
 8005b80:	601a      	str	r2, [r3, #0]
 8005b82:	e026      	b.n	8005bd2 <Display_Print_Matrice+0x21f2>
							device->Raw_2[i][j] = LETTERS[34][j];
 8005b84:	4a61      	ldr	r2, [pc, #388]	; (8005d0c <Display_Print_Matrice+0x232c>)
 8005b86:	f507 73b4 	add.w	r3, r7, #360	; 0x168
 8005b8a:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8005b8e:	681b      	ldr	r3, [r3, #0]
 8005b90:	4413      	add	r3, r2
 8005b92:	f503 7388 	add.w	r3, r3, #272	; 0x110
 8005b96:	7819      	ldrb	r1, [r3, #0]
 8005b98:	f507 73b4 	add.w	r3, r7, #360	; 0x168
 8005b9c:	f5a3 73ae 	sub.w	r3, r3, #348	; 0x15c
 8005ba0:	681a      	ldr	r2, [r3, #0]
 8005ba2:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8005ba6:	00db      	lsls	r3, r3, #3
 8005ba8:	441a      	add	r2, r3
 8005baa:	f507 73b4 	add.w	r3, r7, #360	; 0x168
 8005bae:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8005bb2:	681b      	ldr	r3, [r3, #0]
 8005bb4:	4413      	add	r3, r2
 8005bb6:	335f      	adds	r3, #95	; 0x5f
 8005bb8:	460a      	mov	r2, r1
 8005bba:	701a      	strb	r2, [r3, #0]
						for(int j =0;j<8;j++)
 8005bbc:	f507 73b4 	add.w	r3, r7, #360	; 0x168
 8005bc0:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8005bc4:	f507 72b4 	add.w	r2, r7, #360	; 0x168
 8005bc8:	f5a2 729c 	sub.w	r2, r2, #312	; 0x138
 8005bcc:	6812      	ldr	r2, [r2, #0]
 8005bce:	3201      	adds	r2, #1
 8005bd0:	601a      	str	r2, [r3, #0]
 8005bd2:	f507 73b4 	add.w	r3, r7, #360	; 0x168
 8005bd6:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8005bda:	681b      	ldr	r3, [r3, #0]
 8005bdc:	2b07      	cmp	r3, #7
 8005bde:	ddd1      	ble.n	8005b84 <Display_Print_Matrice+0x21a4>
						device->Shift_2[i] = 5;
 8005be0:	f507 73b4 	add.w	r3, r7, #360	; 0x168
 8005be4:	f5a3 73ae 	sub.w	r3, r3, #348	; 0x15c
 8005be8:	681a      	ldr	r2, [r3, #0]
 8005bea:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8005bee:	4413      	add	r3, r2
 8005bf0:	33b0      	adds	r3, #176	; 0xb0
 8005bf2:	2205      	movs	r2, #5
 8005bf4:	701a      	strb	r2, [r3, #0]
						continue;
 8005bf6:	e18a      	b.n	8005f0e <Display_Print_Matrice+0x252e>
						for(int j =0;j<8;j++)
 8005bf8:	f507 73b4 	add.w	r3, r7, #360	; 0x168
 8005bfc:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8005c00:	2200      	movs	r2, #0
 8005c02:	601a      	str	r2, [r3, #0]
 8005c04:	e026      	b.n	8005c54 <Display_Print_Matrice+0x2274>
							device->Raw_2[i][j] = LETTERS[35][j];
 8005c06:	4a41      	ldr	r2, [pc, #260]	; (8005d0c <Display_Print_Matrice+0x232c>)
 8005c08:	f507 73b4 	add.w	r3, r7, #360	; 0x168
 8005c0c:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8005c10:	681b      	ldr	r3, [r3, #0]
 8005c12:	4413      	add	r3, r2
 8005c14:	f503 738c 	add.w	r3, r3, #280	; 0x118
 8005c18:	7819      	ldrb	r1, [r3, #0]
 8005c1a:	f507 73b4 	add.w	r3, r7, #360	; 0x168
 8005c1e:	f5a3 73ae 	sub.w	r3, r3, #348	; 0x15c
 8005c22:	681a      	ldr	r2, [r3, #0]
 8005c24:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8005c28:	00db      	lsls	r3, r3, #3
 8005c2a:	441a      	add	r2, r3
 8005c2c:	f507 73b4 	add.w	r3, r7, #360	; 0x168
 8005c30:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8005c34:	681b      	ldr	r3, [r3, #0]
 8005c36:	4413      	add	r3, r2
 8005c38:	335f      	adds	r3, #95	; 0x5f
 8005c3a:	460a      	mov	r2, r1
 8005c3c:	701a      	strb	r2, [r3, #0]
						for(int j =0;j<8;j++)
 8005c3e:	f507 73b4 	add.w	r3, r7, #360	; 0x168
 8005c42:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8005c46:	f507 72b4 	add.w	r2, r7, #360	; 0x168
 8005c4a:	f5a2 729e 	sub.w	r2, r2, #316	; 0x13c
 8005c4e:	6812      	ldr	r2, [r2, #0]
 8005c50:	3201      	adds	r2, #1
 8005c52:	601a      	str	r2, [r3, #0]
 8005c54:	f507 73b4 	add.w	r3, r7, #360	; 0x168
 8005c58:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8005c5c:	681b      	ldr	r3, [r3, #0]
 8005c5e:	2b07      	cmp	r3, #7
 8005c60:	ddd1      	ble.n	8005c06 <Display_Print_Matrice+0x2226>
						device->Shift_2[i] = 5;
 8005c62:	f507 73b4 	add.w	r3, r7, #360	; 0x168
 8005c66:	f5a3 73ae 	sub.w	r3, r3, #348	; 0x15c
 8005c6a:	681a      	ldr	r2, [r3, #0]
 8005c6c:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8005c70:	4413      	add	r3, r2
 8005c72:	33b0      	adds	r3, #176	; 0xb0
 8005c74:	2205      	movs	r2, #5
 8005c76:	701a      	strb	r2, [r3, #0]
						continue;
 8005c78:	e149      	b.n	8005f0e <Display_Print_Matrice+0x252e>
						for(int j =0;j<8;j++)
 8005c7a:	f507 73b4 	add.w	r3, r7, #360	; 0x168
 8005c7e:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8005c82:	2200      	movs	r2, #0
 8005c84:	601a      	str	r2, [r3, #0]
 8005c86:	e026      	b.n	8005cd6 <Display_Print_Matrice+0x22f6>
							device->Raw_2[i][j] = LETTERS[36][j];
 8005c88:	4a20      	ldr	r2, [pc, #128]	; (8005d0c <Display_Print_Matrice+0x232c>)
 8005c8a:	f507 73b4 	add.w	r3, r7, #360	; 0x168
 8005c8e:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8005c92:	681b      	ldr	r3, [r3, #0]
 8005c94:	4413      	add	r3, r2
 8005c96:	f503 7390 	add.w	r3, r3, #288	; 0x120
 8005c9a:	7819      	ldrb	r1, [r3, #0]
 8005c9c:	f507 73b4 	add.w	r3, r7, #360	; 0x168
 8005ca0:	f5a3 73ae 	sub.w	r3, r3, #348	; 0x15c
 8005ca4:	681a      	ldr	r2, [r3, #0]
 8005ca6:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8005caa:	00db      	lsls	r3, r3, #3
 8005cac:	441a      	add	r2, r3
 8005cae:	f507 73b4 	add.w	r3, r7, #360	; 0x168
 8005cb2:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8005cb6:	681b      	ldr	r3, [r3, #0]
 8005cb8:	4413      	add	r3, r2
 8005cba:	335f      	adds	r3, #95	; 0x5f
 8005cbc:	460a      	mov	r2, r1
 8005cbe:	701a      	strb	r2, [r3, #0]
						for(int j =0;j<8;j++)
 8005cc0:	f507 73b4 	add.w	r3, r7, #360	; 0x168
 8005cc4:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8005cc8:	f507 72b4 	add.w	r2, r7, #360	; 0x168
 8005ccc:	f5a2 72a0 	sub.w	r2, r2, #320	; 0x140
 8005cd0:	6812      	ldr	r2, [r2, #0]
 8005cd2:	3201      	adds	r2, #1
 8005cd4:	601a      	str	r2, [r3, #0]
 8005cd6:	f507 73b4 	add.w	r3, r7, #360	; 0x168
 8005cda:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8005cde:	681b      	ldr	r3, [r3, #0]
 8005ce0:	2b07      	cmp	r3, #7
 8005ce2:	ddd1      	ble.n	8005c88 <Display_Print_Matrice+0x22a8>
						device->Shift_2[i] = 2;
 8005ce4:	f507 73b4 	add.w	r3, r7, #360	; 0x168
 8005ce8:	f5a3 73ae 	sub.w	r3, r3, #348	; 0x15c
 8005cec:	681a      	ldr	r2, [r3, #0]
 8005cee:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8005cf2:	4413      	add	r3, r2
 8005cf4:	33b0      	adds	r3, #176	; 0xb0
 8005cf6:	2202      	movs	r2, #2
 8005cf8:	701a      	strb	r2, [r3, #0]
						continue;
 8005cfa:	e108      	b.n	8005f0e <Display_Print_Matrice+0x252e>
						for(int j =0;j<8;j++)
 8005cfc:	f507 73b4 	add.w	r3, r7, #360	; 0x168
 8005d00:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 8005d04:	2200      	movs	r2, #0
 8005d06:	601a      	str	r2, [r3, #0]
 8005d08:	e029      	b.n	8005d5e <Display_Print_Matrice+0x237e>
 8005d0a:	bf00      	nop
 8005d0c:	2000000c 	.word	0x2000000c
							device->Raw_2[i][j] = LETTERS[37][j];
 8005d10:	4a94      	ldr	r2, [pc, #592]	; (8005f64 <Display_Print_Matrice+0x2584>)
 8005d12:	f507 73b4 	add.w	r3, r7, #360	; 0x168
 8005d16:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 8005d1a:	681b      	ldr	r3, [r3, #0]
 8005d1c:	4413      	add	r3, r2
 8005d1e:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8005d22:	7819      	ldrb	r1, [r3, #0]
 8005d24:	f507 73b4 	add.w	r3, r7, #360	; 0x168
 8005d28:	f5a3 73ae 	sub.w	r3, r3, #348	; 0x15c
 8005d2c:	681a      	ldr	r2, [r3, #0]
 8005d2e:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8005d32:	00db      	lsls	r3, r3, #3
 8005d34:	441a      	add	r2, r3
 8005d36:	f507 73b4 	add.w	r3, r7, #360	; 0x168
 8005d3a:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 8005d3e:	681b      	ldr	r3, [r3, #0]
 8005d40:	4413      	add	r3, r2
 8005d42:	335f      	adds	r3, #95	; 0x5f
 8005d44:	460a      	mov	r2, r1
 8005d46:	701a      	strb	r2, [r3, #0]
						for(int j =0;j<8;j++)
 8005d48:	f507 73b4 	add.w	r3, r7, #360	; 0x168
 8005d4c:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 8005d50:	f507 72b4 	add.w	r2, r7, #360	; 0x168
 8005d54:	f5a2 72a2 	sub.w	r2, r2, #324	; 0x144
 8005d58:	6812      	ldr	r2, [r2, #0]
 8005d5a:	3201      	adds	r2, #1
 8005d5c:	601a      	str	r2, [r3, #0]
 8005d5e:	f507 73b4 	add.w	r3, r7, #360	; 0x168
 8005d62:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 8005d66:	681b      	ldr	r3, [r3, #0]
 8005d68:	2b07      	cmp	r3, #7
 8005d6a:	ddd1      	ble.n	8005d10 <Display_Print_Matrice+0x2330>
						device->Shift_2[i] = 2;
 8005d6c:	f507 73b4 	add.w	r3, r7, #360	; 0x168
 8005d70:	f5a3 73ae 	sub.w	r3, r3, #348	; 0x15c
 8005d74:	681a      	ldr	r2, [r3, #0]
 8005d76:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8005d7a:	4413      	add	r3, r2
 8005d7c:	33b0      	adds	r3, #176	; 0xb0
 8005d7e:	2202      	movs	r2, #2
 8005d80:	701a      	strb	r2, [r3, #0]
						continue;
 8005d82:	e0c4      	b.n	8005f0e <Display_Print_Matrice+0x252e>
						for(int j =0;j<8;j++)
 8005d84:	f507 73b4 	add.w	r3, r7, #360	; 0x168
 8005d88:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8005d8c:	2200      	movs	r2, #0
 8005d8e:	601a      	str	r2, [r3, #0]
 8005d90:	e026      	b.n	8005de0 <Display_Print_Matrice+0x2400>
							device->Raw_2[i][j] = LETTERS[38][j];
 8005d92:	4a74      	ldr	r2, [pc, #464]	; (8005f64 <Display_Print_Matrice+0x2584>)
 8005d94:	f507 73b4 	add.w	r3, r7, #360	; 0x168
 8005d98:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8005d9c:	681b      	ldr	r3, [r3, #0]
 8005d9e:	4413      	add	r3, r2
 8005da0:	f503 7398 	add.w	r3, r3, #304	; 0x130
 8005da4:	7819      	ldrb	r1, [r3, #0]
 8005da6:	f507 73b4 	add.w	r3, r7, #360	; 0x168
 8005daa:	f5a3 73ae 	sub.w	r3, r3, #348	; 0x15c
 8005dae:	681a      	ldr	r2, [r3, #0]
 8005db0:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8005db4:	00db      	lsls	r3, r3, #3
 8005db6:	441a      	add	r2, r3
 8005db8:	f507 73b4 	add.w	r3, r7, #360	; 0x168
 8005dbc:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8005dc0:	681b      	ldr	r3, [r3, #0]
 8005dc2:	4413      	add	r3, r2
 8005dc4:	335f      	adds	r3, #95	; 0x5f
 8005dc6:	460a      	mov	r2, r1
 8005dc8:	701a      	strb	r2, [r3, #0]
						for(int j =0;j<8;j++)
 8005dca:	f507 73b4 	add.w	r3, r7, #360	; 0x168
 8005dce:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8005dd2:	f507 72b4 	add.w	r2, r7, #360	; 0x168
 8005dd6:	f5a2 72a4 	sub.w	r2, r2, #328	; 0x148
 8005dda:	6812      	ldr	r2, [r2, #0]
 8005ddc:	3201      	adds	r2, #1
 8005dde:	601a      	str	r2, [r3, #0]
 8005de0:	f507 73b4 	add.w	r3, r7, #360	; 0x168
 8005de4:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8005de8:	681b      	ldr	r3, [r3, #0]
 8005dea:	2b07      	cmp	r3, #7
 8005dec:	ddd1      	ble.n	8005d92 <Display_Print_Matrice+0x23b2>
						device->Shift_2[i] = 2;
 8005dee:	f507 73b4 	add.w	r3, r7, #360	; 0x168
 8005df2:	f5a3 73ae 	sub.w	r3, r3, #348	; 0x15c
 8005df6:	681a      	ldr	r2, [r3, #0]
 8005df8:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8005dfc:	4413      	add	r3, r2
 8005dfe:	33b0      	adds	r3, #176	; 0xb0
 8005e00:	2202      	movs	r2, #2
 8005e02:	701a      	strb	r2, [r3, #0]
						continue;
 8005e04:	e083      	b.n	8005f0e <Display_Print_Matrice+0x252e>
						for(int j =0;j<8;j++)
 8005e06:	f507 73b4 	add.w	r3, r7, #360	; 0x168
 8005e0a:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8005e0e:	2200      	movs	r2, #0
 8005e10:	601a      	str	r2, [r3, #0]
 8005e12:	e026      	b.n	8005e62 <Display_Print_Matrice+0x2482>
							device->Raw_2[i][j] = LETTERS[39][j];
 8005e14:	4a53      	ldr	r2, [pc, #332]	; (8005f64 <Display_Print_Matrice+0x2584>)
 8005e16:	f507 73b4 	add.w	r3, r7, #360	; 0x168
 8005e1a:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8005e1e:	681b      	ldr	r3, [r3, #0]
 8005e20:	4413      	add	r3, r2
 8005e22:	f503 739c 	add.w	r3, r3, #312	; 0x138
 8005e26:	7819      	ldrb	r1, [r3, #0]
 8005e28:	f507 73b4 	add.w	r3, r7, #360	; 0x168
 8005e2c:	f5a3 73ae 	sub.w	r3, r3, #348	; 0x15c
 8005e30:	681a      	ldr	r2, [r3, #0]
 8005e32:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8005e36:	00db      	lsls	r3, r3, #3
 8005e38:	441a      	add	r2, r3
 8005e3a:	f507 73b4 	add.w	r3, r7, #360	; 0x168
 8005e3e:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8005e42:	681b      	ldr	r3, [r3, #0]
 8005e44:	4413      	add	r3, r2
 8005e46:	335f      	adds	r3, #95	; 0x5f
 8005e48:	460a      	mov	r2, r1
 8005e4a:	701a      	strb	r2, [r3, #0]
						for(int j =0;j<8;j++)
 8005e4c:	f507 73b4 	add.w	r3, r7, #360	; 0x168
 8005e50:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8005e54:	f507 72b4 	add.w	r2, r7, #360	; 0x168
 8005e58:	f5a2 72a6 	sub.w	r2, r2, #332	; 0x14c
 8005e5c:	6812      	ldr	r2, [r2, #0]
 8005e5e:	3201      	adds	r2, #1
 8005e60:	601a      	str	r2, [r3, #0]
 8005e62:	f507 73b4 	add.w	r3, r7, #360	; 0x168
 8005e66:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8005e6a:	681b      	ldr	r3, [r3, #0]
 8005e6c:	2b07      	cmp	r3, #7
 8005e6e:	ddd1      	ble.n	8005e14 <Display_Print_Matrice+0x2434>
						device->Shift_2[i] = 4;
 8005e70:	f507 73b4 	add.w	r3, r7, #360	; 0x168
 8005e74:	f5a3 73ae 	sub.w	r3, r3, #348	; 0x15c
 8005e78:	681a      	ldr	r2, [r3, #0]
 8005e7a:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8005e7e:	4413      	add	r3, r2
 8005e80:	33b0      	adds	r3, #176	; 0xb0
 8005e82:	2204      	movs	r2, #4
 8005e84:	701a      	strb	r2, [r3, #0]
						continue;
 8005e86:	e042      	b.n	8005f0e <Display_Print_Matrice+0x252e>
						for(int j =0;j<8;j++)
 8005e88:	f507 73b4 	add.w	r3, r7, #360	; 0x168
 8005e8c:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8005e90:	2200      	movs	r2, #0
 8005e92:	601a      	str	r2, [r3, #0]
 8005e94:	e026      	b.n	8005ee4 <Display_Print_Matrice+0x2504>
							device->Raw_2[i][j] = LETTERS[40][j];
 8005e96:	4a33      	ldr	r2, [pc, #204]	; (8005f64 <Display_Print_Matrice+0x2584>)
 8005e98:	f507 73b4 	add.w	r3, r7, #360	; 0x168
 8005e9c:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8005ea0:	681b      	ldr	r3, [r3, #0]
 8005ea2:	4413      	add	r3, r2
 8005ea4:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 8005ea8:	7819      	ldrb	r1, [r3, #0]
 8005eaa:	f507 73b4 	add.w	r3, r7, #360	; 0x168
 8005eae:	f5a3 73ae 	sub.w	r3, r3, #348	; 0x15c
 8005eb2:	681a      	ldr	r2, [r3, #0]
 8005eb4:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8005eb8:	00db      	lsls	r3, r3, #3
 8005eba:	441a      	add	r2, r3
 8005ebc:	f507 73b4 	add.w	r3, r7, #360	; 0x168
 8005ec0:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8005ec4:	681b      	ldr	r3, [r3, #0]
 8005ec6:	4413      	add	r3, r2
 8005ec8:	335f      	adds	r3, #95	; 0x5f
 8005eca:	460a      	mov	r2, r1
 8005ecc:	701a      	strb	r2, [r3, #0]
						for(int j =0;j<8;j++)
 8005ece:	f507 73b4 	add.w	r3, r7, #360	; 0x168
 8005ed2:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8005ed6:	f507 72b4 	add.w	r2, r7, #360	; 0x168
 8005eda:	f5a2 72a8 	sub.w	r2, r2, #336	; 0x150
 8005ede:	6812      	ldr	r2, [r2, #0]
 8005ee0:	3201      	adds	r2, #1
 8005ee2:	601a      	str	r2, [r3, #0]
 8005ee4:	f507 73b4 	add.w	r3, r7, #360	; 0x168
 8005ee8:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8005eec:	681b      	ldr	r3, [r3, #0]
 8005eee:	2b07      	cmp	r3, #7
 8005ef0:	ddd1      	ble.n	8005e96 <Display_Print_Matrice+0x24b6>
						device->Shift_2[i] = 5;
 8005ef2:	f507 73b4 	add.w	r3, r7, #360	; 0x168
 8005ef6:	f5a3 73ae 	sub.w	r3, r3, #348	; 0x15c
 8005efa:	681a      	ldr	r2, [r3, #0]
 8005efc:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8005f00:	4413      	add	r3, r2
 8005f02:	33b0      	adds	r3, #176	; 0xb0
 8005f04:	2205      	movs	r2, #5
 8005f06:	701a      	strb	r2, [r3, #0]
						continue;
 8005f08:	e001      	b.n	8005f0e <Display_Print_Matrice+0x252e>
						break;
 8005f0a:	bf00      	nop
					break;
 8005f0c:	e011      	b.n	8005f32 <Display_Print_Matrice+0x2552>
				for(int i = 0; i<device->Size_2; i++)
 8005f0e:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8005f12:	3301      	adds	r3, #1
 8005f14:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8005f18:	f507 73b4 	add.w	r3, r7, #360	; 0x168
 8005f1c:	f5a3 73ae 	sub.w	r3, r3, #348	; 0x15c
 8005f20:	681b      	ldr	r3, [r3, #0]
 8005f22:	f893 30af 	ldrb.w	r3, [r3, #175]	; 0xaf
 8005f26:	461a      	mov	r2, r3
 8005f28:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8005f2c:	4293      	cmp	r3, r2
 8005f2e:	f6fe ae21 	blt.w	8004b74 <Display_Print_Matrice+0x1194>
		for(int i = 0; i<device->Size; i++)
 8005f32:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 8005f36:	3301      	adds	r3, #1
 8005f38:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
 8005f3c:	f507 73b4 	add.w	r3, r7, #360	; 0x168
 8005f40:	f5a3 73ae 	sub.w	r3, r3, #348	; 0x15c
 8005f44:	681b      	ldr	r3, [r3, #0]
 8005f46:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8005f4a:	461a      	mov	r2, r3
 8005f4c:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 8005f50:	4293      	cmp	r3, r2
 8005f52:	f6fd ad78 	blt.w	8003a46 <Display_Print_Matrice+0x66>
				}

		}
	}
}
 8005f56:	bf00      	nop
 8005f58:	bf00      	nop
 8005f5a:	f507 77b4 	add.w	r7, r7, #360	; 0x168
 8005f5e:	46bd      	mov	sp, r7
 8005f60:	bd80      	pop	{r7, pc}
 8005f62:	bf00      	nop
 8005f64:	2000000c 	.word	0x2000000c

08005f68 <Display_Show_Matrice>:

//Fonction pour afficher contenu de matrice
void Display_Show_Matrice(Matrix * device,uint8_t opt)
{
 8005f68:	b580      	push	{r7, lr}
 8005f6a:	b088      	sub	sp, #32
 8005f6c:	af00      	add	r7, sp, #0
 8005f6e:	6078      	str	r0, [r7, #4]
 8005f70:	460b      	mov	r3, r1
 8005f72:	70fb      	strb	r3, [r7, #3]
	 uint8_t Commande[6]={0x00};
 8005f74:	2300      	movs	r3, #0
 8005f76:	60bb      	str	r3, [r7, #8]
 8005f78:	2300      	movs	r3, #0
 8005f7a:	81bb      	strh	r3, [r7, #12]
	 int shift = 0;
 8005f7c:	2300      	movs	r3, #0
 8005f7e:	61fb      	str	r3, [r7, #28]
	 int cpt = 0;
 8005f80:	2300      	movs	r3, #0
 8005f82:	61bb      	str	r3, [r7, #24]

	 uint32_t mask1 =0;											// Mask grand pour faire le registre des 3 matrices en entiers
 8005f84:	2300      	movs	r3, #0
 8005f86:	617b      	str	r3, [r7, #20]
	 uint8_t mask2 = 0;
 8005f88:	2300      	movs	r3, #0
 8005f8a:	73fb      	strb	r3, [r7, #15]
	 uint8_t mask3 = 0;
 8005f8c:	2300      	movs	r3, #0
 8005f8e:	73bb      	strb	r3, [r7, #14]

	 for(int j=1;j<=8;j++)
 8005f90:	2301      	movs	r3, #1
 8005f92:	613b      	str	r3, [r7, #16]
 8005f94:	e050      	b.n	8006038 <Display_Show_Matrice+0xd0>
	 {
		 	 while(cpt<device->Size)
		 	 {
		 		 mask1 += device->Raw[cpt][j-1]<<shift<<opt>>2;									//2 sert à recentrer au début de matrice
 8005f96:	693b      	ldr	r3, [r7, #16]
 8005f98:	3b01      	subs	r3, #1
 8005f9a:	6879      	ldr	r1, [r7, #4]
 8005f9c:	69ba      	ldr	r2, [r7, #24]
 8005f9e:	00d2      	lsls	r2, r2, #3
 8005fa0:	440a      	add	r2, r1
 8005fa2:	4413      	add	r3, r2
 8005fa4:	3304      	adds	r3, #4
 8005fa6:	781b      	ldrb	r3, [r3, #0]
 8005fa8:	461a      	mov	r2, r3
 8005faa:	69fb      	ldr	r3, [r7, #28]
 8005fac:	409a      	lsls	r2, r3
 8005fae:	78fb      	ldrb	r3, [r7, #3]
 8005fb0:	fa02 f303 	lsl.w	r3, r2, r3
 8005fb4:	109b      	asrs	r3, r3, #2
 8005fb6:	461a      	mov	r2, r3
 8005fb8:	697b      	ldr	r3, [r7, #20]
 8005fba:	4413      	add	r3, r2
 8005fbc:	617b      	str	r3, [r7, #20]
		 		 shift += device->Shift[cpt];
 8005fbe:	687a      	ldr	r2, [r7, #4]
 8005fc0:	69bb      	ldr	r3, [r7, #24]
 8005fc2:	4413      	add	r3, r2
 8005fc4:	3355      	adds	r3, #85	; 0x55
 8005fc6:	781b      	ldrb	r3, [r3, #0]
 8005fc8:	461a      	mov	r2, r3
 8005fca:	69fb      	ldr	r3, [r7, #28]
 8005fcc:	4413      	add	r3, r2
 8005fce:	61fb      	str	r3, [r7, #28]
		 		 cpt++;
 8005fd0:	69bb      	ldr	r3, [r7, #24]
 8005fd2:	3301      	adds	r3, #1
 8005fd4:	61bb      	str	r3, [r7, #24]
		 	 while(cpt<device->Size)
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8005fdc:	461a      	mov	r2, r3
 8005fde:	69bb      	ldr	r3, [r7, #24]
 8005fe0:	4293      	cmp	r3, r2
 8005fe2:	dbd8      	blt.n	8005f96 <Display_Show_Matrice+0x2e>
		 	 }
		 	 cpt = 0;
 8005fe4:	2300      	movs	r3, #0
 8005fe6:	61bb      	str	r3, [r7, #24]
		 	 shift = 0;
 8005fe8:	2300      	movs	r3, #0
 8005fea:	61fb      	str	r3, [r7, #28]
		 	 mask2 = mask1>>8 ;																	// décalage des 8 bits de poids forts à droite
 8005fec:	697b      	ldr	r3, [r7, #20]
 8005fee:	0a1b      	lsrs	r3, r3, #8
 8005ff0:	73fb      	strb	r3, [r7, #15]
			 mask3 = mask1>>16;																// décalage des 16 bits de poids forts à droite lors de déplacement
 8005ff2:	697b      	ldr	r3, [r7, #20]
 8005ff4:	0c1b      	lsrs	r3, r3, #16
 8005ff6:	73bb      	strb	r3, [r7, #14]

			 Commande[4] = j;
 8005ff8:	693b      	ldr	r3, [r7, #16]
 8005ffa:	b2db      	uxtb	r3, r3
 8005ffc:	733b      	strb	r3, [r7, #12]
			 Commande[5]= mask1;			//Matrice 1
 8005ffe:	697b      	ldr	r3, [r7, #20]
 8006000:	b2db      	uxtb	r3, r3
 8006002:	737b      	strb	r3, [r7, #13]

			 Commande[2] = j;
 8006004:	693b      	ldr	r3, [r7, #16]
 8006006:	b2db      	uxtb	r3, r3
 8006008:	72bb      	strb	r3, [r7, #10]
			 Commande[3]= mask2;			//Matrice 2
 800600a:	7bfb      	ldrb	r3, [r7, #15]
 800600c:	72fb      	strb	r3, [r7, #11]

			 Commande[0] = j;
 800600e:	693b      	ldr	r3, [r7, #16]
 8006010:	b2db      	uxtb	r3, r3
 8006012:	723b      	strb	r3, [r7, #8]
			 Commande[1]= mask3;			//Matrice 3
 8006014:	7bbb      	ldrb	r3, [r7, #14]
 8006016:	727b      	strb	r3, [r7, #9]

		 MAX7219_SendPackage(device, Commande,sizeof(Commande));
 8006018:	f107 0308 	add.w	r3, r7, #8
 800601c:	2206      	movs	r2, #6
 800601e:	4619      	mov	r1, r3
 8006020:	6878      	ldr	r0, [r7, #4]
 8006022:	f000 fa15 	bl	8006450 <MAX7219_SendPackage>

		 mask1=0;
 8006026:	2300      	movs	r3, #0
 8006028:	617b      	str	r3, [r7, #20]
		 mask2=0;
 800602a:	2300      	movs	r3, #0
 800602c:	73fb      	strb	r3, [r7, #15]
		 mask3=0;
 800602e:	2300      	movs	r3, #0
 8006030:	73bb      	strb	r3, [r7, #14]
	 for(int j=1;j<=8;j++)
 8006032:	693b      	ldr	r3, [r7, #16]
 8006034:	3301      	adds	r3, #1
 8006036:	613b      	str	r3, [r7, #16]
 8006038:	693b      	ldr	r3, [r7, #16]
 800603a:	2b08      	cmp	r3, #8
 800603c:	ddcb      	ble.n	8005fd6 <Display_Show_Matrice+0x6e>

	 }
}
 800603e:	bf00      	nop
 8006040:	bf00      	nop
 8006042:	3720      	adds	r7, #32
 8006044:	46bd      	mov	sp, r7
 8006046:	bd80      	pop	{r7, pc}

08006048 <Display_Reset_Data_Matrice_All>:

// Fonction pour reset les données de matrix
void Display_Reset_Data_Matrice_All(Matrix * device)
{
 8006048:	b480      	push	{r7}
 800604a:	b087      	sub	sp, #28
 800604c:	af00      	add	r7, sp, #0
 800604e:	6078      	str	r0, [r7, #4]
	uint8_t cpt = 0;
 8006050:	2300      	movs	r3, #0
 8006052:	75fb      	strb	r3, [r7, #23]

	device->Size = 0;
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	2200      	movs	r2, #0
 8006058:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
	device->Size_2 = 0;
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	2200      	movs	r2, #0
 8006060:	f883 20af 	strb.w	r2, [r3, #175]	; 0xaf

	for(int i=0;i<8;i++)
 8006064:	2300      	movs	r3, #0
 8006066:	613b      	str	r3, [r7, #16]
 8006068:	e00e      	b.n	8006088 <Display_Reset_Data_Matrice_All+0x40>
	{
		device->Shift[i] = 0;
 800606a:	687a      	ldr	r2, [r7, #4]
 800606c:	693b      	ldr	r3, [r7, #16]
 800606e:	4413      	add	r3, r2
 8006070:	3355      	adds	r3, #85	; 0x55
 8006072:	2200      	movs	r2, #0
 8006074:	701a      	strb	r2, [r3, #0]
		device->Shift_2[i] = 0;
 8006076:	687a      	ldr	r2, [r7, #4]
 8006078:	693b      	ldr	r3, [r7, #16]
 800607a:	4413      	add	r3, r2
 800607c:	33b0      	adds	r3, #176	; 0xb0
 800607e:	2200      	movs	r2, #0
 8006080:	701a      	strb	r2, [r3, #0]
	for(int i=0;i<8;i++)
 8006082:	693b      	ldr	r3, [r7, #16]
 8006084:	3301      	adds	r3, #1
 8006086:	613b      	str	r3, [r7, #16]
 8006088:	693b      	ldr	r3, [r7, #16]
 800608a:	2b07      	cmp	r3, #7
 800608c:	dded      	ble.n	800606a <Display_Reset_Data_Matrice_All+0x22>
	}


	while(cpt<10)
 800608e:	e01d      	b.n	80060cc <Display_Reset_Data_Matrice_All+0x84>
	{
		for(int j=0;j<8;j++)
 8006090:	2300      	movs	r3, #0
 8006092:	60fb      	str	r3, [r7, #12]
 8006094:	e014      	b.n	80060c0 <Display_Reset_Data_Matrice_All+0x78>
		{
			device->Raw[cpt][j]=0;
 8006096:	7dfb      	ldrb	r3, [r7, #23]
 8006098:	687a      	ldr	r2, [r7, #4]
 800609a:	00db      	lsls	r3, r3, #3
 800609c:	441a      	add	r2, r3
 800609e:	68fb      	ldr	r3, [r7, #12]
 80060a0:	4413      	add	r3, r2
 80060a2:	3304      	adds	r3, #4
 80060a4:	2200      	movs	r2, #0
 80060a6:	701a      	strb	r2, [r3, #0]
			device->Raw_2[cpt][j] =0;
 80060a8:	7dfb      	ldrb	r3, [r7, #23]
 80060aa:	687a      	ldr	r2, [r7, #4]
 80060ac:	00db      	lsls	r3, r3, #3
 80060ae:	441a      	add	r2, r3
 80060b0:	68fb      	ldr	r3, [r7, #12]
 80060b2:	4413      	add	r3, r2
 80060b4:	335f      	adds	r3, #95	; 0x5f
 80060b6:	2200      	movs	r2, #0
 80060b8:	701a      	strb	r2, [r3, #0]
		for(int j=0;j<8;j++)
 80060ba:	68fb      	ldr	r3, [r7, #12]
 80060bc:	3301      	adds	r3, #1
 80060be:	60fb      	str	r3, [r7, #12]
 80060c0:	68fb      	ldr	r3, [r7, #12]
 80060c2:	2b07      	cmp	r3, #7
 80060c4:	dde7      	ble.n	8006096 <Display_Reset_Data_Matrice_All+0x4e>
		}
		cpt++;
 80060c6:	7dfb      	ldrb	r3, [r7, #23]
 80060c8:	3301      	adds	r3, #1
 80060ca:	75fb      	strb	r3, [r7, #23]
	while(cpt<10)
 80060cc:	7dfb      	ldrb	r3, [r7, #23]
 80060ce:	2b09      	cmp	r3, #9
 80060d0:	d9de      	bls.n	8006090 <Display_Reset_Data_Matrice_All+0x48>
	}
}
 80060d2:	bf00      	nop
 80060d4:	bf00      	nop
 80060d6:	371c      	adds	r7, #28
 80060d8:	46bd      	mov	sp, r7
 80060da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060de:	4770      	bx	lr

080060e0 <Display_Change_Data_Matrice_Up>:

//Fonction pour passer afficher contenu de matrice 1 à matrice 2 en réalisant une monté par le haut
void Display_Change_Data_Matrice_Up(Matrix * device, uint8_t opt)
{
 80060e0:	b580      	push	{r7, lr}
 80060e2:	b094      	sub	sp, #80	; 0x50
 80060e4:	af00      	add	r7, sp, #0
 80060e6:	6078      	str	r0, [r7, #4]
 80060e8:	460b      	mov	r3, r1
 80060ea:	70fb      	strb	r3, [r7, #3]
	uint8_t Commande[6]={0x00};
 80060ec:	2300      	movs	r3, #0
 80060ee:	62bb      	str	r3, [r7, #40]	; 0x28
 80060f0:	2300      	movs	r3, #0
 80060f2:	85bb      	strh	r3, [r7, #44]	; 0x2c
	uint32_t tmp[8] = {0x00};
 80060f4:	f107 0308 	add.w	r3, r7, #8
 80060f8:	2220      	movs	r2, #32
 80060fa:	2100      	movs	r1, #0
 80060fc:	4618      	mov	r0, r3
 80060fe:	f000 f9eb 	bl	80064d8 <memset>

	uint8_t cpt =0;
 8006102:	2300      	movs	r3, #0
 8006104:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
	uint8_t position =8;     // Variable pour faire passer de tab à tab
 8006108:	2308      	movs	r3, #8
 800610a:	f887 304e 	strb.w	r3, [r7, #78]	; 0x4e

	uint8_t shift = 0;
 800610e:	2300      	movs	r3, #0
 8006110:	f887 304d 	strb.w	r3, [r7, #77]	; 0x4d
	uint8_t cpt_up = 0;
 8006114:	2300      	movs	r3, #0
 8006116:	f887 304c 	strb.w	r3, [r7, #76]	; 0x4c
	uint8_t position_2 = 0;
 800611a:	2300      	movs	r3, #0
 800611c:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b

	uint32_t mask1 =0;
 8006120:	2300      	movs	r3, #0
 8006122:	633b      	str	r3, [r7, #48]	; 0x30
	uint8_t mask2 = 0;
 8006124:	2300      	movs	r3, #0
 8006126:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	uint8_t mask3 = 0;
 800612a:	2300      	movs	r3, #0
 800612c:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e

	 for(int i=8;i>0;i--)	//Boucle Pour faire l'animation du balayage par le haut
 8006130:	2308      	movs	r3, #8
 8006132:	647b      	str	r3, [r7, #68]	; 0x44
 8006134:	e102      	b.n	800633c <Display_Change_Data_Matrice_Up+0x25c>
	 {

		 for(int up=0;up<8;up++) // Boucle pour remplir l'ensemble du tableau tampon
 8006136:	2300      	movs	r3, #0
 8006138:	643b      	str	r3, [r7, #64]	; 0x40
 800613a:	e04b      	b.n	80061d4 <Display_Change_Data_Matrice_Up+0xf4>
		 {
			 while(position>0) // permet de faire le passage de position -> à position-1 (voir code exemple + visuel)
			 {
				 while(cpt_up<device->Size) // on ajoute toutes les leds à activer su la matrice 26 bits + avec les décalages
				 {
					 tmp[up] += device->Raw[cpt_up][i-position]<<shift<<opt>>2; // But : Remplir pour chaque ligne l'ensemble des leds à allumer par colonne avec leur décalage
 800613c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800613e:	009b      	lsls	r3, r3, #2
 8006140:	3350      	adds	r3, #80	; 0x50
 8006142:	443b      	add	r3, r7
 8006144:	f853 3c48 	ldr.w	r3, [r3, #-72]
 8006148:	f897 104c 	ldrb.w	r1, [r7, #76]	; 0x4c
 800614c:	f897 204e 	ldrb.w	r2, [r7, #78]	; 0x4e
 8006150:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8006152:	1a82      	subs	r2, r0, r2
 8006154:	6878      	ldr	r0, [r7, #4]
 8006156:	00c9      	lsls	r1, r1, #3
 8006158:	4401      	add	r1, r0
 800615a:	440a      	add	r2, r1
 800615c:	3204      	adds	r2, #4
 800615e:	7812      	ldrb	r2, [r2, #0]
 8006160:	4611      	mov	r1, r2
 8006162:	f897 204d 	ldrb.w	r2, [r7, #77]	; 0x4d
 8006166:	4091      	lsls	r1, r2
 8006168:	78fa      	ldrb	r2, [r7, #3]
 800616a:	fa01 f202 	lsl.w	r2, r1, r2
 800616e:	1092      	asrs	r2, r2, #2
 8006170:	441a      	add	r2, r3
 8006172:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006174:	009b      	lsls	r3, r3, #2
 8006176:	3350      	adds	r3, #80	; 0x50
 8006178:	443b      	add	r3, r7
 800617a:	f843 2c48 	str.w	r2, [r3, #-72]
					 shift += device->Shift[cpt_up];
 800617e:	f897 304c 	ldrb.w	r3, [r7, #76]	; 0x4c
 8006182:	687a      	ldr	r2, [r7, #4]
 8006184:	4413      	add	r3, r2
 8006186:	f893 2055 	ldrb.w	r2, [r3, #85]	; 0x55
 800618a:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 800618e:	4413      	add	r3, r2
 8006190:	f887 304d 	strb.w	r3, [r7, #77]	; 0x4d
					 cpt_up++;
 8006194:	f897 304c 	ldrb.w	r3, [r7, #76]	; 0x4c
 8006198:	3301      	adds	r3, #1
 800619a:	f887 304c 	strb.w	r3, [r7, #76]	; 0x4c
				 while(cpt_up<device->Size) // on ajoute toutes les leds à activer su la matrice 26 bits + avec les décalages
 800619e:	687b      	ldr	r3, [r7, #4]
 80061a0:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 80061a4:	f897 204c 	ldrb.w	r2, [r7, #76]	; 0x4c
 80061a8:	429a      	cmp	r2, r3
 80061aa:	d3c7      	bcc.n	800613c <Display_Change_Data_Matrice_Up+0x5c>
				 }
				 shift = 0; // reset pour recompléter le tableau
 80061ac:	2300      	movs	r3, #0
 80061ae:	f887 304d 	strb.w	r3, [r7, #77]	; 0x4d
				 cpt_up = 0;
 80061b2:	2300      	movs	r3, #0
 80061b4:	f887 304c 	strb.w	r3, [r7, #76]	; 0x4c
				 position--;	// on passe au décalage suivant
 80061b8:	f897 304e 	ldrb.w	r3, [r7, #78]	; 0x4e
 80061bc:	3b01      	subs	r3, #1
 80061be:	f887 304e 	strb.w	r3, [r7, #78]	; 0x4e
				 break; // on repart pour venir compléter le tmp en décalage
 80061c2:	e004      	b.n	80061ce <Display_Change_Data_Matrice_Up+0xee>
			 while(position>0) // permet de faire le passage de position -> à position-1 (voir code exemple + visuel)
 80061c4:	bf00      	nop
 80061c6:	f897 304e 	ldrb.w	r3, [r7, #78]	; 0x4e
 80061ca:	2b00      	cmp	r3, #0
 80061cc:	d1e7      	bne.n	800619e <Display_Change_Data_Matrice_Up+0xbe>
		 for(int up=0;up<8;up++) // Boucle pour remplir l'ensemble du tableau tampon
 80061ce:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80061d0:	3301      	adds	r3, #1
 80061d2:	643b      	str	r3, [r7, #64]	; 0x40
 80061d4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80061d6:	2b07      	cmp	r3, #7
 80061d8:	ddf4      	ble.n	80061c4 <Display_Change_Data_Matrice_Up+0xe4>
			 }
		 }
		 position = 8;		// Reset position pour coup d'aprés
 80061da:	2308      	movs	r3, #8
 80061dc:	f887 304e 	strb.w	r3, [r7, #78]	; 0x4e
		 position_2 = 8-cpt; //Pour permettre de faire monter dans tableau tampon la data en RAW_2
 80061e0:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 80061e4:	f1c3 0308 	rsb	r3, r3, #8
 80061e8:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b

		for(int clear=0;clear<=cpt;clear++)
 80061ec:	2300      	movs	r3, #0
 80061ee:	63fb      	str	r3, [r7, #60]	; 0x3c
 80061f0:	e04c      	b.n	800628c <Display_Change_Data_Matrice_Up+0x1ac>
		{
			tmp[clear] = 0x00;					// Rajoute les 0 pour faire un clear
 80061f2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80061f4:	009b      	lsls	r3, r3, #2
 80061f6:	3350      	adds	r3, #80	; 0x50
 80061f8:	443b      	add	r3, r7
 80061fa:	2200      	movs	r2, #0
 80061fc:	f843 2c48 	str.w	r2, [r3, #-72]

				 while(cpt_up<device->Size_2)
 8006200:	e02f      	b.n	8006262 <Display_Change_Data_Matrice_Up+0x182>
				 {
					 tmp[clear] += device->Raw_2[cpt_up][position_2-1]<<shift<<opt>>2; //Même principe qu'avec position
 8006202:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006204:	009b      	lsls	r3, r3, #2
 8006206:	3350      	adds	r3, #80	; 0x50
 8006208:	443b      	add	r3, r7
 800620a:	f853 3c48 	ldr.w	r3, [r3, #-72]
 800620e:	f897 104c 	ldrb.w	r1, [r7, #76]	; 0x4c
 8006212:	f897 204b 	ldrb.w	r2, [r7, #75]	; 0x4b
 8006216:	3a01      	subs	r2, #1
 8006218:	6878      	ldr	r0, [r7, #4]
 800621a:	00c9      	lsls	r1, r1, #3
 800621c:	4401      	add	r1, r0
 800621e:	440a      	add	r2, r1
 8006220:	325f      	adds	r2, #95	; 0x5f
 8006222:	7812      	ldrb	r2, [r2, #0]
 8006224:	4611      	mov	r1, r2
 8006226:	f897 204d 	ldrb.w	r2, [r7, #77]	; 0x4d
 800622a:	4091      	lsls	r1, r2
 800622c:	78fa      	ldrb	r2, [r7, #3]
 800622e:	fa01 f202 	lsl.w	r2, r1, r2
 8006232:	1092      	asrs	r2, r2, #2
 8006234:	441a      	add	r2, r3
 8006236:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006238:	009b      	lsls	r3, r3, #2
 800623a:	3350      	adds	r3, #80	; 0x50
 800623c:	443b      	add	r3, r7
 800623e:	f843 2c48 	str.w	r2, [r3, #-72]
					 shift += device->Shift_2[cpt_up];
 8006242:	f897 304c 	ldrb.w	r3, [r7, #76]	; 0x4c
 8006246:	687a      	ldr	r2, [r7, #4]
 8006248:	4413      	add	r3, r2
 800624a:	f893 20b0 	ldrb.w	r2, [r3, #176]	; 0xb0
 800624e:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8006252:	4413      	add	r3, r2
 8006254:	f887 304d 	strb.w	r3, [r7, #77]	; 0x4d
					 cpt_up++;
 8006258:	f897 304c 	ldrb.w	r3, [r7, #76]	; 0x4c
 800625c:	3301      	adds	r3, #1
 800625e:	f887 304c 	strb.w	r3, [r7, #76]	; 0x4c
				 while(cpt_up<device->Size_2)
 8006262:	687b      	ldr	r3, [r7, #4]
 8006264:	f893 30af 	ldrb.w	r3, [r3, #175]	; 0xaf
 8006268:	f897 204c 	ldrb.w	r2, [r7, #76]	; 0x4c
 800626c:	429a      	cmp	r2, r3
 800626e:	d3c8      	bcc.n	8006202 <Display_Change_Data_Matrice_Up+0x122>
				 }
				 shift = 0;
 8006270:	2300      	movs	r3, #0
 8006272:	f887 304d 	strb.w	r3, [r7, #77]	; 0x4d
				 cpt_up = 0;
 8006276:	2300      	movs	r3, #0
 8006278:	f887 304c 	strb.w	r3, [r7, #76]	; 0x4c
				 position_2++;
 800627c:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 8006280:	3301      	adds	r3, #1
 8006282:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
		for(int clear=0;clear<=cpt;clear++)
 8006286:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006288:	3301      	adds	r3, #1
 800628a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800628c:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8006290:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8006292:	429a      	cmp	r2, r3
 8006294:	ddad      	ble.n	80061f2 <Display_Change_Data_Matrice_Up+0x112>


		}
		cpt++;
 8006296:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800629a:	3301      	adds	r3, #1
 800629c:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f

		 for(int j=1;j<=8;j++)									//Compte les lignes
 80062a0:	2301      	movs	r3, #1
 80062a2:	63bb      	str	r3, [r7, #56]	; 0x38
 80062a4:	e031      	b.n	800630a <Display_Change_Data_Matrice_Up+0x22a>
		 {

			 mask1 = tmp[j-1];
 80062a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80062a8:	3b01      	subs	r3, #1
 80062aa:	009b      	lsls	r3, r3, #2
 80062ac:	3350      	adds	r3, #80	; 0x50
 80062ae:	443b      	add	r3, r7
 80062b0:	f853 3c48 	ldr.w	r3, [r3, #-72]
 80062b4:	633b      	str	r3, [r7, #48]	; 0x30
			 mask2 = mask1>>8 ;																	// décalage des 8 bits de poids forts à droite
 80062b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80062b8:	0a1b      	lsrs	r3, r3, #8
 80062ba:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			 mask3 = mask1>>16;																	// décalage des 16 bits de poids forts à droite lors de déplacement
 80062be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80062c0:	0c1b      	lsrs	r3, r3, #16
 80062c2:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e

			 Commande[4] = j;
 80062c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80062c8:	b2db      	uxtb	r3, r3
 80062ca:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
			 Commande[5]= mask1;			//Matrice 1
 80062ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80062d0:	b2db      	uxtb	r3, r3
 80062d2:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d

			 Commande[2] = j;
 80062d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80062d8:	b2db      	uxtb	r3, r3
 80062da:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
			 Commande[3]= mask2;			//Matrice 2
 80062de:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80062e2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

			 Commande[0] = j;
 80062e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80062e8:	b2db      	uxtb	r3, r3
 80062ea:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
			 Commande[1]= mask3;			//Matrice 3
 80062ee:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 80062f2:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29

			 MAX7219_SendPackage(device, Commande,sizeof(Commande));
 80062f6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80062fa:	2206      	movs	r2, #6
 80062fc:	4619      	mov	r1, r3
 80062fe:	6878      	ldr	r0, [r7, #4]
 8006300:	f000 f8a6 	bl	8006450 <MAX7219_SendPackage>
		 for(int j=1;j<=8;j++)									//Compte les lignes
 8006304:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006306:	3301      	adds	r3, #1
 8006308:	63bb      	str	r3, [r7, #56]	; 0x38
 800630a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800630c:	2b08      	cmp	r3, #8
 800630e:	ddca      	ble.n	80062a6 <Display_Change_Data_Matrice_Up+0x1c6>
		 }

		 for(int n=0;n<8;n++) // Nettoyage du tableau tmp
 8006310:	2300      	movs	r3, #0
 8006312:	637b      	str	r3, [r7, #52]	; 0x34
 8006314:	e009      	b.n	800632a <Display_Change_Data_Matrice_Up+0x24a>
			 tmp[n]=0;
 8006316:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006318:	009b      	lsls	r3, r3, #2
 800631a:	3350      	adds	r3, #80	; 0x50
 800631c:	443b      	add	r3, r7
 800631e:	2200      	movs	r2, #0
 8006320:	f843 2c48 	str.w	r2, [r3, #-72]
		 for(int n=0;n<8;n++) // Nettoyage du tableau tmp
 8006324:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006326:	3301      	adds	r3, #1
 8006328:	637b      	str	r3, [r7, #52]	; 0x34
 800632a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800632c:	2b07      	cmp	r3, #7
 800632e:	ddf2      	ble.n	8006316 <Display_Change_Data_Matrice_Up+0x236>

	   HAL_Delay(200);
 8006330:	20c8      	movs	r0, #200	; 0xc8
 8006332:	f7fa fca9 	bl	8000c88 <HAL_Delay>
	 for(int i=8;i>0;i--)	//Boucle Pour faire l'animation du balayage par le haut
 8006336:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006338:	3b01      	subs	r3, #1
 800633a:	647b      	str	r3, [r7, #68]	; 0x44
 800633c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800633e:	2b00      	cmp	r3, #0
 8006340:	f73f aef9 	bgt.w	8006136 <Display_Change_Data_Matrice_Up+0x56>
	 }
}
 8006344:	bf00      	nop
 8006346:	bf00      	nop
 8006348:	3750      	adds	r7, #80	; 0x50
 800634a:	46bd      	mov	sp, r7
 800634c:	bd80      	pop	{r7, pc}
	...

08006350 <MAX7219_init>:
		{0x0F,0x00},
};

//Fonction d'initialisation matrice à LED
void MAX7219_init(SPI_HandleTypeDef *hspi,Matrix *device)
{
 8006350:	b580      	push	{r7, lr}
 8006352:	b086      	sub	sp, #24
 8006354:	af00      	add	r7, sp, #0
 8006356:	6078      	str	r0, [r7, #4]
 8006358:	6039      	str	r1, [r7, #0]

	HAL_StatusTypeDef ret = 0;
 800635a:	2300      	movs	r3, #0
 800635c:	73fb      	strb	r3, [r7, #15]
	device->hspi = hspi;
 800635e:	683b      	ldr	r3, [r7, #0]
 8006360:	687a      	ldr	r2, [r7, #4]
 8006362:	601a      	str	r2, [r3, #0]

	uint8_t Commande[2];

	for(int j = 0;j<5;j++)
 8006364:	2300      	movs	r3, #0
 8006366:	617b      	str	r3, [r7, #20]
 8006368:	e02a      	b.n	80063c0 <MAX7219_init+0x70>
	{
		Commande[0] = Initialisation[j][0];
 800636a:	4a1a      	ldr	r2, [pc, #104]	; (80063d4 <MAX7219_init+0x84>)
 800636c:	697b      	ldr	r3, [r7, #20]
 800636e:	f812 3013 	ldrb.w	r3, [r2, r3, lsl #1]
 8006372:	733b      	strb	r3, [r7, #12]
		Commande[1] = Initialisation [j][1];
 8006374:	4a17      	ldr	r2, [pc, #92]	; (80063d4 <MAX7219_init+0x84>)
 8006376:	697b      	ldr	r3, [r7, #20]
 8006378:	005b      	lsls	r3, r3, #1
 800637a:	4413      	add	r3, r2
 800637c:	785b      	ldrb	r3, [r3, #1]
 800637e:	737b      	strb	r3, [r7, #13]

		for(int i =0;i<3;i++)
 8006380:	2300      	movs	r3, #0
 8006382:	613b      	str	r3, [r7, #16]
 8006384:	e016      	b.n	80063b4 <MAX7219_init+0x64>
		{
			HAL_GPIO_WritePin(CS_GPIO_Port, CS_Pin, GPIO_PIN_RESET);
 8006386:	2200      	movs	r2, #0
 8006388:	2140      	movs	r1, #64	; 0x40
 800638a:	4813      	ldr	r0, [pc, #76]	; (80063d8 <MAX7219_init+0x88>)
 800638c:	f7fa ff22 	bl	80011d4 <HAL_GPIO_WritePin>
			ret = HAL_SPI_Transmit(device->hspi, Commande,2, 100);
 8006390:	683b      	ldr	r3, [r7, #0]
 8006392:	6818      	ldr	r0, [r3, #0]
 8006394:	f107 010c 	add.w	r1, r7, #12
 8006398:	2364      	movs	r3, #100	; 0x64
 800639a:	2202      	movs	r2, #2
 800639c:	f7fc fc1f 	bl	8002bde <HAL_SPI_Transmit>
 80063a0:	4603      	mov	r3, r0
 80063a2:	73fb      	strb	r3, [r7, #15]
			HAL_GPIO_WritePin(CS_GPIO_Port, CS_Pin, GPIO_PIN_SET);
 80063a4:	2201      	movs	r2, #1
 80063a6:	2140      	movs	r1, #64	; 0x40
 80063a8:	480b      	ldr	r0, [pc, #44]	; (80063d8 <MAX7219_init+0x88>)
 80063aa:	f7fa ff13 	bl	80011d4 <HAL_GPIO_WritePin>
		for(int i =0;i<3;i++)
 80063ae:	693b      	ldr	r3, [r7, #16]
 80063b0:	3301      	adds	r3, #1
 80063b2:	613b      	str	r3, [r7, #16]
 80063b4:	693b      	ldr	r3, [r7, #16]
 80063b6:	2b02      	cmp	r3, #2
 80063b8:	dde5      	ble.n	8006386 <MAX7219_init+0x36>
	for(int j = 0;j<5;j++)
 80063ba:	697b      	ldr	r3, [r7, #20]
 80063bc:	3301      	adds	r3, #1
 80063be:	617b      	str	r3, [r7, #20]
 80063c0:	697b      	ldr	r3, [r7, #20]
 80063c2:	2b04      	cmp	r3, #4
 80063c4:	ddd1      	ble.n	800636a <MAX7219_init+0x1a>
		}
	}

	MAX7219_clear_all(device);
 80063c6:	6838      	ldr	r0, [r7, #0]
 80063c8:	f000 f808 	bl	80063dc <MAX7219_clear_all>
}
 80063cc:	bf00      	nop
 80063ce:	3718      	adds	r7, #24
 80063d0:	46bd      	mov	sp, r7
 80063d2:	bd80      	pop	{r7, pc}
 80063d4:	20000164 	.word	0x20000164
 80063d8:	40020400 	.word	0x40020400

080063dc <MAX7219_clear_all>:
}


//Fonction qui clear les 3 matrices
void MAX7219_clear_all(Matrix *device)
{
 80063dc:	b580      	push	{r7, lr}
 80063de:	b086      	sub	sp, #24
 80063e0:	af00      	add	r7, sp, #0
 80063e2:	6078      	str	r0, [r7, #4]

	uint8_t Commande[2] = {0x00,0x00};
 80063e4:	2300      	movs	r3, #0
 80063e6:	81bb      	strh	r3, [r7, #12]
	HAL_StatusTypeDef ret = 0;
 80063e8:	2300      	movs	r3, #0
 80063ea:	73fb      	strb	r3, [r7, #15]

	for(int j=1;j<=8;j++)
 80063ec:	2301      	movs	r3, #1
 80063ee:	617b      	str	r3, [r7, #20]
 80063f0:	e023      	b.n	800643a <MAX7219_clear_all+0x5e>
	{
		Commande[0] = j;
 80063f2:	697b      	ldr	r3, [r7, #20]
 80063f4:	b2db      	uxtb	r3, r3
 80063f6:	733b      	strb	r3, [r7, #12]
		for(int i=0;i<3;i++)
 80063f8:	2300      	movs	r3, #0
 80063fa:	613b      	str	r3, [r7, #16]
 80063fc:	e017      	b.n	800642e <MAX7219_clear_all+0x52>
		{
			HAL_GPIO_WritePin(CS_GPIO_Port, CS_Pin, GPIO_PIN_RESET);
 80063fe:	2200      	movs	r2, #0
 8006400:	2140      	movs	r1, #64	; 0x40
 8006402:	4812      	ldr	r0, [pc, #72]	; (800644c <MAX7219_clear_all+0x70>)
 8006404:	f7fa fee6 	bl	80011d4 <HAL_GPIO_WritePin>
			ret = HAL_SPI_Transmit(device->hspi,Commande,2, HAL_MAX_DELAY);
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	6818      	ldr	r0, [r3, #0]
 800640c:	f107 010c 	add.w	r1, r7, #12
 8006410:	f04f 33ff 	mov.w	r3, #4294967295
 8006414:	2202      	movs	r2, #2
 8006416:	f7fc fbe2 	bl	8002bde <HAL_SPI_Transmit>
 800641a:	4603      	mov	r3, r0
 800641c:	73fb      	strb	r3, [r7, #15]
			HAL_GPIO_WritePin(CS_GPIO_Port, CS_Pin, GPIO_PIN_SET);
 800641e:	2201      	movs	r2, #1
 8006420:	2140      	movs	r1, #64	; 0x40
 8006422:	480a      	ldr	r0, [pc, #40]	; (800644c <MAX7219_clear_all+0x70>)
 8006424:	f7fa fed6 	bl	80011d4 <HAL_GPIO_WritePin>
		for(int i=0;i<3;i++)
 8006428:	693b      	ldr	r3, [r7, #16]
 800642a:	3301      	adds	r3, #1
 800642c:	613b      	str	r3, [r7, #16]
 800642e:	693b      	ldr	r3, [r7, #16]
 8006430:	2b02      	cmp	r3, #2
 8006432:	dde4      	ble.n	80063fe <MAX7219_clear_all+0x22>
	for(int j=1;j<=8;j++)
 8006434:	697b      	ldr	r3, [r7, #20]
 8006436:	3301      	adds	r3, #1
 8006438:	617b      	str	r3, [r7, #20]
 800643a:	697b      	ldr	r3, [r7, #20]
 800643c:	2b08      	cmp	r3, #8
 800643e:	ddd8      	ble.n	80063f2 <MAX7219_clear_all+0x16>

		}
	}
}
 8006440:	bf00      	nop
 8006442:	bf00      	nop
 8006444:	3718      	adds	r7, #24
 8006446:	46bd      	mov	sp, r7
 8006448:	bd80      	pop	{r7, pc}
 800644a:	bf00      	nop
 800644c:	40020400 	.word	0x40020400

08006450 <MAX7219_SendPackage>:

 }

 //Fonction pour envoyer directement des paquets pour toutes les matrices en cascade
 void MAX7219_SendPackage(Matrix *device,uint8_t *commande,uint8_t size)
 {
 8006450:	b580      	push	{r7, lr}
 8006452:	b086      	sub	sp, #24
 8006454:	af00      	add	r7, sp, #0
 8006456:	60f8      	str	r0, [r7, #12]
 8006458:	60b9      	str	r1, [r7, #8]
 800645a:	4613      	mov	r3, r2
 800645c:	71fb      	strb	r3, [r7, #7]
	 HAL_StatusTypeDef ret = 0;
 800645e:	2300      	movs	r3, #0
 8006460:	75fb      	strb	r3, [r7, #23]

	 HAL_GPIO_WritePin(CS_GPIO_Port, CS_Pin, GPIO_PIN_RESET);
 8006462:	2200      	movs	r2, #0
 8006464:	2140      	movs	r1, #64	; 0x40
 8006466:	480b      	ldr	r0, [pc, #44]	; (8006494 <MAX7219_SendPackage+0x44>)
 8006468:	f7fa feb4 	bl	80011d4 <HAL_GPIO_WritePin>
	 ret = HAL_SPI_Transmit(device->hspi, commande, size, HAL_MAX_DELAY);
 800646c:	68fb      	ldr	r3, [r7, #12]
 800646e:	6818      	ldr	r0, [r3, #0]
 8006470:	79fb      	ldrb	r3, [r7, #7]
 8006472:	b29a      	uxth	r2, r3
 8006474:	f04f 33ff 	mov.w	r3, #4294967295
 8006478:	68b9      	ldr	r1, [r7, #8]
 800647a:	f7fc fbb0 	bl	8002bde <HAL_SPI_Transmit>
 800647e:	4603      	mov	r3, r0
 8006480:	75fb      	strb	r3, [r7, #23]
	 HAL_GPIO_WritePin(CS_GPIO_Port, CS_Pin, GPIO_PIN_SET);
 8006482:	2201      	movs	r2, #1
 8006484:	2140      	movs	r1, #64	; 0x40
 8006486:	4803      	ldr	r0, [pc, #12]	; (8006494 <MAX7219_SendPackage+0x44>)
 8006488:	f7fa fea4 	bl	80011d4 <HAL_GPIO_WritePin>

 }
 800648c:	bf00      	nop
 800648e:	3718      	adds	r7, #24
 8006490:	46bd      	mov	sp, r7
 8006492:	bd80      	pop	{r7, pc}
 8006494:	40020400 	.word	0x40020400

08006498 <siprintf>:
 8006498:	b40e      	push	{r1, r2, r3}
 800649a:	b500      	push	{lr}
 800649c:	b09c      	sub	sp, #112	; 0x70
 800649e:	ab1d      	add	r3, sp, #116	; 0x74
 80064a0:	9002      	str	r0, [sp, #8]
 80064a2:	9006      	str	r0, [sp, #24]
 80064a4:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80064a8:	4809      	ldr	r0, [pc, #36]	; (80064d0 <siprintf+0x38>)
 80064aa:	9107      	str	r1, [sp, #28]
 80064ac:	9104      	str	r1, [sp, #16]
 80064ae:	4909      	ldr	r1, [pc, #36]	; (80064d4 <siprintf+0x3c>)
 80064b0:	f853 2b04 	ldr.w	r2, [r3], #4
 80064b4:	9105      	str	r1, [sp, #20]
 80064b6:	6800      	ldr	r0, [r0, #0]
 80064b8:	9301      	str	r3, [sp, #4]
 80064ba:	a902      	add	r1, sp, #8
 80064bc:	f000 f992 	bl	80067e4 <_svfiprintf_r>
 80064c0:	9b02      	ldr	r3, [sp, #8]
 80064c2:	2200      	movs	r2, #0
 80064c4:	701a      	strb	r2, [r3, #0]
 80064c6:	b01c      	add	sp, #112	; 0x70
 80064c8:	f85d eb04 	ldr.w	lr, [sp], #4
 80064cc:	b003      	add	sp, #12
 80064ce:	4770      	bx	lr
 80064d0:	200001bc 	.word	0x200001bc
 80064d4:	ffff0208 	.word	0xffff0208

080064d8 <memset>:
 80064d8:	4402      	add	r2, r0
 80064da:	4603      	mov	r3, r0
 80064dc:	4293      	cmp	r3, r2
 80064de:	d100      	bne.n	80064e2 <memset+0xa>
 80064e0:	4770      	bx	lr
 80064e2:	f803 1b01 	strb.w	r1, [r3], #1
 80064e6:	e7f9      	b.n	80064dc <memset+0x4>

080064e8 <__errno>:
 80064e8:	4b01      	ldr	r3, [pc, #4]	; (80064f0 <__errno+0x8>)
 80064ea:	6818      	ldr	r0, [r3, #0]
 80064ec:	4770      	bx	lr
 80064ee:	bf00      	nop
 80064f0:	200001bc 	.word	0x200001bc

080064f4 <__libc_init_array>:
 80064f4:	b570      	push	{r4, r5, r6, lr}
 80064f6:	4d0d      	ldr	r5, [pc, #52]	; (800652c <__libc_init_array+0x38>)
 80064f8:	4c0d      	ldr	r4, [pc, #52]	; (8006530 <__libc_init_array+0x3c>)
 80064fa:	1b64      	subs	r4, r4, r5
 80064fc:	10a4      	asrs	r4, r4, #2
 80064fe:	2600      	movs	r6, #0
 8006500:	42a6      	cmp	r6, r4
 8006502:	d109      	bne.n	8006518 <__libc_init_array+0x24>
 8006504:	4d0b      	ldr	r5, [pc, #44]	; (8006534 <__libc_init_array+0x40>)
 8006506:	4c0c      	ldr	r4, [pc, #48]	; (8006538 <__libc_init_array+0x44>)
 8006508:	f000 fc6a 	bl	8006de0 <_init>
 800650c:	1b64      	subs	r4, r4, r5
 800650e:	10a4      	asrs	r4, r4, #2
 8006510:	2600      	movs	r6, #0
 8006512:	42a6      	cmp	r6, r4
 8006514:	d105      	bne.n	8006522 <__libc_init_array+0x2e>
 8006516:	bd70      	pop	{r4, r5, r6, pc}
 8006518:	f855 3b04 	ldr.w	r3, [r5], #4
 800651c:	4798      	blx	r3
 800651e:	3601      	adds	r6, #1
 8006520:	e7ee      	b.n	8006500 <__libc_init_array+0xc>
 8006522:	f855 3b04 	ldr.w	r3, [r5], #4
 8006526:	4798      	blx	r3
 8006528:	3601      	adds	r6, #1
 800652a:	e7f2      	b.n	8006512 <__libc_init_array+0x1e>
 800652c:	08006e50 	.word	0x08006e50
 8006530:	08006e50 	.word	0x08006e50
 8006534:	08006e50 	.word	0x08006e50
 8006538:	08006e54 	.word	0x08006e54

0800653c <__retarget_lock_acquire_recursive>:
 800653c:	4770      	bx	lr

0800653e <__retarget_lock_release_recursive>:
 800653e:	4770      	bx	lr

08006540 <_free_r>:
 8006540:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8006542:	2900      	cmp	r1, #0
 8006544:	d044      	beq.n	80065d0 <_free_r+0x90>
 8006546:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800654a:	9001      	str	r0, [sp, #4]
 800654c:	2b00      	cmp	r3, #0
 800654e:	f1a1 0404 	sub.w	r4, r1, #4
 8006552:	bfb8      	it	lt
 8006554:	18e4      	addlt	r4, r4, r3
 8006556:	f000 f8df 	bl	8006718 <__malloc_lock>
 800655a:	4a1e      	ldr	r2, [pc, #120]	; (80065d4 <_free_r+0x94>)
 800655c:	9801      	ldr	r0, [sp, #4]
 800655e:	6813      	ldr	r3, [r2, #0]
 8006560:	b933      	cbnz	r3, 8006570 <_free_r+0x30>
 8006562:	6063      	str	r3, [r4, #4]
 8006564:	6014      	str	r4, [r2, #0]
 8006566:	b003      	add	sp, #12
 8006568:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800656c:	f000 b8da 	b.w	8006724 <__malloc_unlock>
 8006570:	42a3      	cmp	r3, r4
 8006572:	d908      	bls.n	8006586 <_free_r+0x46>
 8006574:	6825      	ldr	r5, [r4, #0]
 8006576:	1961      	adds	r1, r4, r5
 8006578:	428b      	cmp	r3, r1
 800657a:	bf01      	itttt	eq
 800657c:	6819      	ldreq	r1, [r3, #0]
 800657e:	685b      	ldreq	r3, [r3, #4]
 8006580:	1949      	addeq	r1, r1, r5
 8006582:	6021      	streq	r1, [r4, #0]
 8006584:	e7ed      	b.n	8006562 <_free_r+0x22>
 8006586:	461a      	mov	r2, r3
 8006588:	685b      	ldr	r3, [r3, #4]
 800658a:	b10b      	cbz	r3, 8006590 <_free_r+0x50>
 800658c:	42a3      	cmp	r3, r4
 800658e:	d9fa      	bls.n	8006586 <_free_r+0x46>
 8006590:	6811      	ldr	r1, [r2, #0]
 8006592:	1855      	adds	r5, r2, r1
 8006594:	42a5      	cmp	r5, r4
 8006596:	d10b      	bne.n	80065b0 <_free_r+0x70>
 8006598:	6824      	ldr	r4, [r4, #0]
 800659a:	4421      	add	r1, r4
 800659c:	1854      	adds	r4, r2, r1
 800659e:	42a3      	cmp	r3, r4
 80065a0:	6011      	str	r1, [r2, #0]
 80065a2:	d1e0      	bne.n	8006566 <_free_r+0x26>
 80065a4:	681c      	ldr	r4, [r3, #0]
 80065a6:	685b      	ldr	r3, [r3, #4]
 80065a8:	6053      	str	r3, [r2, #4]
 80065aa:	440c      	add	r4, r1
 80065ac:	6014      	str	r4, [r2, #0]
 80065ae:	e7da      	b.n	8006566 <_free_r+0x26>
 80065b0:	d902      	bls.n	80065b8 <_free_r+0x78>
 80065b2:	230c      	movs	r3, #12
 80065b4:	6003      	str	r3, [r0, #0]
 80065b6:	e7d6      	b.n	8006566 <_free_r+0x26>
 80065b8:	6825      	ldr	r5, [r4, #0]
 80065ba:	1961      	adds	r1, r4, r5
 80065bc:	428b      	cmp	r3, r1
 80065be:	bf04      	itt	eq
 80065c0:	6819      	ldreq	r1, [r3, #0]
 80065c2:	685b      	ldreq	r3, [r3, #4]
 80065c4:	6063      	str	r3, [r4, #4]
 80065c6:	bf04      	itt	eq
 80065c8:	1949      	addeq	r1, r1, r5
 80065ca:	6021      	streq	r1, [r4, #0]
 80065cc:	6054      	str	r4, [r2, #4]
 80065ce:	e7ca      	b.n	8006566 <_free_r+0x26>
 80065d0:	b003      	add	sp, #12
 80065d2:	bd30      	pop	{r4, r5, pc}
 80065d4:	20000428 	.word	0x20000428

080065d8 <sbrk_aligned>:
 80065d8:	b570      	push	{r4, r5, r6, lr}
 80065da:	4e0e      	ldr	r6, [pc, #56]	; (8006614 <sbrk_aligned+0x3c>)
 80065dc:	460c      	mov	r4, r1
 80065de:	6831      	ldr	r1, [r6, #0]
 80065e0:	4605      	mov	r5, r0
 80065e2:	b911      	cbnz	r1, 80065ea <sbrk_aligned+0x12>
 80065e4:	f000 fba6 	bl	8006d34 <_sbrk_r>
 80065e8:	6030      	str	r0, [r6, #0]
 80065ea:	4621      	mov	r1, r4
 80065ec:	4628      	mov	r0, r5
 80065ee:	f000 fba1 	bl	8006d34 <_sbrk_r>
 80065f2:	1c43      	adds	r3, r0, #1
 80065f4:	d00a      	beq.n	800660c <sbrk_aligned+0x34>
 80065f6:	1cc4      	adds	r4, r0, #3
 80065f8:	f024 0403 	bic.w	r4, r4, #3
 80065fc:	42a0      	cmp	r0, r4
 80065fe:	d007      	beq.n	8006610 <sbrk_aligned+0x38>
 8006600:	1a21      	subs	r1, r4, r0
 8006602:	4628      	mov	r0, r5
 8006604:	f000 fb96 	bl	8006d34 <_sbrk_r>
 8006608:	3001      	adds	r0, #1
 800660a:	d101      	bne.n	8006610 <sbrk_aligned+0x38>
 800660c:	f04f 34ff 	mov.w	r4, #4294967295
 8006610:	4620      	mov	r0, r4
 8006612:	bd70      	pop	{r4, r5, r6, pc}
 8006614:	2000042c 	.word	0x2000042c

08006618 <_malloc_r>:
 8006618:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800661c:	1ccd      	adds	r5, r1, #3
 800661e:	f025 0503 	bic.w	r5, r5, #3
 8006622:	3508      	adds	r5, #8
 8006624:	2d0c      	cmp	r5, #12
 8006626:	bf38      	it	cc
 8006628:	250c      	movcc	r5, #12
 800662a:	2d00      	cmp	r5, #0
 800662c:	4607      	mov	r7, r0
 800662e:	db01      	blt.n	8006634 <_malloc_r+0x1c>
 8006630:	42a9      	cmp	r1, r5
 8006632:	d905      	bls.n	8006640 <_malloc_r+0x28>
 8006634:	230c      	movs	r3, #12
 8006636:	603b      	str	r3, [r7, #0]
 8006638:	2600      	movs	r6, #0
 800663a:	4630      	mov	r0, r6
 800663c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006640:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8006714 <_malloc_r+0xfc>
 8006644:	f000 f868 	bl	8006718 <__malloc_lock>
 8006648:	f8d8 3000 	ldr.w	r3, [r8]
 800664c:	461c      	mov	r4, r3
 800664e:	bb5c      	cbnz	r4, 80066a8 <_malloc_r+0x90>
 8006650:	4629      	mov	r1, r5
 8006652:	4638      	mov	r0, r7
 8006654:	f7ff ffc0 	bl	80065d8 <sbrk_aligned>
 8006658:	1c43      	adds	r3, r0, #1
 800665a:	4604      	mov	r4, r0
 800665c:	d155      	bne.n	800670a <_malloc_r+0xf2>
 800665e:	f8d8 4000 	ldr.w	r4, [r8]
 8006662:	4626      	mov	r6, r4
 8006664:	2e00      	cmp	r6, #0
 8006666:	d145      	bne.n	80066f4 <_malloc_r+0xdc>
 8006668:	2c00      	cmp	r4, #0
 800666a:	d048      	beq.n	80066fe <_malloc_r+0xe6>
 800666c:	6823      	ldr	r3, [r4, #0]
 800666e:	4631      	mov	r1, r6
 8006670:	4638      	mov	r0, r7
 8006672:	eb04 0903 	add.w	r9, r4, r3
 8006676:	f000 fb5d 	bl	8006d34 <_sbrk_r>
 800667a:	4581      	cmp	r9, r0
 800667c:	d13f      	bne.n	80066fe <_malloc_r+0xe6>
 800667e:	6821      	ldr	r1, [r4, #0]
 8006680:	1a6d      	subs	r5, r5, r1
 8006682:	4629      	mov	r1, r5
 8006684:	4638      	mov	r0, r7
 8006686:	f7ff ffa7 	bl	80065d8 <sbrk_aligned>
 800668a:	3001      	adds	r0, #1
 800668c:	d037      	beq.n	80066fe <_malloc_r+0xe6>
 800668e:	6823      	ldr	r3, [r4, #0]
 8006690:	442b      	add	r3, r5
 8006692:	6023      	str	r3, [r4, #0]
 8006694:	f8d8 3000 	ldr.w	r3, [r8]
 8006698:	2b00      	cmp	r3, #0
 800669a:	d038      	beq.n	800670e <_malloc_r+0xf6>
 800669c:	685a      	ldr	r2, [r3, #4]
 800669e:	42a2      	cmp	r2, r4
 80066a0:	d12b      	bne.n	80066fa <_malloc_r+0xe2>
 80066a2:	2200      	movs	r2, #0
 80066a4:	605a      	str	r2, [r3, #4]
 80066a6:	e00f      	b.n	80066c8 <_malloc_r+0xb0>
 80066a8:	6822      	ldr	r2, [r4, #0]
 80066aa:	1b52      	subs	r2, r2, r5
 80066ac:	d41f      	bmi.n	80066ee <_malloc_r+0xd6>
 80066ae:	2a0b      	cmp	r2, #11
 80066b0:	d917      	bls.n	80066e2 <_malloc_r+0xca>
 80066b2:	1961      	adds	r1, r4, r5
 80066b4:	42a3      	cmp	r3, r4
 80066b6:	6025      	str	r5, [r4, #0]
 80066b8:	bf18      	it	ne
 80066ba:	6059      	strne	r1, [r3, #4]
 80066bc:	6863      	ldr	r3, [r4, #4]
 80066be:	bf08      	it	eq
 80066c0:	f8c8 1000 	streq.w	r1, [r8]
 80066c4:	5162      	str	r2, [r4, r5]
 80066c6:	604b      	str	r3, [r1, #4]
 80066c8:	4638      	mov	r0, r7
 80066ca:	f104 060b 	add.w	r6, r4, #11
 80066ce:	f000 f829 	bl	8006724 <__malloc_unlock>
 80066d2:	f026 0607 	bic.w	r6, r6, #7
 80066d6:	1d23      	adds	r3, r4, #4
 80066d8:	1af2      	subs	r2, r6, r3
 80066da:	d0ae      	beq.n	800663a <_malloc_r+0x22>
 80066dc:	1b9b      	subs	r3, r3, r6
 80066de:	50a3      	str	r3, [r4, r2]
 80066e0:	e7ab      	b.n	800663a <_malloc_r+0x22>
 80066e2:	42a3      	cmp	r3, r4
 80066e4:	6862      	ldr	r2, [r4, #4]
 80066e6:	d1dd      	bne.n	80066a4 <_malloc_r+0x8c>
 80066e8:	f8c8 2000 	str.w	r2, [r8]
 80066ec:	e7ec      	b.n	80066c8 <_malloc_r+0xb0>
 80066ee:	4623      	mov	r3, r4
 80066f0:	6864      	ldr	r4, [r4, #4]
 80066f2:	e7ac      	b.n	800664e <_malloc_r+0x36>
 80066f4:	4634      	mov	r4, r6
 80066f6:	6876      	ldr	r6, [r6, #4]
 80066f8:	e7b4      	b.n	8006664 <_malloc_r+0x4c>
 80066fa:	4613      	mov	r3, r2
 80066fc:	e7cc      	b.n	8006698 <_malloc_r+0x80>
 80066fe:	230c      	movs	r3, #12
 8006700:	603b      	str	r3, [r7, #0]
 8006702:	4638      	mov	r0, r7
 8006704:	f000 f80e 	bl	8006724 <__malloc_unlock>
 8006708:	e797      	b.n	800663a <_malloc_r+0x22>
 800670a:	6025      	str	r5, [r4, #0]
 800670c:	e7dc      	b.n	80066c8 <_malloc_r+0xb0>
 800670e:	605b      	str	r3, [r3, #4]
 8006710:	deff      	udf	#255	; 0xff
 8006712:	bf00      	nop
 8006714:	20000428 	.word	0x20000428

08006718 <__malloc_lock>:
 8006718:	4801      	ldr	r0, [pc, #4]	; (8006720 <__malloc_lock+0x8>)
 800671a:	f7ff bf0f 	b.w	800653c <__retarget_lock_acquire_recursive>
 800671e:	bf00      	nop
 8006720:	20000424 	.word	0x20000424

08006724 <__malloc_unlock>:
 8006724:	4801      	ldr	r0, [pc, #4]	; (800672c <__malloc_unlock+0x8>)
 8006726:	f7ff bf0a 	b.w	800653e <__retarget_lock_release_recursive>
 800672a:	bf00      	nop
 800672c:	20000424 	.word	0x20000424

08006730 <__ssputs_r>:
 8006730:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006734:	688e      	ldr	r6, [r1, #8]
 8006736:	461f      	mov	r7, r3
 8006738:	42be      	cmp	r6, r7
 800673a:	680b      	ldr	r3, [r1, #0]
 800673c:	4682      	mov	sl, r0
 800673e:	460c      	mov	r4, r1
 8006740:	4690      	mov	r8, r2
 8006742:	d82c      	bhi.n	800679e <__ssputs_r+0x6e>
 8006744:	898a      	ldrh	r2, [r1, #12]
 8006746:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800674a:	d026      	beq.n	800679a <__ssputs_r+0x6a>
 800674c:	6965      	ldr	r5, [r4, #20]
 800674e:	6909      	ldr	r1, [r1, #16]
 8006750:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8006754:	eba3 0901 	sub.w	r9, r3, r1
 8006758:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800675c:	1c7b      	adds	r3, r7, #1
 800675e:	444b      	add	r3, r9
 8006760:	106d      	asrs	r5, r5, #1
 8006762:	429d      	cmp	r5, r3
 8006764:	bf38      	it	cc
 8006766:	461d      	movcc	r5, r3
 8006768:	0553      	lsls	r3, r2, #21
 800676a:	d527      	bpl.n	80067bc <__ssputs_r+0x8c>
 800676c:	4629      	mov	r1, r5
 800676e:	f7ff ff53 	bl	8006618 <_malloc_r>
 8006772:	4606      	mov	r6, r0
 8006774:	b360      	cbz	r0, 80067d0 <__ssputs_r+0xa0>
 8006776:	6921      	ldr	r1, [r4, #16]
 8006778:	464a      	mov	r2, r9
 800677a:	f000 faeb 	bl	8006d54 <memcpy>
 800677e:	89a3      	ldrh	r3, [r4, #12]
 8006780:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8006784:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006788:	81a3      	strh	r3, [r4, #12]
 800678a:	6126      	str	r6, [r4, #16]
 800678c:	6165      	str	r5, [r4, #20]
 800678e:	444e      	add	r6, r9
 8006790:	eba5 0509 	sub.w	r5, r5, r9
 8006794:	6026      	str	r6, [r4, #0]
 8006796:	60a5      	str	r5, [r4, #8]
 8006798:	463e      	mov	r6, r7
 800679a:	42be      	cmp	r6, r7
 800679c:	d900      	bls.n	80067a0 <__ssputs_r+0x70>
 800679e:	463e      	mov	r6, r7
 80067a0:	6820      	ldr	r0, [r4, #0]
 80067a2:	4632      	mov	r2, r6
 80067a4:	4641      	mov	r1, r8
 80067a6:	f000 faab 	bl	8006d00 <memmove>
 80067aa:	68a3      	ldr	r3, [r4, #8]
 80067ac:	1b9b      	subs	r3, r3, r6
 80067ae:	60a3      	str	r3, [r4, #8]
 80067b0:	6823      	ldr	r3, [r4, #0]
 80067b2:	4433      	add	r3, r6
 80067b4:	6023      	str	r3, [r4, #0]
 80067b6:	2000      	movs	r0, #0
 80067b8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80067bc:	462a      	mov	r2, r5
 80067be:	f000 fad7 	bl	8006d70 <_realloc_r>
 80067c2:	4606      	mov	r6, r0
 80067c4:	2800      	cmp	r0, #0
 80067c6:	d1e0      	bne.n	800678a <__ssputs_r+0x5a>
 80067c8:	6921      	ldr	r1, [r4, #16]
 80067ca:	4650      	mov	r0, sl
 80067cc:	f7ff feb8 	bl	8006540 <_free_r>
 80067d0:	230c      	movs	r3, #12
 80067d2:	f8ca 3000 	str.w	r3, [sl]
 80067d6:	89a3      	ldrh	r3, [r4, #12]
 80067d8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80067dc:	81a3      	strh	r3, [r4, #12]
 80067de:	f04f 30ff 	mov.w	r0, #4294967295
 80067e2:	e7e9      	b.n	80067b8 <__ssputs_r+0x88>

080067e4 <_svfiprintf_r>:
 80067e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80067e8:	4698      	mov	r8, r3
 80067ea:	898b      	ldrh	r3, [r1, #12]
 80067ec:	061b      	lsls	r3, r3, #24
 80067ee:	b09d      	sub	sp, #116	; 0x74
 80067f0:	4607      	mov	r7, r0
 80067f2:	460d      	mov	r5, r1
 80067f4:	4614      	mov	r4, r2
 80067f6:	d50e      	bpl.n	8006816 <_svfiprintf_r+0x32>
 80067f8:	690b      	ldr	r3, [r1, #16]
 80067fa:	b963      	cbnz	r3, 8006816 <_svfiprintf_r+0x32>
 80067fc:	2140      	movs	r1, #64	; 0x40
 80067fe:	f7ff ff0b 	bl	8006618 <_malloc_r>
 8006802:	6028      	str	r0, [r5, #0]
 8006804:	6128      	str	r0, [r5, #16]
 8006806:	b920      	cbnz	r0, 8006812 <_svfiprintf_r+0x2e>
 8006808:	230c      	movs	r3, #12
 800680a:	603b      	str	r3, [r7, #0]
 800680c:	f04f 30ff 	mov.w	r0, #4294967295
 8006810:	e0d0      	b.n	80069b4 <_svfiprintf_r+0x1d0>
 8006812:	2340      	movs	r3, #64	; 0x40
 8006814:	616b      	str	r3, [r5, #20]
 8006816:	2300      	movs	r3, #0
 8006818:	9309      	str	r3, [sp, #36]	; 0x24
 800681a:	2320      	movs	r3, #32
 800681c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8006820:	f8cd 800c 	str.w	r8, [sp, #12]
 8006824:	2330      	movs	r3, #48	; 0x30
 8006826:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 80069cc <_svfiprintf_r+0x1e8>
 800682a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800682e:	f04f 0901 	mov.w	r9, #1
 8006832:	4623      	mov	r3, r4
 8006834:	469a      	mov	sl, r3
 8006836:	f813 2b01 	ldrb.w	r2, [r3], #1
 800683a:	b10a      	cbz	r2, 8006840 <_svfiprintf_r+0x5c>
 800683c:	2a25      	cmp	r2, #37	; 0x25
 800683e:	d1f9      	bne.n	8006834 <_svfiprintf_r+0x50>
 8006840:	ebba 0b04 	subs.w	fp, sl, r4
 8006844:	d00b      	beq.n	800685e <_svfiprintf_r+0x7a>
 8006846:	465b      	mov	r3, fp
 8006848:	4622      	mov	r2, r4
 800684a:	4629      	mov	r1, r5
 800684c:	4638      	mov	r0, r7
 800684e:	f7ff ff6f 	bl	8006730 <__ssputs_r>
 8006852:	3001      	adds	r0, #1
 8006854:	f000 80a9 	beq.w	80069aa <_svfiprintf_r+0x1c6>
 8006858:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800685a:	445a      	add	r2, fp
 800685c:	9209      	str	r2, [sp, #36]	; 0x24
 800685e:	f89a 3000 	ldrb.w	r3, [sl]
 8006862:	2b00      	cmp	r3, #0
 8006864:	f000 80a1 	beq.w	80069aa <_svfiprintf_r+0x1c6>
 8006868:	2300      	movs	r3, #0
 800686a:	f04f 32ff 	mov.w	r2, #4294967295
 800686e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006872:	f10a 0a01 	add.w	sl, sl, #1
 8006876:	9304      	str	r3, [sp, #16]
 8006878:	9307      	str	r3, [sp, #28]
 800687a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800687e:	931a      	str	r3, [sp, #104]	; 0x68
 8006880:	4654      	mov	r4, sl
 8006882:	2205      	movs	r2, #5
 8006884:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006888:	4850      	ldr	r0, [pc, #320]	; (80069cc <_svfiprintf_r+0x1e8>)
 800688a:	f7f9 fcb1 	bl	80001f0 <memchr>
 800688e:	9a04      	ldr	r2, [sp, #16]
 8006890:	b9d8      	cbnz	r0, 80068ca <_svfiprintf_r+0xe6>
 8006892:	06d0      	lsls	r0, r2, #27
 8006894:	bf44      	itt	mi
 8006896:	2320      	movmi	r3, #32
 8006898:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800689c:	0711      	lsls	r1, r2, #28
 800689e:	bf44      	itt	mi
 80068a0:	232b      	movmi	r3, #43	; 0x2b
 80068a2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80068a6:	f89a 3000 	ldrb.w	r3, [sl]
 80068aa:	2b2a      	cmp	r3, #42	; 0x2a
 80068ac:	d015      	beq.n	80068da <_svfiprintf_r+0xf6>
 80068ae:	9a07      	ldr	r2, [sp, #28]
 80068b0:	4654      	mov	r4, sl
 80068b2:	2000      	movs	r0, #0
 80068b4:	f04f 0c0a 	mov.w	ip, #10
 80068b8:	4621      	mov	r1, r4
 80068ba:	f811 3b01 	ldrb.w	r3, [r1], #1
 80068be:	3b30      	subs	r3, #48	; 0x30
 80068c0:	2b09      	cmp	r3, #9
 80068c2:	d94d      	bls.n	8006960 <_svfiprintf_r+0x17c>
 80068c4:	b1b0      	cbz	r0, 80068f4 <_svfiprintf_r+0x110>
 80068c6:	9207      	str	r2, [sp, #28]
 80068c8:	e014      	b.n	80068f4 <_svfiprintf_r+0x110>
 80068ca:	eba0 0308 	sub.w	r3, r0, r8
 80068ce:	fa09 f303 	lsl.w	r3, r9, r3
 80068d2:	4313      	orrs	r3, r2
 80068d4:	9304      	str	r3, [sp, #16]
 80068d6:	46a2      	mov	sl, r4
 80068d8:	e7d2      	b.n	8006880 <_svfiprintf_r+0x9c>
 80068da:	9b03      	ldr	r3, [sp, #12]
 80068dc:	1d19      	adds	r1, r3, #4
 80068de:	681b      	ldr	r3, [r3, #0]
 80068e0:	9103      	str	r1, [sp, #12]
 80068e2:	2b00      	cmp	r3, #0
 80068e4:	bfbb      	ittet	lt
 80068e6:	425b      	neglt	r3, r3
 80068e8:	f042 0202 	orrlt.w	r2, r2, #2
 80068ec:	9307      	strge	r3, [sp, #28]
 80068ee:	9307      	strlt	r3, [sp, #28]
 80068f0:	bfb8      	it	lt
 80068f2:	9204      	strlt	r2, [sp, #16]
 80068f4:	7823      	ldrb	r3, [r4, #0]
 80068f6:	2b2e      	cmp	r3, #46	; 0x2e
 80068f8:	d10c      	bne.n	8006914 <_svfiprintf_r+0x130>
 80068fa:	7863      	ldrb	r3, [r4, #1]
 80068fc:	2b2a      	cmp	r3, #42	; 0x2a
 80068fe:	d134      	bne.n	800696a <_svfiprintf_r+0x186>
 8006900:	9b03      	ldr	r3, [sp, #12]
 8006902:	1d1a      	adds	r2, r3, #4
 8006904:	681b      	ldr	r3, [r3, #0]
 8006906:	9203      	str	r2, [sp, #12]
 8006908:	2b00      	cmp	r3, #0
 800690a:	bfb8      	it	lt
 800690c:	f04f 33ff 	movlt.w	r3, #4294967295
 8006910:	3402      	adds	r4, #2
 8006912:	9305      	str	r3, [sp, #20]
 8006914:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 80069dc <_svfiprintf_r+0x1f8>
 8006918:	7821      	ldrb	r1, [r4, #0]
 800691a:	2203      	movs	r2, #3
 800691c:	4650      	mov	r0, sl
 800691e:	f7f9 fc67 	bl	80001f0 <memchr>
 8006922:	b138      	cbz	r0, 8006934 <_svfiprintf_r+0x150>
 8006924:	9b04      	ldr	r3, [sp, #16]
 8006926:	eba0 000a 	sub.w	r0, r0, sl
 800692a:	2240      	movs	r2, #64	; 0x40
 800692c:	4082      	lsls	r2, r0
 800692e:	4313      	orrs	r3, r2
 8006930:	3401      	adds	r4, #1
 8006932:	9304      	str	r3, [sp, #16]
 8006934:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006938:	4825      	ldr	r0, [pc, #148]	; (80069d0 <_svfiprintf_r+0x1ec>)
 800693a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800693e:	2206      	movs	r2, #6
 8006940:	f7f9 fc56 	bl	80001f0 <memchr>
 8006944:	2800      	cmp	r0, #0
 8006946:	d038      	beq.n	80069ba <_svfiprintf_r+0x1d6>
 8006948:	4b22      	ldr	r3, [pc, #136]	; (80069d4 <_svfiprintf_r+0x1f0>)
 800694a:	bb1b      	cbnz	r3, 8006994 <_svfiprintf_r+0x1b0>
 800694c:	9b03      	ldr	r3, [sp, #12]
 800694e:	3307      	adds	r3, #7
 8006950:	f023 0307 	bic.w	r3, r3, #7
 8006954:	3308      	adds	r3, #8
 8006956:	9303      	str	r3, [sp, #12]
 8006958:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800695a:	4433      	add	r3, r6
 800695c:	9309      	str	r3, [sp, #36]	; 0x24
 800695e:	e768      	b.n	8006832 <_svfiprintf_r+0x4e>
 8006960:	fb0c 3202 	mla	r2, ip, r2, r3
 8006964:	460c      	mov	r4, r1
 8006966:	2001      	movs	r0, #1
 8006968:	e7a6      	b.n	80068b8 <_svfiprintf_r+0xd4>
 800696a:	2300      	movs	r3, #0
 800696c:	3401      	adds	r4, #1
 800696e:	9305      	str	r3, [sp, #20]
 8006970:	4619      	mov	r1, r3
 8006972:	f04f 0c0a 	mov.w	ip, #10
 8006976:	4620      	mov	r0, r4
 8006978:	f810 2b01 	ldrb.w	r2, [r0], #1
 800697c:	3a30      	subs	r2, #48	; 0x30
 800697e:	2a09      	cmp	r2, #9
 8006980:	d903      	bls.n	800698a <_svfiprintf_r+0x1a6>
 8006982:	2b00      	cmp	r3, #0
 8006984:	d0c6      	beq.n	8006914 <_svfiprintf_r+0x130>
 8006986:	9105      	str	r1, [sp, #20]
 8006988:	e7c4      	b.n	8006914 <_svfiprintf_r+0x130>
 800698a:	fb0c 2101 	mla	r1, ip, r1, r2
 800698e:	4604      	mov	r4, r0
 8006990:	2301      	movs	r3, #1
 8006992:	e7f0      	b.n	8006976 <_svfiprintf_r+0x192>
 8006994:	ab03      	add	r3, sp, #12
 8006996:	9300      	str	r3, [sp, #0]
 8006998:	462a      	mov	r2, r5
 800699a:	4b0f      	ldr	r3, [pc, #60]	; (80069d8 <_svfiprintf_r+0x1f4>)
 800699c:	a904      	add	r1, sp, #16
 800699e:	4638      	mov	r0, r7
 80069a0:	f3af 8000 	nop.w
 80069a4:	1c42      	adds	r2, r0, #1
 80069a6:	4606      	mov	r6, r0
 80069a8:	d1d6      	bne.n	8006958 <_svfiprintf_r+0x174>
 80069aa:	89ab      	ldrh	r3, [r5, #12]
 80069ac:	065b      	lsls	r3, r3, #25
 80069ae:	f53f af2d 	bmi.w	800680c <_svfiprintf_r+0x28>
 80069b2:	9809      	ldr	r0, [sp, #36]	; 0x24
 80069b4:	b01d      	add	sp, #116	; 0x74
 80069b6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80069ba:	ab03      	add	r3, sp, #12
 80069bc:	9300      	str	r3, [sp, #0]
 80069be:	462a      	mov	r2, r5
 80069c0:	4b05      	ldr	r3, [pc, #20]	; (80069d8 <_svfiprintf_r+0x1f4>)
 80069c2:	a904      	add	r1, sp, #16
 80069c4:	4638      	mov	r0, r7
 80069c6:	f000 f879 	bl	8006abc <_printf_i>
 80069ca:	e7eb      	b.n	80069a4 <_svfiprintf_r+0x1c0>
 80069cc:	08006e14 	.word	0x08006e14
 80069d0:	08006e1e 	.word	0x08006e1e
 80069d4:	00000000 	.word	0x00000000
 80069d8:	08006731 	.word	0x08006731
 80069dc:	08006e1a 	.word	0x08006e1a

080069e0 <_printf_common>:
 80069e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80069e4:	4616      	mov	r6, r2
 80069e6:	4699      	mov	r9, r3
 80069e8:	688a      	ldr	r2, [r1, #8]
 80069ea:	690b      	ldr	r3, [r1, #16]
 80069ec:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80069f0:	4293      	cmp	r3, r2
 80069f2:	bfb8      	it	lt
 80069f4:	4613      	movlt	r3, r2
 80069f6:	6033      	str	r3, [r6, #0]
 80069f8:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80069fc:	4607      	mov	r7, r0
 80069fe:	460c      	mov	r4, r1
 8006a00:	b10a      	cbz	r2, 8006a06 <_printf_common+0x26>
 8006a02:	3301      	adds	r3, #1
 8006a04:	6033      	str	r3, [r6, #0]
 8006a06:	6823      	ldr	r3, [r4, #0]
 8006a08:	0699      	lsls	r1, r3, #26
 8006a0a:	bf42      	ittt	mi
 8006a0c:	6833      	ldrmi	r3, [r6, #0]
 8006a0e:	3302      	addmi	r3, #2
 8006a10:	6033      	strmi	r3, [r6, #0]
 8006a12:	6825      	ldr	r5, [r4, #0]
 8006a14:	f015 0506 	ands.w	r5, r5, #6
 8006a18:	d106      	bne.n	8006a28 <_printf_common+0x48>
 8006a1a:	f104 0a19 	add.w	sl, r4, #25
 8006a1e:	68e3      	ldr	r3, [r4, #12]
 8006a20:	6832      	ldr	r2, [r6, #0]
 8006a22:	1a9b      	subs	r3, r3, r2
 8006a24:	42ab      	cmp	r3, r5
 8006a26:	dc26      	bgt.n	8006a76 <_printf_common+0x96>
 8006a28:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8006a2c:	1e13      	subs	r3, r2, #0
 8006a2e:	6822      	ldr	r2, [r4, #0]
 8006a30:	bf18      	it	ne
 8006a32:	2301      	movne	r3, #1
 8006a34:	0692      	lsls	r2, r2, #26
 8006a36:	d42b      	bmi.n	8006a90 <_printf_common+0xb0>
 8006a38:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006a3c:	4649      	mov	r1, r9
 8006a3e:	4638      	mov	r0, r7
 8006a40:	47c0      	blx	r8
 8006a42:	3001      	adds	r0, #1
 8006a44:	d01e      	beq.n	8006a84 <_printf_common+0xa4>
 8006a46:	6823      	ldr	r3, [r4, #0]
 8006a48:	6922      	ldr	r2, [r4, #16]
 8006a4a:	f003 0306 	and.w	r3, r3, #6
 8006a4e:	2b04      	cmp	r3, #4
 8006a50:	bf02      	ittt	eq
 8006a52:	68e5      	ldreq	r5, [r4, #12]
 8006a54:	6833      	ldreq	r3, [r6, #0]
 8006a56:	1aed      	subeq	r5, r5, r3
 8006a58:	68a3      	ldr	r3, [r4, #8]
 8006a5a:	bf0c      	ite	eq
 8006a5c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006a60:	2500      	movne	r5, #0
 8006a62:	4293      	cmp	r3, r2
 8006a64:	bfc4      	itt	gt
 8006a66:	1a9b      	subgt	r3, r3, r2
 8006a68:	18ed      	addgt	r5, r5, r3
 8006a6a:	2600      	movs	r6, #0
 8006a6c:	341a      	adds	r4, #26
 8006a6e:	42b5      	cmp	r5, r6
 8006a70:	d11a      	bne.n	8006aa8 <_printf_common+0xc8>
 8006a72:	2000      	movs	r0, #0
 8006a74:	e008      	b.n	8006a88 <_printf_common+0xa8>
 8006a76:	2301      	movs	r3, #1
 8006a78:	4652      	mov	r2, sl
 8006a7a:	4649      	mov	r1, r9
 8006a7c:	4638      	mov	r0, r7
 8006a7e:	47c0      	blx	r8
 8006a80:	3001      	adds	r0, #1
 8006a82:	d103      	bne.n	8006a8c <_printf_common+0xac>
 8006a84:	f04f 30ff 	mov.w	r0, #4294967295
 8006a88:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006a8c:	3501      	adds	r5, #1
 8006a8e:	e7c6      	b.n	8006a1e <_printf_common+0x3e>
 8006a90:	18e1      	adds	r1, r4, r3
 8006a92:	1c5a      	adds	r2, r3, #1
 8006a94:	2030      	movs	r0, #48	; 0x30
 8006a96:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8006a9a:	4422      	add	r2, r4
 8006a9c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8006aa0:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8006aa4:	3302      	adds	r3, #2
 8006aa6:	e7c7      	b.n	8006a38 <_printf_common+0x58>
 8006aa8:	2301      	movs	r3, #1
 8006aaa:	4622      	mov	r2, r4
 8006aac:	4649      	mov	r1, r9
 8006aae:	4638      	mov	r0, r7
 8006ab0:	47c0      	blx	r8
 8006ab2:	3001      	adds	r0, #1
 8006ab4:	d0e6      	beq.n	8006a84 <_printf_common+0xa4>
 8006ab6:	3601      	adds	r6, #1
 8006ab8:	e7d9      	b.n	8006a6e <_printf_common+0x8e>
	...

08006abc <_printf_i>:
 8006abc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006ac0:	7e0f      	ldrb	r7, [r1, #24]
 8006ac2:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8006ac4:	2f78      	cmp	r7, #120	; 0x78
 8006ac6:	4691      	mov	r9, r2
 8006ac8:	4680      	mov	r8, r0
 8006aca:	460c      	mov	r4, r1
 8006acc:	469a      	mov	sl, r3
 8006ace:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8006ad2:	d807      	bhi.n	8006ae4 <_printf_i+0x28>
 8006ad4:	2f62      	cmp	r7, #98	; 0x62
 8006ad6:	d80a      	bhi.n	8006aee <_printf_i+0x32>
 8006ad8:	2f00      	cmp	r7, #0
 8006ada:	f000 80d4 	beq.w	8006c86 <_printf_i+0x1ca>
 8006ade:	2f58      	cmp	r7, #88	; 0x58
 8006ae0:	f000 80c0 	beq.w	8006c64 <_printf_i+0x1a8>
 8006ae4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006ae8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8006aec:	e03a      	b.n	8006b64 <_printf_i+0xa8>
 8006aee:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8006af2:	2b15      	cmp	r3, #21
 8006af4:	d8f6      	bhi.n	8006ae4 <_printf_i+0x28>
 8006af6:	a101      	add	r1, pc, #4	; (adr r1, 8006afc <_printf_i+0x40>)
 8006af8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8006afc:	08006b55 	.word	0x08006b55
 8006b00:	08006b69 	.word	0x08006b69
 8006b04:	08006ae5 	.word	0x08006ae5
 8006b08:	08006ae5 	.word	0x08006ae5
 8006b0c:	08006ae5 	.word	0x08006ae5
 8006b10:	08006ae5 	.word	0x08006ae5
 8006b14:	08006b69 	.word	0x08006b69
 8006b18:	08006ae5 	.word	0x08006ae5
 8006b1c:	08006ae5 	.word	0x08006ae5
 8006b20:	08006ae5 	.word	0x08006ae5
 8006b24:	08006ae5 	.word	0x08006ae5
 8006b28:	08006c6d 	.word	0x08006c6d
 8006b2c:	08006b95 	.word	0x08006b95
 8006b30:	08006c27 	.word	0x08006c27
 8006b34:	08006ae5 	.word	0x08006ae5
 8006b38:	08006ae5 	.word	0x08006ae5
 8006b3c:	08006c8f 	.word	0x08006c8f
 8006b40:	08006ae5 	.word	0x08006ae5
 8006b44:	08006b95 	.word	0x08006b95
 8006b48:	08006ae5 	.word	0x08006ae5
 8006b4c:	08006ae5 	.word	0x08006ae5
 8006b50:	08006c2f 	.word	0x08006c2f
 8006b54:	682b      	ldr	r3, [r5, #0]
 8006b56:	1d1a      	adds	r2, r3, #4
 8006b58:	681b      	ldr	r3, [r3, #0]
 8006b5a:	602a      	str	r2, [r5, #0]
 8006b5c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006b60:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006b64:	2301      	movs	r3, #1
 8006b66:	e09f      	b.n	8006ca8 <_printf_i+0x1ec>
 8006b68:	6820      	ldr	r0, [r4, #0]
 8006b6a:	682b      	ldr	r3, [r5, #0]
 8006b6c:	0607      	lsls	r7, r0, #24
 8006b6e:	f103 0104 	add.w	r1, r3, #4
 8006b72:	6029      	str	r1, [r5, #0]
 8006b74:	d501      	bpl.n	8006b7a <_printf_i+0xbe>
 8006b76:	681e      	ldr	r6, [r3, #0]
 8006b78:	e003      	b.n	8006b82 <_printf_i+0xc6>
 8006b7a:	0646      	lsls	r6, r0, #25
 8006b7c:	d5fb      	bpl.n	8006b76 <_printf_i+0xba>
 8006b7e:	f9b3 6000 	ldrsh.w	r6, [r3]
 8006b82:	2e00      	cmp	r6, #0
 8006b84:	da03      	bge.n	8006b8e <_printf_i+0xd2>
 8006b86:	232d      	movs	r3, #45	; 0x2d
 8006b88:	4276      	negs	r6, r6
 8006b8a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006b8e:	485a      	ldr	r0, [pc, #360]	; (8006cf8 <_printf_i+0x23c>)
 8006b90:	230a      	movs	r3, #10
 8006b92:	e012      	b.n	8006bba <_printf_i+0xfe>
 8006b94:	682b      	ldr	r3, [r5, #0]
 8006b96:	6820      	ldr	r0, [r4, #0]
 8006b98:	1d19      	adds	r1, r3, #4
 8006b9a:	6029      	str	r1, [r5, #0]
 8006b9c:	0605      	lsls	r5, r0, #24
 8006b9e:	d501      	bpl.n	8006ba4 <_printf_i+0xe8>
 8006ba0:	681e      	ldr	r6, [r3, #0]
 8006ba2:	e002      	b.n	8006baa <_printf_i+0xee>
 8006ba4:	0641      	lsls	r1, r0, #25
 8006ba6:	d5fb      	bpl.n	8006ba0 <_printf_i+0xe4>
 8006ba8:	881e      	ldrh	r6, [r3, #0]
 8006baa:	4853      	ldr	r0, [pc, #332]	; (8006cf8 <_printf_i+0x23c>)
 8006bac:	2f6f      	cmp	r7, #111	; 0x6f
 8006bae:	bf0c      	ite	eq
 8006bb0:	2308      	moveq	r3, #8
 8006bb2:	230a      	movne	r3, #10
 8006bb4:	2100      	movs	r1, #0
 8006bb6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8006bba:	6865      	ldr	r5, [r4, #4]
 8006bbc:	60a5      	str	r5, [r4, #8]
 8006bbe:	2d00      	cmp	r5, #0
 8006bc0:	bfa2      	ittt	ge
 8006bc2:	6821      	ldrge	r1, [r4, #0]
 8006bc4:	f021 0104 	bicge.w	r1, r1, #4
 8006bc8:	6021      	strge	r1, [r4, #0]
 8006bca:	b90e      	cbnz	r6, 8006bd0 <_printf_i+0x114>
 8006bcc:	2d00      	cmp	r5, #0
 8006bce:	d04b      	beq.n	8006c68 <_printf_i+0x1ac>
 8006bd0:	4615      	mov	r5, r2
 8006bd2:	fbb6 f1f3 	udiv	r1, r6, r3
 8006bd6:	fb03 6711 	mls	r7, r3, r1, r6
 8006bda:	5dc7      	ldrb	r7, [r0, r7]
 8006bdc:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8006be0:	4637      	mov	r7, r6
 8006be2:	42bb      	cmp	r3, r7
 8006be4:	460e      	mov	r6, r1
 8006be6:	d9f4      	bls.n	8006bd2 <_printf_i+0x116>
 8006be8:	2b08      	cmp	r3, #8
 8006bea:	d10b      	bne.n	8006c04 <_printf_i+0x148>
 8006bec:	6823      	ldr	r3, [r4, #0]
 8006bee:	07de      	lsls	r6, r3, #31
 8006bf0:	d508      	bpl.n	8006c04 <_printf_i+0x148>
 8006bf2:	6923      	ldr	r3, [r4, #16]
 8006bf4:	6861      	ldr	r1, [r4, #4]
 8006bf6:	4299      	cmp	r1, r3
 8006bf8:	bfde      	ittt	le
 8006bfa:	2330      	movle	r3, #48	; 0x30
 8006bfc:	f805 3c01 	strble.w	r3, [r5, #-1]
 8006c00:	f105 35ff 	addle.w	r5, r5, #4294967295
 8006c04:	1b52      	subs	r2, r2, r5
 8006c06:	6122      	str	r2, [r4, #16]
 8006c08:	f8cd a000 	str.w	sl, [sp]
 8006c0c:	464b      	mov	r3, r9
 8006c0e:	aa03      	add	r2, sp, #12
 8006c10:	4621      	mov	r1, r4
 8006c12:	4640      	mov	r0, r8
 8006c14:	f7ff fee4 	bl	80069e0 <_printf_common>
 8006c18:	3001      	adds	r0, #1
 8006c1a:	d14a      	bne.n	8006cb2 <_printf_i+0x1f6>
 8006c1c:	f04f 30ff 	mov.w	r0, #4294967295
 8006c20:	b004      	add	sp, #16
 8006c22:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006c26:	6823      	ldr	r3, [r4, #0]
 8006c28:	f043 0320 	orr.w	r3, r3, #32
 8006c2c:	6023      	str	r3, [r4, #0]
 8006c2e:	4833      	ldr	r0, [pc, #204]	; (8006cfc <_printf_i+0x240>)
 8006c30:	2778      	movs	r7, #120	; 0x78
 8006c32:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8006c36:	6823      	ldr	r3, [r4, #0]
 8006c38:	6829      	ldr	r1, [r5, #0]
 8006c3a:	061f      	lsls	r7, r3, #24
 8006c3c:	f851 6b04 	ldr.w	r6, [r1], #4
 8006c40:	d402      	bmi.n	8006c48 <_printf_i+0x18c>
 8006c42:	065f      	lsls	r7, r3, #25
 8006c44:	bf48      	it	mi
 8006c46:	b2b6      	uxthmi	r6, r6
 8006c48:	07df      	lsls	r7, r3, #31
 8006c4a:	bf48      	it	mi
 8006c4c:	f043 0320 	orrmi.w	r3, r3, #32
 8006c50:	6029      	str	r1, [r5, #0]
 8006c52:	bf48      	it	mi
 8006c54:	6023      	strmi	r3, [r4, #0]
 8006c56:	b91e      	cbnz	r6, 8006c60 <_printf_i+0x1a4>
 8006c58:	6823      	ldr	r3, [r4, #0]
 8006c5a:	f023 0320 	bic.w	r3, r3, #32
 8006c5e:	6023      	str	r3, [r4, #0]
 8006c60:	2310      	movs	r3, #16
 8006c62:	e7a7      	b.n	8006bb4 <_printf_i+0xf8>
 8006c64:	4824      	ldr	r0, [pc, #144]	; (8006cf8 <_printf_i+0x23c>)
 8006c66:	e7e4      	b.n	8006c32 <_printf_i+0x176>
 8006c68:	4615      	mov	r5, r2
 8006c6a:	e7bd      	b.n	8006be8 <_printf_i+0x12c>
 8006c6c:	682b      	ldr	r3, [r5, #0]
 8006c6e:	6826      	ldr	r6, [r4, #0]
 8006c70:	6961      	ldr	r1, [r4, #20]
 8006c72:	1d18      	adds	r0, r3, #4
 8006c74:	6028      	str	r0, [r5, #0]
 8006c76:	0635      	lsls	r5, r6, #24
 8006c78:	681b      	ldr	r3, [r3, #0]
 8006c7a:	d501      	bpl.n	8006c80 <_printf_i+0x1c4>
 8006c7c:	6019      	str	r1, [r3, #0]
 8006c7e:	e002      	b.n	8006c86 <_printf_i+0x1ca>
 8006c80:	0670      	lsls	r0, r6, #25
 8006c82:	d5fb      	bpl.n	8006c7c <_printf_i+0x1c0>
 8006c84:	8019      	strh	r1, [r3, #0]
 8006c86:	2300      	movs	r3, #0
 8006c88:	6123      	str	r3, [r4, #16]
 8006c8a:	4615      	mov	r5, r2
 8006c8c:	e7bc      	b.n	8006c08 <_printf_i+0x14c>
 8006c8e:	682b      	ldr	r3, [r5, #0]
 8006c90:	1d1a      	adds	r2, r3, #4
 8006c92:	602a      	str	r2, [r5, #0]
 8006c94:	681d      	ldr	r5, [r3, #0]
 8006c96:	6862      	ldr	r2, [r4, #4]
 8006c98:	2100      	movs	r1, #0
 8006c9a:	4628      	mov	r0, r5
 8006c9c:	f7f9 faa8 	bl	80001f0 <memchr>
 8006ca0:	b108      	cbz	r0, 8006ca6 <_printf_i+0x1ea>
 8006ca2:	1b40      	subs	r0, r0, r5
 8006ca4:	6060      	str	r0, [r4, #4]
 8006ca6:	6863      	ldr	r3, [r4, #4]
 8006ca8:	6123      	str	r3, [r4, #16]
 8006caa:	2300      	movs	r3, #0
 8006cac:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006cb0:	e7aa      	b.n	8006c08 <_printf_i+0x14c>
 8006cb2:	6923      	ldr	r3, [r4, #16]
 8006cb4:	462a      	mov	r2, r5
 8006cb6:	4649      	mov	r1, r9
 8006cb8:	4640      	mov	r0, r8
 8006cba:	47d0      	blx	sl
 8006cbc:	3001      	adds	r0, #1
 8006cbe:	d0ad      	beq.n	8006c1c <_printf_i+0x160>
 8006cc0:	6823      	ldr	r3, [r4, #0]
 8006cc2:	079b      	lsls	r3, r3, #30
 8006cc4:	d413      	bmi.n	8006cee <_printf_i+0x232>
 8006cc6:	68e0      	ldr	r0, [r4, #12]
 8006cc8:	9b03      	ldr	r3, [sp, #12]
 8006cca:	4298      	cmp	r0, r3
 8006ccc:	bfb8      	it	lt
 8006cce:	4618      	movlt	r0, r3
 8006cd0:	e7a6      	b.n	8006c20 <_printf_i+0x164>
 8006cd2:	2301      	movs	r3, #1
 8006cd4:	4632      	mov	r2, r6
 8006cd6:	4649      	mov	r1, r9
 8006cd8:	4640      	mov	r0, r8
 8006cda:	47d0      	blx	sl
 8006cdc:	3001      	adds	r0, #1
 8006cde:	d09d      	beq.n	8006c1c <_printf_i+0x160>
 8006ce0:	3501      	adds	r5, #1
 8006ce2:	68e3      	ldr	r3, [r4, #12]
 8006ce4:	9903      	ldr	r1, [sp, #12]
 8006ce6:	1a5b      	subs	r3, r3, r1
 8006ce8:	42ab      	cmp	r3, r5
 8006cea:	dcf2      	bgt.n	8006cd2 <_printf_i+0x216>
 8006cec:	e7eb      	b.n	8006cc6 <_printf_i+0x20a>
 8006cee:	2500      	movs	r5, #0
 8006cf0:	f104 0619 	add.w	r6, r4, #25
 8006cf4:	e7f5      	b.n	8006ce2 <_printf_i+0x226>
 8006cf6:	bf00      	nop
 8006cf8:	08006e25 	.word	0x08006e25
 8006cfc:	08006e36 	.word	0x08006e36

08006d00 <memmove>:
 8006d00:	4288      	cmp	r0, r1
 8006d02:	b510      	push	{r4, lr}
 8006d04:	eb01 0402 	add.w	r4, r1, r2
 8006d08:	d902      	bls.n	8006d10 <memmove+0x10>
 8006d0a:	4284      	cmp	r4, r0
 8006d0c:	4623      	mov	r3, r4
 8006d0e:	d807      	bhi.n	8006d20 <memmove+0x20>
 8006d10:	1e43      	subs	r3, r0, #1
 8006d12:	42a1      	cmp	r1, r4
 8006d14:	d008      	beq.n	8006d28 <memmove+0x28>
 8006d16:	f811 2b01 	ldrb.w	r2, [r1], #1
 8006d1a:	f803 2f01 	strb.w	r2, [r3, #1]!
 8006d1e:	e7f8      	b.n	8006d12 <memmove+0x12>
 8006d20:	4402      	add	r2, r0
 8006d22:	4601      	mov	r1, r0
 8006d24:	428a      	cmp	r2, r1
 8006d26:	d100      	bne.n	8006d2a <memmove+0x2a>
 8006d28:	bd10      	pop	{r4, pc}
 8006d2a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8006d2e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8006d32:	e7f7      	b.n	8006d24 <memmove+0x24>

08006d34 <_sbrk_r>:
 8006d34:	b538      	push	{r3, r4, r5, lr}
 8006d36:	4d06      	ldr	r5, [pc, #24]	; (8006d50 <_sbrk_r+0x1c>)
 8006d38:	2300      	movs	r3, #0
 8006d3a:	4604      	mov	r4, r0
 8006d3c:	4608      	mov	r0, r1
 8006d3e:	602b      	str	r3, [r5, #0]
 8006d40:	f7f9 febe 	bl	8000ac0 <_sbrk>
 8006d44:	1c43      	adds	r3, r0, #1
 8006d46:	d102      	bne.n	8006d4e <_sbrk_r+0x1a>
 8006d48:	682b      	ldr	r3, [r5, #0]
 8006d4a:	b103      	cbz	r3, 8006d4e <_sbrk_r+0x1a>
 8006d4c:	6023      	str	r3, [r4, #0]
 8006d4e:	bd38      	pop	{r3, r4, r5, pc}
 8006d50:	20000420 	.word	0x20000420

08006d54 <memcpy>:
 8006d54:	440a      	add	r2, r1
 8006d56:	4291      	cmp	r1, r2
 8006d58:	f100 33ff 	add.w	r3, r0, #4294967295
 8006d5c:	d100      	bne.n	8006d60 <memcpy+0xc>
 8006d5e:	4770      	bx	lr
 8006d60:	b510      	push	{r4, lr}
 8006d62:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006d66:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006d6a:	4291      	cmp	r1, r2
 8006d6c:	d1f9      	bne.n	8006d62 <memcpy+0xe>
 8006d6e:	bd10      	pop	{r4, pc}

08006d70 <_realloc_r>:
 8006d70:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006d74:	4680      	mov	r8, r0
 8006d76:	4614      	mov	r4, r2
 8006d78:	460e      	mov	r6, r1
 8006d7a:	b921      	cbnz	r1, 8006d86 <_realloc_r+0x16>
 8006d7c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006d80:	4611      	mov	r1, r2
 8006d82:	f7ff bc49 	b.w	8006618 <_malloc_r>
 8006d86:	b92a      	cbnz	r2, 8006d94 <_realloc_r+0x24>
 8006d88:	f7ff fbda 	bl	8006540 <_free_r>
 8006d8c:	4625      	mov	r5, r4
 8006d8e:	4628      	mov	r0, r5
 8006d90:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006d94:	f000 f81b 	bl	8006dce <_malloc_usable_size_r>
 8006d98:	4284      	cmp	r4, r0
 8006d9a:	4607      	mov	r7, r0
 8006d9c:	d802      	bhi.n	8006da4 <_realloc_r+0x34>
 8006d9e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8006da2:	d812      	bhi.n	8006dca <_realloc_r+0x5a>
 8006da4:	4621      	mov	r1, r4
 8006da6:	4640      	mov	r0, r8
 8006da8:	f7ff fc36 	bl	8006618 <_malloc_r>
 8006dac:	4605      	mov	r5, r0
 8006dae:	2800      	cmp	r0, #0
 8006db0:	d0ed      	beq.n	8006d8e <_realloc_r+0x1e>
 8006db2:	42bc      	cmp	r4, r7
 8006db4:	4622      	mov	r2, r4
 8006db6:	4631      	mov	r1, r6
 8006db8:	bf28      	it	cs
 8006dba:	463a      	movcs	r2, r7
 8006dbc:	f7ff ffca 	bl	8006d54 <memcpy>
 8006dc0:	4631      	mov	r1, r6
 8006dc2:	4640      	mov	r0, r8
 8006dc4:	f7ff fbbc 	bl	8006540 <_free_r>
 8006dc8:	e7e1      	b.n	8006d8e <_realloc_r+0x1e>
 8006dca:	4635      	mov	r5, r6
 8006dcc:	e7df      	b.n	8006d8e <_realloc_r+0x1e>

08006dce <_malloc_usable_size_r>:
 8006dce:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006dd2:	1f18      	subs	r0, r3, #4
 8006dd4:	2b00      	cmp	r3, #0
 8006dd6:	bfbc      	itt	lt
 8006dd8:	580b      	ldrlt	r3, [r1, r0]
 8006dda:	18c0      	addlt	r0, r0, r3
 8006ddc:	4770      	bx	lr
	...

08006de0 <_init>:
 8006de0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006de2:	bf00      	nop
 8006de4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006de6:	bc08      	pop	{r3}
 8006de8:	469e      	mov	lr, r3
 8006dea:	4770      	bx	lr

08006dec <_fini>:
 8006dec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006dee:	bf00      	nop
 8006df0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006df2:	bc08      	pop	{r3}
 8006df4:	469e      	mov	lr, r3
 8006df6:	4770      	bx	lr
